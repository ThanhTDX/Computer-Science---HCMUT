import unittest
from TestUtils import TestAST
from AST import *

class ASTGenSuite(unittest.TestCase):
    def test_179(self):
        line = '''Class _{Constructor (__2,__:A;S4:String ;v_,_H,_,_:Array [Array [Float ,0x36],0b11011]){}Constructor (e,gl:Sj2___){}_9(_:String ;z:Array [String ,0B101];_G8:__X;p0w:k0;b:Int ;fu_:Array [Array [Array [String ,4],0B111],6]){Break ;Continue ;}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__2),ClassType(Id(A))),param(Id(__),ClassType(Id(A))),param(Id(S4),StringType),param(Id(v_),ArrayType(27,ArrayType(54,FloatType))),param(Id(_H),ArrayType(27,ArrayType(54,FloatType))),param(Id(_),ArrayType(27,ArrayType(54,FloatType))),param(Id(_),ArrayType(27,ArrayType(54,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(e),ClassType(Id(Sj2___))),param(Id(gl),ClassType(Id(Sj2___)))],Block([])),MethodDecl(Id(_9),Instance,[param(Id(_),StringType),param(Id(z),ArrayType(5,StringType)),param(Id(_G8),ClassType(Id(__X))),param(Id(p0w),ClassType(Id(k0))),param(Id(b),IntType),param(Id(fu_),ArrayType(6,ArrayType(7,ArrayType(4,StringType))))],Block([Break,Continue])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 179))

    def test_180(self):
        line = '''Class _{}Class p_b_:_{$_(j_6Q:Array [Array [Array [Array [Array [Array [Boolean ,0B10001],0b1],65],075],075],65];_,_:Array [Array [Int ,65],0B10]){Break ;{} }Destructor (){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(p_b_),Id(_),[MethodDecl(Id($_),Static,[param(Id(j_6Q),ArrayType(65,ArrayType(61,ArrayType(61,ArrayType(65,ArrayType(1,ArrayType(17,BoolType))))))),param(Id(_),ArrayType(2,ArrayType(65,IntType))),param(Id(_),ArrayType(2,ArrayType(65,IntType)))],Block([Break,Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 180))

    def test_181(self):
        line = '''Class z{}Class _{}Class F{}Class L2:d8{Destructor (){Break ;}_(){} }Class W:U{Destructor (){}Var I_,g,__,s_r:Array [Float ,0120];Constructor (){Break ;Return ;Break ;}Destructor (){} }Class C_{}'''
        expect = '''Program([ClassDecl(Id(z),[]),ClassDecl(Id(_),[]),ClassDecl(Id(F),[]),ClassDecl(Id(L2),Id(d8),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(W),Id(U),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(I_),ArrayType(80,FloatType))),AttributeDecl(Instance,VarDecl(Id(g),ArrayType(80,FloatType))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(80,FloatType))),AttributeDecl(Instance,VarDecl(Id(s_r),ArrayType(80,FloatType))),MethodDecl(Id(Constructor),Instance,[],Block([Break,Return(),Break])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(C_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 181))

    def test_182(self):
        line = '''Class _:K{Var $9c_:Array [Array [Array [Int ,80],0B1],0X354A_9];Constructor (u:Array [Array [String ,9],0xE2];_b,_kU:R5;_8s,Pd,_5,uW:Array [Array [Boolean ,0X2],013]){Val _,_T3:String ;Break ;Break ;}Var $G,_6:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(K),[AttributeDecl(Static,VarDecl(Id($9c_),ArrayType(218281,ArrayType(1,ArrayType(80,IntType))))),MethodDecl(Id(Constructor),Instance,[param(Id(u),ArrayType(226,ArrayType(9,StringType))),param(Id(_b),ClassType(Id(R5))),param(Id(_kU),ClassType(Id(R5))),param(Id(_8s),ArrayType(11,ArrayType(2,BoolType))),param(Id(Pd),ArrayType(11,ArrayType(2,BoolType))),param(Id(_5),ArrayType(11,ArrayType(2,BoolType))),param(Id(uW),ArrayType(11,ArrayType(2,BoolType)))],Block([ConstDecl(Id(_),StringType,None),ConstDecl(Id(_T3),StringType,None),Break,Break])),AttributeDecl(Static,VarDecl(Id($G),StringType)),AttributeDecl(Instance,VarDecl(Id(_6),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 182))

    def test_183(self):
        line = '''Class l2_:_70{Var $__,$42q2:y__j5;$2____9ds(__j,_:Array [Array [Array [Array [Array [Float ,9],77],0XDA],0X6_6],0b1001001];x_:Array [Boolean ,0B1];Q:Array [Array [Float ,3],0xC];H0r2:__){}Var $4J_2_52,$_:Array [Boolean ,032];}'''
        expect = '''Program([ClassDecl(Id(l2_),Id(_70),[AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(y__j5)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($42q2),ClassType(Id(y__j5)),NullLiteral())),MethodDecl(Id($2____9ds),Static,[param(Id(__j),ArrayType(73,ArrayType(102,ArrayType(218,ArrayType(77,ArrayType(9,FloatType)))))),param(Id(_),ArrayType(73,ArrayType(102,ArrayType(218,ArrayType(77,ArrayType(9,FloatType)))))),param(Id(x_),ArrayType(1,BoolType)),param(Id(Q),ArrayType(12,ArrayType(3,FloatType))),param(Id(H0r2),ClassType(Id(__)))],Block([])),AttributeDecl(Static,VarDecl(Id($4J_2_52),ArrayType(26,BoolType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(26,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 183))

    def test_184(self):
        line = '''Class JF:_{Constructor (_:Int ){}Var $b,$1:Array [Array [Array [Boolean ,0b10],69],0B10011];Constructor (_G,r:Array [Array [Int ,056],0b111101]){}Constructor (_,B1,_y:Array [String ,056]){Return ;}Var _:Array [String ,69];$q(){} }Class Oaw:_lyk{}Class _{}Class _:__{Val $730:m;}'''
        expect = '''Program([ClassDecl(Id(JF),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType)],Block([])),AttributeDecl(Static,VarDecl(Id($b),ArrayType(19,ArrayType(69,ArrayType(2,BoolType))))),AttributeDecl(Static,VarDecl(Id($1),ArrayType(19,ArrayType(69,ArrayType(2,BoolType))))),MethodDecl(Id(Constructor),Instance,[param(Id(_G),ArrayType(61,ArrayType(46,IntType))),param(Id(r),ArrayType(61,ArrayType(46,IntType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(46,StringType)),param(Id(B1),ArrayType(46,StringType)),param(Id(_y),ArrayType(46,StringType))],Block([Return()])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(69,StringType))),MethodDecl(Id($q),Static,[],Block([]))]),ClassDecl(Id(Oaw),Id(_lyk),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(__),[AttributeDecl(Static,ConstDecl(Id($730),ClassType(Id(m)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 184))

    def test_185(self):
        line = '''Class s:_{}Class _{}Class _H{Val v_:P;Constructor (_,_:Array [Boolean ,3_2]){}Constructor (_:Array [Int ,9];_8:Array [Float ,8_4]){Continue ;Continue ;Break ;} }Class _Y2{}Class _{}'''
        expect = '''Program([ClassDecl(Id(s),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_H),[AttributeDecl(Instance,ConstDecl(Id(v_),ClassType(Id(P)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(32,BoolType)),param(Id(_),ArrayType(32,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(9,IntType)),param(Id(_8),ArrayType(84,FloatType))],Block([Continue,Continue,Break]))]),ClassDecl(Id(_Y2),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 185))

    def test_186(self):
        line = '''Class q{Destructor (){} }Class _:J{}Class _:_7{Constructor (){}Destructor (){}Var L:Float ;Var _:Array [String ,0X34];Val $___BT,_W,N:Array [Array [Array [String ,0X34],0x4],0135];}'''
        expect = '''Program([ClassDecl(Id(q),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(J),[]),ClassDecl(Id(_),Id(_7),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(L),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(52,StringType))),AttributeDecl(Static,ConstDecl(Id($___BT),ArrayType(93,ArrayType(4,ArrayType(52,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(_W),ArrayType(93,ArrayType(4,ArrayType(52,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(N),ArrayType(93,ArrayType(4,ArrayType(52,StringType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 186))

    def test_187(self):
        line = '''Class t{Destructor (){}Val $_qhP7:j;Destructor (){}Constructor (r:Array [Array [Boolean ,062],0103]){} }Class S:g_a9E8l{}Class R7_:K_Z{_6(_J,__1,j,p:Boolean ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(t),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_qhP7),ClassType(Id(j)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(r),ArrayType(67,ArrayType(50,BoolType)))],Block([]))]),ClassDecl(Id(S),Id(g_a9E8l),[]),ClassDecl(Id(R7_),Id(K_Z),[MethodDecl(Id(_6),Instance,[param(Id(_J),BoolType),param(Id(__1),BoolType),param(Id(j),BoolType),param(Id(p),BoolType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 187))

    def test_188(self):
        line = '''Class J537:_{Destructor (){}$_(_r,n2,_:Array [Array [Array [Float ,01_7],16],402_4];_5,E:Float ;___,E:Array [Int ,0X22];_:String ;d,_d_0,_:Int ;_5_:D;L,T,_o,I__21,A,_d_29,_:zj;_,j:Array [String ,4_9];A,k:Array [Array [Array [Array [Array [String ,07_2_3],0xC],7],01],0X22]){} }'''
        expect = '''Program([ClassDecl(Id(J537),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[param(Id(_r),ArrayType(4024,ArrayType(16,ArrayType(15,FloatType)))),param(Id(n2),ArrayType(4024,ArrayType(16,ArrayType(15,FloatType)))),param(Id(_),ArrayType(4024,ArrayType(16,ArrayType(15,FloatType)))),param(Id(_5),FloatType),param(Id(E),FloatType),param(Id(___),ArrayType(34,IntType)),param(Id(E),ArrayType(34,IntType)),param(Id(_),StringType),param(Id(d),IntType),param(Id(_d_0),IntType),param(Id(_),IntType),param(Id(_5_),ClassType(Id(D))),param(Id(L),ClassType(Id(zj))),param(Id(T),ClassType(Id(zj))),param(Id(_o),ClassType(Id(zj))),param(Id(I__21),ClassType(Id(zj))),param(Id(A),ClassType(Id(zj))),param(Id(_d_29),ClassType(Id(zj))),param(Id(_),ClassType(Id(zj))),param(Id(_),ArrayType(49,StringType)),param(Id(j),ArrayType(49,StringType)),param(Id(A),ArrayType(34,ArrayType(1,ArrayType(7,ArrayType(12,ArrayType(467,StringType)))))),param(Id(k),ArrayType(34,ArrayType(1,ArrayType(7,ArrayType(12,ArrayType(467,StringType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 188))

    def test_189(self):
        line = '''Class H:s{}Class DeI:d{$2_(t0U,r1Q0Gn,U_2,_:Array [Array [Boolean ,027],027]){} }Class _43_:an5{_6(__:wc7M;_B:Array [Array [Array [Boolean ,31],5],04];i,_t__72:_;__2G9,t:Array [Float ,31];T_2_,s5:cX;vG3L:Array [Array [Array [Array [Array [Int ,0XE],01],0B11011],31],25];_,S:Array [Array [Int ,027],1]){Var _,Gl:String ;} }Class Ej_{}'''
        expect = '''Program([ClassDecl(Id(H),Id(s),[]),ClassDecl(Id(DeI),Id(d),[MethodDecl(Id($2_),Static,[param(Id(t0U),ArrayType(23,ArrayType(23,BoolType))),param(Id(r1Q0Gn),ArrayType(23,ArrayType(23,BoolType))),param(Id(U_2),ArrayType(23,ArrayType(23,BoolType))),param(Id(_),ArrayType(23,ArrayType(23,BoolType)))],Block([]))]),ClassDecl(Id(_43_),Id(an5),[MethodDecl(Id(_6),Instance,[param(Id(__),ClassType(Id(wc7M))),param(Id(_B),ArrayType(4,ArrayType(5,ArrayType(31,BoolType)))),param(Id(i),ClassType(Id(_))),param(Id(_t__72),ClassType(Id(_))),param(Id(__2G9),ArrayType(31,FloatType)),param(Id(t),ArrayType(31,FloatType)),param(Id(T_2_),ClassType(Id(cX))),param(Id(s5),ClassType(Id(cX))),param(Id(vG3L),ArrayType(25,ArrayType(31,ArrayType(27,ArrayType(1,ArrayType(14,IntType)))))),param(Id(_),ArrayType(1,ArrayType(23,IntType))),param(Id(S),ArrayType(1,ArrayType(23,IntType)))],Block([VarDecl(Id(_),StringType),VarDecl(Id(Gl),StringType)]))]),ClassDecl(Id(Ej_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 189))

    def test_190(self):
        line = '''Class _4_:h38{}Class __:W{Constructor (GT:String ;_:Int ;H:Array [String ,0X1_9];k4:Array [Array [Int ,67],024];_UI:GZ){}Val _7_7:Array [Array [Array [Float ,024],4],02_7];}Class r_{}Class __k{}'''
        expect = '''Program([ClassDecl(Id(_4_),Id(h38),[]),ClassDecl(Id(__),Id(W),[MethodDecl(Id(Constructor),Instance,[param(Id(GT),StringType),param(Id(_),IntType),param(Id(H),ArrayType(25,StringType)),param(Id(k4),ArrayType(20,ArrayType(67,IntType))),param(Id(_UI),ClassType(Id(GZ)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_7_7),ArrayType(23,ArrayType(4,ArrayType(20,FloatType))),None))]),ClassDecl(Id(r_),[]),ClassDecl(Id(__k),[])])'''
        self.assertTrue(TestAST.test(line, expect, 190))

    def test_191(self):
        line = '''Class _z{Constructor (M:Array [Float ,0B1_1];_3:Array [Array [Array [Array [Array [Array [String ,3_10],0b1],0XA_4_A_E],0121],0x43],9];H_,_v,f_,f75_,D__:Int ;_,_V7:w;_,F:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_z),[MethodDecl(Id(Constructor),Instance,[param(Id(M),ArrayType(3,FloatType)),param(Id(_3),ArrayType(9,ArrayType(67,ArrayType(81,ArrayType(42158,ArrayType(1,ArrayType(310,StringType))))))),param(Id(H_),IntType),param(Id(_v),IntType),param(Id(f_),IntType),param(Id(f75_),IntType),param(Id(D__),IntType),param(Id(_),ClassType(Id(w))),param(Id(_V7),ClassType(Id(w))),param(Id(_),FloatType),param(Id(F),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 191))

    def test_192(self):
        line = '''Class _47_:___{Destructor (){}Constructor (_,_,_r__:Array [Float ,8];f78_,_,_:Array [String ,040];v,_g6,W_,___,_:Array [Boolean ,0B1]){}Val Y,$T7:Array [Array [Boolean ,0B1011],0X1D];}'''
        expect = '''Program([ClassDecl(Id(_47_),Id(___),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(8,FloatType)),param(Id(_),ArrayType(8,FloatType)),param(Id(_r__),ArrayType(8,FloatType)),param(Id(f78_),ArrayType(32,StringType)),param(Id(_),ArrayType(32,StringType)),param(Id(_),ArrayType(32,StringType)),param(Id(v),ArrayType(1,BoolType)),param(Id(_g6),ArrayType(1,BoolType)),param(Id(W_),ArrayType(1,BoolType)),param(Id(___),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(29,ArrayType(11,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($T7),ArrayType(29,ArrayType(11,BoolType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 192))

    def test_193(self):
        line = '''Class _y{}Class _H:_8{$3_(_1,_0_,K_,z:x9){}Constructor (c:_6i;x80:Int ;k:Array [Array [String ,0b1_1_0],0x60];J,n:Array [Array [Array [Boolean ,0X1_B],0123],0xC]){Val _75V:Int ;} }Class P_:__{}Class _:_{Var $8,$1,$2:Float ;}'''
        expect = '''Program([ClassDecl(Id(_y),[]),ClassDecl(Id(_H),Id(_8),[MethodDecl(Id($3_),Static,[param(Id(_1),ClassType(Id(x9))),param(Id(_0_),ClassType(Id(x9))),param(Id(K_),ClassType(Id(x9))),param(Id(z),ClassType(Id(x9)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(c),ClassType(Id(_6i))),param(Id(x80),IntType),param(Id(k),ArrayType(96,ArrayType(6,StringType))),param(Id(J),ArrayType(12,ArrayType(83,ArrayType(27,BoolType)))),param(Id(n),ArrayType(12,ArrayType(83,ArrayType(27,BoolType))))],Block([ConstDecl(Id(_75V),IntType,None)]))]),ClassDecl(Id(P_),Id(__),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($8),FloatType)),AttributeDecl(Static,VarDecl(Id($1),FloatType)),AttributeDecl(Static,VarDecl(Id($2),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 193))

    def test_194(self):
        line = '''Class _{}Class E_1:_{Constructor (_,_:Array [Boolean ,77]){}Constructor (c,r_,_:Boolean ;do:Int ;w,_,_:Array [Array [Array [String ,0134],77],77];Sa,X_0:Array [Array [Boolean ,0X31],1]){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(E_1),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(77,BoolType)),param(Id(_),ArrayType(77,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(c),BoolType),param(Id(r_),BoolType),param(Id(_),BoolType),param(Id(do),IntType),param(Id(w),ArrayType(77,ArrayType(77,ArrayType(92,StringType)))),param(Id(_),ArrayType(77,ArrayType(77,ArrayType(92,StringType)))),param(Id(_),ArrayType(77,ArrayType(77,ArrayType(92,StringType)))),param(Id(Sa),ArrayType(1,ArrayType(49,BoolType))),param(Id(X_0),ArrayType(1,ArrayType(49,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 194))

    def test_195(self):
        line = '''Class E:f__{Destructor (){} }Class Nw:_7{Constructor (__:Array [Float ,0B1001111]){Continue ;}Val Y,$9,$_:_3;Val __e0:__;}Class P{Var $O,yk9X_,$S,__,_,_:y;Val $_5_:Array [Array [Boolean ,06_1],04];_(){} }Class _:_{Var $s,Yfn9,$bu:f;Val J,L,_9_Jn:i;Destructor (){Continue ;}Var j_8:String ;$_(){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(E),Id(f__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Nw),Id(_7),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(79,FloatType))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(Y),ClassType(Id(_3)),None)),AttributeDecl(Static,ConstDecl(Id($9),ClassType(Id(_3)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_3)),None)),AttributeDecl(Instance,ConstDecl(Id(__e0),ClassType(Id(__)),None))]),ClassDecl(Id(P),[AttributeDecl(Static,VarDecl(Id($O),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(yk9X_),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($S),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_5_),ArrayType(4,ArrayType(49,BoolType)),None)),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($s),ClassType(Id(f)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Yfn9),ClassType(Id(f)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($bu),ClassType(Id(f)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(J),ClassType(Id(i)),None)),AttributeDecl(Instance,ConstDecl(Id(L),ClassType(Id(i)),None)),AttributeDecl(Instance,ConstDecl(Id(_9_Jn),ClassType(Id(i)),None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Instance,VarDecl(Id(j_8),StringType)),MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 195))

    def test_196(self):
        line = '''Class T7{Destructor (){}Constructor (){} }Class _{Val __U1,_n,$3f:_;Constructor (){}Constructor (_,_:Array [Array [Int ,02],43];E,_,b,_,NB_0h:_){} }Class _{_(zh28:bB;N:T){0.979308._g();Break ;} }Class _9__S_{}'''
        expect = '''Program([ClassDecl(Id(T7),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(__U1),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_n),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($3f),ClassType(Id(_)),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(43,ArrayType(2,IntType))),param(Id(_),ArrayType(43,ArrayType(2,IntType))),param(Id(E),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(b),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(NB_0h),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(zh28),ClassType(Id(bB))),param(Id(N),ClassType(Id(T)))],Block([Call(FloatLit(0.979308),Id(_g),[]),Break]))]),ClassDecl(Id(_9__S_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 196))

    def test_197(self):
        line = '''Class _:K_45{Constructor (U,__,X_,QCm_,FxA:Array [Float ,01_230];_:uz){}Constructor (__:Int ;P_g,_:Array [Array [Array [Boolean ,2],060],0xD];HLZb:Array [Array [String ,0b10010],0B1_1_0]){}Val $3K,$x9__,$5:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(K_45),[MethodDecl(Id(Constructor),Instance,[param(Id(U),ArrayType(664,FloatType)),param(Id(__),ArrayType(664,FloatType)),param(Id(X_),ArrayType(664,FloatType)),param(Id(QCm_),ArrayType(664,FloatType)),param(Id(FxA),ArrayType(664,FloatType)),param(Id(_),ClassType(Id(uz)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),IntType),param(Id(P_g),ArrayType(13,ArrayType(48,ArrayType(2,BoolType)))),param(Id(_),ArrayType(13,ArrayType(48,ArrayType(2,BoolType)))),param(Id(HLZb),ArrayType(6,ArrayType(18,StringType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($3K),IntType,None)),AttributeDecl(Static,ConstDecl(Id($x9__),IntType,None)),AttributeDecl(Static,ConstDecl(Id($5),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 197))

    def test_198(self):
        line = '''Class _:J{Constructor (h,_,_,g8,_m:String ;__,_0B:Boolean ;BF,fyH,_:Array [Array [Array [Float ,0X7_D],87],0x41];_,u,B_:Array [Array [String ,0b100110],8_53];_,_,_:Array [Boolean ,0x3_A6C];W,_:Array [Array [String ,071],0x41];E5,z9,__:_5O9){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(J),[MethodDecl(Id(Constructor),Instance,[param(Id(h),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(g8),StringType),param(Id(_m),StringType),param(Id(__),BoolType),param(Id(_0B),BoolType),param(Id(BF),ArrayType(65,ArrayType(87,ArrayType(125,FloatType)))),param(Id(fyH),ArrayType(65,ArrayType(87,ArrayType(125,FloatType)))),param(Id(_),ArrayType(65,ArrayType(87,ArrayType(125,FloatType)))),param(Id(_),ArrayType(853,ArrayType(38,StringType))),param(Id(u),ArrayType(853,ArrayType(38,StringType))),param(Id(B_),ArrayType(853,ArrayType(38,StringType))),param(Id(_),ArrayType(14956,BoolType)),param(Id(_),ArrayType(14956,BoolType)),param(Id(_),ArrayType(14956,BoolType)),param(Id(W),ArrayType(65,ArrayType(57,StringType))),param(Id(_),ArrayType(65,ArrayType(57,StringType))),param(Id(E5),ClassType(Id(_5O9))),param(Id(z9),ClassType(Id(_5O9))),param(Id(__),ClassType(Id(_5O9)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 198))

    def test_199(self):
        line = '''Class _z6:_{$3N_5(_,Nn,J,U__5,_,_,T,_,J_7:Array [Array [Int ,86],6];_93c__8,z,_c,H_,_:_8;_:Array [Array [String ,03_0],021]){}Constructor (i1l,v:Array [Array [Float ,0B1],45];_P,o:Array [Array [String ,021],021];pg93A:Array [Int ,021]){} }'''
        expect = '''Program([ClassDecl(Id(_z6),Id(_),[MethodDecl(Id($3N_5),Static,[param(Id(_),ArrayType(6,ArrayType(86,IntType))),param(Id(Nn),ArrayType(6,ArrayType(86,IntType))),param(Id(J),ArrayType(6,ArrayType(86,IntType))),param(Id(U__5),ArrayType(6,ArrayType(86,IntType))),param(Id(_),ArrayType(6,ArrayType(86,IntType))),param(Id(_),ArrayType(6,ArrayType(86,IntType))),param(Id(T),ArrayType(6,ArrayType(86,IntType))),param(Id(_),ArrayType(6,ArrayType(86,IntType))),param(Id(J_7),ArrayType(6,ArrayType(86,IntType))),param(Id(_93c__8),ClassType(Id(_8))),param(Id(z),ClassType(Id(_8))),param(Id(_c),ClassType(Id(_8))),param(Id(H_),ClassType(Id(_8))),param(Id(_),ClassType(Id(_8))),param(Id(_),ArrayType(17,ArrayType(24,StringType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(i1l),ArrayType(45,ArrayType(1,FloatType))),param(Id(v),ArrayType(45,ArrayType(1,FloatType))),param(Id(_P),ArrayType(17,ArrayType(17,StringType))),param(Id(o),ArrayType(17,ArrayType(17,StringType))),param(Id(pg93A),ArrayType(17,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 199))

    def test_200(self):
        line = '''Class G___1:Z_1{}Class B___:v_{Var h:Array [Array [Array [String ,75],0b11],75];Constructor (g:_;j:Int ;_,e_qv_,V,_P,_7:Array [Int ,0b1100100];_W,_:a;j:Array [Array [Int ,06],0x60]){s_R::$___();} }Class _1_Q{}'''
        expect = '''Program([ClassDecl(Id(G___1),Id(Z_1),[]),ClassDecl(Id(B___),Id(v_),[AttributeDecl(Instance,VarDecl(Id(h),ArrayType(75,ArrayType(3,ArrayType(75,StringType))))),MethodDecl(Id(Constructor),Instance,[param(Id(g),ClassType(Id(_))),param(Id(j),IntType),param(Id(_),ArrayType(100,IntType)),param(Id(e_qv_),ArrayType(100,IntType)),param(Id(V),ArrayType(100,IntType)),param(Id(_P),ArrayType(100,IntType)),param(Id(_7),ArrayType(100,IntType)),param(Id(_W),ClassType(Id(a))),param(Id(_),ClassType(Id(a))),param(Id(j),ArrayType(96,ArrayType(6,IntType)))],Block([Call(Id(s_R),Id($___),[])]))]),ClassDecl(Id(_1_Q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 200))

    def test_201(self):
        line = '''Class A{}Class __:_{Var _:_;Val $_,$C98__,__:Int ;Val _,_P7,$j:Array [Array [Array [Boolean ,5],0b1],8_6];Constructor (_:_oAJ9d;_R7An,_0,w:Array [Array [Array [Int ,0B1],1_2],03];__4Q:Float ){}Destructor (){} }Class w:W{}Class __66{}'''
        expect = '''Program([ClassDecl(Id(A),[]),ClassDecl(Id(__),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($C98__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(86,ArrayType(1,ArrayType(5,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_P7),ArrayType(86,ArrayType(1,ArrayType(5,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($j),ArrayType(86,ArrayType(1,ArrayType(5,BoolType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_oAJ9d))),param(Id(_R7An),ArrayType(3,ArrayType(12,ArrayType(1,IntType)))),param(Id(_0),ArrayType(3,ArrayType(12,ArrayType(1,IntType)))),param(Id(w),ArrayType(3,ArrayType(12,ArrayType(1,IntType)))),param(Id(__4Q),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(w),Id(W),[]),ClassDecl(Id(__66),[])])'''
        self.assertTrue(TestAST.test(line, expect, 201))

    def test_202(self):
        line = '''Class _1{}Class g:_X2{}Class A__{}Class f{}Class E{Constructor (){Continue ;}Constructor (_,_:Boolean ;To,c:Array [Float ,02_5];fK35:Array [Boolean ,4_5];q6Z:Array [String ,04]){} }'''
        expect = '''Program([ClassDecl(Id(_1),[]),ClassDecl(Id(g),Id(_X2),[]),ClassDecl(Id(A__),[]),ClassDecl(Id(f),[]),ClassDecl(Id(E),[MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_),BoolType),param(Id(To),ArrayType(21,FloatType)),param(Id(c),ArrayType(21,FloatType)),param(Id(fK35),ArrayType(45,BoolType)),param(Id(q6Z),ArrayType(4,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 202))

    def test_203(self):
        line = '''Class _{$1(_:Boolean ;_,y_F__:Array [Array [Array [Array [Array [Array [Array [Int ,0B1001010],95],07],0B10_000_1_0_1],95],2],01];m:Array [Float ,3_9]){}Val _:Array [Array [Float ,95],0X5E];J(Z_:Array [Boolean ,95]){}Var C,_n,__,$3v8Y_a:Float ;}Class _9h4_e_2z:b{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($1),Static,[param(Id(_),BoolType),param(Id(_),ArrayType(1,ArrayType(2,ArrayType(95,ArrayType(133,ArrayType(7,ArrayType(95,ArrayType(74,IntType)))))))),param(Id(y_F__),ArrayType(1,ArrayType(2,ArrayType(95,ArrayType(133,ArrayType(7,ArrayType(95,ArrayType(74,IntType)))))))),param(Id(m),ArrayType(39,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(94,ArrayType(95,FloatType)),None)),MethodDecl(Id(J),Instance,[param(Id(Z_),ArrayType(95,BoolType))],Block([])),AttributeDecl(Instance,VarDecl(Id(C),FloatType)),AttributeDecl(Instance,VarDecl(Id(_n),FloatType)),AttributeDecl(Instance,VarDecl(Id(__),FloatType)),AttributeDecl(Static,VarDecl(Id($3v8Y_a),FloatType))]),ClassDecl(Id(_9h4_e_2z),Id(b),[])])'''
        self.assertTrue(TestAST.test(line, expect, 203))

    def test_204(self):
        line = '''Class _{}Class _{}Class H{Var $3P0,$g:Array [Array [Array [Array [Int ,0X3D],0B1_1_1],0X2_B],44];Constructor (){}Constructor (){Break ;}sb_(_s_96,A_,_c9W__,_,_,mR,__7_,X_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(H),[AttributeDecl(Static,VarDecl(Id($3P0),ArrayType(44,ArrayType(43,ArrayType(7,ArrayType(61,IntType)))))),AttributeDecl(Static,VarDecl(Id($g),ArrayType(44,ArrayType(43,ArrayType(7,ArrayType(61,IntType)))))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(sb_),Instance,[param(Id(_s_96),IntType),param(Id(A_),IntType),param(Id(_c9W__),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(mR),IntType),param(Id(__7_),IntType),param(Id(X_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 204))

    def test_205(self):
        line = '''Class _:x_2o0{}Class N7{Constructor (S:String ;b:i;__,_n,_,__,__,S:Float ;Q,_:_;M:P3;tb_:_){Return ;}Constructor (b_2,l,T_:String ;_7:Float ){} }Class C:_{Constructor (g:t_){} }Class C_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(x_2o0),[]),ClassDecl(Id(N7),[MethodDecl(Id(Constructor),Instance,[param(Id(S),StringType),param(Id(b),ClassType(Id(i))),param(Id(__),FloatType),param(Id(_n),FloatType),param(Id(_),FloatType),param(Id(__),FloatType),param(Id(__),FloatType),param(Id(S),FloatType),param(Id(Q),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(M),ClassType(Id(P3))),param(Id(tb_),ClassType(Id(_)))],Block([Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(b_2),StringType),param(Id(l),StringType),param(Id(T_),StringType),param(Id(_7),FloatType)],Block([]))]),ClassDecl(Id(C),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(g),ClassType(Id(t_)))],Block([]))]),ClassDecl(Id(C_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 205))

    def test_206(self):
        line = '''Class _X{}Class IE{}Class _h:J4{Destructor (){}Destructor (){}Var $7M__,$_:Int ;Destructor (){} }Class x:p{w(f:Array [Int ,92]){}Val _0:Array [Float ,0X5];Val Q,m8,_,_:Array [Array [String ,0x36],3];}Class S:_1{Var _,r:Float ;Constructor (){Break ;}Var R,$5:__A6_w;}'''
        expect = '''Program([ClassDecl(Id(_X),[]),ClassDecl(Id(IE),[]),ClassDecl(Id(_h),Id(J4),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($7M__),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(x),Id(p),[MethodDecl(Id(w),Instance,[param(Id(f),ArrayType(92,IntType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_0),ArrayType(5,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(Q),ArrayType(3,ArrayType(54,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(m8),ArrayType(3,ArrayType(54,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3,ArrayType(54,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3,ArrayType(54,StringType)),None))]),ClassDecl(Id(S),Id(_1),[AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(r),FloatType)),MethodDecl(Id(Constructor),Instance,[],Block([Break])),AttributeDecl(Instance,VarDecl(Id(R),ClassType(Id(__A6_w)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(__A6_w)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 206))

    def test_207(self):
        line = '''Class _{Destructor (){}Var _F:s;Destructor (){}Constructor (){}Constructor (___,b,_:H){} }Class _:l7{Val _,$_o8_6_6BW,$9i_Y2:Array [String ,0x2];}Class b:G_0wU{}Class __:_{}Class D{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_F),ClassType(Id(s)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(___),ClassType(Id(H))),param(Id(b),ClassType(Id(H))),param(Id(_),ClassType(Id(H)))],Block([]))]),ClassDecl(Id(_),Id(l7),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_o8_6_6BW),ArrayType(2,StringType),None)),AttributeDecl(Static,ConstDecl(Id($9i_Y2),ArrayType(2,StringType),None))]),ClassDecl(Id(b),Id(G_0wU),[]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(D),[])])'''
        self.assertTrue(TestAST.test(line, expect, 207))

    def test_208(self):
        line = '''Class X_Q{}Class k:K{$so(_,_5_:__4;_8,_,_Z:Int ;Xs4__,_:_7;_:Array [Int ,054];yD:Float ;_,__:Boolean ){} }Class __a:S_{Constructor (){} }Class __:_{}Class _98{}Class S_:Od{}Class J__:_{}'''
        expect = '''Program([ClassDecl(Id(X_Q),[]),ClassDecl(Id(k),Id(K),[MethodDecl(Id($so),Static,[param(Id(_),ClassType(Id(__4))),param(Id(_5_),ClassType(Id(__4))),param(Id(_8),IntType),param(Id(_),IntType),param(Id(_Z),IntType),param(Id(Xs4__),ClassType(Id(_7))),param(Id(_),ClassType(Id(_7))),param(Id(_),ArrayType(44,IntType)),param(Id(yD),FloatType),param(Id(_),BoolType),param(Id(__),BoolType)],Block([]))]),ClassDecl(Id(__a),Id(S_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_98),[]),ClassDecl(Id(S_),Id(Od),[]),ClassDecl(Id(J__),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 208))

    def test_209(self):
        line = '''Class A5Iv{Destructor (){Return ;} }Class _7{Var _236_:Boolean ;Destructor (){}$3IJ_(X:_6){}Constructor (){}_lR46(G_y,O_L,_,s1_:Array [Array [String ,0X60D],680]){} }'''
        expect = '''Program([ClassDecl(Id(A5Iv),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(_7),[AttributeDecl(Instance,VarDecl(Id(_236_),BoolType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($3IJ_),Static,[param(Id(X),ClassType(Id(_6)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_lR46),Instance,[param(Id(G_y),ArrayType(680,ArrayType(1549,StringType))),param(Id(O_L),ArrayType(680,ArrayType(1549,StringType))),param(Id(_),ArrayType(680,ArrayType(1549,StringType))),param(Id(s1_),ArrayType(680,ArrayType(1549,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 209))

    def test_210(self):
        line = '''Class _J{$fG__0_(e:Boolean ;_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,022],67],0XD_C],0X32],0B10],0X32],0446],05],67],0B1000111];s_,vO:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_J),[MethodDecl(Id($fG__0_),Static,[param(Id(e),BoolType),param(Id(_),ArrayType(71,ArrayType(67,ArrayType(5,ArrayType(294,ArrayType(50,ArrayType(2,ArrayType(50,ArrayType(220,ArrayType(67,ArrayType(18,BoolType))))))))))),param(Id(s_),BoolType),param(Id(vO),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 210))

    def test_211(self):
        line = '''Class _p_97:_8j___3V_9_094{}Class Kgp{}Class FK6_:_j{Constructor (){}Var $7:A;}Class f_65fA2_{$2ji(X__:Array [Int ,9];d,_54:Y;___:Array [Float ,0X2_9];Ob395,__1:Array [Int ,0144];_:t;_,_,_:Array [String ,0XE];_:Array [Boolean ,0b1000111]){} }'''
        expect = '''Program([ClassDecl(Id(_p_97),Id(_8j___3V_9_094),[]),ClassDecl(Id(Kgp),[]),ClassDecl(Id(FK6_),Id(_j),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($7),ClassType(Id(A)),NullLiteral()))]),ClassDecl(Id(f_65fA2_),[MethodDecl(Id($2ji),Static,[param(Id(X__),ArrayType(9,IntType)),param(Id(d),ClassType(Id(Y))),param(Id(_54),ClassType(Id(Y))),param(Id(___),ArrayType(41,FloatType)),param(Id(Ob395),ArrayType(100,IntType)),param(Id(__1),ArrayType(100,IntType)),param(Id(_),ClassType(Id(t))),param(Id(_),ArrayType(14,StringType)),param(Id(_),ArrayType(14,StringType)),param(Id(_),ArrayType(14,StringType)),param(Id(_),ArrayType(71,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 211))

    def test_212(self):
        line = '''Class _{}Class T:_{Val $_,_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1],0b10110],0B1],16],05],03],031],0b1_00_011_0],0x11];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(T),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(17,ArrayType(70,ArrayType(25,ArrayType(3,ArrayType(5,ArrayType(16,ArrayType(1,ArrayType(22,ArrayType(1,BoolType))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(17,ArrayType(70,ArrayType(25,ArrayType(3,ArrayType(5,ArrayType(16,ArrayType(1,ArrayType(22,ArrayType(1,BoolType))))))))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 212))

    def test_213(self):
        line = '''Class p{Constructor (__,x:String ;z9:Array [Array [Array [Float ,07],0B11010],042];_Ay:BN2C;_,_,_556_:i_f;___4:_;_a4_,P__,_w:Array [Array [Array [Array [Float ,0776],0X23],5],042];_i__,_7_:Array [Array [String ,0X23],037_43];_,D_,C,_:Q){}Constructor (){} }Class w:_{}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(p),[MethodDecl(Id(Constructor),Instance,[param(Id(__),StringType),param(Id(x),StringType),param(Id(z9),ArrayType(34,ArrayType(26,ArrayType(7,FloatType)))),param(Id(_Ay),ClassType(Id(BN2C))),param(Id(_),ClassType(Id(i_f))),param(Id(_),ClassType(Id(i_f))),param(Id(_556_),ClassType(Id(i_f))),param(Id(___4),ClassType(Id(_))),param(Id(_a4_),ArrayType(34,ArrayType(5,ArrayType(35,ArrayType(510,FloatType))))),param(Id(P__),ArrayType(34,ArrayType(5,ArrayType(35,ArrayType(510,FloatType))))),param(Id(_w),ArrayType(34,ArrayType(5,ArrayType(35,ArrayType(510,FloatType))))),param(Id(_i__),ArrayType(2019,ArrayType(35,StringType))),param(Id(_7_),ArrayType(2019,ArrayType(35,StringType))),param(Id(_),ClassType(Id(Q))),param(Id(D_),ClassType(Id(Q))),param(Id(C),ClassType(Id(Q))),param(Id(_),ClassType(Id(Q)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(w),Id(_),[]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 213))

    def test_214(self):
        line = '''Class z0:_7{}Class f_6o:f_3{Val z,S:Float ;_(b_,___:A__o){} }Class d_N:_{Destructor (){}q(__,_2:s;ld_f_iPK:Float ;i1,_:Int ;B8,C,F,_,_5_a:Array [String ,0X5_88_F_04]){} }Class j_s_{}Class _{}Class F7x:_{}'''
        expect = '''Program([ClassDecl(Id(z0),Id(_7),[]),ClassDecl(Id(f_6o),Id(f_3),[AttributeDecl(Instance,ConstDecl(Id(z),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(S),FloatType,None)),MethodDecl(Id(_),Instance,[param(Id(b_),ClassType(Id(A__o))),param(Id(___),ClassType(Id(A__o)))],Block([]))]),ClassDecl(Id(d_N),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(q),Instance,[param(Id(__),ClassType(Id(s))),param(Id(_2),ClassType(Id(s))),param(Id(ld_f_iPK),FloatType),param(Id(i1),IntType),param(Id(_),IntType),param(Id(B8),ArrayType(5803780,StringType)),param(Id(C),ArrayType(5803780,StringType)),param(Id(F),ArrayType(5803780,StringType)),param(Id(_),ArrayType(5803780,StringType)),param(Id(_5_a),ArrayType(5803780,StringType))],Block([]))]),ClassDecl(Id(j_s_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(F7x),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 214))

    def test_215(self):
        line = '''Class n:i{}Class p{}Class r:_V{Val _Q:Array [String ,063];___(){}_4(){}Var $XE:Boolean ;Val _0_9_4,n1,$D7V,_,$n,_,$6,$42:Array [Array [Array [Array [Float ,51],05_3],1],330_951];}'''
        expect = '''Program([ClassDecl(Id(n),Id(i),[]),ClassDecl(Id(p),[]),ClassDecl(Id(r),Id(_V),[AttributeDecl(Instance,ConstDecl(Id(_Q),ArrayType(51,StringType),None)),MethodDecl(Id(___),Instance,[],Block([])),MethodDecl(Id(_4),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($XE),BoolType)),AttributeDecl(Instance,ConstDecl(Id(_0_9_4),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Instance,ConstDecl(Id(n1),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($D7V),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($n),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($6),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($42),ArrayType(330951,ArrayType(1,ArrayType(43,ArrayType(51,FloatType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 215))

    def test_216(self):
        line = '''Class M:_R{_(A:Array [Array [String ,1],06_5];_,G__7:Array [Array [Boolean ,0x53],051];_,F,ziZ:Array [Float ,051];k:Boolean ){} }Class _5{Destructor (){}Constructor (){} }Class Y{Constructor (){}o(R__,_Y,g,__3:Int ){}Val _0:Float ;}'''
        expect = '''Program([ClassDecl(Id(M),Id(_R),[MethodDecl(Id(_),Instance,[param(Id(A),ArrayType(53,ArrayType(1,StringType))),param(Id(_),ArrayType(41,ArrayType(83,BoolType))),param(Id(G__7),ArrayType(41,ArrayType(83,BoolType))),param(Id(_),ArrayType(41,FloatType)),param(Id(F),ArrayType(41,FloatType)),param(Id(ziZ),ArrayType(41,FloatType)),param(Id(k),BoolType)],Block([]))]),ClassDecl(Id(_5),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Y),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(o),Instance,[param(Id(R__),IntType),param(Id(_Y),IntType),param(Id(g),IntType),param(Id(__3),IntType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_0),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 216))

    def test_217(self):
        line = '''Class _8:R{}Class i:_f{}Class _582G{$_k7XZ_(M8,v__,s:s_;jeE,r1,_6:Array [Array [Array [Int ,0b11011],0B1],05_1_1];___Kaz:Array [Array [Float ,040],0x8];y_b_,r,m,_g:Array [Int ,0x28];_7_,k:String ;eQ:_;_,b,o:Array [Array [Array [Boolean ,0X46],062],0x28]){Continue ;} }Class _0:p{}'''
        expect = '''Program([ClassDecl(Id(_8),Id(R),[]),ClassDecl(Id(i),Id(_f),[]),ClassDecl(Id(_582G),[MethodDecl(Id($_k7XZ_),Static,[param(Id(M8),ClassType(Id(s_))),param(Id(v__),ClassType(Id(s_))),param(Id(s),ClassType(Id(s_))),param(Id(jeE),ArrayType(329,ArrayType(1,ArrayType(27,IntType)))),param(Id(r1),ArrayType(329,ArrayType(1,ArrayType(27,IntType)))),param(Id(_6),ArrayType(329,ArrayType(1,ArrayType(27,IntType)))),param(Id(___Kaz),ArrayType(8,ArrayType(32,FloatType))),param(Id(y_b_),ArrayType(40,IntType)),param(Id(r),ArrayType(40,IntType)),param(Id(m),ArrayType(40,IntType)),param(Id(_g),ArrayType(40,IntType)),param(Id(_7_),StringType),param(Id(k),StringType),param(Id(eQ),ClassType(Id(_))),param(Id(_),ArrayType(40,ArrayType(50,ArrayType(70,BoolType)))),param(Id(b),ArrayType(40,ArrayType(50,ArrayType(70,BoolType)))),param(Id(o),ArrayType(40,ArrayType(50,ArrayType(70,BoolType))))],Block([Continue]))]),ClassDecl(Id(_0),Id(p),[])])'''
        self.assertTrue(TestAST.test(line, expect, 217))

    def test_218(self):
        line = '''Class a{_v7_(_,_7_:Array [Boolean ,04];d,_2__,_254_Q,_:Array [Array [Boolean ,0X6_B],0X4D]){} }Class _:u{}Class _{Val $___9_,_yq:MR;Constructor (M__k_2Jx:Array [Float ,0B101111];_,L:Array [String ,0x6A];s_u_7:String ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(a),[MethodDecl(Id(_v7_),Instance,[param(Id(_),ArrayType(4,BoolType)),param(Id(_7_),ArrayType(4,BoolType)),param(Id(d),ArrayType(77,ArrayType(107,BoolType))),param(Id(_2__),ArrayType(77,ArrayType(107,BoolType))),param(Id(_254_Q),ArrayType(77,ArrayType(107,BoolType))),param(Id(_),ArrayType(77,ArrayType(107,BoolType)))],Block([]))]),ClassDecl(Id(_),Id(u),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($___9_),ClassType(Id(MR)),None)),AttributeDecl(Instance,ConstDecl(Id(_yq),ClassType(Id(MR)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(M__k_2Jx),ArrayType(47,FloatType)),param(Id(_),ArrayType(106,StringType)),param(Id(L),ArrayType(106,StringType)),param(Id(s_u_7),StringType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 218))

    def test_219(self):
        line = '''Class d__VB5_7R9_{z6__(n:Array [Float ,02];_9P:Float ;_,_7U,o_:Array [Array [Array [Array [Float ,0x3],077],8],0B101000];__6F,_:Boolean ;BdY:Int ;_,_,i,_f_,_,_,_:t){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(d__VB5_7R9_),[MethodDecl(Id(z6__),Instance,[param(Id(n),ArrayType(2,FloatType)),param(Id(_9P),FloatType),param(Id(_),ArrayType(40,ArrayType(8,ArrayType(63,ArrayType(3,FloatType))))),param(Id(_7U),ArrayType(40,ArrayType(8,ArrayType(63,ArrayType(3,FloatType))))),param(Id(o_),ArrayType(40,ArrayType(8,ArrayType(63,ArrayType(3,FloatType))))),param(Id(__6F),BoolType),param(Id(_),BoolType),param(Id(BdY),IntType),param(Id(_),ClassType(Id(t))),param(Id(_),ClassType(Id(t))),param(Id(i),ClassType(Id(t))),param(Id(_f_),ClassType(Id(t))),param(Id(_),ClassType(Id(t))),param(Id(_),ClassType(Id(t))),param(Id(_),ClassType(Id(t)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 219))

    def test_220(self):
        line = '''Class j_{}Class t8{Constructor (Q_o_2vC,N:Array [Array [Boolean ,29_3_5],0b10];A,_0:Array [Array [String ,0X29],0XE]){} }Class _:_{Constructor (T,__L0C,W:Boolean ;__,S,B50,G:bGYz_6W;___4,e,_9:_7){} }'''
        expect = '''Program([ClassDecl(Id(j_),[]),ClassDecl(Id(t8),[MethodDecl(Id(Constructor),Instance,[param(Id(Q_o_2vC),ArrayType(2,ArrayType(2935,BoolType))),param(Id(N),ArrayType(2,ArrayType(2935,BoolType))),param(Id(A),ArrayType(14,ArrayType(41,StringType))),param(Id(_0),ArrayType(14,ArrayType(41,StringType)))],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(T),BoolType),param(Id(__L0C),BoolType),param(Id(W),BoolType),param(Id(__),ClassType(Id(bGYz_6W))),param(Id(S),ClassType(Id(bGYz_6W))),param(Id(B50),ClassType(Id(bGYz_6W))),param(Id(G),ClassType(Id(bGYz_6W))),param(Id(___4),ClassType(Id(_7))),param(Id(e),ClassType(Id(_7))),param(Id(_9),ClassType(Id(_7)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 220))

    def test_221(self):
        line = '''Class c:_2{Var m,_:Array [Array [Array [String ,0b1000011],0B10_0],0X4C];Val $9:Array [String ,0x9];Constructor (__,_c_:__;K,__te,_,_:q){}Destructor (){}Destructor (){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(c),Id(_2),[AttributeDecl(Instance,VarDecl(Id(m),ArrayType(76,ArrayType(4,ArrayType(67,StringType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(76,ArrayType(4,ArrayType(67,StringType))))),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(9,StringType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(__))),param(Id(_c_),ClassType(Id(__))),param(Id(K),ClassType(Id(q))),param(Id(__te),ClassType(Id(q))),param(Id(_),ClassType(Id(q))),param(Id(_),ClassType(Id(q)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 221))

    def test_222(self):
        line = '''Class __:T{Val $_,$1_:Boolean ;}Class ___{}Class ___{Var $q,$3T,__,f:String ;g65(_:Array [Float ,0xD]){Break ;_::$I.Z();} }Class b:Z__{$n(){}Var _:Array [Array [Array [String ,0X8_9],0B1],0XE];Var $1,$e__,_:_;}Class _:Ae{}Class _:O{}'''
        expect = '''Program([ClassDecl(Id(__),Id(T),[AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($1_),BoolType,None))]),ClassDecl(Id(___),[]),ClassDecl(Id(___),[AttributeDecl(Static,VarDecl(Id($q),StringType)),AttributeDecl(Static,VarDecl(Id($3T),StringType)),AttributeDecl(Instance,VarDecl(Id(__),StringType)),AttributeDecl(Instance,VarDecl(Id(f),StringType)),MethodDecl(Id(g65),Instance,[param(Id(_),ArrayType(13,FloatType))],Block([Break,Call(FieldAccess(Id(_),Id($I)),Id(Z),[])]))]),ClassDecl(Id(b),Id(Z__),[MethodDecl(Id($n),Static,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(14,ArrayType(1,ArrayType(137,StringType))))),AttributeDecl(Static,VarDecl(Id($1),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($e__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(Ae),[]),ClassDecl(Id(_),Id(O),[])])'''
        self.assertTrue(TestAST.test(line, expect, 222))

    def test_223(self):
        line = '''Class _{}Class h:_C{}Class n:uQ{}Class z_3_{Var _i_:Array [Boolean ,0X42];Var $D:Int ;Constructor (_8,c,i,_:_){} }Class _V{Var $e1r70_,$7_,cn,$0:String ;}Class AQS:E{Var $_:Float ;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(h),Id(_C),[]),ClassDecl(Id(n),Id(uQ),[]),ClassDecl(Id(z_3_),[AttributeDecl(Instance,VarDecl(Id(_i_),ArrayType(66,BoolType))),AttributeDecl(Static,VarDecl(Id($D),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(_8),ClassType(Id(_))),param(Id(c),ClassType(Id(_))),param(Id(i),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_V),[AttributeDecl(Static,VarDecl(Id($e1r70_),StringType)),AttributeDecl(Static,VarDecl(Id($7_),StringType)),AttributeDecl(Instance,VarDecl(Id(cn),StringType)),AttributeDecl(Static,VarDecl(Id($0),StringType))]),ClassDecl(Id(AQS),Id(E),[AttributeDecl(Static,VarDecl(Id($_),FloatType)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 223))

    def test_224(self):
        line = '''Class _0__{Constructor (h:Array [String ,8];n,n,_6k6z,t_,_,_,_E_:String ;__T,_x_:Boolean ;_,q2_,_,_42H,I___,MX:_w_90){}Val y:_9;Val $T72I,$_:Int ;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_0__),[MethodDecl(Id(Constructor),Instance,[param(Id(h),ArrayType(8,StringType)),param(Id(n),StringType),param(Id(n),StringType),param(Id(_6k6z),StringType),param(Id(t_),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_E_),StringType),param(Id(__T),BoolType),param(Id(_x_),BoolType),param(Id(_),ClassType(Id(_w_90))),param(Id(q2_),ClassType(Id(_w_90))),param(Id(_),ClassType(Id(_w_90))),param(Id(_42H),ClassType(Id(_w_90))),param(Id(I___),ClassType(Id(_w_90))),param(Id(MX),ClassType(Id(_w_90)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(y),ClassType(Id(_9)),None)),AttributeDecl(Static,ConstDecl(Id($T72I),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 224))

    def test_225(self):
        line = '''Class t1{Destructor (){}Val U_,_,$__I_:Array [Array [Array [Boolean ,0b1_001_1_0_00],0B1],0b1];}Class J4Q{Constructor (_r_,fBNx:Array [Int ,0X2A];_:_4_4;v,_H,M:Boolean ;lt,g__:Array [Float ,0X1_7];W__1_q,K:Int ){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(t1),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(U_),ArrayType(1,ArrayType(1,ArrayType(152,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(1,ArrayType(152,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($__I_),ArrayType(1,ArrayType(1,ArrayType(152,BoolType))),None))]),ClassDecl(Id(J4Q),[MethodDecl(Id(Constructor),Instance,[param(Id(_r_),ArrayType(42,IntType)),param(Id(fBNx),ArrayType(42,IntType)),param(Id(_),ClassType(Id(_4_4))),param(Id(v),BoolType),param(Id(_H),BoolType),param(Id(M),BoolType),param(Id(lt),ArrayType(23,FloatType)),param(Id(g__),ArrayType(23,FloatType)),param(Id(W__1_q),IntType),param(Id(K),IntType)],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 225))

    def test_226(self):
        line = '''Class _{Destructor (){}Constructor (){Continue ;}Destructor (){Return ;Break ;}Constructor (S,BT:_g;_,SJ,D_2z_P9:String ;d_:Int ;_8_,_,__e:Array [Array [Array [Boolean ,0x2A],0B11],02]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([Return(),Break])),MethodDecl(Id(Constructor),Instance,[param(Id(S),ClassType(Id(_g))),param(Id(BT),ClassType(Id(_g))),param(Id(_),StringType),param(Id(SJ),StringType),param(Id(D_2z_P9),StringType),param(Id(d_),IntType),param(Id(_8_),ArrayType(2,ArrayType(3,ArrayType(42,BoolType)))),param(Id(_),ArrayType(2,ArrayType(3,ArrayType(42,BoolType)))),param(Id(__e),ArrayType(2,ArrayType(3,ArrayType(42,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 226))

    def test_227(self):
        line = '''Class _{Constructor (_:w_B;_,m,z,B:Y;_5_,A_y3:_1C;_,__3_3,_:_T;I,__,Ix,_03:String ;m,_:Array [Array [Array [Boolean ,0B1_1],0B11001],0B11001];u_x:XP;_,_:Boolean ;g:_){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(w_B))),param(Id(_),ClassType(Id(Y))),param(Id(m),ClassType(Id(Y))),param(Id(z),ClassType(Id(Y))),param(Id(B),ClassType(Id(Y))),param(Id(_5_),ClassType(Id(_1C))),param(Id(A_y3),ClassType(Id(_1C))),param(Id(_),ClassType(Id(_T))),param(Id(__3_3),ClassType(Id(_T))),param(Id(_),ClassType(Id(_T))),param(Id(I),StringType),param(Id(__),StringType),param(Id(Ix),StringType),param(Id(_03),StringType),param(Id(m),ArrayType(25,ArrayType(25,ArrayType(3,BoolType)))),param(Id(_),ArrayType(25,ArrayType(25,ArrayType(3,BoolType)))),param(Id(u_x),ClassType(Id(XP))),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(g),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 227))

    def test_228(self):
        line = '''Class __8{}Class _I:w{Constructor (){}Var _6uT,R:Array [Float ,06];Val $_:Array [Array [Array [Array [String ,0b1],0X3A],0x62],3];}Class m8l9{$_(hH,_,r9:Array [Int ,0x62]){}Destructor (){}Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(__8),[]),ClassDecl(Id(_I),Id(w),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_6uT),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(R),ArrayType(6,FloatType))),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,ArrayType(98,ArrayType(58,ArrayType(1,StringType)))),None))]),ClassDecl(Id(m8l9),[MethodDecl(Id($_),Static,[param(Id(hH),ArrayType(98,IntType)),param(Id(_),ArrayType(98,IntType)),param(Id(r9),ArrayType(98,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 228))

    def test_229(self):
        line = '''Class _:j{Constructor (){Break ;} }Class E{Constructor (){}Constructor (){} }Class _c7:X{Val w,_:Boolean ;_(_Hz:_;S_,J,_L,K1__:String ;_gP:_;q0:Boolean ;J,p:String ;T,c_,_,_3:_;Uc:Boolean ;_c,h_:Array [String ,37]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(j),[MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(E),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_c7),Id(X),[AttributeDecl(Instance,ConstDecl(Id(w),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id(_),Instance,[param(Id(_Hz),ClassType(Id(_))),param(Id(S_),StringType),param(Id(J),StringType),param(Id(_L),StringType),param(Id(K1__),StringType),param(Id(_gP),ClassType(Id(_))),param(Id(q0),BoolType),param(Id(J),StringType),param(Id(p),StringType),param(Id(T),ClassType(Id(_))),param(Id(c_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_3),ClassType(Id(_))),param(Id(Uc),BoolType),param(Id(_c),ArrayType(37,StringType)),param(Id(h_),ArrayType(37,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 229))

    def test_230(self):
        line = '''Class J:u{}Class Gr_4{_(HDD1:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0x3],0B1],93],0B110110],046],046],0b1],0b1];J1:M4){}Constructor (){}Val _m4:Boolean ;___(_:Boolean ;F,_:Array [Array [Array [String ,1],0B110110],046]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(J),Id(u),[]),ClassDecl(Id(Gr_4),[MethodDecl(Id(_),Instance,[param(Id(HDD1),ArrayType(1,ArrayType(1,ArrayType(38,ArrayType(38,ArrayType(54,ArrayType(93,ArrayType(1,ArrayType(3,FloatType))))))))),param(Id(J1),ClassType(Id(M4)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_m4),BoolType,None)),MethodDecl(Id(___),Instance,[param(Id(_),BoolType),param(Id(F),ArrayType(38,ArrayType(54,ArrayType(1,StringType)))),param(Id(_),ArrayType(38,ArrayType(54,ArrayType(1,StringType))))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 230))

    def test_231(self):
        line = '''Class _4s:iV{Constructor (_0__Pu,_7Vi,_2_Z,D,K:W;_X:Boolean ;_,G_:Array [Float ,0X8];__,g0_,Kc,___,_,t6_,_7:Float ;V,X_:String ;W:Array [Int ,0105]){Break ;} }Class R{}Class _r4DN{}Class _:_T{}'''
        expect = '''Program([ClassDecl(Id(_4s),Id(iV),[MethodDecl(Id(Constructor),Instance,[param(Id(_0__Pu),ClassType(Id(W))),param(Id(_7Vi),ClassType(Id(W))),param(Id(_2_Z),ClassType(Id(W))),param(Id(D),ClassType(Id(W))),param(Id(K),ClassType(Id(W))),param(Id(_X),BoolType),param(Id(_),ArrayType(8,FloatType)),param(Id(G_),ArrayType(8,FloatType)),param(Id(__),FloatType),param(Id(g0_),FloatType),param(Id(Kc),FloatType),param(Id(___),FloatType),param(Id(_),FloatType),param(Id(t6_),FloatType),param(Id(_7),FloatType),param(Id(V),StringType),param(Id(X_),StringType),param(Id(W),ArrayType(69,IntType))],Block([Break]))]),ClassDecl(Id(R),[]),ClassDecl(Id(_r4DN),[]),ClassDecl(Id(_),Id(_T),[])])'''
        self.assertTrue(TestAST.test(line, expect, 231))

    def test_232(self):
        line = '''Class _:_{Var $2e,B:Array [Float ,0b11];Constructor (Z_,N8,_87Q0:Array [Array [String ,02],0B1]){}Constructor (_1_,_6,T_,_0,v:I;_7,VS:String ){}Destructor (){} }Class _x:N2{}Class _n67{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($2e),ArrayType(3,FloatType))),AttributeDecl(Instance,VarDecl(Id(B),ArrayType(3,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(Z_),ArrayType(1,ArrayType(2,StringType))),param(Id(N8),ArrayType(1,ArrayType(2,StringType))),param(Id(_87Q0),ArrayType(1,ArrayType(2,StringType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_1_),ClassType(Id(I))),param(Id(_6),ClassType(Id(I))),param(Id(T_),ClassType(Id(I))),param(Id(_0),ClassType(Id(I))),param(Id(v),ClassType(Id(I))),param(Id(_7),StringType),param(Id(VS),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_x),Id(N2),[]),ClassDecl(Id(_n67),[])])'''
        self.assertTrue(TestAST.test(line, expect, 232))

    def test_233(self):
        line = '''Class i2{Constructor (_4K,_:Array [Array [Array [Array [Array [Float ,03_43],07],66],0XC],05_07_3_4]){Break ;} }Class g31Nb{Var __:_;Constructor (_bH:Int ;_,P_M:Array [Array [Boolean ,0b11110],0X3A];p_0:j;_n,P_,egj,f:i){}Val $v:E__;$9(_:String ){}Constructor (_,_3_2,_j:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(i2),[MethodDecl(Id(Constructor),Instance,[param(Id(_4K),ArrayType(20956,ArrayType(12,ArrayType(66,ArrayType(7,ArrayType(227,FloatType)))))),param(Id(_),ArrayType(20956,ArrayType(12,ArrayType(66,ArrayType(7,ArrayType(227,FloatType))))))],Block([Break]))]),ClassDecl(Id(g31Nb),[AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_bH),IntType),param(Id(_),ArrayType(58,ArrayType(30,BoolType))),param(Id(P_M),ArrayType(58,ArrayType(30,BoolType))),param(Id(p_0),ClassType(Id(j))),param(Id(_n),ClassType(Id(i))),param(Id(P_),ClassType(Id(i))),param(Id(egj),ClassType(Id(i))),param(Id(f),ClassType(Id(i)))],Block([])),AttributeDecl(Static,ConstDecl(Id($v),ClassType(Id(E__)),None)),MethodDecl(Id($9),Static,[param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_3_2),BoolType),param(Id(_j),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 233))

    def test_234(self):
        line = '''Class _7X_:_O_{}Class kD:R_{}Class __:e__{Val $_,_:Array [Int ,8_3];}Class I6{Var $__y:Array [Array [Array [Array [Boolean ,3],0x10],013],0b1_11_10_1];Val $__,a:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_7X_),Id(_O_),[]),ClassDecl(Id(kD),Id(R_),[]),ClassDecl(Id(__),Id(e__),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(83,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(83,IntType),None))]),ClassDecl(Id(I6),[AttributeDecl(Static,VarDecl(Id($__y),ArrayType(61,ArrayType(11,ArrayType(16,ArrayType(3,BoolType)))))),AttributeDecl(Static,ConstDecl(Id($__),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(a),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 234))

    def test_235(self):
        line = '''Class j{Var _:Array [String ,07];$_(_tY_,e:f7;_c__,__,_:_k){ {} }r(_,Z69,_8:Array [Array [Array [Int ,0b10],0b111],0b1_01_10];_,_3_,_:Boolean ){}Constructor (__J_a,_,__,P,_,_M,S0:Float ;___,B:String ){} }'''
        expect = '''Program([ClassDecl(Id(j),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(7,StringType))),MethodDecl(Id($_),Static,[param(Id(_tY_),ClassType(Id(f7))),param(Id(e),ClassType(Id(f7))),param(Id(_c__),ClassType(Id(_k))),param(Id(__),ClassType(Id(_k))),param(Id(_),ClassType(Id(_k)))],Block([Block([])])),MethodDecl(Id(r),Instance,[param(Id(_),ArrayType(22,ArrayType(7,ArrayType(2,IntType)))),param(Id(Z69),ArrayType(22,ArrayType(7,ArrayType(2,IntType)))),param(Id(_8),ArrayType(22,ArrayType(7,ArrayType(2,IntType)))),param(Id(_),BoolType),param(Id(_3_),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__J_a),FloatType),param(Id(_),FloatType),param(Id(__),FloatType),param(Id(P),FloatType),param(Id(_),FloatType),param(Id(_M),FloatType),param(Id(S0),FloatType),param(Id(___),StringType),param(Id(B),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 235))

    def test_236(self):
        line = '''Class S:_A_e{}Class __u{Var $__9:String ;$_5(qgo:Array [Array [Array [Int ,0X1F],027],0B11_0000_0_1];r:__){} }Class _7f:_{}Class _:A{Constructor (z__k,_6_dX,e,_x8_R,__c:Array [Boolean ,54];F,EX:Boolean ;QX,u,z4,w:Array [Array [Float ,0X1F],0X1F];R_H,f,_T:Array [Int ,02_5_1_4];_,__:M7_3_;_2,C,_Zc4460,_:_;_:_v;_,_:Array [Array [Array [Array [Int ,03_5],54],0b1011010],0b11];__1_:_;E4_:Int ){}Destructor (){} }Class _:_d___u_{Val $_,$SK:_;_(___,g:Int ){} }Class _:A4{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(S),Id(_A_e),[]),ClassDecl(Id(__u),[AttributeDecl(Static,VarDecl(Id($__9),StringType)),MethodDecl(Id($_5),Static,[param(Id(qgo),ArrayType(193,ArrayType(23,ArrayType(31,IntType)))),param(Id(r),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(_7f),Id(_),[]),ClassDecl(Id(_),Id(A),[MethodDecl(Id(Constructor),Instance,[param(Id(z__k),ArrayType(54,BoolType)),param(Id(_6_dX),ArrayType(54,BoolType)),param(Id(e),ArrayType(54,BoolType)),param(Id(_x8_R),ArrayType(54,BoolType)),param(Id(__c),ArrayType(54,BoolType)),param(Id(F),BoolType),param(Id(EX),BoolType),param(Id(QX),ArrayType(31,ArrayType(31,FloatType))),param(Id(u),ArrayType(31,ArrayType(31,FloatType))),param(Id(z4),ArrayType(31,ArrayType(31,FloatType))),param(Id(w),ArrayType(31,ArrayType(31,FloatType))),param(Id(R_H),ArrayType(1356,IntType)),param(Id(f),ArrayType(1356,IntType)),param(Id(_T),ArrayType(1356,IntType)),param(Id(_),ClassType(Id(M7_3_))),param(Id(__),ClassType(Id(M7_3_))),param(Id(_2),ClassType(Id(_))),param(Id(C),ClassType(Id(_))),param(Id(_Zc4460),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_v))),param(Id(_),ArrayType(3,ArrayType(90,ArrayType(54,ArrayType(29,IntType))))),param(Id(_),ArrayType(3,ArrayType(90,ArrayType(54,ArrayType(29,IntType))))),param(Id(__1_),ClassType(Id(_))),param(Id(E4_),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_d___u_),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($SK),ClassType(Id(_)),None)),MethodDecl(Id(_),Instance,[param(Id(___),IntType),param(Id(g),IntType)],Block([]))]),ClassDecl(Id(_),Id(A4),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 236))

    def test_237(self):
        line = '''Class _88Tz:_W{$_7(j:Boolean ;E:Array [Array [Array [Array [Int ,2_34],0b1_00],042],0B1001111];_C,tTm_,_U5,___j,p,X,_L,L,k,_3:J_9){}Var ib8:Array [Array [Array [Array [Boolean ,3],04_3_6_5],02],042];}Class _:v4{}'''
        expect = '''Program([ClassDecl(Id(_88Tz),Id(_W),[MethodDecl(Id($_7),Static,[param(Id(j),BoolType),param(Id(E),ArrayType(79,ArrayType(34,ArrayType(4,ArrayType(234,IntType))))),param(Id(_C),ClassType(Id(J_9))),param(Id(tTm_),ClassType(Id(J_9))),param(Id(_U5),ClassType(Id(J_9))),param(Id(___j),ClassType(Id(J_9))),param(Id(p),ClassType(Id(J_9))),param(Id(X),ClassType(Id(J_9))),param(Id(_L),ClassType(Id(J_9))),param(Id(L),ClassType(Id(J_9))),param(Id(k),ClassType(Id(J_9))),param(Id(_3),ClassType(Id(J_9)))],Block([])),AttributeDecl(Instance,VarDecl(Id(ib8),ArrayType(34,ArrayType(2,ArrayType(2293,ArrayType(3,BoolType))))))]),ClassDecl(Id(_),Id(v4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 237))

    def test_238(self):
        line = '''Class _{Constructor (__:_o9M4;_4:Array [Int ,0b1001110];_,_0,_O6F:Array [Array [Int ,0x6],0b110_0_0]){}Var $_,_2i,$0wZ,x_4,$1_K4P:Array [Array [Array [Float ,2],0x1],5_7_1];}Class D{Val $z,KP:String ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_o9M4))),param(Id(_4),ArrayType(78,IntType)),param(Id(_),ArrayType(24,ArrayType(6,IntType))),param(Id(_0),ArrayType(24,ArrayType(6,IntType))),param(Id(_O6F),ArrayType(24,ArrayType(6,IntType)))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(571,ArrayType(1,ArrayType(2,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_2i),ArrayType(571,ArrayType(1,ArrayType(2,FloatType))))),AttributeDecl(Static,VarDecl(Id($0wZ),ArrayType(571,ArrayType(1,ArrayType(2,FloatType))))),AttributeDecl(Instance,VarDecl(Id(x_4),ArrayType(571,ArrayType(1,ArrayType(2,FloatType))))),AttributeDecl(Static,VarDecl(Id($1_K4P),ArrayType(571,ArrayType(1,ArrayType(2,FloatType)))))]),ClassDecl(Id(D),[AttributeDecl(Static,ConstDecl(Id($z),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(KP),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 238))

    def test_239(self):
        line = '''Class A{$8(L_,__,_,_5h6,E0,_26,_M,V8_a_X,W:Boolean ;k6:kj;__:yL_;c5,_,_o_:Array [Array [Array [Array [Array [Boolean ,1_3],0B1010],0b101000],076_25_401],0X3B]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(A),[MethodDecl(Id($8),Static,[param(Id(L_),BoolType),param(Id(__),BoolType),param(Id(_),BoolType),param(Id(_5h6),BoolType),param(Id(E0),BoolType),param(Id(_26),BoolType),param(Id(_M),BoolType),param(Id(V8_a_X),BoolType),param(Id(W),BoolType),param(Id(k6),ClassType(Id(kj))),param(Id(__),ClassType(Id(yL_))),param(Id(c5),ArrayType(59,ArrayType(2042625,ArrayType(40,ArrayType(10,ArrayType(13,BoolType)))))),param(Id(_),ArrayType(59,ArrayType(2042625,ArrayType(40,ArrayType(10,ArrayType(13,BoolType)))))),param(Id(_o_),ArrayType(59,ArrayType(2042625,ArrayType(40,ArrayType(10,ArrayType(13,BoolType))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 239))

    def test_240(self):
        line = '''Class __{Constructor (_,Z:Array [Array [Array [Array [Array [Array [Array [Array [String ,4],0XB],6],66],613773_1_0_6_4_04_0],66],0B100111],97];_v:_;__,n:r){Var ___,_,Y__,_,TN:Boolean ;} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(97,ArrayType(39,ArrayType(66,ArrayType(6137731064040,ArrayType(66,ArrayType(6,ArrayType(11,ArrayType(4,StringType))))))))),param(Id(Z),ArrayType(97,ArrayType(39,ArrayType(66,ArrayType(6137731064040,ArrayType(66,ArrayType(6,ArrayType(11,ArrayType(4,StringType))))))))),param(Id(_v),ClassType(Id(_))),param(Id(__),ClassType(Id(r))),param(Id(n),ClassType(Id(r)))],Block([VarDecl(Id(___),BoolType),VarDecl(Id(_),BoolType),VarDecl(Id(Y__),BoolType),VarDecl(Id(_),BoolType),VarDecl(Id(TN),BoolType)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 240))

    def test_241(self):
        line = '''Class PI{}Class c8_:Y0{Constructor (){}$9(v:Int ;h0P_,a,l8o:F;__8,W,U:_d;_m,_:Int ;_4:_Fg_;_,l,_,_3_vy,C,__2y__3:Array [Array [Boolean ,0b1],0B1];_9:String ){} }Class _:_L__{}'''
        expect = '''Program([ClassDecl(Id(PI),[]),ClassDecl(Id(c8_),Id(Y0),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($9),Static,[param(Id(v),IntType),param(Id(h0P_),ClassType(Id(F))),param(Id(a),ClassType(Id(F))),param(Id(l8o),ClassType(Id(F))),param(Id(__8),ClassType(Id(_d))),param(Id(W),ClassType(Id(_d))),param(Id(U),ClassType(Id(_d))),param(Id(_m),IntType),param(Id(_),IntType),param(Id(_4),ClassType(Id(_Fg_))),param(Id(_),ArrayType(1,ArrayType(1,BoolType))),param(Id(l),ArrayType(1,ArrayType(1,BoolType))),param(Id(_),ArrayType(1,ArrayType(1,BoolType))),param(Id(_3_vy),ArrayType(1,ArrayType(1,BoolType))),param(Id(C),ArrayType(1,ArrayType(1,BoolType))),param(Id(__2y__3),ArrayType(1,ArrayType(1,BoolType))),param(Id(_9),StringType)],Block([]))]),ClassDecl(Id(_),Id(_L__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 241))

    def test_242(self):
        line = '''Class __G{Var _3:Int ;}Class _E4{Var $5j:Float ;Constructor (__:Array [Array [Array [Array [Array [String ,01_1_0_024_6_7_2],0b1011000],0b10_0],0X60E],0B100];_:d;__OY_w2_57:Array [Array [Float ,02],0X49];W,__:_){Continue ;}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__G),[AttributeDecl(Instance,VarDecl(Id(_3),IntType))]),ClassDecl(Id(_E4),[AttributeDecl(Static,VarDecl(Id($5j),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(4,ArrayType(1550,ArrayType(4,ArrayType(88,ArrayType(18885050,StringType)))))),param(Id(_),ClassType(Id(d))),param(Id(__OY_w2_57),ArrayType(73,ArrayType(2,FloatType))),param(Id(W),ClassType(Id(_))),param(Id(__),ClassType(Id(_)))],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 242))

    def test_243(self):
        line = '''Class __:E{Constructor (K,_D,z__zw,_:Array [Array [Boolean ,012],0b1_1];KW:Array [Array [Boolean ,99],04]){}Destructor (){} }Class _11ix_0:e1{Var _,_6:Array [Array [Array [Boolean ,0b1],012],0b1100001];}Class Hs0:k1{}'''
        expect = '''Program([ClassDecl(Id(__),Id(E),[MethodDecl(Id(Constructor),Instance,[param(Id(K),ArrayType(3,ArrayType(10,BoolType))),param(Id(_D),ArrayType(3,ArrayType(10,BoolType))),param(Id(z__zw),ArrayType(3,ArrayType(10,BoolType))),param(Id(_),ArrayType(3,ArrayType(10,BoolType))),param(Id(KW),ArrayType(4,ArrayType(99,BoolType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_11ix_0),Id(e1),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(97,ArrayType(10,ArrayType(1,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_6),ArrayType(97,ArrayType(10,ArrayType(1,BoolType)))))]),ClassDecl(Id(Hs0),Id(k1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 243))

    def test_244(self):
        line = '''Class a_5{}Class _:_{Constructor (_4_l:Array [String ,0b1]){}Constructor (){Return ;}$8I0az_(z:Boolean ;_____1p,__,n,R,M_o:Array [Array [Array [Float ,0b1001],073],073];_,__:Array [Array [String ,0B11110],70]){}$_(){ {Val P__,L,h:_;} }}Class _V0_:_{}'''
        expect = '''Program([ClassDecl(Id(a_5),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_4_l),ArrayType(1,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Return()])),MethodDecl(Id($8I0az_),Static,[param(Id(z),BoolType),param(Id(_____1p),ArrayType(59,ArrayType(59,ArrayType(9,FloatType)))),param(Id(__),ArrayType(59,ArrayType(59,ArrayType(9,FloatType)))),param(Id(n),ArrayType(59,ArrayType(59,ArrayType(9,FloatType)))),param(Id(R),ArrayType(59,ArrayType(59,ArrayType(9,FloatType)))),param(Id(M_o),ArrayType(59,ArrayType(59,ArrayType(9,FloatType)))),param(Id(_),ArrayType(70,ArrayType(30,StringType))),param(Id(__),ArrayType(70,ArrayType(30,StringType)))],Block([])),MethodDecl(Id($_),Static,[],Block([Block([ConstDecl(Id(P__),ClassType(Id(_)),None),ConstDecl(Id(L),ClassType(Id(_)),None),ConstDecl(Id(h),ClassType(Id(_)),None)])]))]),ClassDecl(Id(_V0_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 244))

    def test_245(self):
        line = '''Class Z_4F:q6{Constructor (R:Array [Int ,016];_:Int ;R:Array [Array [Array [Array [Boolean ,0X7_8],0XC7],0X29],0b1010110];D9n,_0,V_:Boolean ;O__:Array [String ,2_7]){Break ;Continue ;Var g:Boolean ;Continue ;Return ;}Var __,n,$c,$esD:t;Var G_5_H:Array [Array [Float ,0X8],7];}'''
        expect = '''Program([ClassDecl(Id(Z_4F),Id(q6),[MethodDecl(Id(Constructor),Instance,[param(Id(R),ArrayType(14,IntType)),param(Id(_),IntType),param(Id(R),ArrayType(86,ArrayType(41,ArrayType(199,ArrayType(120,BoolType))))),param(Id(D9n),BoolType),param(Id(_0),BoolType),param(Id(V_),BoolType),param(Id(O__),ArrayType(27,StringType))],Block([Break,Continue,VarDecl(Id(g),BoolType),Continue,Return()])),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(t)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(n),ClassType(Id(t)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($c),ClassType(Id(t)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($esD),ClassType(Id(t)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(G_5_H),ArrayType(7,ArrayType(8,FloatType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 245))

    def test_246(self):
        line = '''Class R{}Class ___:q_{$_(O,y_45_,x,_Wv_:Int ){}$4(kc9:Int ;_:Float ;_A7W:Array [Array [Array [Array [Float ,0X6],011],011],0b1];_3_:String ){}Destructor (){} }Class f{}Class _4{Var v1W:I__;}'''
        expect = '''Program([ClassDecl(Id(R),[]),ClassDecl(Id(___),Id(q_),[MethodDecl(Id($_),Static,[param(Id(O),IntType),param(Id(y_45_),IntType),param(Id(x),IntType),param(Id(_Wv_),IntType)],Block([])),MethodDecl(Id($4),Static,[param(Id(kc9),IntType),param(Id(_),FloatType),param(Id(_A7W),ArrayType(1,ArrayType(9,ArrayType(9,ArrayType(6,FloatType))))),param(Id(_3_),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(f),[]),ClassDecl(Id(_4),[AttributeDecl(Instance,VarDecl(Id(v1W),ClassType(Id(I__)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 246))

    def test_247(self):
        line = '''Class N__{Constructor (_3j_:x;J_9_3TXX_0g,__3_5t_:Array [Array [Float ,0B1],0105];_,_O:Array [Array [Array [Boolean ,0x1],0XD_7E],0105];r6,Z:String ;_V,p3:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(N__),[MethodDecl(Id(Constructor),Instance,[param(Id(_3j_),ClassType(Id(x))),param(Id(J_9_3TXX_0g),ArrayType(69,ArrayType(1,FloatType))),param(Id(__3_5t_),ArrayType(69,ArrayType(1,FloatType))),param(Id(_),ArrayType(69,ArrayType(3454,ArrayType(1,BoolType)))),param(Id(_O),ArrayType(69,ArrayType(3454,ArrayType(1,BoolType)))),param(Id(r6),StringType),param(Id(Z),StringType),param(Id(_V),BoolType),param(Id(p3),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 247))

    def test_248(self):
        line = '''Class d{Destructor (){}Var $_Q3o:__7;$DC(___e__,_:_2O){ {} }Constructor (){}__(_,h:Array [Array [Array [String ,0704_0],82],0b101]){}Constructor (W_:Array [Boolean ,82];_:Float ;SXL_:Array [Array [Array [Array [Array [String ,0xE],82],0X22],2],06_1]){Continue ;} }Class W:___{}Class L_u_22{_6_(__,B,_,_:Array [String ,0xA8]){} }Class _{}Class V8PjYR:_{}Class _6m:_{}'''
        expect = '''Program([ClassDecl(Id(d),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_Q3o),ClassType(Id(__7)),NullLiteral())),MethodDecl(Id($DC),Static,[param(Id(___e__),ClassType(Id(_2O))),param(Id(_),ClassType(Id(_2O)))],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(__),Instance,[param(Id(_),ArrayType(5,ArrayType(82,ArrayType(3616,StringType)))),param(Id(h),ArrayType(5,ArrayType(82,ArrayType(3616,StringType))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(W_),ArrayType(82,BoolType)),param(Id(_),FloatType),param(Id(SXL_),ArrayType(49,ArrayType(2,ArrayType(34,ArrayType(82,ArrayType(14,StringType))))))],Block([Continue]))]),ClassDecl(Id(W),Id(___),[]),ClassDecl(Id(L_u_22),[MethodDecl(Id(_6_),Instance,[param(Id(__),ArrayType(168,StringType)),param(Id(B),ArrayType(168,StringType)),param(Id(_),ArrayType(168,StringType)),param(Id(_),ArrayType(168,StringType))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(V8PjYR),Id(_),[]),ClassDecl(Id(_6m),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 248))

    def test_249(self):
        line = '''Class __:_{Var $6eT7,uF,$8:l_;}Class _:i{Val _,__t,i3:Array [Array [Array [Array [Array [String ,75],07],295],0b1001101],1_585];Constructor (){Break ;}Var $431tY_:String ;}Class l:Ux{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[AttributeDecl(Static,VarDecl(Id($6eT7),ClassType(Id(l_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(uF),ClassType(Id(l_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(l_)),NullLiteral()))]),ClassDecl(Id(_),Id(i),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1585,ArrayType(77,ArrayType(295,ArrayType(7,ArrayType(75,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(__t),ArrayType(1585,ArrayType(77,ArrayType(295,ArrayType(7,ArrayType(75,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(i3),ArrayType(1585,ArrayType(77,ArrayType(295,ArrayType(7,ArrayType(75,StringType))))),None)),MethodDecl(Id(Constructor),Instance,[],Block([Break])),AttributeDecl(Static,VarDecl(Id($431tY_),StringType))]),ClassDecl(Id(l),Id(Ux),[])])'''
        self.assertTrue(TestAST.test(line, expect, 249))

    def test_250(self):
        line = '''Class _{kL(){}a9(_:_;_,_5,j7,Zhs5,_v:k214){} }Class s:T1{}Class _:akxo2XK{$6(x:Array [String ,06];_4___3q_4,_:Array [Array [Array [Array [Array [String ,2],06],043],0x35],571];_:_){} }Class _:_{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(kL),Instance,[],Block([])),MethodDecl(Id(a9),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(k214))),param(Id(_5),ClassType(Id(k214))),param(Id(j7),ClassType(Id(k214))),param(Id(Zhs5),ClassType(Id(k214))),param(Id(_v),ClassType(Id(k214)))],Block([]))]),ClassDecl(Id(s),Id(T1),[]),ClassDecl(Id(_),Id(akxo2XK),[MethodDecl(Id($6),Static,[param(Id(x),ArrayType(6,StringType)),param(Id(_4___3q_4),ArrayType(571,ArrayType(53,ArrayType(35,ArrayType(6,ArrayType(2,StringType)))))),param(Id(_),ArrayType(571,ArrayType(53,ArrayType(35,ArrayType(6,ArrayType(2,StringType)))))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 250))

    def test_251(self):
        line = '''Class h{Var _65X,$y_SU_,_I0,$A:Float ;Constructor (){ {}{} }Var w8_Q:Array [Array [Array [Boolean ,03],0X12],4];Val v__:Array [Array [Int ,0B10010],056];Var _4D:Array [Array [Array [Int ,0X12],0b1011111],0X12];}'''
        expect = '''Program([ClassDecl(Id(h),[AttributeDecl(Instance,VarDecl(Id(_65X),FloatType)),AttributeDecl(Static,VarDecl(Id($y_SU_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_I0),FloatType)),AttributeDecl(Static,VarDecl(Id($A),FloatType)),MethodDecl(Id(Constructor),Instance,[],Block([Block([]),Block([])])),AttributeDecl(Instance,VarDecl(Id(w8_Q),ArrayType(4,ArrayType(18,ArrayType(3,BoolType))))),AttributeDecl(Instance,ConstDecl(Id(v__),ArrayType(46,ArrayType(18,IntType)),None)),AttributeDecl(Instance,VarDecl(Id(_4D),ArrayType(18,ArrayType(95,ArrayType(18,IntType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 251))

    def test_252(self):
        line = '''Class rI{Constructor (){Continue ;Continue ;}Destructor (){Val H_,Y:Array [Array [Array [Array [Array [Boolean ,9],0x16],50],0b1000001],0B1];}Var _,_0,_,$0_:Array [Int ,014652];}'''
        expect = '''Program([ClassDecl(Id(rI),[MethodDecl(Id(Constructor),Instance,[],Block([Continue,Continue])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(H_),ArrayType(1,ArrayType(65,ArrayType(50,ArrayType(22,ArrayType(9,BoolType))))),None),ConstDecl(Id(Y),ArrayType(1,ArrayType(65,ArrayType(50,ArrayType(22,ArrayType(9,BoolType))))),None)])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(6570,IntType))),AttributeDecl(Instance,VarDecl(Id(_0),ArrayType(6570,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(6570,IntType))),AttributeDecl(Static,VarDecl(Id($0_),ArrayType(6570,IntType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 252))

    def test_253(self):
        line = '''Class _{Var $7z:Float =!!!_0q132::$1._._!=-_4::$_.v._S;}Class q:R_2{Constructor (){} }Class x:M{}Class __{Constructor (X:_){} }Class _{Destructor (){}Var X_F,$_,_,_:_7;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($7z),FloatType,BinaryOp(!=,UnaryOp(!,UnaryOp(!,UnaryOp(!,FieldAccess(FieldAccess(FieldAccess(Id(_0q132),Id($1)),Id(_)),Id(_))))),UnaryOp(-,FieldAccess(FieldAccess(FieldAccess(Id(_4),Id($_)),Id(v)),Id(_S))))))]),ClassDecl(Id(q),Id(R_2),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(x),Id(M),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(X),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(X_F),ClassType(Id(_7)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_7)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_7)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_7)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 253))

    def test_254(self):
        line = '''Class _:uG{}Class v0:sm{$Q(lV_4yR:Array [Boolean ,0B1010111]){}Constructor (K,E:String ;_N7:Array [String ,888_1];__,_5cu,R_:Array [Array [Array [Array [Array [Array [Int ,02],11],02],036],9],0x2_7];_2A1,kq,Aa:String ;H:_H;__U:String ;_:HO){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(uG),[]),ClassDecl(Id(v0),Id(sm),[MethodDecl(Id($Q),Static,[param(Id(lV_4yR),ArrayType(87,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(K),StringType),param(Id(E),StringType),param(Id(_N7),ArrayType(8881,StringType)),param(Id(__),ArrayType(39,ArrayType(9,ArrayType(30,ArrayType(2,ArrayType(11,ArrayType(2,IntType))))))),param(Id(_5cu),ArrayType(39,ArrayType(9,ArrayType(30,ArrayType(2,ArrayType(11,ArrayType(2,IntType))))))),param(Id(R_),ArrayType(39,ArrayType(9,ArrayType(30,ArrayType(2,ArrayType(11,ArrayType(2,IntType))))))),param(Id(_2A1),StringType),param(Id(kq),StringType),param(Id(Aa),StringType),param(Id(H),ClassType(Id(_H))),param(Id(__U),StringType),param(Id(_),ClassType(Id(HO)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 254))

    def test_255(self):
        line = '''Class Z_:m_{$_T(f,_,q__o:String ;_e:Array [Float ,07]){Break ;}Constructor (J,X:Array [String ,05];s_j053:_Tw7){} }Class s7{}Class vZ85T_1vF9:_{}Class y{Val $_62:String ;}'''
        expect = '''Program([ClassDecl(Id(Z_),Id(m_),[MethodDecl(Id($_T),Static,[param(Id(f),StringType),param(Id(_),StringType),param(Id(q__o),StringType),param(Id(_e),ArrayType(7,FloatType))],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(J),ArrayType(5,StringType)),param(Id(X),ArrayType(5,StringType)),param(Id(s_j053),ClassType(Id(_Tw7)))],Block([]))]),ClassDecl(Id(s7),[]),ClassDecl(Id(vZ85T_1vF9),Id(_),[]),ClassDecl(Id(y),[AttributeDecl(Static,ConstDecl(Id($_62),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 255))

    def test_256(self):
        line = '''Class K:_{}Class d{Var _,_:Int ;Val _:Float ;Var _:Array [Boolean ,0B110000];}Class _:L74{Val $B6_,J,$_,Y,G:Array [Boolean ,0X3A];Destructor (){}Var d,w1_,$O:_;}Class _:_{Val J,$2,o_,$7_:_i;}'''
        expect = '''Program([ClassDecl(Id(K),Id(_),[]),ClassDecl(Id(d),[AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(48,BoolType)))]),ClassDecl(Id(_),Id(L74),[AttributeDecl(Static,ConstDecl(Id($B6_),ArrayType(58,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(J),ArrayType(58,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(58,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(58,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(G),ArrayType(58,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(d),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(w1_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($O),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(J),ClassType(Id(_i)),None)),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(_i)),None)),AttributeDecl(Instance,ConstDecl(Id(o_),ClassType(Id(_i)),None)),AttributeDecl(Static,ConstDecl(Id($7_),ClassType(Id(_i)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 256))

    def test_257(self):
        line = '''Class q:_{}Class _0U{}Class _1{Var _:Array [Array [Array [Array [Boolean ,0b1],04],62],0B1_1];}Class _A__93:_{Constructor (){}$0___3(){}Val m,_,$y,_,i9,_:_;Var $r,$5g:Boolean ;Val $FW_,$7:Array [String ,056];}'''
        expect = '''Program([ClassDecl(Id(q),Id(_),[]),ClassDecl(Id(_0U),[]),ClassDecl(Id(_1),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(62,ArrayType(4,ArrayType(1,BoolType))))))]),ClassDecl(Id(_A__93),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($0___3),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(m),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($y),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(i9),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Static,VarDecl(Id($r),BoolType)),AttributeDecl(Static,VarDecl(Id($5g),BoolType)),AttributeDecl(Static,ConstDecl(Id($FW_),ArrayType(46,StringType),None)),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(46,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 257))

    def test_258(self):
        line = '''Class y3I7:__{Constructor (_,_:Float ;_:String ;_:_;j_Ra_9_R:_0;m,N,_N,i_Q_5,_i5:Float ;_,H:Int ;t,O,_68,wX,b__,O:Array [Float ,0B1010110];g0p_r,s,q,_:Array [Boolean ,0x36]){}Var __,_,_8,r,$_:Boolean ;Var pm:Array [Float ,56];}Class It1Ak36i71:_{}Class vB_:_{Var $3_w:Array [Array [String ,56],0B1010110];}'''
        expect = '''Program([ClassDecl(Id(y3I7),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),StringType),param(Id(_),ClassType(Id(_))),param(Id(j_Ra_9_R),ClassType(Id(_0))),param(Id(m),FloatType),param(Id(N),FloatType),param(Id(_N),FloatType),param(Id(i_Q_5),FloatType),param(Id(_i5),FloatType),param(Id(_),IntType),param(Id(H),IntType),param(Id(t),ArrayType(86,FloatType)),param(Id(O),ArrayType(86,FloatType)),param(Id(_68),ArrayType(86,FloatType)),param(Id(wX),ArrayType(86,FloatType)),param(Id(b__),ArrayType(86,FloatType)),param(Id(O),ArrayType(86,FloatType)),param(Id(g0p_r),ArrayType(54,BoolType)),param(Id(s),ArrayType(54,BoolType)),param(Id(q),ArrayType(54,BoolType)),param(Id(_),ArrayType(54,BoolType))],Block([])),AttributeDecl(Instance,VarDecl(Id(__),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_8),BoolType)),AttributeDecl(Instance,VarDecl(Id(r),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,VarDecl(Id(pm),ArrayType(56,FloatType)))]),ClassDecl(Id(It1Ak36i71),Id(_),[]),ClassDecl(Id(vB_),Id(_),[AttributeDecl(Static,VarDecl(Id($3_w),ArrayType(86,ArrayType(56,StringType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 258))

    def test_259(self):
        line = '''Class Mv_:N9{Constructor (_k:Array [Int ,0B1];B,_k:Array [String ,5];_,r6_:Boolean ){_::$_.h4_();}l_7(){Break ;} }Class k:u{Val $3,$_,$5_,$j4__,$_,$B,N_,$2:Array [Array [Boolean ,053],28];}Class _{}Class _:_{}Class _:J{}'''
        expect = '''Program([ClassDecl(Id(Mv_),Id(N9),[MethodDecl(Id(Constructor),Instance,[param(Id(_k),ArrayType(1,IntType)),param(Id(B),ArrayType(5,StringType)),param(Id(_k),ArrayType(5,StringType)),param(Id(_),BoolType),param(Id(r6_),BoolType)],Block([Call(FieldAccess(Id(_),Id($_)),Id(h4_),[])])),MethodDecl(Id(l_7),Instance,[],Block([Break]))]),ClassDecl(Id(k),Id(u),[AttributeDecl(Static,ConstDecl(Id($3),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($5_),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($j4__),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($B),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(N_),ArrayType(28,ArrayType(43,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(28,ArrayType(43,BoolType)),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(J),[])])'''
        self.assertTrue(TestAST.test(line, expect, 259))

    def test_260(self):
        line = '''Class _:r0{Destructor (){Return ;}gU(){} }Class c_8:__{}Class __{Val k:String ;i_J____(____u6Y__:Array [Boolean ,0x2E];F5,_,A5e:Boolean ){} }Class _:_4K_Y{Val $_8_T:Array [Array [String ,05],0B11011];}Class _R{}'''
        expect = '''Program([ClassDecl(Id(_),Id(r0),[MethodDecl(Id(Destructor),Instance,[],Block([Return()])),MethodDecl(Id(gU),Instance,[],Block([]))]),ClassDecl(Id(c_8),Id(__),[]),ClassDecl(Id(__),[AttributeDecl(Instance,ConstDecl(Id(k),StringType,None)),MethodDecl(Id(i_J____),Instance,[param(Id(____u6Y__),ArrayType(46,BoolType)),param(Id(F5),BoolType),param(Id(_),BoolType),param(Id(A5e),BoolType)],Block([]))]),ClassDecl(Id(_),Id(_4K_Y),[AttributeDecl(Static,ConstDecl(Id($_8_T),ArrayType(27,ArrayType(5,StringType)),None))]),ClassDecl(Id(_R),[])])'''
        self.assertTrue(TestAST.test(line, expect, 260))

    def test_261(self):
        line = '''Class _4K:_{}Class v_{}Class _L{}Class _:_U_4_3_6{Val Y4Q:String ;Constructor (uue:Array [Int ,061];B:h;_a43,_:Array [Array [Int ,0x52],01]){}Var $62:String ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(_4K),Id(_),[]),ClassDecl(Id(v_),[]),ClassDecl(Id(_L),[]),ClassDecl(Id(_),Id(_U_4_3_6),[AttributeDecl(Instance,ConstDecl(Id(Y4Q),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(uue),ArrayType(49,IntType)),param(Id(B),ClassType(Id(h))),param(Id(_a43),ArrayType(1,ArrayType(82,IntType))),param(Id(_),ArrayType(1,ArrayType(82,IntType)))],Block([])),AttributeDecl(Static,VarDecl(Id($62),StringType))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 261))

    def test_262(self):
        line = '''Class z1:ED_{Var $__,$_:Array [Array [Float ,7],0X25];}Class W:_{Val V1S:Float ;}Class _{Var _,Hi_:Array [Boolean ,0B1000100];X3_(TVi4,_:Array [Array [Array [String ,06],04_3_0_5_75],7]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(z1),Id(ED_),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(37,ArrayType(7,FloatType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(37,ArrayType(7,FloatType))))]),ClassDecl(Id(W),Id(_),[AttributeDecl(Instance,ConstDecl(Id(V1S),FloatType,None))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(68,BoolType))),AttributeDecl(Instance,VarDecl(Id(Hi_),ArrayType(68,BoolType))),MethodDecl(Id(X3_),Instance,[param(Id(TVi4),ArrayType(7,ArrayType(143741,ArrayType(6,StringType)))),param(Id(_),ArrayType(7,ArrayType(143741,ArrayType(6,StringType))))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 262))

    def test_263(self):
        line = '''Class _7_{}Class __eY{_(){}Constructor (){Var x,_f,Y9:Array [Array [Array [Array [Float ,01],0XF],0121],0X22];} }Class WG:MR3_1{Val _:String ;T(){}_8(U_1kQ,b,_1:Array [Boolean ,0xA]){} }'''
        expect = '''Program([ClassDecl(Id(_7_),[]),ClassDecl(Id(__eY),[MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(x),ArrayType(34,ArrayType(81,ArrayType(15,ArrayType(1,FloatType))))),VarDecl(Id(_f),ArrayType(34,ArrayType(81,ArrayType(15,ArrayType(1,FloatType))))),VarDecl(Id(Y9),ArrayType(34,ArrayType(81,ArrayType(15,ArrayType(1,FloatType)))))]))]),ClassDecl(Id(WG),Id(MR3_1),[AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),MethodDecl(Id(T),Instance,[],Block([])),MethodDecl(Id(_8),Instance,[param(Id(U_1kQ),ArrayType(10,BoolType)),param(Id(b),ArrayType(10,BoolType)),param(Id(_1),ArrayType(10,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 263))

    def test_264(self):
        line = '''Class br{C_(){_5_::$1().__7_();Break ;} }Class _0B_cPW6{Constructor (){} }Class _n:O{}Class P{Destructor (){}Var __Q_,$F:Array [Array [Array [String ,0B1],0b1],0xB];}Class t{Var _:Array [Int ,0XA7];}'''
        expect = '''Program([ClassDecl(Id(br),[MethodDecl(Id(C_),Instance,[],Block([Call(CallExpr(Id(_5_),Id($1),[]),Id(__7_),[]),Break]))]),ClassDecl(Id(_0B_cPW6),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_n),Id(O),[]),ClassDecl(Id(P),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(__Q_),ArrayType(11,ArrayType(1,ArrayType(1,StringType))))),AttributeDecl(Static,VarDecl(Id($F),ArrayType(11,ArrayType(1,ArrayType(1,StringType)))))]),ClassDecl(Id(t),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(167,IntType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 264))

    def test_265(self):
        line = '''Class AW:_{}Class _{}Class _3:U_6{jh(){} }Class X:e__{Val $__6,$r,Y,h,__,$9:Array [Int ,0b1_1];Constructor (_0hc:Array [Array [Array [Array [Array [Array [Int ,0X49],0b100010],0X9_DA],01_3_2_61],84],0x15];S,_,__,_KD:Array [Array [Array [Float ,064_2],0B1_0],84];___00:Array [Int ,4_2_4]){} }'''
        expect = '''Program([ClassDecl(Id(AW),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_3),Id(U_6),[MethodDecl(Id(jh),Instance,[],Block([]))]),ClassDecl(Id(X),Id(e__),[AttributeDecl(Static,ConstDecl(Id($__6),ArrayType(3,IntType),None)),AttributeDecl(Static,ConstDecl(Id($r),ArrayType(3,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(3,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(h),ArrayType(3,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(3,IntType),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(3,IntType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_0hc),ArrayType(21,ArrayType(84,ArrayType(5809,ArrayType(2522,ArrayType(34,ArrayType(73,IntType))))))),param(Id(S),ArrayType(84,ArrayType(2,ArrayType(418,FloatType)))),param(Id(_),ArrayType(84,ArrayType(2,ArrayType(418,FloatType)))),param(Id(__),ArrayType(84,ArrayType(2,ArrayType(418,FloatType)))),param(Id(_KD),ArrayType(84,ArrayType(2,ArrayType(418,FloatType)))),param(Id(___00),ArrayType(424,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 265))

    def test_266(self):
        line = '''Class _{}Class _{Val $i:_32s;Constructor (S:Int ;_V_:Array [Array [String ,0x4],0B1_1];v,_:Array [Array [Int ,0x2],037_0612];_X:Array [Array [Array [Array [String ,046],69],0B1],0X36]){Break ;} }Class __{Val $I_,$K,$_8,$1,__,_,m9:Array [Array [Int ,0B1],2];}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($i),ClassType(Id(_32s)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(S),IntType),param(Id(_V_),ArrayType(3,ArrayType(4,StringType))),param(Id(v),ArrayType(127370,ArrayType(2,IntType))),param(Id(_),ArrayType(127370,ArrayType(2,IntType))),param(Id(_X),ArrayType(54,ArrayType(1,ArrayType(69,ArrayType(38,StringType)))))],Block([Break]))]),ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($I_),ArrayType(2,ArrayType(1,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($K),ArrayType(2,ArrayType(1,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($_8),ArrayType(2,ArrayType(1,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($1),ArrayType(2,ArrayType(1,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(2,ArrayType(1,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,ArrayType(1,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(m9),ArrayType(2,ArrayType(1,IntType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 266))

    def test_267(self):
        line = '''Class _{Var $__c,$__34,$0,_I5Y9,_,$bE:Int ;Var zs:_;}Class U:s{}Class f:_{Constructor (tWs,_D,_,L:Array [Array [Array [Boolean ,0x2A],0X2F],83];E___4K:Array [Array [Array [Boolean ,0x2A],1],0b1_0]){}__(){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($__c),IntType)),AttributeDecl(Static,VarDecl(Id($__34),IntType)),AttributeDecl(Static,VarDecl(Id($0),IntType)),AttributeDecl(Instance,VarDecl(Id(_I5Y9),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Static,VarDecl(Id($bE),IntType)),AttributeDecl(Instance,VarDecl(Id(zs),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(U),Id(s),[]),ClassDecl(Id(f),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(tWs),ArrayType(83,ArrayType(47,ArrayType(42,BoolType)))),param(Id(_D),ArrayType(83,ArrayType(47,ArrayType(42,BoolType)))),param(Id(_),ArrayType(83,ArrayType(47,ArrayType(42,BoolType)))),param(Id(L),ArrayType(83,ArrayType(47,ArrayType(42,BoolType)))),param(Id(E___4K),ArrayType(2,ArrayType(1,ArrayType(42,BoolType))))],Block([])),MethodDecl(Id(__),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 267))

    def test_268(self):
        line = '''Class _{$r(_:Array [Array [Array [Boolean ,0B100],70],0322];g:Float ;e:Array [Array [Int ,077],94]){}_(T:w;_P_,_0,V4:r3;WX,_J_,_,l3,F,w_v:Array [String ,077];o,g:Array [Boolean ,0B11_1];_M46:Array [Array [Boolean ,18_4_746],077];u,p003:String ;___,_E:Array [String ,0B1]){} }Class _07{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($r),Static,[param(Id(_),ArrayType(210,ArrayType(70,ArrayType(4,BoolType)))),param(Id(g),FloatType),param(Id(e),ArrayType(94,ArrayType(63,IntType)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(T),ClassType(Id(w))),param(Id(_P_),ClassType(Id(r3))),param(Id(_0),ClassType(Id(r3))),param(Id(V4),ClassType(Id(r3))),param(Id(WX),ArrayType(63,StringType)),param(Id(_J_),ArrayType(63,StringType)),param(Id(_),ArrayType(63,StringType)),param(Id(l3),ArrayType(63,StringType)),param(Id(F),ArrayType(63,StringType)),param(Id(w_v),ArrayType(63,StringType)),param(Id(o),ArrayType(7,BoolType)),param(Id(g),ArrayType(7,BoolType)),param(Id(_M46),ArrayType(63,ArrayType(184746,BoolType))),param(Id(u),StringType),param(Id(p003),StringType),param(Id(___),ArrayType(1,StringType)),param(Id(_E),ArrayType(1,StringType))],Block([]))]),ClassDecl(Id(_07),[])])'''
        self.assertTrue(TestAST.test(line, expect, 268))

    def test_269(self):
        line = '''Class W{Val _,_:Array [Array [Array [Array [Array [Boolean ,0b1001010],0X12],12_2_2],0X7],03_2];Val $Z_P:__;Destructor (){}Var $__,$__,$__JX,$U87jo,$O0,_y:a_;}Class rS_K:a{}'''
        expect = '''Program([ClassDecl(Id(W),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,ArrayType(7,ArrayType(1222,ArrayType(18,ArrayType(74,BoolType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,ArrayType(7,ArrayType(1222,ArrayType(18,ArrayType(74,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($Z_P),ClassType(Id(__)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(a_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(a_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__JX),ClassType(Id(a_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($U87jo),ClassType(Id(a_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($O0),ClassType(Id(a_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_y),ClassType(Id(a_)),NullLiteral()))]),ClassDecl(Id(rS_K),Id(a),[])])'''
        self.assertTrue(TestAST.test(line, expect, 269))

    def test_270(self):
        line = '''Class __{i(Nk5:Array [Array [String ,055],03];_Mo:Float ){} }Class q:_{Val c0:p0d_;Destructor (){} }Class yc:y{}Class _:_{__(){} }Class _{Val y_:Array [Int ,055];}Class ___:t{}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(i),Instance,[param(Id(Nk5),ArrayType(3,ArrayType(45,StringType))),param(Id(_Mo),FloatType)],Block([]))]),ClassDecl(Id(q),Id(_),[AttributeDecl(Instance,ConstDecl(Id(c0),ClassType(Id(p0d_)),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(yc),Id(y),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(__),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(y_),ArrayType(45,IntType),None))]),ClassDecl(Id(___),Id(t),[])])'''
        self.assertTrue(TestAST.test(line, expect, 270))

    def test_271(self):
        line = '''Class R{Var $_9t:Int ;Var q,$0_:Float ;}Class d:E{Constructor (){} }Class _N:k{Constructor (_:Array [Array [Array [String ,0XD],99],7];Cef,_,_t_:B1_01;s2,__h5:Float ;_,_7_w7:Array [Int ,02]){} }'''
        expect = '''Program([ClassDecl(Id(R),[AttributeDecl(Static,VarDecl(Id($_9t),IntType)),AttributeDecl(Instance,VarDecl(Id(q),FloatType)),AttributeDecl(Static,VarDecl(Id($0_),FloatType))]),ClassDecl(Id(d),Id(E),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_N),Id(k),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(7,ArrayType(99,ArrayType(13,StringType)))),param(Id(Cef),ClassType(Id(B1_01))),param(Id(_),ClassType(Id(B1_01))),param(Id(_t_),ClassType(Id(B1_01))),param(Id(s2),FloatType),param(Id(__h5),FloatType),param(Id(_),ArrayType(2,IntType)),param(Id(_7_w7),ArrayType(2,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 271))

    def test_272(self):
        line = '''Class _:_2{Var $D5:String ;Constructor (sy9,yV_Nj,H:Array [Float ,033];__Gf9,__:Array [String ,0B1_1_11_0];b,Xv04,v0,_,YJ_6_:H9_;_1:_){}Constructor (){}Constructor (){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_2),[AttributeDecl(Static,VarDecl(Id($D5),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(sy9),ArrayType(27,FloatType)),param(Id(yV_Nj),ArrayType(27,FloatType)),param(Id(H),ArrayType(27,FloatType)),param(Id(__Gf9),ArrayType(30,StringType)),param(Id(__),ArrayType(30,StringType)),param(Id(b),ClassType(Id(H9_))),param(Id(Xv04),ClassType(Id(H9_))),param(Id(v0),ClassType(Id(H9_))),param(Id(_),ClassType(Id(H9_))),param(Id(YJ_6_),ClassType(Id(H9_))),param(Id(_1),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 272))

    def test_273(self):
        line = '''Class __9{Constructor (_6_:Array [Int ,0B11001];_,V,j9_5,_,_:Array [Array [Boolean ,02],0B1_1];x_,T:Boolean ;__:String ;T,_,nWs,_m:Array [Array [Array [Boolean ,0b101001],0b1],0X63]){} }'''
        expect = '''Program([ClassDecl(Id(__9),[MethodDecl(Id(Constructor),Instance,[param(Id(_6_),ArrayType(25,IntType)),param(Id(_),ArrayType(3,ArrayType(2,BoolType))),param(Id(V),ArrayType(3,ArrayType(2,BoolType))),param(Id(j9_5),ArrayType(3,ArrayType(2,BoolType))),param(Id(_),ArrayType(3,ArrayType(2,BoolType))),param(Id(_),ArrayType(3,ArrayType(2,BoolType))),param(Id(x_),BoolType),param(Id(T),BoolType),param(Id(__),StringType),param(Id(T),ArrayType(99,ArrayType(1,ArrayType(41,BoolType)))),param(Id(_),ArrayType(99,ArrayType(1,ArrayType(41,BoolType)))),param(Id(nWs),ArrayType(99,ArrayType(1,ArrayType(41,BoolType)))),param(Id(_m),ArrayType(99,ArrayType(1,ArrayType(41,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 273))

    def test_274(self):
        line = '''Class _{Constructor (_:Array [Float ,012];__,o,P,_,P:_0;_,_,__0:Array [Array [Int ,0B1000011],0x4F]){} }Class cu:y{}Class ulk{Val w:Array [Array [Float ,95],0x4F];}Class _:_{}Class _:_{$m_(KOG,I,e,AGWu6W:Array [Float ,0b1100000];_,qq,_,Fq8_092_:a){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(10,FloatType)),param(Id(__),ClassType(Id(_0))),param(Id(o),ClassType(Id(_0))),param(Id(P),ClassType(Id(_0))),param(Id(_),ClassType(Id(_0))),param(Id(P),ClassType(Id(_0))),param(Id(_),ArrayType(79,ArrayType(67,IntType))),param(Id(_),ArrayType(79,ArrayType(67,IntType))),param(Id(__0),ArrayType(79,ArrayType(67,IntType)))],Block([]))]),ClassDecl(Id(cu),Id(y),[]),ClassDecl(Id(ulk),[AttributeDecl(Instance,ConstDecl(Id(w),ArrayType(79,ArrayType(95,FloatType)),None))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id($m_),Static,[param(Id(KOG),ArrayType(96,FloatType)),param(Id(I),ArrayType(96,FloatType)),param(Id(e),ArrayType(96,FloatType)),param(Id(AGWu6W),ArrayType(96,FloatType)),param(Id(_),ClassType(Id(a))),param(Id(qq),ClassType(Id(a))),param(Id(_),ClassType(Id(a))),param(Id(Fq8_092_),ClassType(Id(a)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 274))

    def test_275(self):
        line = '''Class e{Constructor (){} }Class _0:__Y{Constructor (_,__,__P_,X_:_){Var c:_;}$5(_:o;h5A1:Array [Boolean ,28];l,__:Array [Array [Boolean ,02_5],28];G:Array [Array [Int ,013],01_61]){Var _:Array [Array [Array [String ,013],0B1_1],0B10];}Val s_,$m,f:_;Var $4:Array [String ,06_4_1];Var $Qg:Array [Float ,7_6];Var _,$05JF,_i:String ;}Class j2B{}'''
        expect = '''Program([ClassDecl(Id(e),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_0),Id(__Y),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(__P_),ClassType(Id(_))),param(Id(X_),ClassType(Id(_)))],Block([VarDecl(Id(c),ClassType(Id(_)),NullLiteral())])),MethodDecl(Id($5),Static,[param(Id(_),ClassType(Id(o))),param(Id(h5A1),ArrayType(28,BoolType)),param(Id(l),ArrayType(28,ArrayType(21,BoolType))),param(Id(__),ArrayType(28,ArrayType(21,BoolType))),param(Id(G),ArrayType(113,ArrayType(11,IntType)))],Block([VarDecl(Id(_),ArrayType(2,ArrayType(3,ArrayType(11,StringType))))])),AttributeDecl(Instance,ConstDecl(Id(s_),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($m),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(f),ClassType(Id(_)),None)),AttributeDecl(Static,VarDecl(Id($4),ArrayType(417,StringType))),AttributeDecl(Static,VarDecl(Id($Qg),ArrayType(76,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($05JF),StringType)),AttributeDecl(Instance,VarDecl(Id(_i),StringType))]),ClassDecl(Id(j2B),[])])'''
        self.assertTrue(TestAST.test(line, expect, 275))

    def test_276(self):
        line = '''Class e:y{Var _,$j9_,$1__3,F_,$8N2wd_E:Array [Array [Array [Boolean ,6],02_3252_6],8_3];Val _,$e1_,_k:Array [String ,0x21_C];Destructor (){}Val $Hl2__,a:Array [Int ,0x4B];Var i:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(e),Id(y),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(83,ArrayType(79190,ArrayType(6,BoolType))))),AttributeDecl(Static,VarDecl(Id($j9_),ArrayType(83,ArrayType(79190,ArrayType(6,BoolType))))),AttributeDecl(Static,VarDecl(Id($1__3),ArrayType(83,ArrayType(79190,ArrayType(6,BoolType))))),AttributeDecl(Instance,VarDecl(Id(F_),ArrayType(83,ArrayType(79190,ArrayType(6,BoolType))))),AttributeDecl(Static,VarDecl(Id($8N2wd_E),ArrayType(83,ArrayType(79190,ArrayType(6,BoolType))))),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(540,StringType),None)),AttributeDecl(Static,ConstDecl(Id($e1_),ArrayType(540,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_k),ArrayType(540,StringType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($Hl2__),ArrayType(75,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(a),ArrayType(75,IntType),None)),AttributeDecl(Instance,VarDecl(Id(i),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 276))

    def test_277(self):
        line = '''Class ___29M5:J7{Val _:___;Var __,i1:z68;Destructor (){}_84(M:Array [Float ,61];_7t,_,m,___0_T_:w){}Var _2d__Q__,_Dg:String ;}Class t{}Class M0q{Var $_:__8;Constructor (){}Constructor (){} }Class Ih:__{}'''
        expect = '''Program([ClassDecl(Id(___29M5),Id(J7),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(___)),None)),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(z68)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(i1),ClassType(Id(z68)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_84),Instance,[param(Id(M),ArrayType(61,FloatType)),param(Id(_7t),ClassType(Id(w))),param(Id(_),ClassType(Id(w))),param(Id(m),ClassType(Id(w))),param(Id(___0_T_),ClassType(Id(w)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_2d__Q__),StringType)),AttributeDecl(Instance,VarDecl(Id(_Dg),StringType))]),ClassDecl(Id(t),[]),ClassDecl(Id(M0q),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(__8)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Ih),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 277))

    def test_278(self):
        line = '''Class _{}Class h_:_{Constructor (){}Var _L:Boolean ;Constructor (){Break ;}Constructor (_,Qs_n:String ;___8,_L:Float ;b0:Array [Array [Int ,02],30];k,O:Z5;_,_:_8;_:String ;i_:R;B_5_,N,_:String ;W_,b:Array [Array [Int ,0x7],30];_0,D:Cc6_;_:mW){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(h_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_L),BoolType)),MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(Qs_n),StringType),param(Id(___8),FloatType),param(Id(_L),FloatType),param(Id(b0),ArrayType(30,ArrayType(2,IntType))),param(Id(k),ClassType(Id(Z5))),param(Id(O),ClassType(Id(Z5))),param(Id(_),ClassType(Id(_8))),param(Id(_),ClassType(Id(_8))),param(Id(_),StringType),param(Id(i_),ClassType(Id(R))),param(Id(B_5_),StringType),param(Id(N),StringType),param(Id(_),StringType),param(Id(W_),ArrayType(30,ArrayType(7,IntType))),param(Id(b),ArrayType(30,ArrayType(7,IntType))),param(Id(_0),ClassType(Id(Cc6_))),param(Id(D),ClassType(Id(Cc6_))),param(Id(_),ClassType(Id(mW)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 278))

    def test_279(self):
        line = '''Class w:d{Constructor (_A2:String ){Continue ;}Constructor (){}___9C(k,_,_:String ;_:String ){} }Class _:U{Destructor (){Continue ;Q::$__n6();}Destructor (){}$T1(_,x,_6_,fkbJ,E_,_k6__:W;a3_C,X,___K:Array [Array [Boolean ,0B101100],0X3];_sA,_m,_T_,P:d){}Constructor (UfS:DI__;e:Array [Array [Array [Boolean ,0x8],9],0B101100];__j9,_,o,____:q0;A:_m;__:q){} }'''
        expect = '''Program([ClassDecl(Id(w),Id(d),[MethodDecl(Id(Constructor),Instance,[param(Id(_A2),StringType)],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(___9C),Instance,[param(Id(k),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(_),Id(U),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Call(Id(Q),Id($__n6),[])])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($T1),Static,[param(Id(_),ClassType(Id(W))),param(Id(x),ClassType(Id(W))),param(Id(_6_),ClassType(Id(W))),param(Id(fkbJ),ClassType(Id(W))),param(Id(E_),ClassType(Id(W))),param(Id(_k6__),ClassType(Id(W))),param(Id(a3_C),ArrayType(3,ArrayType(44,BoolType))),param(Id(X),ArrayType(3,ArrayType(44,BoolType))),param(Id(___K),ArrayType(3,ArrayType(44,BoolType))),param(Id(_sA),ClassType(Id(d))),param(Id(_m),ClassType(Id(d))),param(Id(_T_),ClassType(Id(d))),param(Id(P),ClassType(Id(d)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(UfS),ClassType(Id(DI__))),param(Id(e),ArrayType(44,ArrayType(9,ArrayType(8,BoolType)))),param(Id(__j9),ClassType(Id(q0))),param(Id(_),ClassType(Id(q0))),param(Id(o),ClassType(Id(q0))),param(Id(____),ClassType(Id(q0))),param(Id(A),ClassType(Id(_m))),param(Id(__),ClassType(Id(q)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 279))

    def test_280(self):
        line = '''Class _:_{}Class _:_{_(_6:Array [Int ,0b1111];_r5,s:Array [Boolean ,40];_0Sy:Boolean ;_:Float ;_6__p,F66930:Array [Array [Array [Float ,0b1],0x9],055_76_5];_:Array [Array [Boolean ,030],6]){}Destructor (){} }Class Z{Var $JZX,$_:n__;Constructor (){}Var _:_;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(_),Instance,[param(Id(_6),ArrayType(15,IntType)),param(Id(_r5),ArrayType(40,BoolType)),param(Id(s),ArrayType(40,BoolType)),param(Id(_0Sy),BoolType),param(Id(_),FloatType),param(Id(_6__p),ArrayType(23541,ArrayType(9,ArrayType(1,FloatType)))),param(Id(F66930),ArrayType(23541,ArrayType(9,ArrayType(1,FloatType)))),param(Id(_),ArrayType(6,ArrayType(24,BoolType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Z),[AttributeDecl(Static,VarDecl(Id($JZX),ClassType(Id(n__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(n__)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 280))

    def test_281(self):
        line = '''Class z:_{Constructor (A:Float ;N9Ib700e78K:Array [Array [Array [Array [String ,33],0b10111],0x54_5],0X2_C];m:Float ){ {}Var __:Array [Array [Array [Float ,33],33],0B1010100];}Val $_65,$45_,$y_Y:String ;}Class Q{}'''
        expect = '''Program([ClassDecl(Id(z),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(A),FloatType),param(Id(N9Ib700e78K),ArrayType(44,ArrayType(1349,ArrayType(23,ArrayType(33,StringType))))),param(Id(m),FloatType)],Block([Block([]),VarDecl(Id(__),ArrayType(84,ArrayType(33,ArrayType(33,FloatType))))])),AttributeDecl(Static,ConstDecl(Id($_65),StringType,None)),AttributeDecl(Static,ConstDecl(Id($45_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($y_Y),StringType,None))]),ClassDecl(Id(Q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 281))

    def test_282(self):
        line = '''Class _{Constructor (_,_68k8_,_17:L_;ru:T;_U,__:_1;_:Array [Float ,0B11]){}Constructor (s,x,T,_,_:Array [Boolean ,05];B,_:Array [Array [String ,0x2A],8];_,I:_;_Owv,l5,_2_7__Ac:Array [Array [Array [Array [Array [Int ,0x8],0b1_1_0_1],51],0x2A],7];K,_z:d){Continue ;l_::$4();} }Class g:_K{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(L_))),param(Id(_68k8_),ClassType(Id(L_))),param(Id(_17),ClassType(Id(L_))),param(Id(ru),ClassType(Id(T))),param(Id(_U),ClassType(Id(_1))),param(Id(__),ClassType(Id(_1))),param(Id(_),ArrayType(3,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(s),ArrayType(5,BoolType)),param(Id(x),ArrayType(5,BoolType)),param(Id(T),ArrayType(5,BoolType)),param(Id(_),ArrayType(5,BoolType)),param(Id(_),ArrayType(5,BoolType)),param(Id(B),ArrayType(8,ArrayType(42,StringType))),param(Id(_),ArrayType(8,ArrayType(42,StringType))),param(Id(_),ClassType(Id(_))),param(Id(I),ClassType(Id(_))),param(Id(_Owv),ArrayType(7,ArrayType(42,ArrayType(51,ArrayType(13,ArrayType(8,IntType)))))),param(Id(l5),ArrayType(7,ArrayType(42,ArrayType(51,ArrayType(13,ArrayType(8,IntType)))))),param(Id(_2_7__Ac),ArrayType(7,ArrayType(42,ArrayType(51,ArrayType(13,ArrayType(8,IntType)))))),param(Id(K),ClassType(Id(d))),param(Id(_z),ClassType(Id(d)))],Block([Continue,Call(Id(l_),Id($4),[])]))]),ClassDecl(Id(g),Id(_K),[])])'''
        self.assertTrue(TestAST.test(line, expect, 282))

    def test_283(self):
        line = '''Class _65_{}Class _C:_7_3u{Constructor (z:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1],7],0xC8],27],0X5],0X8],0b101101],040];_,c,X6l:Array [String ,7];_:Array [Float ,040];U:Array [Boolean ,7_4]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_65_),[]),ClassDecl(Id(_C),Id(_7_3u),[MethodDecl(Id(Constructor),Instance,[param(Id(z),ArrayType(32,ArrayType(45,ArrayType(8,ArrayType(5,ArrayType(27,ArrayType(200,ArrayType(7,ArrayType(1,BoolType))))))))),param(Id(_),ArrayType(7,StringType)),param(Id(c),ArrayType(7,StringType)),param(Id(X6l),ArrayType(7,StringType)),param(Id(_),ArrayType(32,FloatType)),param(Id(U),ArrayType(74,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 283))

    def test_284(self):
        line = '''Class _:___M{Constructor (){} }Class z:_1_U{Var z:Array [Array [Boolean ,0b1],64];Destructor (){}d(_:Array [Array [Array [Boolean ,64],06_0],0B110101];k_y1:Array [Int ,043];_,B,_,c0pE:Array [String ,0x4];Ku,X,J_:Q6){Break ;} }Class J{}Class l:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(___M),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(z),Id(_1_U),[AttributeDecl(Instance,VarDecl(Id(z),ArrayType(64,ArrayType(1,BoolType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(d),Instance,[param(Id(_),ArrayType(53,ArrayType(48,ArrayType(64,BoolType)))),param(Id(k_y1),ArrayType(35,IntType)),param(Id(_),ArrayType(4,StringType)),param(Id(B),ArrayType(4,StringType)),param(Id(_),ArrayType(4,StringType)),param(Id(c0pE),ArrayType(4,StringType)),param(Id(Ku),ClassType(Id(Q6))),param(Id(X),ClassType(Id(Q6))),param(Id(J_),ClassType(Id(Q6)))],Block([Break]))]),ClassDecl(Id(J),[]),ClassDecl(Id(l),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 284))

    def test_285(self):
        line = '''Class __844:_F{Constructor (a,F_,_,x:Float ;aA,ny:Array [Float ,0x60];_89,_,F_q_0:v7L;a,_D:Array [Array [String ,76],76];wv,_70,_M:Int ){}Val $_:Array [Float ,0B11];Var _0,$3X,q:Boolean ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(__844),Id(_F),[MethodDecl(Id(Constructor),Instance,[param(Id(a),FloatType),param(Id(F_),FloatType),param(Id(_),FloatType),param(Id(x),FloatType),param(Id(aA),ArrayType(96,FloatType)),param(Id(ny),ArrayType(96,FloatType)),param(Id(_89),ClassType(Id(v7L))),param(Id(_),ClassType(Id(v7L))),param(Id(F_q_0),ClassType(Id(v7L))),param(Id(a),ArrayType(76,ArrayType(76,StringType))),param(Id(_D),ArrayType(76,ArrayType(76,StringType))),param(Id(wv),IntType),param(Id(_70),IntType),param(Id(_M),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,FloatType),None)),AttributeDecl(Instance,VarDecl(Id(_0),BoolType)),AttributeDecl(Static,VarDecl(Id($3X),BoolType)),AttributeDecl(Instance,VarDecl(Id(q),BoolType))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 285))

    def test_286(self):
        line = '''Class M:I{}Class O{Var $Et:Array [Float ,016];Constructor (_,_,M,m19_,__6,_:Array [Array [Array [String ,0X7_CA],0b101100],0b101100];_:Array [Array [Array [Int ,8],016],5_97];_,_,z:Array [Array [Array [Array [Int ,0B10100],0x4_5],12],12];_0,_,Dj6,_:String ){} }'''
        expect = '''Program([ClassDecl(Id(M),Id(I),[]),ClassDecl(Id(O),[AttributeDecl(Static,VarDecl(Id($Et),ArrayType(14,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(44,ArrayType(44,ArrayType(1994,StringType)))),param(Id(_),ArrayType(44,ArrayType(44,ArrayType(1994,StringType)))),param(Id(M),ArrayType(44,ArrayType(44,ArrayType(1994,StringType)))),param(Id(m19_),ArrayType(44,ArrayType(44,ArrayType(1994,StringType)))),param(Id(__6),ArrayType(44,ArrayType(44,ArrayType(1994,StringType)))),param(Id(_),ArrayType(44,ArrayType(44,ArrayType(1994,StringType)))),param(Id(_),ArrayType(597,ArrayType(14,ArrayType(8,IntType)))),param(Id(_),ArrayType(12,ArrayType(12,ArrayType(69,ArrayType(20,IntType))))),param(Id(_),ArrayType(12,ArrayType(12,ArrayType(69,ArrayType(20,IntType))))),param(Id(z),ArrayType(12,ArrayType(12,ArrayType(69,ArrayType(20,IntType))))),param(Id(_0),StringType),param(Id(_),StringType),param(Id(Dj6),StringType),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 286))

    def test_287(self):
        line = '''Class J:l{}Class _w5{$_(W6__h,_,_1:Float ;N,__,en__:gv2s43ID_;_7_:_;_:String ;F,_:Rv;D_:Array [Array [Boolean ,8_3_2_4],07];_3Re,_,a_,w24_,T_29_60:Array [String ,0b1];B_:_;L9_:Int ;_f,sUc3:Array [Int ,0X5F];_:Array [Boolean ,0X5F];_1,A,C,_:Array [Array [Boolean ,0B1],0B1]){} }'''
        expect = '''Program([ClassDecl(Id(J),Id(l),[]),ClassDecl(Id(_w5),[MethodDecl(Id($_),Static,[param(Id(W6__h),FloatType),param(Id(_),FloatType),param(Id(_1),FloatType),param(Id(N),ClassType(Id(gv2s43ID_))),param(Id(__),ClassType(Id(gv2s43ID_))),param(Id(en__),ClassType(Id(gv2s43ID_))),param(Id(_7_),ClassType(Id(_))),param(Id(_),StringType),param(Id(F),ClassType(Id(Rv))),param(Id(_),ClassType(Id(Rv))),param(Id(D_),ArrayType(7,ArrayType(8324,BoolType))),param(Id(_3Re),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(a_),ArrayType(1,StringType)),param(Id(w24_),ArrayType(1,StringType)),param(Id(T_29_60),ArrayType(1,StringType)),param(Id(B_),ClassType(Id(_))),param(Id(L9_),IntType),param(Id(_f),ArrayType(95,IntType)),param(Id(sUc3),ArrayType(95,IntType)),param(Id(_),ArrayType(95,BoolType)),param(Id(_1),ArrayType(1,ArrayType(1,BoolType))),param(Id(A),ArrayType(1,ArrayType(1,BoolType))),param(Id(C),ArrayType(1,ArrayType(1,BoolType))),param(Id(_),ArrayType(1,ArrayType(1,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 287))

    def test_288(self):
        line = '''Class e{_G__(_K,_:_;m,_,_1,ca_,N8:JDHku0_;U,i4,s_,_,_:A;__:Float ;ed:_5;_,Y,b,a:f_;_N_:Boolean ;__:Float ;_,_S_H3,C:Float ;_t:qw6;_t_,_,p:SOP){ {Continue ;Val Dz7J,_2_488_z,_,_n:_9;} }}Class v{}'''
        expect = '''Program([ClassDecl(Id(e),[MethodDecl(Id(_G__),Instance,[param(Id(_K),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(m),ClassType(Id(JDHku0_))),param(Id(_),ClassType(Id(JDHku0_))),param(Id(_1),ClassType(Id(JDHku0_))),param(Id(ca_),ClassType(Id(JDHku0_))),param(Id(N8),ClassType(Id(JDHku0_))),param(Id(U),ClassType(Id(A))),param(Id(i4),ClassType(Id(A))),param(Id(s_),ClassType(Id(A))),param(Id(_),ClassType(Id(A))),param(Id(_),ClassType(Id(A))),param(Id(__),FloatType),param(Id(ed),ClassType(Id(_5))),param(Id(_),ClassType(Id(f_))),param(Id(Y),ClassType(Id(f_))),param(Id(b),ClassType(Id(f_))),param(Id(a),ClassType(Id(f_))),param(Id(_N_),BoolType),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(_S_H3),FloatType),param(Id(C),FloatType),param(Id(_t),ClassType(Id(qw6))),param(Id(_t_),ClassType(Id(SOP))),param(Id(_),ClassType(Id(SOP))),param(Id(p),ClassType(Id(SOP)))],Block([Block([Continue,ConstDecl(Id(Dz7J),ClassType(Id(_9)),None),ConstDecl(Id(_2_488_z),ClassType(Id(_9)),None),ConstDecl(Id(_),ClassType(Id(_9)),None),ConstDecl(Id(_n),ClassType(Id(_9)),None)])]))]),ClassDecl(Id(v),[])])'''
        self.assertTrue(TestAST.test(line, expect, 288))

    def test_289(self):
        line = '''Class I1:k{Val D,h:Int ;_1(_:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,07_6],0B1],05],070],0x9],0B10],15],2],0B1100010];_M_:_){}_(JEp4,_:Int ){} }Class __3O:i9{}'''
        expect = '''Program([ClassDecl(Id(I1),Id(k),[AttributeDecl(Instance,ConstDecl(Id(D),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(h),IntType,None)),MethodDecl(Id(_1),Instance,[param(Id(_),ArrayType(98,ArrayType(2,ArrayType(15,ArrayType(2,ArrayType(9,ArrayType(56,ArrayType(5,ArrayType(1,ArrayType(62,StringType)))))))))),param(Id(_M_),ClassType(Id(_)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(JEp4),IntType),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(__3O),Id(i9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 289))

    def test_290(self):
        line = '''Class _01004_{}Class _K__Hi_{Constructor (R:Array [Array [Array [Boolean ,24],0b1010100],047];px_o:String ;_y7_0,_Eh4,S_,_,_,F:Array [Array [Array [Array [Boolean ,0X64],0XB],0XB],047];_:dD4D;x4_j_i6I:Boolean ;B,_w:W){} }Class g_2:__{}Class _{Val _,$7_6V9,hy:Array [Array [String ,017147],03];}Class xE:eA{}'''
        expect = '''Program([ClassDecl(Id(_01004_),[]),ClassDecl(Id(_K__Hi_),[MethodDecl(Id(Constructor),Instance,[param(Id(R),ArrayType(39,ArrayType(84,ArrayType(24,BoolType)))),param(Id(px_o),StringType),param(Id(_y7_0),ArrayType(39,ArrayType(11,ArrayType(11,ArrayType(100,BoolType))))),param(Id(_Eh4),ArrayType(39,ArrayType(11,ArrayType(11,ArrayType(100,BoolType))))),param(Id(S_),ArrayType(39,ArrayType(11,ArrayType(11,ArrayType(100,BoolType))))),param(Id(_),ArrayType(39,ArrayType(11,ArrayType(11,ArrayType(100,BoolType))))),param(Id(_),ArrayType(39,ArrayType(11,ArrayType(11,ArrayType(100,BoolType))))),param(Id(F),ArrayType(39,ArrayType(11,ArrayType(11,ArrayType(100,BoolType))))),param(Id(_),ClassType(Id(dD4D))),param(Id(x4_j_i6I),BoolType),param(Id(B),ClassType(Id(W))),param(Id(_w),ClassType(Id(W)))],Block([]))]),ClassDecl(Id(g_2),Id(__),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3,ArrayType(7783,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($7_6V9),ArrayType(3,ArrayType(7783,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(hy),ArrayType(3,ArrayType(7783,StringType)),None))]),ClassDecl(Id(xE),Id(eA),[])])'''
        self.assertTrue(TestAST.test(line, expect, 290))

    def test_291(self):
        line = '''Class O1:_{}Class _{}Class O57:Z{}Class _7D9_{_(){}Val $_X7I:KM52;Constructor (_F,AGX_,_:Array [Array [Array [String ,48],0B110],0b1];T,_J,EX0,_2_433:Array [Float ,16];W,_,_7_N__R_1J,c:Boolean ){}Val $Y,$4_,_,$1_,r:Float ;}'''
        expect = '''Program([ClassDecl(Id(O1),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(O57),Id(Z),[]),ClassDecl(Id(_7D9_),[MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_X7I),ClassType(Id(KM52)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_F),ArrayType(1,ArrayType(6,ArrayType(48,StringType)))),param(Id(AGX_),ArrayType(1,ArrayType(6,ArrayType(48,StringType)))),param(Id(_),ArrayType(1,ArrayType(6,ArrayType(48,StringType)))),param(Id(T),ArrayType(16,FloatType)),param(Id(_J),ArrayType(16,FloatType)),param(Id(EX0),ArrayType(16,FloatType)),param(Id(_2_433),ArrayType(16,FloatType)),param(Id(W),BoolType),param(Id(_),BoolType),param(Id(_7_N__R_1J),BoolType),param(Id(c),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($Y),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($4_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($1_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(r),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 291))

    def test_292(self):
        line = '''Class _{_A__(K8:Array [Array [Boolean ,014_7_7],0X10];c,h_8,_6s,_,a6,j,_:Int ){U::$_Q.t_9();}Constructor (H,S,_8:Array [Array [Array [Array [Float ,0x4B],1_7],75],0112]){} }Class ___KBb__{Var $4,$NE2_f:Int ;}Class __fA{}Class a{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_A__),Instance,[param(Id(K8),ArrayType(16,ArrayType(831,BoolType))),param(Id(c),IntType),param(Id(h_8),IntType),param(Id(_6s),IntType),param(Id(_),IntType),param(Id(a6),IntType),param(Id(j),IntType),param(Id(_),IntType)],Block([Call(FieldAccess(Id(U),Id($_Q)),Id(t_9),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(H),ArrayType(74,ArrayType(75,ArrayType(17,ArrayType(75,FloatType))))),param(Id(S),ArrayType(74,ArrayType(75,ArrayType(17,ArrayType(75,FloatType))))),param(Id(_8),ArrayType(74,ArrayType(75,ArrayType(17,ArrayType(75,FloatType)))))],Block([]))]),ClassDecl(Id(___KBb__),[AttributeDecl(Static,VarDecl(Id($4),IntType)),AttributeDecl(Static,VarDecl(Id($NE2_f),IntType))]),ClassDecl(Id(__fA),[]),ClassDecl(Id(a),[])])'''
        self.assertTrue(TestAST.test(line, expect, 292))

    def test_293(self):
        line = '''Class _:b{Destructor (){ {} }PmB(){} }Class _{Val $7J33,$_:__;Var L:_;_(_:Boolean ){}_(F__,M4,_5,Qw9:Array [Array [Float ,0B1_1_1_1],02];H1,_:Array [Array [Float ,0B1_0_00],0B10];_:String ;_H5,__t1,__,_H:Array [Array [Array [Array [Int ,76],0x5B],0X2F],05];T:Int ;L,jm:Array [Float ,3_9_7_07]){}Constructor (_:_){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(b),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(PmB),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($7J33),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__)),None)),AttributeDecl(Instance,VarDecl(Id(L),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(_),Instance,[param(Id(_),BoolType)],Block([])),MethodDecl(Id(_),Instance,[param(Id(F__),ArrayType(2,ArrayType(15,FloatType))),param(Id(M4),ArrayType(2,ArrayType(15,FloatType))),param(Id(_5),ArrayType(2,ArrayType(15,FloatType))),param(Id(Qw9),ArrayType(2,ArrayType(15,FloatType))),param(Id(H1),ArrayType(2,ArrayType(8,FloatType))),param(Id(_),ArrayType(2,ArrayType(8,FloatType))),param(Id(_),StringType),param(Id(_H5),ArrayType(5,ArrayType(47,ArrayType(91,ArrayType(76,IntType))))),param(Id(__t1),ArrayType(5,ArrayType(47,ArrayType(91,ArrayType(76,IntType))))),param(Id(__),ArrayType(5,ArrayType(47,ArrayType(91,ArrayType(76,IntType))))),param(Id(_H),ArrayType(5,ArrayType(47,ArrayType(91,ArrayType(76,IntType))))),param(Id(T),IntType),param(Id(L),ArrayType(39707,FloatType)),param(Id(jm),ArrayType(39707,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 293))

    def test_294(self):
        line = '''Class D{Val $0:Float ;D(U5,A,_,N5_:e){p::$N3();}Var m3:H79;Val $_:String ;}Class _:_{Constructor (R:Int ;h,W:R;q_,_4:_;L:Boolean ){}Constructor (){}Var _,$_6,B_8:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(D),[AttributeDecl(Static,ConstDecl(Id($0),FloatType,None)),MethodDecl(Id(D),Instance,[param(Id(U5),ClassType(Id(e))),param(Id(A),ClassType(Id(e))),param(Id(_),ClassType(Id(e))),param(Id(N5_),ClassType(Id(e)))],Block([Call(Id(p),Id($N3),[])])),AttributeDecl(Instance,VarDecl(Id(m3),ClassType(Id(H79)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),StringType,None))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(R),IntType),param(Id(h),ClassType(Id(R))),param(Id(W),ClassType(Id(R))),param(Id(q_),ClassType(Id(_))),param(Id(_4),ClassType(Id(_))),param(Id(L),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,VarDecl(Id($_6),BoolType)),AttributeDecl(Instance,VarDecl(Id(B_8),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 294))

    def test_295(self):
        line = '''Class M_:kTQ_{}Class i_:_w{Constructor (o:Array [Array [String ,0X64],0x6]){} }Class _:_1x{Constructor (_,t:Boolean ;__:Int ){Return ;{} }}Class G4{}Class _H9m:_0_{}Class c_{Destructor (){}Var $x:Float ;}Class L_{}Class __{}Class _0:__{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(M_),Id(kTQ_),[]),ClassDecl(Id(i_),Id(_w),[MethodDecl(Id(Constructor),Instance,[param(Id(o),ArrayType(6,ArrayType(100,StringType)))],Block([]))]),ClassDecl(Id(_),Id(_1x),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(t),BoolType),param(Id(__),IntType)],Block([Return(),Block([])]))]),ClassDecl(Id(G4),[]),ClassDecl(Id(_H9m),Id(_0_),[]),ClassDecl(Id(c_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($x),FloatType))]),ClassDecl(Id(L_),[]),ClassDecl(Id(__),[]),ClassDecl(Id(_0),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 295))

    def test_296(self):
        line = '''Class y:J{Var $8_:String ;}Class _2_E{$___(_3,_MR:Array [String ,0X3B];_:Float ){} }Class _:_4{}Class _:_{Constructor (){} }Class _I:qZ{}Class _{Destructor (){}Val $x:i_;}'''
        expect = '''Program([ClassDecl(Id(y),Id(J),[AttributeDecl(Static,VarDecl(Id($8_),StringType))]),ClassDecl(Id(_2_E),[MethodDecl(Id($___),Static,[param(Id(_3),ArrayType(59,StringType)),param(Id(_MR),ArrayType(59,StringType)),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(_),Id(_4),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_I),Id(qZ),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($x),ClassType(Id(i_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 296))

    def test_297(self):
        line = '''Class A__z8:_{r0(_,Bk,_n:Array [Boolean ,02];dK:Array [Array [Float ,0X37],0x47]){Return ;Val _61j54h,_4,_N:String ;Return ;} }Class B3{}Class T_V_3L93b__:L28{}Class E4__5G{}Class o5533{}'''
        expect = '''Program([ClassDecl(Id(A__z8),Id(_),[MethodDecl(Id(r0),Instance,[param(Id(_),ArrayType(2,BoolType)),param(Id(Bk),ArrayType(2,BoolType)),param(Id(_n),ArrayType(2,BoolType)),param(Id(dK),ArrayType(71,ArrayType(55,FloatType)))],Block([Return(),ConstDecl(Id(_61j54h),StringType,None),ConstDecl(Id(_4),StringType,None),ConstDecl(Id(_N),StringType,None),Return()]))]),ClassDecl(Id(B3),[]),ClassDecl(Id(T_V_3L93b__),Id(L28),[]),ClassDecl(Id(E4__5G),[]),ClassDecl(Id(o5533),[])])'''
        self.assertTrue(TestAST.test(line, expect, 297))

    def test_298(self):
        line = '''Class s{Constructor (E_:Array [Array [Array [Array [Array [Array [String ,45],043],0X34],043],0B1],0B1];P:String ;_2___:t;_6:_5){} }Class _{Var $C,$b,$_K_,U:Float ;}Class A{Val V_Q:Int ;}'''
        expect = '''Program([ClassDecl(Id(s),[MethodDecl(Id(Constructor),Instance,[param(Id(E_),ArrayType(1,ArrayType(1,ArrayType(35,ArrayType(52,ArrayType(35,ArrayType(45,StringType))))))),param(Id(P),StringType),param(Id(_2___),ClassType(Id(t))),param(Id(_6),ClassType(Id(_5)))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($C),FloatType)),AttributeDecl(Static,VarDecl(Id($b),FloatType)),AttributeDecl(Static,VarDecl(Id($_K_),FloatType)),AttributeDecl(Instance,VarDecl(Id(U),FloatType))]),ClassDecl(Id(A),[AttributeDecl(Instance,ConstDecl(Id(V_Q),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 298))

    def test_299(self):
        line = '''Class A:c{Val z_P:Float ;Constructor (p4S,__:Int ;_,_,d_:X2xZ2;_30__,__:Array [Array [Int ,0X4AE],0B11111]){}Destructor (){}Destructor (){}Destructor (){} }Class __{}Class h51{}Class N{}'''
        expect = '''Program([ClassDecl(Id(A),Id(c),[AttributeDecl(Instance,ConstDecl(Id(z_P),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(p4S),IntType),param(Id(__),IntType),param(Id(_),ClassType(Id(X2xZ2))),param(Id(_),ClassType(Id(X2xZ2))),param(Id(d_),ClassType(Id(X2xZ2))),param(Id(_30__),ArrayType(31,ArrayType(1198,IntType))),param(Id(__),ArrayType(31,ArrayType(1198,IntType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(h51),[]),ClassDecl(Id(N),[])])'''
        self.assertTrue(TestAST.test(line, expect, 299))

    def test_300(self):
        line = '''Class _K:M{}Class i5{Destructor (){} }Class V:t{Destructor (){Var _:Array [Boolean ,0xF_F_8];}Destructor (){} }Class u_{Constructor (_:__0){} }Class __:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_K),Id(M),[]),ClassDecl(Id(i5),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(V),Id(t),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(_),ArrayType(4088,BoolType))])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(u_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__0)))],Block([]))]),ClassDecl(Id(__),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 300))

    def test_301(self):
        line = '''Class k{}Class zy_w:_13{Var Q_91ee_,N_,__:Array [Array [Array [String ,0111],0111],0x2];Val ___o,$8:Array [Array [Int ,82],82];$r(){}Destructor (){} }Class _:ri{Var $_:__3;Var $uY:Int ;}'''
        expect = '''Program([ClassDecl(Id(k),[]),ClassDecl(Id(zy_w),Id(_13),[AttributeDecl(Instance,VarDecl(Id(Q_91ee_),ArrayType(2,ArrayType(73,ArrayType(73,StringType))))),AttributeDecl(Instance,VarDecl(Id(N_),ArrayType(2,ArrayType(73,ArrayType(73,StringType))))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(2,ArrayType(73,ArrayType(73,StringType))))),AttributeDecl(Instance,ConstDecl(Id(___o),ArrayType(82,ArrayType(82,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(82,ArrayType(82,IntType)),None)),MethodDecl(Id($r),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(ri),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(__3)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($uY),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 301))

    def test_302(self):
        line = '''Class CYX{Val g,$D4z__,$_,F_,p,$_:__;Destructor (){} }Class _:s{Destructor (){Var mH:Array [Array [Array [Boolean ,0B1],42],0b110010];Break ;nZ__N::$5f()._.R.a8();} }Class xG{}'''
        expect = '''Program([ClassDecl(Id(CYX),[AttributeDecl(Instance,ConstDecl(Id(g),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($D4z__),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(F_),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(p),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__)),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(s),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(mH),ArrayType(50,ArrayType(42,ArrayType(1,BoolType)))),Break,Call(FieldAccess(FieldAccess(CallExpr(Id(nZ__N),Id($5f),[]),Id(_)),Id(R)),Id(a8),[])]))]),ClassDecl(Id(xG),[])])'''
        self.assertTrue(TestAST.test(line, expect, 302))

    def test_303(self):
        line = '''Class r:__P{Constructor (){ {} }}Class _{Constructor (I:Array [Array [Array [String ,016],3],016];_Y:p){}Destructor (){}Var $P,Z:Float ;}Class k08:_l{Val q,l,$23,X_,$q6D_,_,U0o:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(r),Id(__P),[MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(I),ArrayType(14,ArrayType(3,ArrayType(14,StringType)))),param(Id(_Y),ClassType(Id(p)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($P),FloatType)),AttributeDecl(Instance,VarDecl(Id(Z),FloatType))]),ClassDecl(Id(k08),Id(_l),[AttributeDecl(Instance,ConstDecl(Id(q),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(l),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($23),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(X_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($q6D_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(U0o),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 303))

    def test_304(self):
        line = '''Class _:_4{Var $2,M_:Int ;Destructor (){Var H4i,QY,_:_i9__;}$4(_IS:Int ;el:Boolean ;_:c;n:Int ;_,S:Boolean ;SU,_,__9:Float ;V_x,_:Boolean ;__:_;h,_:_;b:String ;___6,_O,P1:Y_C){}Val $_:String ;}Class Q:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_4),[AttributeDecl(Static,VarDecl(Id($2),IntType)),AttributeDecl(Instance,VarDecl(Id(M_),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(H4i),ClassType(Id(_i9__)),NullLiteral()),VarDecl(Id(QY),ClassType(Id(_i9__)),NullLiteral()),VarDecl(Id(_),ClassType(Id(_i9__)),NullLiteral())])),MethodDecl(Id($4),Static,[param(Id(_IS),IntType),param(Id(el),BoolType),param(Id(_),ClassType(Id(c))),param(Id(n),IntType),param(Id(_),BoolType),param(Id(S),BoolType),param(Id(SU),FloatType),param(Id(_),FloatType),param(Id(__9),FloatType),param(Id(V_x),BoolType),param(Id(_),BoolType),param(Id(__),ClassType(Id(_))),param(Id(h),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(b),StringType),param(Id(___6),ClassType(Id(Y_C))),param(Id(_O),ClassType(Id(Y_C))),param(Id(P1),ClassType(Id(Y_C)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),StringType,None))]),ClassDecl(Id(Q),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 304))

    def test_305(self):
        line = '''Class C{Val _:Int ;Var $_L,j,_:Boolean ;$_(A_,_:Boolean ;_:Array [Array [String ,4_2],0b1];D2u,_,p7:Array [Array [Array [Array [Int ,0X8_4],0b1],0X39],55];I:Boolean ){}$_(_:Array [Float ,07];J,B_vB_,L5oCh,a:Array [Array [String ,027],0x15];c7iP_3,e:Int ){} }Class v_:_{}'''
        expect = '''Program([ClassDecl(Id(C),[AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,VarDecl(Id($_L),BoolType)),AttributeDecl(Instance,VarDecl(Id(j),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id($_),Static,[param(Id(A_),BoolType),param(Id(_),BoolType),param(Id(_),ArrayType(1,ArrayType(42,StringType))),param(Id(D2u),ArrayType(55,ArrayType(57,ArrayType(1,ArrayType(132,IntType))))),param(Id(_),ArrayType(55,ArrayType(57,ArrayType(1,ArrayType(132,IntType))))),param(Id(p7),ArrayType(55,ArrayType(57,ArrayType(1,ArrayType(132,IntType))))),param(Id(I),BoolType)],Block([])),MethodDecl(Id($_),Static,[param(Id(_),ArrayType(7,FloatType)),param(Id(J),ArrayType(21,ArrayType(23,StringType))),param(Id(B_vB_),ArrayType(21,ArrayType(23,StringType))),param(Id(L5oCh),ArrayType(21,ArrayType(23,StringType))),param(Id(a),ArrayType(21,ArrayType(23,StringType))),param(Id(c7iP_3),IntType),param(Id(e),IntType)],Block([]))]),ClassDecl(Id(v_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 305))

    def test_306(self):
        line = '''Class P:W{}Class nb{Var $6b_0_:Array [Boolean ,86];Constructor (L0:String ;_F_,H6,_,z:Array [Array [Array [Boolean ,03],0b1_0_0],0B111];_,B:_;__F_fCI81t:J4){Break ;} }Class s1_8e{}'''
        expect = '''Program([ClassDecl(Id(P),Id(W),[]),ClassDecl(Id(nb),[AttributeDecl(Static,VarDecl(Id($6b_0_),ArrayType(86,BoolType))),MethodDecl(Id(Constructor),Instance,[param(Id(L0),StringType),param(Id(_F_),ArrayType(7,ArrayType(4,ArrayType(3,BoolType)))),param(Id(H6),ArrayType(7,ArrayType(4,ArrayType(3,BoolType)))),param(Id(_),ArrayType(7,ArrayType(4,ArrayType(3,BoolType)))),param(Id(z),ArrayType(7,ArrayType(4,ArrayType(3,BoolType)))),param(Id(_),ClassType(Id(_))),param(Id(B),ClassType(Id(_))),param(Id(__F_fCI81t),ClassType(Id(J4)))],Block([Break]))]),ClassDecl(Id(s1_8e),[])])'''
        self.assertTrue(TestAST.test(line, expect, 306))

    def test_307(self):
        line = '''Class ii__yRs{Constructor (){} }Class b{Val W,$_,_6q:Boolean ;Var n_,_:String ;Constructor (){Return ;}Val $Z:Array [Boolean ,0XF];_(){}Var $2M,$7z2pQR__0_:Array [Array [Array [Boolean ,651_24],0X5F],0X1_FA];}'''
        expect = '''Program([ClassDecl(Id(ii__yRs),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(b),[AttributeDecl(Instance,ConstDecl(Id(W),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_6q),BoolType,None)),AttributeDecl(Instance,VarDecl(Id(n_),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),MethodDecl(Id(Constructor),Instance,[],Block([Return()])),AttributeDecl(Static,ConstDecl(Id($Z),ArrayType(15,BoolType),None)),MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($2M),ArrayType(506,ArrayType(95,ArrayType(65124,BoolType))))),AttributeDecl(Static,VarDecl(Id($7z2pQR__0_),ArrayType(506,ArrayType(95,ArrayType(65124,BoolType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 307))

    def test_308(self):
        line = '''Class f_O:Md{}Class _:_{}Class _J:e{$w(m,_,W_54P,_,S7_,i:Array [Array [Array [Array [String ,0x3FA],72],0x6],0115];a_b:Array [Boolean ,0b1];Wr,p,__:Array [Array [Int ,0115],0x6];_:Array [String ,72];V,_:T;_,_:Array [Array [Array [Int ,0XE],0115],07_4];v,_Z_:Array [Float ,0115];_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(f_O),Id(Md),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_J),Id(e),[MethodDecl(Id($w),Static,[param(Id(m),ArrayType(77,ArrayType(6,ArrayType(72,ArrayType(1018,StringType))))),param(Id(_),ArrayType(77,ArrayType(6,ArrayType(72,ArrayType(1018,StringType))))),param(Id(W_54P),ArrayType(77,ArrayType(6,ArrayType(72,ArrayType(1018,StringType))))),param(Id(_),ArrayType(77,ArrayType(6,ArrayType(72,ArrayType(1018,StringType))))),param(Id(S7_),ArrayType(77,ArrayType(6,ArrayType(72,ArrayType(1018,StringType))))),param(Id(i),ArrayType(77,ArrayType(6,ArrayType(72,ArrayType(1018,StringType))))),param(Id(a_b),ArrayType(1,BoolType)),param(Id(Wr),ArrayType(6,ArrayType(77,IntType))),param(Id(p),ArrayType(6,ArrayType(77,IntType))),param(Id(__),ArrayType(6,ArrayType(77,IntType))),param(Id(_),ArrayType(72,StringType)),param(Id(V),ClassType(Id(T))),param(Id(_),ClassType(Id(T))),param(Id(_),ArrayType(60,ArrayType(77,ArrayType(14,IntType)))),param(Id(_),ArrayType(60,ArrayType(77,ArrayType(14,IntType)))),param(Id(v),ArrayType(77,FloatType)),param(Id(_Z_),ArrayType(77,FloatType)),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 308))

    def test_309(self):
        line = '''Class _3_1_t{Constructor (O_:Boolean ){Var z4,_,y:Array [String ,55];}Constructor (mu,S:d___ua9vA;t,_:Boolean ;FZ_,_,R3,_S,_,V_c__,_,I,_,T:Boolean ;_,p5_a_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_3_1_t),[MethodDecl(Id(Constructor),Instance,[param(Id(O_),BoolType)],Block([VarDecl(Id(z4),ArrayType(55,StringType)),VarDecl(Id(_),ArrayType(55,StringType)),VarDecl(Id(y),ArrayType(55,StringType))])),MethodDecl(Id(Constructor),Instance,[param(Id(mu),ClassType(Id(d___ua9vA))),param(Id(S),ClassType(Id(d___ua9vA))),param(Id(t),BoolType),param(Id(_),BoolType),param(Id(FZ_),BoolType),param(Id(_),BoolType),param(Id(R3),BoolType),param(Id(_S),BoolType),param(Id(_),BoolType),param(Id(V_c__),BoolType),param(Id(_),BoolType),param(Id(I),BoolType),param(Id(_),BoolType),param(Id(T),BoolType),param(Id(_),IntType),param(Id(p5_a_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 309))

    def test_310(self):
        line = '''Class _b{Val $Aur_,$_3_,$t,_,e,$1,f_:c14_m;}Class s3{$_(){}Var $6,$N_,$_:Array [Array [Array [String ,0XD],0x26],0B1000011];}Class _:H{a(X,_N8,_4k7:Array [Array [Boolean ,06],9];__u0m_,_:FF_;_,_,_802L_3_:String ){}Val _C,$61:Boolean ;}Class l:C{}'''
        expect = '''Program([ClassDecl(Id(_b),[AttributeDecl(Static,ConstDecl(Id($Aur_),ClassType(Id(c14_m)),None)),AttributeDecl(Static,ConstDecl(Id($_3_),ClassType(Id(c14_m)),None)),AttributeDecl(Static,ConstDecl(Id($t),ClassType(Id(c14_m)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(c14_m)),None)),AttributeDecl(Instance,ConstDecl(Id(e),ClassType(Id(c14_m)),None)),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(c14_m)),None)),AttributeDecl(Instance,ConstDecl(Id(f_),ClassType(Id(c14_m)),None))]),ClassDecl(Id(s3),[MethodDecl(Id($_),Static,[],Block([])),AttributeDecl(Static,VarDecl(Id($6),ArrayType(67,ArrayType(38,ArrayType(13,StringType))))),AttributeDecl(Static,VarDecl(Id($N_),ArrayType(67,ArrayType(38,ArrayType(13,StringType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(67,ArrayType(38,ArrayType(13,StringType)))))]),ClassDecl(Id(_),Id(H),[MethodDecl(Id(a),Instance,[param(Id(X),ArrayType(9,ArrayType(6,BoolType))),param(Id(_N8),ArrayType(9,ArrayType(6,BoolType))),param(Id(_4k7),ArrayType(9,ArrayType(6,BoolType))),param(Id(__u0m_),ClassType(Id(FF_))),param(Id(_),ClassType(Id(FF_))),param(Id(_),StringType),param(Id(_),StringType),param(Id(_802L_3_),StringType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_C),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($61),BoolType,None))]),ClassDecl(Id(l),Id(C),[])])'''
        self.assertTrue(TestAST.test(line, expect, 310))

    def test_311(self):
        line = '''Class B_{Destructor (){}Constructor (i9_:String ;r0_:Array [Boolean ,0b11100];_,__V:y;_3KMCN:Array [Array [Array [Array [Array [Int ,0B1000],0X19],0XB],21],0B1000];_S_,_,_C:Array [Array [Int ,0x31],037];q:Array [Array [Int ,02],037];p,_:Array [Array [Array [Boolean ,0b1_1],0x31],0B1_00_1_1]){} }Class s_:b{}'''
        expect = '''Program([ClassDecl(Id(B_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(i9_),StringType),param(Id(r0_),ArrayType(28,BoolType)),param(Id(_),ClassType(Id(y))),param(Id(__V),ClassType(Id(y))),param(Id(_3KMCN),ArrayType(8,ArrayType(21,ArrayType(11,ArrayType(25,ArrayType(8,IntType)))))),param(Id(_S_),ArrayType(31,ArrayType(49,IntType))),param(Id(_),ArrayType(31,ArrayType(49,IntType))),param(Id(_C),ArrayType(31,ArrayType(49,IntType))),param(Id(q),ArrayType(31,ArrayType(2,IntType))),param(Id(p),ArrayType(19,ArrayType(49,ArrayType(3,BoolType)))),param(Id(_),ArrayType(19,ArrayType(49,ArrayType(3,BoolType))))],Block([]))]),ClassDecl(Id(s_),Id(b),[])])'''
        self.assertTrue(TestAST.test(line, expect, 311))

    def test_312(self):
        line = '''Class _2R{Destructor (){}A(_:_f;_:String ){}Val $Nk:__;}Class _:_{Val ___,$E:__;Val __,$689,$9_4:V;}Class A0{Destructor (){ {} }Constructor (){}$_6L6(___T,x:Array [Array [Array [String ,0B1000100],0100],0b1]){}Var _2_54_I1_,s,_,py:_P;}Class c:W{}'''
        expect = '''Program([ClassDecl(Id(_2R),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(A),Instance,[param(Id(_),ClassType(Id(_f))),param(Id(_),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($Nk),ClassType(Id(__)),None))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(___),ClassType(Id(__)),None)),AttributeDecl(Static,ConstDecl(Id($E),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(V)),None)),AttributeDecl(Static,ConstDecl(Id($689),ClassType(Id(V)),None)),AttributeDecl(Static,ConstDecl(Id($9_4),ClassType(Id(V)),None))]),ClassDecl(Id(A0),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($_6L6),Static,[param(Id(___T),ArrayType(1,ArrayType(64,ArrayType(68,StringType)))),param(Id(x),ArrayType(1,ArrayType(64,ArrayType(68,StringType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(_2_54_I1_),ClassType(Id(_P)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(s),ClassType(Id(_P)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_P)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(py),ClassType(Id(_P)),NullLiteral()))]),ClassDecl(Id(c),Id(W),[])])'''
        self.assertTrue(TestAST.test(line, expect, 312))

    def test_313(self):
        line = '''Class vf:_{Val $s_s:Array [Array [Float ,0B1],02];Constructor (u:Array [Float ,1];O,_:Ch;r9:Array [Array [String ,0x50],3];JW:Array [Array [Int ,0x3],0b111000]){}$Q(_:_7){} }Class _{Var _,$B,__:J22OZ;}'''
        expect = '''Program([ClassDecl(Id(vf),Id(_),[AttributeDecl(Static,ConstDecl(Id($s_s),ArrayType(2,ArrayType(1,FloatType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(u),ArrayType(1,FloatType)),param(Id(O),ClassType(Id(Ch))),param(Id(_),ClassType(Id(Ch))),param(Id(r9),ArrayType(3,ArrayType(80,StringType))),param(Id(JW),ArrayType(56,ArrayType(3,IntType)))],Block([])),MethodDecl(Id($Q),Static,[param(Id(_),ClassType(Id(_7)))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(J22OZ)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($B),ClassType(Id(J22OZ)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(J22OZ)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 313))

    def test_314(self):
        line = '''Class i{Constructor (_,v:Array [Array [Array [Int ,0X5_7_49],0117],0X43];_71,V_,_:_;_,__,u,_,_or,k,_B_,ri,_,__:Array [Array [Array [Float ,0x52],0X1_1],07_3]){}Val H,_,e__8S,$_Oy_,$___:K_;}'''
        expect = '''Program([ClassDecl(Id(i),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(67,ArrayType(79,ArrayType(22345,IntType)))),param(Id(v),ArrayType(67,ArrayType(79,ArrayType(22345,IntType)))),param(Id(_71),ClassType(Id(_))),param(Id(V_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(__),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(u),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(_),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(_or),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(k),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(_B_),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(ri),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(_),ArrayType(59,ArrayType(17,ArrayType(82,FloatType)))),param(Id(__),ArrayType(59,ArrayType(17,ArrayType(82,FloatType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(H),ClassType(Id(K_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(K_)),None)),AttributeDecl(Instance,ConstDecl(Id(e__8S),ClassType(Id(K_)),None)),AttributeDecl(Static,ConstDecl(Id($_Oy_),ClassType(Id(K_)),None)),AttributeDecl(Static,ConstDecl(Id($___),ClassType(Id(K_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 314))

    def test_315(self):
        line = '''Class _E:r{Val R,_X:Array [Array [Boolean ,020_6],035];Var s7,$_K:String ;$9_(M4:Array [Array [Array [Array [Array [Array [Float ,0B1],0xF],035],06623_63],6],0x9];_,_,O:Array [Boolean ,035];_:String ;b:Float ;N:Array [Int ,0X16];_,_,__W_4:Array [Int ,04_7]){} }'''
        expect = '''Program([ClassDecl(Id(_E),Id(r),[AttributeDecl(Instance,ConstDecl(Id(R),ArrayType(29,ArrayType(134,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_X),ArrayType(29,ArrayType(134,BoolType)),None)),AttributeDecl(Instance,VarDecl(Id(s7),StringType)),AttributeDecl(Static,VarDecl(Id($_K),StringType)),MethodDecl(Id($9_),Static,[param(Id(M4),ArrayType(9,ArrayType(6,ArrayType(222451,ArrayType(29,ArrayType(15,ArrayType(1,FloatType))))))),param(Id(_),ArrayType(29,BoolType)),param(Id(_),ArrayType(29,BoolType)),param(Id(O),ArrayType(29,BoolType)),param(Id(_),StringType),param(Id(b),FloatType),param(Id(N),ArrayType(22,IntType)),param(Id(_),ArrayType(39,IntType)),param(Id(_),ArrayType(39,IntType)),param(Id(__W_4),ArrayType(39,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 315))

    def test_316(self):
        line = '''Class _{$W5(_:Float ;_,_,_QK,_:_;_:Int ;f_,_o8u3,Vh7y:Int ;jb,k_be,z,k6:Float ;b0_:Array [Array [Int ,3_2],71];b94_:String ;L6:String ;__0:Int ;_:Int ){Return ;}Val _,$O:String ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($W5),Static,[param(Id(_),FloatType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_QK),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),IntType),param(Id(f_),IntType),param(Id(_o8u3),IntType),param(Id(Vh7y),IntType),param(Id(jb),FloatType),param(Id(k_be),FloatType),param(Id(z),FloatType),param(Id(k6),FloatType),param(Id(b0_),ArrayType(71,ArrayType(32,IntType))),param(Id(b94_),StringType),param(Id(L6),StringType),param(Id(__0),IntType),param(Id(_),IntType)],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($O),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 316))

    def test_317(self):
        line = '''Class M:_l_{}Class Wo43g_{$_(q,CP,E:e4){} }Class _f5x:r{Constructor (iI1b_l__:Ri_;o77,O,j,_5:String ;_:Float ;y,u1_r:Int ;___:Array [Array [String ,0B1],07]){}Var $6_P,oG:e;}'''
        expect = '''Program([ClassDecl(Id(M),Id(_l_),[]),ClassDecl(Id(Wo43g_),[MethodDecl(Id($_),Static,[param(Id(q),ClassType(Id(e4))),param(Id(CP),ClassType(Id(e4))),param(Id(E),ClassType(Id(e4)))],Block([]))]),ClassDecl(Id(_f5x),Id(r),[MethodDecl(Id(Constructor),Instance,[param(Id(iI1b_l__),ClassType(Id(Ri_))),param(Id(o77),StringType),param(Id(O),StringType),param(Id(j),StringType),param(Id(_5),StringType),param(Id(_),FloatType),param(Id(y),IntType),param(Id(u1_r),IntType),param(Id(___),ArrayType(7,ArrayType(1,StringType)))],Block([])),AttributeDecl(Static,VarDecl(Id($6_P),ClassType(Id(e)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(oG),ClassType(Id(e)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 317))

    def test_318(self):
        line = '''Class _2{}Class n__3:r{Destructor (){}Var $Bp6_W58,$Hb,$s,$683,$Y_:Array [Array [Array [Array [Array [Array [Array [Array [String ,0b1],052],06],79],057],0b1_0101],79],79];}'''
        expect = '''Program([ClassDecl(Id(_2),[]),ClassDecl(Id(n__3),Id(r),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($Bp6_W58),ArrayType(79,ArrayType(79,ArrayType(21,ArrayType(47,ArrayType(79,ArrayType(6,ArrayType(42,ArrayType(1,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($Hb),ArrayType(79,ArrayType(79,ArrayType(21,ArrayType(47,ArrayType(79,ArrayType(6,ArrayType(42,ArrayType(1,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($s),ArrayType(79,ArrayType(79,ArrayType(21,ArrayType(47,ArrayType(79,ArrayType(6,ArrayType(42,ArrayType(1,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($683),ArrayType(79,ArrayType(79,ArrayType(21,ArrayType(47,ArrayType(79,ArrayType(6,ArrayType(42,ArrayType(1,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($Y_),ArrayType(79,ArrayType(79,ArrayType(21,ArrayType(47,ArrayType(79,ArrayType(6,ArrayType(42,ArrayType(1,StringType))))))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 318))

    def test_319(self):
        line = '''Class st{}Class w{}Class _34:I{}Class y:_{}Class _{}Class _{$S383(i,__4_M:Array [Array [Array [Float ,0B1_1],0X7],0xF];Wu35__8GdJ:P9;__,c,B,_8_:Boolean ;o,X:g;_1,I_:Boolean ;c,b,__:Int ;_t,_:String ){} }'''
        expect = '''Program([ClassDecl(Id(st),[]),ClassDecl(Id(w),[]),ClassDecl(Id(_34),Id(I),[]),ClassDecl(Id(y),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id($S383),Static,[param(Id(i),ArrayType(15,ArrayType(7,ArrayType(3,FloatType)))),param(Id(__4_M),ArrayType(15,ArrayType(7,ArrayType(3,FloatType)))),param(Id(Wu35__8GdJ),ClassType(Id(P9))),param(Id(__),BoolType),param(Id(c),BoolType),param(Id(B),BoolType),param(Id(_8_),BoolType),param(Id(o),ClassType(Id(g))),param(Id(X),ClassType(Id(g))),param(Id(_1),BoolType),param(Id(I_),BoolType),param(Id(c),IntType),param(Id(b),IntType),param(Id(__),IntType),param(Id(_t),StringType),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 319))

    def test_320(self):
        line = '''Class _Q5{Val $L:Boolean ;Constructor (I_,_W,q84:Float ){} }Class s{_(tc18T_,z,w,_,_,_:Array [String ,0b1];__,U:Array [Array [Array [Array [Int ,1_6],7],0b110],0xD]){} }'''
        expect = '''Program([ClassDecl(Id(_Q5),[AttributeDecl(Static,ConstDecl(Id($L),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(I_),FloatType),param(Id(_W),FloatType),param(Id(q84),FloatType)],Block([]))]),ClassDecl(Id(s),[MethodDecl(Id(_),Instance,[param(Id(tc18T_),ArrayType(1,StringType)),param(Id(z),ArrayType(1,StringType)),param(Id(w),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(__),ArrayType(13,ArrayType(6,ArrayType(7,ArrayType(16,IntType))))),param(Id(U),ArrayType(13,ArrayType(6,ArrayType(7,ArrayType(16,IntType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 320))