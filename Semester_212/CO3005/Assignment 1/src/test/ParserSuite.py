import unittest
from TestUtils import TestParser

class ParserSuite(unittest.TestCase):
    def test_0(self):
        input = '''Class ___{_(){Val _,_8,r7,Y67:_;Continue ;}$m(Y7wwD,kU,_,_,_,__,EE_Dh,Q,_8_,k_,X5V,G,_,_,k:Array [Array [Float ,51],0B101000]){Continue ;} }Class pU_e_E6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 0))

    def test_1(self):
        input = '''Class q0:B{$0A6p09992(DB,_6,_C:Array [Array [Array [Array [Float ,0B1_10],0140],0X8],0B1_01_0];_4_N_0_,___l6,__W:Int ;m,q:Array [String ,0X8];qB_O,__,f_:Boolean ;s,F8,__,_9_,_L,W4:Boolean ;_b:Array [Float ,01]){} }Class E:___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1))

    def test_2(self):
        input = '''Class C{Constructor (_,_,__:Boolean ;__6M:Boolean ;_,b,kE,r,_:T;_,_k,V__8V:String ;A,c,_,_:Boolean ;cQ:KN;_:Array [Array [Float ,0x9],0X35_C];_:Array [String ,05_7]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2))

    def test_3(self):
        input = '''Class A:_{Var $_,E,$2__4QOd_d0:Array [Array [Array [Array [Array [Boolean ,051],0b11111],0B1_0],61],051];Val __:Array [Array [Array [Array [Array [Boolean ,051],0B1],0B110101],0B1],054662];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3))

    def test_4(self):
        input = '''Class G:_{Val $_1s,_:W;}Class j:vW{}Class f_:U{Constructor (P0,__06:_6__H;_:_b4){} }Class _2{Var u8H,$h:Boolean ;Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4))

    def test_5(self):
        input = '''Class _6{Var _:Array [String ,0x34];$_5(_:Array [Array [Array [String ,35],0b110001],0x34];_J,p1:Array [Float ,35];v:Boolean ;__:__;H:Array [Array [Array [Int ,07_77],07],0X2];U:__){} }Class s1n{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 5))

    def test_6(self):
        input = '''Class F6_{Destructor (){}_81_4(G:Float ){} }Class S{}Class _:l{Val _:Array [Array [Int ,0b110],0b10];}Class _{}Class _:_{}Class b{}Class Q_:_n_{}Class _{Var __:_;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 6))

    def test_7(self):
        input = '''Class _{}Class _1:_{Constructor (_1,_:Array [Float ,0115];_:Float ){}$_4_(_5:W){Return ;}Var V:Array [Boolean ,0B10];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 7))

    def test_8(self):
        input = '''Class Gz3{p(_:Array [Int ,0B111101];e_:Array [Array [Array [String ,0B111101],0125],03_2];u:Array [Int ,0125];__o_,w,bL6_v,_0,_,__:Array [String ,0X32];_,_S4_6:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 8))

    def test_9(self):
        input = '''Class _7:N5{}Class _0{}Class fx_{_r85Z(_N,_:_4l;E,nq:Array [String ,01];s:Array [Int ,23]){} }Class w_{}Class _{Ft(n,_Ul_,W2c:Array [Boolean ,0113]){}Destructor (){Return ;} }Class _:j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 9))

    def test_10(self):
        input = '''Class l{}Class _{$_zFe(){}Constructor (_l:Int ;_,P,w:Boolean ){Break ;}Var $8_2:v;DZi33F(_A:_;_g_0:Float ){} }Class _DF:RA{Var __,$0_:g;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 10))

    def test_11(self):
        input = '''Class _{Var _7z,j___,$243O,yEV__,$_0:Array [Array [Array [Array [Array [Boolean ,056],0x29],0X8],0b1_10],0X1D];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 11))

    def test_12(self):
        input = '''Class S{}Class D:q{}Class w6:__{}Class Ft:PV{Constructor (B,s5,__6Z_,_:Int ;_EH,_,_:o){}Constructor (_,H:Int ;g719,H:Array [Float ,58]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 12))

    def test_13(self):
        input = '''Class __le4_{Val _0,f__4,$m,$c86:_;}Class d:_I{$i57x(_p7,_io_,N,__U:Float ){}$__4_C(){} }Class _4:Ox_{Destructor (){}Constructor (){ {} }}Class _6:A_R{}Class _:_t4{Val _,$g,Q:Array [Boolean ,0b1_0_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 13))

    def test_14(self):
        input = '''Class _{Constructor (){}_(_:Int ;_:Array [Array [Boolean ,067],99];_0,HE6,_,r,uTY:Int ;_:Float ;c__u,b:Int ;d4q:_93;_:Int ;Bi_:Array [Array [Array [Array [Int ,067],0b1001011],0X3],0b1001011];_:Array [Boolean ,0b1001011];_:String ;x:l;_3,_:Q;O,G:Array [Array [Int ,067],0x1A]){} }Class g:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 14))

    def test_15(self):
        input = '''Class K6n0v5:V{Val $0__,$4,$O,$_:_;Val r8_R_:Array [Array [Array [Array [Array [String ,052],0X6],92_49],0x2],0X6];Destructor (){} }Class U{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 15))

    def test_16(self):
        input = '''Class Sa1{Constructor (I:Array [Boolean ,0x9]){}Val E_036w,$p4_,$8,_:_hC6;Var $UW_O_,p:J;Val P,$9:Array [Boolean ,53];Var Y:E;}Class u:c{Constructor (__,j:_){} }Class __:n{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 16))

    def test_17(self):
        input = '''Class g{}Class _g{}Class F:_C{}Class jp_CQ{Constructor (V_2I,bPt,k_,_,_3:_v64o){Continue ;}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 17))

    def test_18(self):
        input = '''Class _{}Class _4{}Class _:s{}Class _D_7{Val _P:Array [Array [Array [Array [Float ,5],6],0x1E],0x1E];}Class f__{Val _0:Array [Array [Array [Array [Int ,0b1010110],0x7],0b10],1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 18))

    def test_19(self):
        input = '''Class l0:_{}Class _3:_{$4(_,L4E7_3G:Array [String ,34];YV:Array [Array [String ,0120],0120]){__::$_1_();Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 19))

    def test_20(self):
        input = '''Class _:_7_D{_0B(v:N;_B,__o_,x4m9,x_,k_,zOO9_:Array [Array [Array [Int ,0b1100011],92],92];__6,W:Array [Array [Int ,0116],0X4_C]){Continue ;{} }}Class _:M_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 20))

    def test_21(self):
        input = '''Class r{Var $tx,i_,_:Array [Array [Array [Array [Array [Array [Array [String ,04],0x54],0xA],06],0103],0B1_1],94];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 21))

    def test_22(self):
        input = '''Class x{}Class H_8_:_4_0{Constructor (_,_:Array [Array [Boolean ,449],07_5_7];_:Array [Array [Int ,0b11],06]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 22))

    def test_23(self):
        input = '''Class KN_3{Var $_86:_O_;}Class _{}Class H{}Class _2{Var $_,l3:Boolean ;Destructor (){Return ;v::$i.R42_.jP7();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 23))

    def test_24(self):
        input = '''Class _72_4:_7__{}Class _{}Class F:_{Var $2:Array [String ,92];Var $3_v7:Array [Float ,0xA_1];$3(_:_2H_){Break ;} }Class cw_:M{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 24))

    def test_25(self):
        input = '''Class e{}Class _9N1t_:b{Constructor (_z0l,R,q:Float ;_:Float ;_X:t){}Destructor (){}Val $_d,E,__xu,_8g_:Float ;Destructor (){}Val OfG:Boolean ;Val N:Array [Array [Array [Array [Int ,0x81_B],1],074],0X4D];Constructor (_:y;_:_s){Var _0:Array [Float ,0b1];} }Class q_{}Class S{}Class _{Constructor (R4v_:String ;md:Array [Array [Float ,0b111101],75];v:Float ){Break ;} }Class _7{}Class j:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 25))

    def test_26(self):
        input = '''Class l:W8__{Var $g:Boolean ;}Class a:LI{Var p__,_X:Float ;Constructor (_48Y1:String ;A:Float ;_,_,Z_:Int ;_,Pwa6_g_A2:Array [Array [Array [String ,0115],0B1011],0115]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 26))

    def test_27(self):
        input = '''Class _{j_1P(){} }Class _{$7_(){}Destructor (){}Destructor (){}Constructor (){} }Class X{Var $xY_q__,zMF:Float ;}Class aC{}Class G{Var __:Array [Float ,0XA];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 27))

    def test_28(self):
        input = '''Class _:_8{D(l5:Array [Array [Array [Array [String ,03],0x6_4_E_A],0X4],0B1_00];x5,W5dm:Array [Int ,0xFB];t,_,_7,y:_){}Constructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 28))

    def test_29(self):
        input = '''Class C_9:X0{Var $f:Array [Float ,6_1];}Class c4{Constructor (f8:String ;_,_:Array [Int ,0x60];f4_0:Boolean ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 29))

    def test_30(self):
        input = '''Class _5{}Class Q_{Constructor (_m_:Array [Int ,0b1010001];E:Float ;_:Array [Int ,0B100110];I,Q,_:H_0;_:Int ;_w__h_8:Array [Int ,0b1];__:Boolean ;n:bw_;g:Array [Array [Array [Float ,0b10_11_0],0xD],0b1];_9:Array [Array [Array [Array [Int ,0B1_1_100_1_0],41_37],6],0x1];bD_,_:Boolean ){} }Class g_O{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 30))

    def test_31(self):
        input = '''Class s:_3{$8(){}Destructor (){Continue ;} }Class _1E{Constructor (){} }Class U:_P5_{Var $4:_;Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 31))

    def test_32(self):
        input = '''Class _5{}Class _h3{Constructor (_K5:Array [Array [Array [String ,0B1],0114],24];__R__I_X6__:Array [Int ,0b110110]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 32))

    def test_33(self):
        input = '''Class _5_:_{Var o,I,_:Array [String ,7];Constructor (){Continue ;}$H6747(){yf_48::$k();Val __9U:Array [Int ,7];Continue ;} }Class M:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 33))

    def test_34(self):
        input = '''Class _0w35__{e(){}Constructor (){} }Class v__j0_:__{}Class _67_:c{}Class q6{}Class k:_{$_(jx,_3,_fa5,j_R24nF,Q___:Float ){ {}Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 34))

    def test_35(self):
        input = '''Class _I_{Var $_,__8:Array [Array [Float ,0103],07];Constructor (_:C;_h:Array [Array [Array [Float ,0B1000011],4],0X50];__z_,_K:C){} }Class _2d{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 35))

    def test_36(self):
        input = '''Class o__{}Class ___e:XJ{_(_,K__:String ;__3,w3,p_8Ro_,r,__,_:Boolean ;_V:Array [Boolean ,0611];H15___5l,_:Int ;nr,JL:_Y;E:Boolean ;_97l:_1_z97){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 36))

    def test_37(self):
        input = '''Class s:_rch79{}Class __BV_:Sph8{Destructor (){}Destructor (){}$i6(_L:___2){}Val U,_54L8_9_:Boolean ;}Class _1{Constructor (_9:Array [Array [String ,78_4],075];V:Int ;O:Int ;_O_6,RE,cC:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 37))

    def test_38(self):
        input = '''Class u8r{Var u_:Boolean ;}Class __6:GX{Val $D,$_,$3Q86__,$g:Float ;}Class Ed{$P0(_:Array [Float ,8_2]){}Val _0:y;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 38))

    def test_39(self):
        input = '''Class _u:__{$B_(_,w,_:String ;_,c_C,b:Int ;_6__3,k0_:Array [Int ,64];__76,q,_9,I:Array [Int ,07];vL6,_54:Array [Array [Array [Float ,0XE],0XD41],0B11101];_:String ;__9:_b___;_C,_:Array [Float ,0X30D_BFDB]){}Val __,$_,_3_k:Int ;Var F:Array [Float ,41];}Class F:hp1Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 39))

    def test_40(self):
        input = '''Class N:J_{$1(P1Va7_,_,t:Boolean ;_G6,p:Int ;__O:g_;_:Array [Array [Array [Int ,0xF],99],0b101100]){}Var _M:uu0_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 40))

    def test_41(self):
        input = '''Class __F{J(r:Array [Array [String ,03],0B1000]){Val C4_,u:P;} }Class _{}Class __{}Class h{_(N,Y:_;_,x0,i,I8,_:String ){} }Class w{}Class K:_{Constructor (){}Val $Bx,x:String ;}Class D_{_ba(){ {Return ;} }Destructor (){} }Class V4vC99K9p_:_A_q{Var $Xd,$b,__xj,$0_i_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 41))

    def test_42(self):
        input = '''Class _:m{$_R9o(m,X_,___7a:String ;_,d0,s,lJL:___;l,r:Array [Array [Array [Array [Array [Float ,0X4A],0112],0XD_5_1_F8],0112],29];M:String ){} }Class _Z{Constructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 42))

    def test_43(self):
        input = '''Class h{Val AY,$r4_03:Array [Float ,4_5_2];_(x_6__,__t5:Array [Array [Int ,0B10011],0X6];N__:_;a:Array [Int ,0X6]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 43))

    def test_44(self):
        input = '''Class _66:x_8{}Class g_2t{Val H_t0,$N_M:y_a;Var $1,_k,$_,AH_B_1,$P:r;}Class _c:y_{Constructor (_4,j:Int ;_,__7:DM;J_8BQc,M:Array [Float ,016];C:_4){} }Class p:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 44))

    def test_45(self):
        input = '''Class X{Constructor (){Var g,_zQn1_w,h:_;Continue ;Break ;Continue ;Var l,__7,_,x:Array [Boolean ,040];Continue ;}Constructor (){}Val _,A_:Array [Array [Int ,0b1_1_0],0B1001001];}Class _7x:u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 45))

    def test_46(self):
        input = '''Class __:qU5{Val $_:Array [Array [Array [String ,0117],0x30],0B1];}Class hc{Val $c2DZ:U;$_(){}$_J7_(__J_,l,_,_:Array [Array [Array [String ,34],0X5],0X1_4B]){} }Class _cH{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 46))

    def test_47(self):
        input = '''Class _J:_{}Class _oC5Q__G{}Class I_W6T{}Class _{}Class m:n____{Val $N,$_:Array [Array [String ,0XE],02_4];}Class G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 47))

    def test_48(self):
        input = '''Class __0:_J{O(__C,_:Array [Array [Array [Array [Array [Float ,4],0B1_1],01],02_3_5_7],0X8];e,v:Array [Float ,77]){}Val $l,V_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 48))

    def test_49(self):
        input = '''Class _:x86w{Constructor (_R,o_,pz,q:Array [Int ,65];F3,D,_H8,S5:Array [Array [Array [Float ,0b100000],0xD],0123]){Break ;} }Class Q:l_zF{}Class P:A{}Class _{}Class _:k{}Class v{}Class f5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 49))

    def test_50(self):
        input = '''Class N{Var P:Int ;Val i3__,$I,$h,z:_;}Class R3r_E9A{N(__u,T38:String ;_We7__8:Boolean ;b,_0,U_4_3_55,_7,_:_4;_9:Array [Array [Array [Boolean ,20],20],0b10];_:S){}Destructor (){} }Class _2_{}Class _{Var qHSE:u;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 50))

    def test_51(self):
        input = '''Class __{}Class _38_{Constructor (_:Array [Array [Float ,3566],065]){}Constructor (T6,U,D7t:Int ){}Val $3__:String ;Var k,_,F_1_,$_,G5_:Array [Array [Boolean ,0B1_0],072];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 51))

    def test_52(self):
        input = '''Class F{}Class _{Constructor (l,g_:Int ;U__,z_,d:_;V_,__99A,_6__,_q:Array [Int ,4];P_50__7752I:Array [Array [Array [Array [Boolean ,06_5],045],045],0x9];__R:Array [String ,55];_:Boolean ;__:Boolean ;e,JA_E:Float ){}Var $76,$x6:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 52))

    def test_53(self):
        input = '''Class _:_{}Class lM{$9(_X_,_,_h3:Array [Float ,0b10000];_C,bd59,J77o5_:Int ;_:Array [String ,0X40]){}Var c:Array [Int ,061];}Class __7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 53))

    def test_54(self):
        input = '''Class _{Constructor (_4__s9,T,_4:Int ;W,A:Array [Array [String ,23],973];l:String ;_,_,y4_:Array [Array [Array [Array [Array [Array [Array [Array [String ,0XA8_8],23],0b1],0b1001110],0X55],0X55],99],045]){} }Class kb:_{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 54))

    def test_55(self):
        input = '''Class o43_r027__:l_{Val z_:Float ;X(Z:_;_d,_,_,_:Array [Array [Array [Array [Int ,0b101],0x4_6],0x56],0B1];_:Array [Float ,071]){} }Class __0o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 55))

    def test_56(self):
        input = '''Class b1{Constructor (_o:Boolean ;i:Array [Boolean ,0X1]){Return ;Var RM,__6E0:Array [Array [Array [Array [Array [Boolean ,0x5],04_4],15],15],0B1_1];}Destructor (){_::$so_();}$_4X_(_:Boolean ;_5U8,S599:Boolean ){}Val $3,$_7:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 56))

    def test_57(self):
        input = '''Class _6:_g{$F(A,_:String ;x:Array [Boolean ,61];_:Array [Array [Array [Array [Array [Array [Float ,02_2],3_5],3_7],4],61],20];_:l){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 57))

    def test_58(self):
        input = '''Class __{}Class __:_82Us1A{_(_e:U){} }Class p_5h{}Class q___:_{Var $_,$_2,n3__d_,g5,r:Array [Float ,0132];}Class F_x:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 58))

    def test_59(self):
        input = '''Class _eVC:_{Destructor (){Continue ;} }Class _e:iU{Constructor (__:_){}_1_(_,_,_:Array [Array [Array [Array [Array [Array [Array [Float ,02_0_1],0B1011001],0B11],0x20],8_0],03],074];V_2b:_){}Destructor (){}Destructor (){}Val $_2_k___:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 59))

    def test_60(self):
        input = '''Class F{Constructor (xIp__,dG_:Array [Array [Array [Array [Boolean ,0X1],0x2],25],0x9D];e:Int ;A:Array [Array [String ,0107],0X4]){}Var $0_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 60))

    def test_61(self):
        input = '''Class W{Constructor (__,l,_,_,_x:Array [Array [Float ,0B1],0127];s,_:Array [Int ,28];l0:Float ;zx,_18_:Boolean ){} }Class A0:_3{Constructor (){} }Class __9:G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 61))

    def test_62(self):
        input = '''Class _:_{$q0w___(_:_;_DU6:Array [String ,0b11]){}Var $g:Array [Boolean ,062];}Class __8:_5ml{Constructor (){__::$_();Return ;_::$H_();} }Class t:_{Val $U_,$0:Int ;}Class __0{}Class D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 62))

    def test_63(self):
        input = '''Class S_827{}Class _:R_5{__du(){}Destructor (){}Constructor (__,a:Float ;_n:_;i_79,Q:Int ){}Var x,_,$9__9y:Array [String ,0b1];}Class O_1:_3{}Class _o:i57__{Destructor (){}Constructor (_,_,__QP,_D:j_T4){ {} }$_(b_X_,t:Array [Boolean ,21250];A9a,_2,Y,Y_3,Z:Array [String ,0x7_1]){} }Class Y4:_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 63))

    def test_64(self):
        input = '''Class _:e{}Class _:__9{Var $_,e,__:Array [Array [String ,0x6_E_93],043];}Class _{Var y7:Int ;Var $f4Z_,$p:Array [Array [Array [Int ,073],04_23],0B1];}Class l__:qI{}Class _K:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 64))

    def test_65(self):
        input = '''Class _{}Class y:__p{Destructor (){} }Class S{Var g:Array [Array [String ,0B101010],4];}Class _{$MP(n3:Array [Array [String ,0b110101],27]){}Val $_:j;Var $_P_59_17_,P0,$p_,_l,_,F,$4,fa41,J,$M54,$_:Array [String ,27];}Class _{Constructor (){} }Class K{}Class Xk:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 65))

    def test_66(self):
        input = '''Class l{Constructor (_,_:T;v,D,B_:v95;B,_6y3,_,g:B;d:g;_,eNy:Int ;o,f:String ;K_x,_7,t,_:Array [String ,025_4_2_3]){}Constructor (Uc:_5){Continue ;}$__6Vm_(x_j,E,Z:Array [Array [Int ,04],57]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 66))

    def test_67(self):
        input = '''Class _:_{}Class O:_{Constructor (P9B___,R,f3697a_,o_3,_:Array [Array [String ,0b11_0_0_0],03];U:Array [String ,065];_:Int ;g_,U8,_6,_o:String ;k:Float ;_x5:String ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 67))

    def test_68(self):
        input = '''Class sX2{}Class Pv_1{_6__(z_t:Array [Array [Array [Array [Array [Array [Boolean ,0B100000],0b11010],0x18],5],0b11010],0x1];p6s_,_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 68))

    def test_69(self):
        input = '''Class _4:_9T{Destructor (){Continue ;}Constructor (_g:Boolean ;M,_1_7:Array [Array [String ,0X11],0101];_197:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 69))

    def test_70(self):
        input = '''Class n{Constructor (_07:Array [Array [Array [Array [Array [Array [Array [Int ,0X6],79],0140],3_429],0x4F],0B1_0],9];_72,H0_I_,g:Array [Array [Array [Array [Float ,79],0xC],79],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 70))

    def test_71(self):
        input = '''Class _a:__{Constructor (Q,pQ_:__;K,u:Array [Boolean ,3];_4_,_V_9_:Array [Float ,04]){Continue ;Return ;} }Class y1_{}Class V06k1{Var V_i,$_,$_S:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 71))

    def test_72(self):
        input = '''Class O{I(s,_C4:Array [Array [Boolean ,0132],01_46_3];f_2U,_:Array [Float ,07];B_,C_,B,_:Boolean ){}Val b,$j:String ;}Class __:_{}Class H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 72))

    def test_73(self):
        input = '''Class _{Destructor (){} }Class _:_{Destructor (){}Constructor (){} }Class o3k{}Class _:L__{}Class d1O:_9{}Class _:_{}Class S8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 73))

    def test_74(self):
        input = '''Class _:_{_(_26:Int ;rG,_3,S,v5,_D,C4,_,d,_b3,_,_,j,w,x:e){} }Class V:_1VBq{Val _,$4_,e:Array [Int ,7];Val $1O2:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 74))

    def test_75(self):
        input = '''Class d:_7{$9(_,_5:Float ;_:Boolean ;g_9,L4,_:_3;___c,D_:f_;_:lA;_,y,_:String ;n,L_,_:L;q:Int ;U,____:Array [Array [Int ,0b101111],0132];_:Array [Int ,0b1];B930:Array [Array [Boolean ,83],83]){}Val $7,$_:Array [String ,83];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 75))

    def test_76(self):
        input = '''Class l2:N{Destructor (){}Var $_6B:h;d(O___,T,_,h_,__,_:_){}Val $2,_:Array [Array [Boolean ,022],0x4C];Var $3:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 76))

    def test_77(self):
        input = '''Class C{}Class L{Var _P:Array [Array [Int ,0x5B],867];Constructor (D,_A9,t_,U6:Array [Array [Int ,0b10001],0x8_E]){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 77))

    def test_78(self):
        input = '''Class qD:s22{Constructor (_5i_:E;n:String ;_,e_v_7,uI_:Float ;__,_:Jr;J09:Float ;_,_,_,J3,_g1:String ;_,mD,g_,__y__,Y__,a,_,KT6,_:Int ;_:Array [Boolean ,0B1011011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 78))

    def test_79(self):
        input = '''Class d{Var n2_0,$_4:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0xD_03],0B1011101],0xD21_E_9_8],0X2],0x5D],0X15],0x4A2],0xE_0],6_4_5],0xE],0B1011101],0X15];Var _u:H;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 79))

    def test_80(self):
        input = '''Class __6_:U__{Var $q,$7:_0__;Q8(_,_:Array [Int ,7_2_7];_,g_,B1:String ;z3:Boolean ){}Var O,f8I5x:Int ;}Class __:b{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 80))

    def test_81(self):
        input = '''Class z:e{}Class Y_{Constructor (_,W:_;v:_J;n6,___8CN,_7Q_Gc_1r,__,__,_9_:Array [Array [Array [Array [Float ,0X36],0xB_1_CC],25],01];e:Boolean ;_:__;fz_,_v_:Boolean ;_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 81))

    def test_82(self):
        input = '''Class _6:__{}Class lH1_{K(){Return ;} }Class _{Var t:Float ;Var $g__c4_I,_:Int ;Val _89_k__JRj:Array [String ,69];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 82))

    def test_83(self):
        input = '''Class _:o_{Var $r:_;}Class _3sY6:z{}Class Ge{}Class _a2{Y5_9(z:gx;J9_8_4,__,C:Boolean ){}Var $6__x3__3_:Array [Array [Int ,0XE7_8C],0b100110];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 83))

    def test_84(self):
        input = '''Class _f1g2_0:L{}Class __y:P{Val y,$0,$pV4,__P,$_g:T__;_(_8,MFjnT:_2){} }Class x2:__5_{Var O:Array [Array [String ,045],045];}Class _:v_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 84))

    def test_85(self):
        input = '''Class _:__3{Destructor (){}Constructor (_:Array [Array [Array [Array [Float ,4],0B1011011],66_1_17],0B1];C,z:String ;_,I:Array [Int ,3102_8_6]){} }Class _:fwZ9q2{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 85))

    def test_86(self):
        input = '''Class U0__3:fM{}Class _:Ne{Var _5_4h4:Array [Boolean ,83];$X_(_,o_6B3,_,_:Array [Array [Int ,0340_7],0B1]){}Val _vk15:Array [Int ,83]=!!K::$5_().d();}Class U{Val _M,__:Int ;Val $2_4___,$k0_4_:x;Constructor (){} }Class __:DJ_{}Class _jW4:R{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 86))

    def test_87(self):
        input = '''Class ___:_S{}Class R{$Ba(_R:_;_9_,V83,J:Float ;_:Array [Boolean ,0121];_,k,J_:Float ;n__:Array [Boolean ,04]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 87))

    def test_88(self):
        input = '''Class _:_{Val $T0:Float ;}Class _5:_{}Class P:_{Var $_t_,_:Int ;Constructor (z:Int ;__,_l,K:B2){} }Class _qR_{$_(E:Array [Array [Boolean ,06],0x49];_F,k,B5:j;o9O:Boolean ){} }Class __{Val $_:XP1052;}Class _:s__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 88))

    def test_89(self):
        input = '''Class P:__{Var _F,A,W,$e,B,T9,T:Array [Array [Array [Array [Float ,042],0xB_A_0_B1],0B1],0x9_A];O_(){ {} }Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 89))

    def test_90(self):
        input = '''Class _:o__{Destructor (){}$zP(){}$n4(){Continue ;}Constructor (_e:Array [Int ,0b1];_1:i;_,R:Array [Array [Array [Array [Boolean ,0B1],0B1],071],18];r_:Array [Array [Array [Array [Boolean ,18],0x2F],0B1100001],0B1100001];V,d_,VR,L:Float ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 90))

    def test_91(self):
        input = '''Class l:U{_08(_91:Float ;__P_8,_,C,_s_,e:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0XB],17],17],1_34_49_4],0b1],022_6],0120],17];u,__0_,_,Y:Int ;x5,X_Vt,r,c,__l4:Array [Array [Boolean ,0x64],0x64];v:Array [Array [String ,0b111],17];f5__f:Int ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 91))

    def test_92(self):
        input = '''Class m1{x_2_3_(){} }Class c:_{}Class c9msk0:w{Constructor (){Val Ql,O,h,X___i6_,l_71_,X7:Int ;}Var g,_E:_EW2;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 92))

    def test_93(self):
        input = '''Class _vShR:Z9{_DE(){Return ;} }Class _Yj:p{}Class Vo_{Destructor (){}$hV(){If (!!-False ){Return ;} }}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 93))

    def test_94(self):
        input = '''Class _H4:__{Var $z_o,wH,_F:Array [Array [Array [Array [Boolean ,0X22],0x8_0_F],0x52],0B10_0];}Class _:D{}Class r:I{Val _,wR:__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 94))

    def test_95(self):
        input = '''Class _0I{}Class _4_n{Constructor (M:Array [String ,0B10];KS,_,_:k2_b){Break ;}hPs(){} }Class Q64:EC{}Class h_{Val _:Array [Int ,76];}Class _0:__d{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 95))

    def test_96(self):
        input = '''Class _1:_{$8(){Break ;Val _1:_;} }Class V_1{Constructor (_g0_,__2__,_1M:Int ;Y:d_;m,E3,__T:_;O:Float ;_,_:Array [Int ,74];wk:Boolean ;_78,u6__:Boolean ;_6,_:Float ){} }Class _6:_6rCSJ{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 96))

    def test_97(self):
        input = '''Class X{}Class _7gLj:_{}Class __V:a_{Var $z:T6;Constructor (Vx:Boolean ;G__,_:R){}Constructor (){Continue ;{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 97))

    def test_98(self):
        input = '''Class Z:VH{}Class Q_5i__{}Class m{Val $0:Array [Array [Array [Array [Int ,90],0B1110],0B1000],90];Var ac:Array [Float ,073];}Class _M8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 98))

    def test_99(self):
        input = '''Class _Ot__{Var $o66,$3:a_u_;Val $K,t,_:Array [Array [Array [Array [String ,0100],0100],2_81_3],0100];}Class Z{}Class T0{uI(_9:String ;___r4,_:A2;x:Boolean ;vU,R:Array [Array [Array [Array [Int ,0b101100],21],0X4],0B10000]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 99))

    def test_100(self):
        input = '''Class _x:j{Val REo,$0:Array [Int ,28];Var __2,Vf__:Int ;hX2(__,_:d;__,_:Array [String ,0b1_0];_Q:V9;S:String ;_Hv5,_:Q_H;C:i;_,TA:Float ;_8,iy:p){} }Class nPj2k{$r(){}Constructor (){} }Class _:xV{lm(){} }Class _:uL{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 100))

    def test_101(self):
        input = '''Class _S_869{Constructor (q2b0,h__,_:Int ;_6_7N:Boolean ;k1,_:_6W0){Break ;} }Class _{Var $g:c;$s(W,i54E,h9,kf,W_sny0_V:X;S7:Array [Array [Float ,0x60],07_3]){} }Class I_{}Class P9:_3h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 101))

    def test_102(self):
        input = '''Class a:m{}Class D{}Class M:_x6b{Destructor (){} }Class e__{Var __,$4:Array [Array [Int ,0102],0B1011011];}Class _Yd:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 102))

    def test_103(self):
        input = '''Class _{}Class Q564F1_{Constructor (__:Boolean ;__L__:Array [Array [Array [Array [Int ,2_4],19],0X5A],0X5A];__:d5;___a,R:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 103))

    def test_104(self):
        input = '''Class g:_0{Val w_,$_7uC6n,$d0:L;Val U,$_av:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0x23],97],97],0x23],0b1],11],0B100010],026_4_3];}Class igr{}Class Uj:KL{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 104))

    def test_105(self):
        input = '''Class _:W{$u__(_:_8_;_:Float ;O,__:Array [Array [Array [Array [String ,52],0xC_5],06_6_06_2_6],52]){Break ;Var H:Float ;} }Class l:_5_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 105))

    def test_106(self):
        input = '''Class e{Var $0:Boolean ;Val $_2,ft,$_P7F_:Array [Array [Array [Float ,0B101010],79],0X1D];Constructor (){} }Class f:C{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 106))

    def test_107(self):
        input = '''Class _:S_7{Var _:iV;}Class X{Destructor (){}Constructor (){} }Class _:lS{__Z8_4(){}Val j0:Array [Array [Int ,0x42],6];}Class _y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 107))

    def test_108(self):
        input = '''Class Gv:_8W{Var $Q:Array [Array [String ,0X4C],05];$J(_,__:Array [Array [Array [Array [Int ,77],77],77],0B1];Y:Int ){} }Class _{}Class _:p{Constructor (g,_,_6,_:Array [Int ,77];_31H0,_e,_,S:_Z){Break ;}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 108))

    def test_109(self):
        input = '''Class y_{Constructor (_q:__6_;__0,c,_:String ){_::$1._E_2_y6n();}Constructor (o_ke_:Boolean ){}Val $__x:r_7;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 109))

    def test_110(self):
        input = '''Class __:_{}Class _{}Class A:x{}Class _:_{Val $283,t9_,_B:_;Var $k,_,$s_wV89,_:Float ;}Class d_l:_{Constructor (g:_S){}Constructor (h_:__0O){} }Class _:mm{}Class f__3z:z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 110))

    def test_111(self):
        input = '''Class K{}Class _Z:O{}Class _7o{_(_,_,___,A,al_,w4:Array [String ,1];C:Array [Array [Int ,1],0xE_7]){} }Class b{}Class Y_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 111))

    def test_112(self):
        input = '''Class h7_{Val C:Int ;Constructor (XRS_:Array [Array [String ,95],01]){} }Class _9:_R{_(_f:Array [Array [Array [Boolean ,95],0b1100000],0b1100000]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 112))

    def test_113(self):
        input = '''Class o{Destructor (){Return ;} }Class I:__3{_9(){} }Class P{$8_(uT,Y:G__;__:Array [Boolean ,0x3]){} }Class _:w{Var _,$U:Array [Boolean ,0B1];}Class _4{}Class _:wn{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 113))

    def test_114(self):
        input = '''Class L:N_C6{_0(){}Constructor (_:c1;_bt:Float ;__r:Array [Array [Array [String ,0b1],0x5],86_4]){l_s52::$_();Break ;{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 114))

    def test_115(self):
        input = '''Class gm{Var $03vA,_:Array [Array [Array [Array [Int ,6],0XC_8A],6_62],073];}Class _6:o96C{}Class tx7:_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 115))

    def test_116(self):
        input = '''Class J:_7pT{Var $D:Array [String ,05];Constructor (){Var _T:Float ;} }Class Wsu7a:t{}Class _0C_:Z{Destructor (){} }Class _{}Class _j89M_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 116))

    def test_117(self):
        input = '''Class __{$_(_,__3_,Z_,_,_N,_F_F:Array [Array [Array [Array [Int ,0b11],0b11],0X3_1],06]){}Var $__3LD_:Array [Array [Float ,0x20],0XD];Destructor (){} }Class __{Var $_,b_:Int ;}Class F4:_33{Var J,__,$Q,_,_4,C:String ;U(A,V9B:Float ){}Destructor (){}$_(_,w_,_:Boolean ;Z,_9:Array [Array [Array [Int ,0x190],97],0X3_B]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 117))

    def test_118(self):
        input = '''Class _Ke:F{}Class a2:X{}Class _d:L{p(){} }Class _:__0A__{}Class _{}Class _:_6{Var _:Array [Float ,51];Var p:___;D(){} }Class u{}Class _{}Class q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 118))

    def test_119(self):
        input = '''Class _6:__{Constructor (){} }Class Kr{Constructor (__A,w_4W32:Float ;U,__VC_,_g,_:Array [Array [Int ,7_1],0x13];Q:Boolean ;_g_p:P){Continue ;d::$N17();Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 119))

    def test_120(self):
        input = '''Class _:g_{Var r16:wZ0;}Class _{Val _,$C7,_1_420:Int ;Val $C,e,$m,$3,$_:Array [Array [Array [Array [Int ,13],0B1],0x33F],0b1_100_10];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 120))

    def test_121(self):
        input = '''Class __{Var $877U:Array [Array [Array [Array [Boolean ,0B1010000],18],04],040];Val __A:Array [Int ,0X2F];Val __3W:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 121))

    def test_122(self):
        input = '''Class _{}Class _{}Class A__:TN{}Class _:Q2_{Val $0n2_5_9,_WJ,_,__,_,O6:Array [Array [Array [Array [Array [Array [Array [Boolean ,5],0b1101],0120],07],0x3],1],0XE6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 122))

    def test_123(self):
        input = '''Class r_:_4_{Destructor (){}Val __,$__1,$7N:Array [Array [Array [Int ,0b1],33],06_4];}Class w:_{Val $Q:Array [String ,0xE];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 123))

    def test_124(self):
        input = '''Class n3_{Val s,_,$4:Array [Int ,0B1001101];Destructor (){Continue ;}Destructor (){Var S:Array [Array [Float ,5],0xD];} }Class _:i{Var L:Array [Array [Float ,0X27],0b1];Constructor (_:Array [String ,037];_4_GG:Boolean ;_:Array [String ,0B1001101];O_,_,x5:d31;D5:Boolean ){Continue ;} }Class B{}Class a9{Var $jO,Q:_0;Val __:Y;Val sh:Array [Float ,07];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 124))

    def test_125(self):
        input = '''Class _7:_L{Y(H_Z9X,I8:__9;N:String ;Wg:Array [Array [Boolean ,0B101010],0xB];r_,i_:Array [Boolean ,0B1_0]){}_0(OG8_7,_19_,_m_9_,_0,_70,___7Q_,__,_68,AHn7:Array [Array [String ,4_2],0b11100]){} }Class _2m__:_x{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 125))

    def test_126(self):
        input = '''Class Y:_9l{$H(m1z9_,KS_:Float ;__,N,_,_,cL_:String ;_pe,R:Array [Array [Boolean ,0X8E],07_5_75]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 126))

    def test_127(self):
        input = '''Class tw:_{$1(t51d3,z2,_,_g_,_,a0,U8,_1n:String ;X607_:Array [Array [Int ,8],0b1011010];_:Boolean ;m,jT,a,__,E,x2_,XS:Boolean ;a:_E;_6_,_:Boolean ){}Val _:Array [Array [Boolean ,0X10],017];}Class Q1_:_{Destructor (){} }Class G:_f{}Class _x:__Ad3JY_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 127))

    def test_128(self):
        input = '''Class _{$h(_7:R;io2:Boolean ;_:Array [Array [Int ,0X6],0X6]){Break ;}Destructor (){} }Class _{}Class w{}Class ___:_{}Class gA:h{}Class tt8:_{}Class __5:_{_(P_j6,n8,____:Array [Array [Array [Array [String ,0B1010011],043],0XB],14]){} }Class eC_9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 128))

    def test_129(self):
        input = '''Class _{Var $_,$1,$2:Array [Boolean ,0B11011];Destructor (){}Constructor (_,n_o2p00:_;__:_7G_){} }Class _68O{}Class n:T5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 129))

    def test_130(self):
        input = '''Class E:_hK{}Class C:_{Destructor (){}Destructor (){}E(){}$_2S(_,r__,_,_:_;_,_:y;_:String ;_,_,_g:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 130))

    def test_131(self):
        input = '''Class _:__{Var $P9_f:Array [Int ,0B11001];Constructor (){}Constructor (){}_W(){} }Class w:u{}Class _:a_{}Class x{}Class N_{Val _7H:Int ;Val _,j,$C,M:Int ;}Class _2X34{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 131))

    def test_132(self):
        input = '''Class k_4{Var pV:Array [Float ,384_5];}Class kh:_{}Class S_{Var g,l_,$1,_g,$__,$_w5_N5_2,_4_:Float ;}Class ___{}Class l{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 132))

    def test_133(self):
        input = '''Class _{$z_(){Break ;Val d__:Array [String ,0b1_0]=!----zH_::$__18().q_._71().aN().H.k__._().Y;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 133))

    def test_134(self):
        input = '''Class _m{}Class __:_0{Destructor (){}Val $SP:Array [Array [Array [Array [Array [Array [Array [String ,01],056],02],0X24],02],14],0X1B];Val OY:Array [Boolean ,0X24];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 134))

    def test_135(self):
        input = '''Class _:v_G_{}Class x:jts{Constructor (_7__f:__){}Constructor (F_,_,_6__:String ){} }Class _8{$5(P4_,_:Array [Array [Float ,025],020]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 135))

    def test_136(self):
        input = '''Class p{fz(m7,p7q,_a59:Array [Array [Array [Int ,0X33],0X3_1D],060]){}Constructor (Z,G,l,_W:Array [Array [Array [Array [Array [String ,93],0x6],93],0X33],0X2_DF_E2]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 136))

    def test_137(self):
        input = '''Class v1:J_8_{}Class __{}Class X:y{Var _:Array [Boolean ,0x30];Destructor (){} }Class ___{}Class tO{Constructor (){y_::$_d0()._82__AJ_IM_1___();}Var $__:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 137))

    def test_138(self):
        input = '''Class _{Constructor (_C___b,wR7_4_:Boolean ;D:Int ;d_,_:Int ){}Constructor (_,u:Array [Array [Boolean ,034],0B1_0]){ {}{Var L:kS;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 138))

    def test_139(self):
        input = '''Class b{Destructor (){} }Class __{$9h(t__Y,_4_:c;_:Array [String ,0b101011]){} }Class n0h{}Class _37t92{}Class _0F{}Class T5:U1z{}Class _6g8:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 139))

    def test_140(self):
        input = '''Class u8:_9{}Class AK:A_{Val $T_,$_:Array [Array [Float ,0x2D],0X6];}Class _:cm{Constructor (){} }Class _{}Class _C9:oE{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 140))

    def test_141(self):
        input = '''Class n0{}Class J36_:_{}Class ___11:_{$__(){ {Break ;Var p:Array [Array [Array [Boolean ,0X3B],6_805],0b1001];}Break ;} }Class _1:Q{}Class W{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 141))

    def test_142(self):
        input = '''Class e3{S2v_6(){}_X(_05,p:Array [Array [Array [Array [Boolean ,22],05_6],6],0B1]){} }Class D__:t{}Class _:_3_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 142))

    def test_143(self):
        input = '''Class R77_:__{$4__(_I,_K2_r:Boolean ;__:_;_WK,_,__79b_,_W:Array [Array [Array [Array [Array [Float ,24],2_4],0b1001],0X15],24];_,_J2:_){}Constructor (_:_;_5_,h:Array [String ,53_8];_:lo){} }Class r{}Class l9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 143))

    def test_144(self):
        input = '''Class n2:_b{Val $J,_,$oi:Boolean ;Destructor (){_yS::$__J();{}Return ;{} }}Class _y:U{Val oJT1,s:Array [Array [Array [String ,8_1],92],040];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 144))

    def test_145(self):
        input = '''Class _{Var $b_:_;}Class a35X_1J{}Class f{Val s,$_:String ;Val f,o:Array [Array [Boolean ,0X9],71];}Class n{}Class I:_O5{}Class Z_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 145))

    def test_146(self):
        input = '''Class _4{Val $93:Float ;Constructor (N:Array [Array [Boolean ,18],0443];_,N,p:String ){Val w7d_:Int ;} }Class _:_78_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 146))

    def test_147(self):
        input = '''Class _:g{$I(Z7,__:Array [Array [Int ,0x61],5]){}E2n(L_2,x8:Array [Boolean ,97]){}Constructor (P_,_d,Et:Array [String ,041]){}Val $60N,$D,_9:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 147))

    def test_148(self):
        input = '''Class _:_{Var s,K,__,R_,$2s,$_:_9_;j(Q:String ;H8,_:Boolean ;P:Array [Array [String ,0b1100001],06];Xih:Array [Array [Array [Float ,0125],0B110010],0125]){} }Class N:__1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 148))

    def test_149(self):
        input = '''Class S:fA{Constructor (_95_:Array [Array [Array [Array [Array [Array [Boolean ,4],0b1],0130],0x14],0b1],0xAF6];_:String ;__:W){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 149))

    def test_150(self):
        input = '''Class _:_B1{Val _,$f:Int ;Var r:Float ;}Class _6:_{}Class _28_1u__:_{Destructor (){}Var L_,c5:_5;}Class ___h__:i_2{$64_(h:Array [Array [Array [Float ,0x4],0B1],33]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 150))

    def test_151(self):
        input = '''Class Z9:_{S(_G,J:Array [Int ,0b11_0];_,__,_FM:Array [Array [Array [Boolean ,0X8],0b1_1],05_7];_,_1:_4){Return ;}$2(){} }Class j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 151))

    def test_152(self):
        input = '''Class mn:_{Var $_0_,$_:String ;}Class a_{Constructor (__,u:Array [Array [Array [Array [String ,80],0X17],1],012]){}Destructor (){Break ;}Destructor (){}Var $__:__;}Class _Q:_7{}Class _8:_x{}Class _:_1{}Class __{Var $1,$0P_:F_;g(){} }Class _2:K5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 152))

    def test_153(self):
        input = '''Class _2A98{}Class Q363_:_{Val X:Array [Array [Array [Array [Array [Int ,0x35],0x1],0b100110],06],06];}Class _2q{}Class u1{t(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 153))

    def test_154(self):
        input = '''Class __{Destructor (){}Var $_:Array [Array [Array [Boolean ,0b10100],0b10100],0b1_11];}Class F:T_{Destructor (){} }Class _:AK{Var Y_9,n:Array [String ,0B11_0];}Class _mA{}Class _:_s8___{$_(){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 154))

    def test_155(self):
        input = '''Class J:_o_{_Z_H(__x:K;y:_){}W(_,z2:String ;j,_p:Array [String ,0x4_5]){}Var _7_,e_:d;Constructor (_:Array [Array [Int ,0B1],0x5F];Xn8,__,K4d_7,_,_5_:_;yJ5H3,H,tPB:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 155))

    def test_156(self):
        input = '''Class aRJ{Val $_i,_,$h3_,y6_d:Array [Boolean ,0x1_1];Destructor (){} }Class j:qRQuoAR_{Var $_P:Array [String ,0b1000010];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 156))

    def test_157(self):
        input = '''Class _:o{}Class _6{}Class h3_8_r_c:_{Val _:Array [Boolean ,0b1010010];Val _:Array [String ,04];Var S:Array [Array [Int ,0xB],1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 157))

    def test_158(self):
        input = '''Class _v_:_M{Constructor (){Val _,qK:Array [Array [Array [Array [Float ,035],0x1_3_C_B_4_62E],25],0x4B];}Val $_z1:ON7_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 158))

    def test_159(self):
        input = '''Class q{}Class _:_{Destructor (){Continue ;Continue ;Break ;} }Class _{}Class _{Val $_:_P;}Class _{Var $K_,U__,$_,$_:Array [Boolean ,0b1];}Class v{Var $a9_s,_,$r:jJ;Val i:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 159))

    def test_160(self):
        input = '''Class m5{Constructor (b_:Array [Array [Array [Array [Array [Array [Array [String ,88],0b1_011],0x46],01],88],0x9],055]){} }Class _{}Class __5:fk{Val $8_M_5:Array [Int ,88];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 160))

    def test_161(self):
        input = '''Class _9{}Class _E{Val IG,$81,_1__z_gd3h,$_,p:Array [Array [Array [Array [Array [Array [String ,8],0B110101],0XE],060],05],1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 161))

    def test_162(self):
        input = '''Class g8B:_6{_d_(___,fm_6:Array [Array [Array [Boolean ,0b1_1],026],0x6_A_8];Kc,wLU:Float ){}F_(d_6,eN,B,_,b,__8__:Array [Array [String ,0x3B],0b111010];y_,_:Array [Int ,026];N:Boolean ;Y,dK_9:_69){Return ;} }Class h04_p{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 162))

    def test_163(self):
        input = '''Class _{Constructor (J:Float ;_an6_:__;b:E_;q:String ;_,nx:Int ;_,p_N:Array [Float ,45];v_,_,__,_,S1N,_B0,_79_2:_7){Var T_,t9n,_,pfF_:Array [Float ,0b11];}Var M:Array [String ,45];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 163))

    def test_164(self):
        input = '''Class G{}Class _:L2{Constructor (){}Destructor (){}Val s:__y;Val $4c:P;V(){}Var p___,__,$fk,__7_:Int ;Constructor (){}Constructor (A,_3_76,_:Array [Array [Int ,0xEC],92]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 164))

    def test_165(self):
        input = '''Class _:N_{_(r:Array [Array [Array [Float ,0X43],0b1010100],0b1]){} }Class _{}Class O9__5{}Class _:Rw3_u{}Class A:_{Var $w_0,$_:Float ;}Class _78:__o4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 165))

    def test_166(self):
        input = '''Class v{$K_(N1_6,z_eR,B,_,_n,B,_:Array [Array [Array [Array [Array [Array [Boolean ,0666],0X58],03],0X4_3],6],68];ug,__:Int ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 166))

    def test_167(self):
        input = '''Class T_{Destructor (){}u(___Q:Array [Int ,0b1];eC4,J_,_A9,I,Al13_:__L){}n(){}Var $___J,t,$E:_;Val k:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 167))

    def test_168(self):
        input = '''Class eN:_{Var $A:String ;_(){}$e(E_:Array [Array [Array [Array [Array [Array [Array [Array [String ,55],02_7],0b1010100],0x7_E],03],04_0],0B1001011],0B1001011];A:Float ;q,_:Boolean ;____:Array [Boolean ,0x1];_:__){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 168))

    def test_169(self):
        input = '''Class O__8{}Class M7_{}Class gn2{Constructor (_,Q8:_d31;O5:Float ;__1,rnF_:Int ;s,t:y){}Constructor (){} }Class _m_:Q__{Var r_20:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 169))

    def test_170(self):
        input = '''Class _oer:f{Constructor (w,_:_;Ox,E,j:Array [Array [Array [Array [Array [Array [String ,075],075],1_4],0xD],7],0b11]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 170))

    def test_171(self):
        input = '''Class Q:_{_(_:Float ;e,k5E:_;U8ak__i1,_1_h_,f:_;_y:Float ){}Constructor (z,_:Array [Array [Array [Int ,0b1010000],0x34_4],0b1010000]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 171))

    def test_172(self):
        input = '''Class Q3__{$y(ar,_,_,_9,SxD,vVA,X__:Array [Int ,0x2];m5:U_){Continue ;G::$o();}Var $E9:Boolean ;}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 172))

    def test_173(self):
        input = '''Class _3_{Constructor (){}Val _:Boolean ;$Tk(){Continue ;} }Class __:_{}Class _:__{}Class _:_slo{Val $Z6,$q:Array [Array [Array [Int ,61],9],0X19];Var M9_:Boolean ;Constructor (){} }Class O:A_{}Class A6__5W:I{}Class KL{Val $D3,$_X,O_jy:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 173))

    def test_174(self):
        input = '''Class O_l:P{}Class f:_{Val _b:q;Constructor (_:Boolean ;__I3,_,G,y,F:m;o_2_,S:Int ;_,VY:_;_:Float ){_::$8();}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 174))

    def test_175(self):
        input = '''Class _:_v1{Constructor (){}Var T0y_:Array [Int ,26];Constructor (){}Var $1:Boolean ;Var $2:Int ;Var m:Boolean ;Val $_g,$_,$4,x,$8,_m:Float ;Destructor (){Break ;}U(){}_(c8,_r9,_I,_,W_wm:Array [Boolean ,26];_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 175))

    def test_176(self):
        input = '''Class _{Constructor (Ow_7,_,wz:Array [Array [Int ,0b1],05]){} }Class l2{Val K0:Array [String ,0B11001];}Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 176))

    def test_177(self):
        input = '''Class F68{p(___,_Ub:R_;_x:Boolean ;_:Float ;__:Float ;_1L1N0,n,Pe:V){Break ;}Var e9_170,e_,I:String ;Var $d_9__,e,$_,__:Float ;}Class ___:_{Var $5,kG4A_,$_:_;TE(Pq:Array [Array [String ,16],01_4]){Break ;} }Class I:k{Destructor (){}Val G0:Float ;_58(){}Var $f:_;}Class _73_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 177))

    def test_178(self):
        input = '''Class B3:lC{$d(S_,b:String ;t4:Array [String ,5];k,T:String ){} }Class U_:i7__{Val $4:Array [Array [Float ,0x3B],07];}Class P:i_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 178))

    def test_179(self):
        input = '''Class U{Val _,t,___,_:Int ;$_y(a,d_t1_,m,_s9A_9,Wm,_Oz4,_,_,q,J,_,E,_:_;_G:G;__,__,__:Float ){}Constructor (_:_;w_W584X,z,_:Array [Array [Int ,0x5C],25];Z1:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 179))

    def test_180(self):
        input = '''Class _:_{}Class s{Destructor (){} }Class _7:j3{}Class _{}Class i:N{Var $130,B_Q4,$G3g_:Array [Boolean ,0B100];}Class JX_{}Class z0:J8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 180))

    def test_181(self):
        input = '''Class m_{Var $8,$_,$__:Boolean ;Val K__tE,$E_5,_,ZZ5:F2_;Destructor (){} }Class j{}Class E:V84{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 181))

    def test_182(self):
        input = '''Class _:_{Destructor (){Break ;}Val _t,$D3:Array [Array [Boolean ,0X54],0b1001100];Destructor (){Break ;} }Class _{}Class h_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 182))

    def test_183(self):
        input = '''Class _p:_{Var __:_;Destructor (){_::$7().k.i();}Destructor (){} }Class Jj{Constructor (){}Constructor (_n:Float ;B,o6_,__f,UA,_1,L00c_,__4:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 183))

    def test_184(self):
        input = '''Class E{_(J4:U_9;L,_:Array [Array [Array [String ,0X32],022],0b110001]){} }Class y:j{Destructor (){ {} }$e(_9m:Array [Int ,0b110001]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 184))

    def test_185(self):
        input = '''Class m_{__(O,nN:Array [Array [Float ,0115],73]){Val A:Array [Array [Array [String ,0B11_1],06],0x64];} }Class __4:uN_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 185))

    def test_186(self):
        input = '''Class W_0W:__{$W__(_:Array [Array [Float ,9],0b1100100];_:Array [Float ,021]){Val L:Mq;Break ;___7::$9M._iY9_();}Var $_K:X_;_(){ {Break ;}Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 186))

    def test_187(self):
        input = '''Class _P__{Constructor (W:Array [Array [Array [String ,02],07],0B1001011];_,_X5L,_03:Array [Boolean ,05037_4]){} }Class _03{}Class __S_:L9{}Class _:V{Var $_,$_:Array [Array [String ,0B1001011],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 187))

    def test_188(self):
        input = '''Class _{Var s1Ru9:Array [Array [Boolean ,0X88_A],0b1];Val $_1_:Array [Array [Array [Boolean ,07],0X3],7];}Class _{}Class _{Var $9:Array [Array [String ,03],0X55];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 188))

    def test_189(self):
        input = '''Class K:u{Val _2:Array [Float ,0b1_1_1_011_1_11];}Class _P_y{}Class ua{}Class b:w{Val $4,$1:_e;Destructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 189))

    def test_190(self):
        input = '''Class __Kw:_{}Class _v__:_t{Var _z,$_yg,K:D;Constructor (__:Array [Boolean ,0b1];_:Float ;_2_UeG_,_:dg5V){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 190))

    def test_191(self):
        input = '''Class J{Var $2:J;Destructor (){} }Class V{}Class _{Val i,_:Boolean ;Val _:Array [Array [Int ,0b1000110],76];}Class Z347{}Class _{Constructor (){e::$31();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 191))

    def test_192(self):
        input = '''Class z{Destructor (){}Constructor (o,npL:Array [Array [Array [Array [Float ,11_2],0b1],054],0b1];__:Array [Int ,031]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 192))

    def test_193(self):
        input = '''Class _{}Class _{}Class v_:M{Var $__:Int ;}Class Q{}Class _:__3{Constructor (){} }Class _:_5q6{Var R_,jD_,_15__:Array [String ,0B111010];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 193))

    def test_194(self):
        input = '''Class w{}Class Bp9_:e{Val $_,$2_,$k,$D:Array [Array [Array [Array [Array [Boolean ,0B110_0],0B1_0],0X5_1],07_55],0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 194))

    def test_195(self):
        input = '''Class N:F8_{Val $_:Boolean ;Val $_:Int ;Destructor (){} }Class G4{Var _7,$_:Array [Float ,0B11000];Constructor (H:Array [Boolean ,0116];_:Int ;_5,_,j9_q,__:Array [Int ,68]){} }Class r_B66:Lk{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 195))

    def test_196(self):
        input = '''Class _:o_{Var $7,D_,$P22:Array [Array [Array [Float ,0B1],0B10101],0103];}Class _{Val $44,__,$Z1_:String ;}Class b__w{$4dw(_1:Array [Array [Array [Array [Float ,0B10101],0103],0X53],0x15];_:_2;K_N,H49_:w){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 196))

    def test_197(self):
        input = '''Class zg{Destructor (){}Val $z,$Z_,_a4,_:Array [Array [Int ,71],0142];Val x:Array [Int ,0b1_0_0];}Class _7:W_{}Class _{}Class Q4{}Class nf:_t{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 197))

    def test_198(self):
        input = '''Class P_03:C{Constructor (_2,Q_BF,_2,_o7,__,_4__55_60,_2:Array [Array [Float ,05],5];_,C_5,_8:Float ){} }Class h2{}Class _:zkh{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 198))

    def test_199(self):
        input = '''Class d4:_{}Class ___:_4y_9q{}Class Z_9:_{Val __9:String ;Constructor (_I5:Array [Float ,0xC_D_5];v__6:Array [Float ,71_2_0_6_4]){}_(P:_;_,r:_){Break ;} }Class __:Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 199))

    def test_200(self):
        input = '''Class U0{Destructor (){}Destructor (){ {} }Val $_:Array [String ,0B100111];Destructor (){} }Class T:_7{}Class P{I(W2,_U,YER2:Array [Array [Array [Array [Int ,022],0xFB],38],04];I:_){ {Var _:String ;Return ;} }Val $r:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 200))

    def test_201(self):
        input = '''Class _{Var P,$7V9_,$_,$u:_;Var $_,_:Array [String ,061];$t_(_,__,W_:_7){}Var $JN8_0:Array [Float ,04_4_6];}Class _:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 201))

    def test_202(self):
        input = '''Class _:R3A{Val $9,_:Boolean ;Constructor (G,h_,_,_,_,H,f:Array [Array [Boolean ,0B100101],0B100101];_,_V:Boolean ){} }Class H:_132_5{}Class Ki{Constructor (__,QV,_,_,FJ:String ){}Constructor (_,L59:_4_;BI,_,p,t:Array [Array [Array [Array [Array [Array [Int ,0X16],25],0B11],8],0X16],02_6_521_1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 202))

    def test_203(self):
        input = '''Class bI_9_:h{}Class z1:j{}Class u{Var $7:Array [Array [Array [Array [Array [Array [Float ,0142],0142],0x5],0X31],0x29],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 203))

    def test_204(self):
        input = '''Class e_:z{Var _:Array [Array [Float ,0B1],0X5];Constructor (m,_Z1,I,__7:Float ;__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0117],1_5_5],0117],0b1],0117],0X26],32],0B111000],0x23]){} }Class _:DGQ{Constructor (){}Val _6,_54,_6,$8:Array [Float ,0B1_1_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 204))

    def test_205(self):
        input = '''Class __0:_{Destructor (){}Destructor (){} }Class _{}Class B{Constructor (){Continue ;Break ;}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 205))

    def test_206(self):
        input = '''Class t:A_3{Destructor (){}N(){}I_(J9,H,v3__,n4:String ;s_7_O,_2_,_:Array [Array [Array [String ,02],012],8_96]){}t(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 206))

    def test_207(self):
        input = '''Class __D{Val _,$_,_,_,_,$__p:Array [Array [Array [Array [Array [Array [Array [Boolean ,0X57],32],0x1E],0B1],017],32],0x1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 207))

    def test_208(self):
        input = '''Class _:O2_B_{}Class _0{Constructor (_6:i7;_i_4,g,_A:_;_p,_8f,_,_,_,X:_){}Destructor (){}Constructor (){}_U(){ {} }z_068(uCu3,_:Array [Array [Int ,24],04]){ {} }Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 208))

    def test_209(self):
        input = '''Class _:k1_{$_11(h7:___4;u_,_p:Array [Array [Boolean ,0B1],0113];_36,f3,_,_:Array [Array [Array [Array [Boolean ,0X44],19],0113],73_8_6];_,R_,_:_47_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 209))

    def test_210(self):
        input = '''Class U{Val $e_:N=-M1::$_5_7()%!-------gR::$_+.!_::$_()._460._().p.w8;}Class xj{Destructor (){ {} }Destructor (){}Val $_o:_y;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 210))

    def test_211(self):
        input = '''Class hZA2{Val $o8,$1_:Array [Array [Array [Float ,041],32],0X1_E];}Class __{P(){} }Class _{k(k,_:Array [Array [String ,041],041]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 211))

    def test_212(self):
        input = '''Class _s_:T{Val Q_5:_;Var w,$3,$7_R6:Array [Array [Array [Array [Array [Array [Array [Int ,065],71],0xE],0B1101],0x33],1_9],0b1011110];}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 212))

    def test_213(self):
        input = '''Class _{}Class __2{Var $j1_6__,$0:__;Var uCjR:_O;}Class w79_:_{Constructor (J,_r:Int ){}Var $_6_:Float ;Var $24e,__q,$8_,$____:m;}Class F_2_9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 213))

    def test_214(self):
        input = '''Class ___KS__{}Class K:_r{Val _,c_7P:E2_;Constructor (I:String ;_U_,_L6_,p,_:Array [Int ,62];_,w:Array [Int ,9_6_0]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 214))

    def test_215(self):
        input = '''Class uR:_4{$r(N,__,_a:xG;F:String ;_:Int ;_,CV,__i_:Boolean ;E,_,__6,P,Nr:Array [Array [String ,0x22],01];O9:Array [Array [Array [String ,0b1],07],0B1010100];C1,f_:Array [String ,072];m__,e,d_:Boolean ){}Destructor (){} }Class _:SJ{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 215))

    def test_216(self):
        input = '''Class T:_4J{Val $h:Array [String ,067];}Class _78:_{}Class MG_:__1{}Class __:_2__2{Var Z,_,$K:Array [Boolean ,61];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 216))

    def test_217(self):
        input = '''Class i6:_{Destructor (){}$_R(){}Constructor (k,J:Array [Array [Array [String ,0B1_11],0XF_6],0b11010];_,_,W,p:Array [Float ,0b11010];o,_J:Array [Array [Int ,0134],0b1];f:_5_){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 217))

    def test_218(self):
        input = '''Class w:wcv3_O_{}Class __:_{D0(_M,_,_:__;D:Int ;gA,U_,z,a5,ygjJ7eY,P_:Array [Array [String ,043],0b1_0];_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 218))

    def test_219(self):
        input = '''Class QP{}Class _:z{$_(_,v,_C,h,_L:Array [Array [String ,14],0x9];_,_:Array [Array [Int ,5],0x9];F,t,_G,_,R,_:Array [String ,3]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 219))

    def test_220(self):
        input = '''Class _0:I{$_(_:_;LG:Array [Array [Array [Array [Float ,0X33],0X33],03],4];zD,h:Boolean ){Return ;}Constructor (_,x_:_U7_js_){} }Class U_:g{Var $dV1,$2__:String ;Var yjO:___5;}Class _:R{Destructor (){} }Class _:_{}Class _:Y{}Class _4:g{}Class __{}Class V_7_:k_71{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 220))

    def test_221(self):
        input = '''Class _:_t{Val O:N;Val _:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0x18],23],23],0B1001],0b1],23],0b1],0b110011];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 221))

    def test_222(self):
        input = '''Class h:_9{$2(R9,q:Array [Array [String ,98],0x45];I,_32,_,_887__,_,q428:Array [Array [Array [Array [Array [Boolean ,98],0x6_5],0x45],0b1100011],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 222))

    def test_223(self):
        input = '''Class __9_:d___T{$CWO(_:Array [Array [Array [Array [Array [Int ,78],0xB],02],0134],8];A:Array [Array [Array [Float ,78],78],06]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 223))

    def test_224(self):
        input = '''Class _R___83_UQ5{}Class _{Destructor (){}Constructor (__,_h6:Array [Array [Int ,4],0x6];__:String ;Uc,_,_:String ;__,_:_;D,jH,_5:Array [Int ,0100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 224))

    def test_225(self):
        input = '''Class _3I:__{}Class me98:_867__sn6{Val $r,_OC22Kk_sd,_:Array [Array [Array [Array [Float ,05_3_3_0],1],0xC01],5_4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 225))

    def test_226(self):
        input = '''Class I{$c(G,F:Array [Boolean ,76];_:Array [Boolean ,012];Z:Array [Boolean ,06];_:Array [Int ,01]){} }Class _:W{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 226))

    def test_227(self):
        input = '''Class _:TJM8bs{}Class _1:_I{Constructor (a_,z_,g,p,x,_0zDu:Array [Array [Array [Int ,0x12],0x12],0X4C]){} }Class Y:_{}Class lW{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 227))

    def test_228(self):
        input = '''Class O:_{Constructor (){Continue ;} }Class _jL4_{Var $8,$F,h:Boolean ;Val v_,$25,__96,$9:Array [Array [Float ,0X56],0xE];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 228))

    def test_229(self):
        input = '''Class J:_{}Class _:__{}Class _y8N:_{Val $Q,$_,e,__:Array [Float ,070];Constructor (_3,__4,ij:_8_4){}Val $W_R7:Array [Array [Array [Float ,01],04],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 229))

    def test_230(self):
        input = '''Class E{}Class __:p{Var _3,$_____:Array [Array [Array [Array [Array [Array [Array [Boolean ,4],92],2],0b110100],5],0X10],0X10];Val $57__71o_,v,__D:Array [Boolean ,04_3_0_2];Destructor (){} }Class d{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 230))

    def test_231(self):
        input = '''Class _4c:G{Val M:Array [Array [String ,05_7],0X1];Constructor (_,n,_,K:g;_d:Boolean ;VDN:R_5S_){}Val WZ:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 231))

    def test_232(self):
        input = '''Class _:_{Var $__94,z:Array [Array [Float ,4_3_987],0x53];Constructor (){Continue ;}T(){Continue ;Break ;Break ;}Constructor (_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 232))

    def test_233(self):
        input = '''Class _:n__{_(M,_G__:Int ;R_,_2,__,_dGe,S_G,B:Array [String ,0b11000];kr1,__:P;yp70,_7,QV7:Array [Int ,0B100101];__V3:__d;m_:Array [Array [String ,0X64],46];_,g:_;_:i_;_:String ;a:Array [Float ,0141];o_o_,_:Array [String ,0x1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 233))

    def test_234(self):
        input = '''Class __8P{}Class __4{}Class F:df{Constructor (_,_:Array [Array [Array [Array [Float ,75],3],055],05_0]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 234))

    def test_235(self):
        input = '''Class d:_2n_{}Class _R{}Class q{Constructor (Z:Float ;v,E5,f3__,__:Array [Boolean ,020];__,D6,M8,N,_1,_Y5,_,y,_f:Array [Array [Float ,05_6_0],0B10001];O6vx,_:C5){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 235))

    def test_236(self):
        input = '''Class _:k{$Ql35oZ(_X_,t:Array [Array [Int ,2],0b11111]){_::$_6();}Constructor (P,X,D:J){}$j(){}Val $S,C:Array [Array [Array [Array [Float ,0B1],0X2D],0B11],5_13_6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 236))

    def test_237(self):
        input = '''Class a:_4j6{Constructor (_,q,t,Q:Boolean ;_:Array [Array [Array [Array [Boolean ,0X24],0B1],0x99],0X24]){}Var G8n:Array [String ,046];Destructor (){} }Class ___A:_B{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 237))

    def test_238(self):
        input = '''Class _:_{}Class I{}Class l:_K_{}Class gW{}Class X2:_W{Var $s:String ;Destructor (){} }Class _1:_rW07{Var $u:t;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 238))

    def test_239(self):
        input = '''Class _8{Val $_2:Array [Array [Array [Array [Array [Array [Array [Boolean ,0x61],85],0x61],0B1001110],0122],0XE_93],0x61];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 239))

    def test_240(self):
        input = '''Class _p{Constructor (a,f:Array [Array [Array [Boolean ,0x42],0b111101],0x2_9];g3:Array [Array [Array [Array [Array [Array [Float ,0402],0b11_1_0],1],0x42],0x42],0B101001]){ {}Return ;}Val $_:_;Var __j:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 240))

    def test_241(self):
        input = '''Class _{$U18(_S2_:m_9N3;_:Boolean ;_J_:Array [Int ,0X2A];a:Array [Array [Array [Float ,8],0B110],0B110];_:U){Continue ;}Var __6330:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 241))

    def test_242(self):
        input = '''Class __{Val _:Array [String ,0B101101];_1_(Q,x:_U_;_1:I_){}Val _5:Array [Array [Boolean ,0B1_1_10_1],99];Var _,_22Z,$wK6:Array [Int ,0b11];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 242))

    def test_243(self):
        input = '''Class __:_{}Class __1:_4{Destructor (){}$9(d:_;i,E:Array [Array [Array [Int ,25],0B110],0b1010100];_:Array [String ,0xD]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 243))

    def test_244(self):
        input = '''Class M{}Class Fc_{}Class M{}Class _a__xu{}Class BF_{}Class _288:_2{}Class _{__eJ(c3:Float ){}Destructor (){} }Class __96{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 244))

    def test_245(self):
        input = '''Class ___:m__{Destructor (){Break ;}_(_o,h:Array [Array [Array [Array [Int ,0b1_1_1],32],0x60],0b1001111];_2U_,K:_75_;_:Array [Int ,7_6];__:Array [Float ,03]){}Destructor (){} }Class I{$0(L:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 245))

    def test_246(self):
        input = '''Class _{}Class u{}Class _R{Val o:Float ;}Class _{}Class M2m_:Y{}Class __2{Val $_6,X,K:_;}Class O{Var ke,JO:Array [Array [Array [Float ,26],051],0B110110];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 246))

    def test_247(self):
        input = '''Class IK_4:_{Val $1,_74:Array [Int ,047];$M4(s8I:Array [Array [Array [Array [Array [Float ,047],0x58],047],7],0b1]){Continue ;Qz::$P8.o();} }Class N8:D{}Class n:Y{}Class n_:_{}Class U_m40:_{$J(){Return ;Continue ;Z::$1();Continue ;} }Class _{}Class _:G{Constructor (ur,_:Boolean ;m,Y,r:Array [Array [Float ,05],0B1011000]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 247))

    def test_248(self):
        input = '''Class _JL:__{$h(d,_:Nv3x;IU,K_0,_04,_:_){Continue ;}O_(_n_2:Array [String ,0x31];Z,A82U,_:_f6I;A_6,_5:Array [Array [Array [Boolean ,0X2E],0x31],0b1];_,_:Array [Array [Int ,61510],37]){} }Class C:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 248))

    def test_249(self):
        input = '''Class L{}Class _27{}Class Sv:_1{Var c,_,__,$v,_,$oY:Array [Array [Int ,0b1],78];Var $_6v,Cx2,$7:Boolean ;}Class D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 249))

    def test_250(self):
        input = '''Class _J{}Class D:G{Constructor (_:B_R7;__g:Array [Boolean ,066];F2_,_,c1_:_;_,_1:H){} }Class eU{Val y,$2lPR6,$Ay,$_,$5,qAD7,$3,A,_E:J;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 250))

    def test_251(self):
        input = '''Class e_{}Class _:i5{$_3(_iZ_:Array [Array [Array [Boolean ,0b10111],0B111101],0X54]){}Constructor (){}Constructor (l,e,_1__ydl_:u;_5:Boolean ;_:Array [Float ,0b10111]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 251))

    def test_252(self):
        input = '''Class i{e(){} }Class _{Val _r6:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1],06],05],0xFE_2_C],0X6_C],0b1000110],0x2B],71],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 252))

    def test_253(self):
        input = '''Class _{Constructor (x0_8:Array [String ,35];_,d:Array [Array [Array [Array [Int ,0B101110],0b1_00],030],0x5F];_,g8_7_,E_:Array [String ,06]){Return ;} }Class M:_uf14O_94_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 253))

    def test_254(self):
        input = '''Class _{Destructor (){}$s(nL,o:Int ;_8:Array [Array [Array [Array [Array [Array [Array [Boolean ,0xB_325_1_26A4],0X63],07_4],3],98],40],0b1011000];_,_0,_,_:String ;__4,Qb,l,__W,_:_Y5;K6___:Boolean ;_,_4,_,_,__:_2){Val _o_:i;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 254))

    def test_255(self):
        input = '''Class _{}Class _:_A_K{}Class U{Val P,$Mp3f,$K,A,$F:Array [Array [Boolean ,0130],0xF_E];Destructor (){ {}Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 255))

    def test_256(self):
        input = '''Class vM:_{Destructor (){} }Class _:_4b{}Class r3{Val $__:PF_0;F6(h,A:_;m:Int ;Ub_,G:f3;So:_){} }Class s_:m_w{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 256))

    def test_257(self):
        input = '''Class _:g{}Class __:__a_{}Class _M_:ws__69{}Class G:S8{}Class __:_{}Class _:jIU{$8(X,__,_:Array [Array [Boolean ,076],100]){Continue ;Return --_::$_59.B3tQ_();Continue ;} }Class X:_B2N8z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 257))

    def test_258(self):
        input = '''Class _H{Constructor (){} }Class E:_{}Class GA_{Destructor (){}_w(k:Array [Array [Array [Array [Array [Boolean ,0b1],0X1E],0B1001101],03_0],015]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 258))

    def test_259(self):
        input = '''Class _6:_4{}Class Cq8{Constructor (G_b,G4:_q;_:P3Z;C_E_W_l,C7L,_k_,____,__:_3;L,HE,_:Boolean ;_80_u,d96:_;__r4_2,E8__:_;I_d,_,_G,Y:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 259))

    def test_260(self):
        input = '''Class __{Constructor (Yo2_:Array [String ,0xC_4]){}Val _1_:Float ;}Class _:I{Destructor (){}Var _,V:Array [Array [String ,0b100001],050];}Class __:___0{Destructor (){}O(){}Var S__9:String ;}Class _vr:S{}Class _o_:_{Constructor (x,_52_:_;_6:Float ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 260))

    def test_261(self):
        input = '''Class _{}Class u5_:_9_1{Var $_,__,_:Boolean ;}Class __D{}Class _:i{$5(){Continue ;Return ;} }Class __:a{Val _,i0,$E:n4A;Constructor (__,__:Float ){}Var $2_,$4,_:Array [Array [Int ,6_6],066];}Class _S{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 261))

    def test_262(self):
        input = '''Class M:p02{_(_,_,_,_,_:Array [Float ,0512_72_5_2_5];_:Array [Int ,43];O_,N,xr_0,_,_k2,j__69:Array [String ,0b1001100];qr,_4:Int ;s_6_3:Array [Array [Array [Array [Float ,0B1011],43],0x5E],5];Q:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 262))

    def test_263(self):
        input = '''Class _6_w{$GB(m,u,_,j3:String ;U:Array [Float ,0B1010111];cc_,T3_qc,Cb0D684,Uh:Boolean ;_,v,E,_e_,__415:Array [Float ,054];xj5:t;___M,AS_:Array [Array [Int ,0x30],0xE8E];Ba2_,R:Array [Array [Int ,0x30],054];___:Array [Array [Array [Float ,25],0B1],49]){Var gh60hjI,h7,iv,h3U:_;}Var x2,P86,$F0:Int ;}Class w_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 263))

    def test_264(self):
        input = '''Class _6{$pi(B:Array [String ,0B1];_T:Array [Array [Boolean ,0X42],0X42];O9:W;D:q;BA,__00eP,_,__M,B_:QA;M:Boolean ){}Constructor (){} }Class V:_G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 264))

    def test_265(self):
        input = '''Class o{Constructor (l_s__,__,_:Array [String ,3];_:I;__:W){Break ;}Val __4_5r_:Array [Array [Array [Array [Array [String ,80],02],80],060],0XE];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 265))

    def test_266(self):
        input = '''Class O:M{}Class _F_:_{}Class _3{$wB4(b,w:Array [Boolean ,98_9];A,b_8,H,_,hi,mV,_,_,P49:String ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 266))

    def test_267(self):
        input = '''Class b{}Class __i_g9{}Class _f:__{}Class _{}Class Z_:_pUZY_{Val $__,_:Array [Array [Array [Array [Array [Array [Array [Float ,6],053],0B1000001],0b100110],0XD],053],034_03];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 267))

    def test_268(self):
        input = '''Class qu{Val $w:Array [Array [Float ,0B1_0],0B1];Val _,_,W_,$j_D_:Int ;$S(_:Int ;_:Array [String ,6_6];x:E5){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 268))

    def test_269(self):
        input = '''Class _{$X(diR:K5h6;VX:Array [Int ,0X1_F]){}Destructor (){} }Class y3:w{_0(x0,r,a:String ;_,_6:Array [Int ,0b1];_1g9:x_MW){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 269))

    def test_270(self):
        input = '''Class h40{}Class M{}Class rG__4{Constructor (_,___:Z8_;__,M388_,_6,d__:Array [Array [Array [Array [Int ,0x13],0B10],0b1],0B10]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 270))

    def test_271(self):
        input = '''Class w_M{}Class __:_e1{Val y_,$v_,__,$_K_,$3X:a_;Val $_:Array [Array [Array [Int ,0b1_1_1],0x5D],0X54];}Class _:_{Val _7o,$__k1_:Array [String ,0b1011];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 271))

    def test_272(self):
        input = '''Class _{Var f6h,___:W;}Class D7:___6B39{Destructor (){e6m__::$78()._r();} }Class _{}Class _s_{Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 272))

    def test_273(self):
        input = '''Class _:__1k_{Val $_,r,_,$5,A4_,_,$_,OF39,$2S,$S:Float ;Destructor (){}_x(_:Boolean ;_s_,C:_2;_,g,N:Array [Array [Boolean ,0B100000],0B100000];z2,x:Array [Array [Float ,0X38],13]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 273))

    def test_274(self):
        input = '''Class _{Constructor (__:String ;__,_8,P:String ;__4_:Array [Float ,0XC];CC,k:Boolean ){Continue ;} }Class _:ZN__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 274))

    def test_275(self):
        input = '''Class _{Constructor (){} }Class _:h{}Class _{}Class __2_b{}Class _{}Class t4__{}Class k8H:H{Destructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 275))

    def test_276(self):
        input = '''Class _:_83{Var c,_,E,_:Array [String ,0XB];}Class Ep8:_{Destructor (){} }Class _:_e3{Destructor (){} }Class o:h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 276))

    def test_277(self):
        input = '''Class __{$9__j_h(_:String ;f345_,H5,_:Array [Float ,3_8];L:Array [String ,0B1]){}Constructor (){} }Class t:u_{}Class Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 277))

    def test_278(self):
        input = '''Class _:G{Destructor (){}$L_p__(a_:Array [Float ,01]){}Constructor (_2TL:Boolean ;e_,A8,f_:Array [Array [String ,036],76]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 278))

    def test_279(self):
        input = '''Class _:__1{}Class Gb_{Val y,$d5:Array [Array [String ,02],0b100000];}Class _7_{v(_,f,p,_:Float ;v:Array [Float ,0b100000]){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 279))

    def test_280(self):
        input = '''Class P:V5{}Class _4_6{}Class k:r{}Class ZB_:rY{}Class _U{Constructor (CJ:Array [Array [Array [Array [Int ,0x12],0b1000001],021],0b11];__3,_6OQ_:l){} }Class vGZr{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 280))

    def test_281(self):
        input = '''Class _IE_{}Class H{Destructor (){}_4(h:Array [Array [Array [Boolean ,0b100111],0B1],0B1010000];_:Array [Boolean ,077]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 281))

    def test_282(self):
        input = '''Class ___:U{Val $N:_yB;Constructor (H_e7:Array [Array [Array [String ,0XE],0xB],0125]){Return ;}Val __,s:xD;Val $_4M_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 282))

    def test_283(self):
        input = '''Class _v{Val $_:_;$Sc_(){Null ._().G_.m();Break ;Var _9_:Array [Array [Array [Array [Array [Int ,26],26],0B1010],0X2D],0xE];}_(L:Array [Array [Array [Array [Array [Array [Float ,0B1010],074_7],06_4_5],063],0B110],063];__j_:_;Q38J__,_,_,w_1,__j,__:String ){}_(P,_,_V:i){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 283))

    def test_284(self):
        input = '''Class _{Val _r:Int ;Constructor (){Return ;Var m:Array [Float ,0x1D];Break ;}Var cv:Array [Array [Boolean ,0b1],0X7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 284))

    def test_285(self):
        input = '''Class __:H{Val _IA,e,$7,_:Array [Array [Array [Array [String ,0X1C],01_1],9],0x4D];Var $S_35:Boolean ;Constructor (n,_H4o:Array [Boolean ,0b1];_0,t,_,I4:D8mbF){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 285))

    def test_286(self):
        input = '''Class Kn7:_y{}Class Vl{Var _,$_,$2_:Array [Array [Array [Array [Array [Array [Array [String ,0x21],037],0B1100001],44],0x21],0b1_01],0x8];}Class __1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 286))

    def test_287(self):
        input = '''Class _:Y8{$7(_:Array [Array [Array [Boolean ,0B110101],0b1],0b1101];PZ,r:Boolean ;___2:Int ;n,q_d_0_:g_W5;O,D,u:Float ){} }Class __9:d{Constructor (D44:_;V,G0:Float ;_,iG:Int ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 287))

    def test_288(self):
        input = '''Class l:_{}Class v:__u{Val _:Array [Array [Array [Array [String ,43],9_35],43],0b111100];Destructor (){}Val _:c_OA;}Class F_7{}Class _7:_0{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 288))

    def test_289(self):
        input = '''Class _H__Bw_:_h5p{Var $_:Z;Var _3:Array [Array [Array [Boolean ,1_232],0XC_F],0X30];Val $B,___I3h,__:Y1_;Var _:Int ;}Class _:J{}Class N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 289))

    def test_290(self):
        input = '''Class Z:Q{Constructor (_1:Int ;K,g:Array [Array [Boolean ,67],7_6];kW,r4_C:_){Break ;Val T2p:String ;} }Class ____:j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 290))

    def test_291(self):
        input = '''Class yA{Destructor (){Val U,_,B,_,SzJi6_Q,_B,f,U51k,_:Array [Boolean ,0XB_7];}_a(o6,g_,_4_:Array [String ,07]){} }Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 291))

    def test_292(self):
        input = '''Class g{Constructor (){_1___::$W().Z953E();M::$lm33m8();}Destructor (){}Constructor (){}Var k,$g04,$b_9,_5:Array [Float ,0X19];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 292))

    def test_293(self):
        input = '''Class _1:_Ai{Val r:Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1],3_3_6],0B1_1_01_0],04],8_6_6_9],0b1011011],0x13];Val _,$5009:Array [Boolean ,0B110111];$4(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 293))

    def test_294(self):
        input = '''Class s1Q{Var C,$I:Array [Array [Array [Array [Array [Int ,0b1],0x3],0x4],6_1],68];}Class _{Constructor (_:Array [Array [Array [Boolean ,68],06],06];_C_3,T__:Array [Array [Int ,0x1B],6321];__:Array [Float ,0x2];_:R){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 294))

    def test_295(self):
        input = '''Class _{$83(a1_f,J8XM2:Array [Array [String ,0b1],017];_C,I:Array [Array [Array [Int ,0B1],7_4],3_5_0]){ {Continue ;} }}Class _5:c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 295))

    def test_296(self):
        input = '''Class Z{Destructor (){Val dQ,A91:Int ;Break ;J7::$__j();} }Class uu6a6_{}Class K8__:i_4{}Class h{}Class B:GR__7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 296))

    def test_297(self):
        input = '''Class j:F{Constructor (){} }Class mM{}Class IJ_EX10{Var _,z_X:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0XD],074],0x2E],0B1100_11],0x9],0X10],01],0XD],01],94];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 297))

    def test_298(self):
        input = '''Class _{Val _7_8,$o_9_,$2,_:Array [Float ,67_6];Constructor (){Var _28_,_,_Y:Array [Boolean ,0X40];Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 298))

    def test_299(self):
        input = '''Class _{Constructor (_:Array [Array [Array [Boolean ,0X3C_5],18],18]){}Var s1W,$_51:_L_K_7;}Class B:D{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 299))

    def test_300(self):
        input = '''Class __:_x7{Destructor (){Val _,_,F,_,_:_;}Var $Iv2w:Array [Int ,64];Var $__B_:Array [Array [String ,0b111011],055];Destructor (){Return ;}Destructor (){Break ;}_(I_:Boolean ;__:N5R;_,p_:Float ;Y:Boolean ){} }Class O{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 300))

    def test_301(self):
        input = '''Class _4U__{}Class e{Constructor (i:Array [String ,0b1];S,_,_9:Float ;s1o,j_4K,_,FL,l,_:Array [Array [String ,0X8],0x4A];y:h15){} }Class r{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 301))

    def test_302(self):
        input = '''Class z6:_{Var b_,H,jC,R__,$52,$W8,__b,$04,D,_:g63_;Var $5_,S2_:Array [Int ,46];Destructor (){} }Class _7V{Var $_5:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,030],46],030],8],030],0b11000],030],030],0b1];Val K_,_:Int ;Val $_,$j4h:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 302))

    def test_303(self):
        input = '''Class f0_8:_{}Class a:ck{}Class _84{}Class _:U{Var $3_:Float ;}Class v{}Class _F_:__{Var s:Array [Array [Array [Array [Array [String ,02],0X3],0X3],0B10_00],14];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 303))

    def test_304(self):
        input = '''Class _4:v_{Constructor (M,q,O:Boolean ){}$4J00(q:w4Y;__P:I;Z__1,_J__:Array [Array [Array [Array [Array [String ,0B111110],89_4],0X28],0b101000],02]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 304))

    def test_305(self):
        input = '''Class _:_{Constructor (v:Array [Boolean ,0x17];G60,_1E3:__;v40d,_,__21__:_J){}$165_(_:__;_2h_:_){} }Class N_{$o_(si,sX,_P3N,_,_w:__;bC_,_R:Int ){} }Class P:_{}Class _T0:XE{}Class q:M_8{}Class _I:S{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 305))

    def test_306(self):
        input = '''Class _:Q{Destructor (){ {} }Constructor (_9:Array [Array [Array [Array [Array [Int ,05_2_55],0b101100],69],0X7_9],0B1001100];__,_7:_){} }Class w_:LE_{}Class _cL{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 306))

    def test_307(self):
        input = '''Class _:_{Constructor (_0N:Float ){}Val _n_a51,$y098:v;}Class __:S{}Class s:_V03{}Class _:Wo97{Val $23:Array [String ,0121];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 307))

    def test_308(self):
        input = '''Class _{Val $_,$7_:_9;Var _,$_SgL7,__,$pV_j:i;Var $0,__:Array [String ,027];Destructor (){ {i::$_();} }Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 308))

    def test_309(self):
        input = '''Class _14{}Class lY46w7K:F_8{Val $w_4,$_:Float ;Constructor (B:String ;aP:Array [Array [Int ,0b101001],0X37];_:Int ){ {}Continue ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 309))

    def test_310(self):
        input = '''Class n{Destructor (){Break ;}$9_a11(_G:_;Qv,_:Array [String ,8_4]){Return ;F_::$10_85_3l2=!!!!!_::$9S.J_;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 310))

    def test_311(self):
        input = '''Class __{Constructor (d77c:Array [Int ,1];X,_:Boolean ;_,O:Array [Array [String ,7],034];gi,_w2:M0__){Continue ;Return ;} }Class _3__w:rLhj9739{}Class _6J{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 311))

    def test_312(self):
        input = '''Class _:_w{}Class L1b{Constructor (k,_g,_t:Array [Array [Array [Array [Int ,0xE_E],01],74],06];DL4,d_,P6,E_,_:Int ;_,u,T,r:_7){_::$_();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 312))

    def test_313(self):
        input = '''Class _:__8{}Class _{Constructor (G7,P,m:Array [Array [Array [Array [Boolean ,0B11111],0b1],06],024]){Var _:String ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 313))

    def test_314(self):
        input = '''Class __:dw3{}Class _{Val y4_,_Q:Array [String ,0B1];Var $n__1:Array [Boolean ,8];}Class __:l{}Class kJ{}Class W_:_5{}Class m4{Destructor (){} }Class _{Destructor (){}Var $9Nn_:K4;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 314))

    def test_315(self):
        input = '''Class Q__{L_(C:Float ){Val _3:Array [Array [Array [Int ,96],0111],0B11011];} }Class T{}Class c_:_{Val d8:Gi302;Constructor (_,_:J__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 315))

    def test_316(self):
        input = '''Class _0:H{Destructor (){}_v(SI_:Array [Array [Float ,4],0b1];_5,_:Int ;K_,_,q,K2,_,_,__1,D0_,_6,_,_:Array [String ,0b11]){Break ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 316))

    def test_317(self):
        input = '''Class t_34___:c{Destructor (){Var _,wku__K:f;} }Class _x9:Q6{}Class _8:__{$KDT__(_0__:__S0;j:_){} }Class I{Var XJ:Pm;Destructor (){}Val O_,r,$8_,$_,_58,$5,$W2,_4_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 317))

    def test_318(self):
        input = '''Class __1M{Destructor (){If (!!!----X::$60.Y().W_().FJ0()/!j::$_._[---_::$4().___().d.w*!t_4::$m-"".__eW2()._s.J()]*!!!-B::$q().x().n){} }}Class Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 318))

    def test_319(self):
        input = '''Class __{Constructor (_:g;i0__8:Float ;f,__,_8:Array [Array [Float ,0b1],0b111100];_,E,X82:Array [Array [Float ,0b111100],0b111100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 319))

    def test_320(self):
        input = '''Class _8C_{}Class __{$_(a:_){}Var $9_v:Array [Array [Array [Int ,0XC],0XD],0x2C];}Class P2:i_{Destructor (){} }Class __:h{Var $js1_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 320))

    def test_321(self):
        input = '''Class w{}Class __X:__F{}Class __Q{_o_4(){}Var $r,$6A,_55:Array [Array [Float ,0X5B],0B1];$k(_,i,sx:Array [Boolean ,07];_,a:N_){}Var $7,$9,$7A_,X,$d:IN;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 321))

    def test_322(self):
        input = '''Class O_{}Class a:_{}Class R{Destructor (){}Constructor (qD,_x,gBv2_:Array [String ,9];z:Boolean ;my4:String ;__5:_6;z,_,N:C){}Destructor (){ {}Break ;} }Class T:_Gb___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 322))

    def test_323(self):
        input = '''Class _{Var _:p;T(P,P9_:Array [Array [Int ,2_26_27],1];t,Pf:_){}Val l,_:Float ;Destructor (){}Constructor (Q,B_,_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 323))

    def test_324(self):
        input = '''Class _{Var V_,$_:Array [Array [Array [Array [Array [Array [Array [String ,0b11001],5],0b1],0X48],5],0b11001],0B1_1];Constructor (___3S:Float ){} }Class _:_G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 324))

    def test_325(self):
        input = '''Class w:_{Val a:Array [Int ,84];Destructor (){Break ;}_7(_,Y,_:String ;c51X,t,_:_9L;_o,_:String ;_H1_:String ;J:_x;_b_w5w_eyb:Float ;r:Int ;f,D_r,d6:Array [Array [Array [Float ,03_0_5],053],0b101010]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 325))

    def test_326(self):
        input = '''Class G{Var __aK,i9,A:Array [Int ,0B111_1_00];Constructor (z:Float ;u_,_,ov8:Float ){ {} }Constructor (t:String ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 326))

    def test_327(self):
        input = '''Class D_P{Val $m:Array [Array [Array [Array [Array [Boolean ,0B11100],63],6_4_4_0],0b1_1_1_0_00_0],63];s(){} }Class rlf5:U{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 327))

    def test_328(self):
        input = '''Class _01P:_zY{Var _,_jo1,_h,$8,_,_9i,$Z4_w__,_U,p8_,_u1:Array [Array [Array [Array [Array [Float ,0106],0xC],0b1001100],0x4],0b1_000];}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 328))

    def test_329(self):
        input = '''Class _X{$_3(d,i3,tf____4_,_,IU,_3:_;l:Array [Array [Array [Boolean ,02_1],0X2B],022]){}Val $q,$v:Float ;}Class a{}Class _94:_{Var $84_i_58:p7;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 329))

    def test_330(self):
        input = '''Class _L_1:X{}Class _:__{G4(_0,k07N048:Array [Float ,31]){}Val _,$41_Z,$_c_T_,_3,s7,d_:Array [Array [Array [Array [Array [Boolean ,4_52],022],0b100],0b100],0XC_C7];Constructor (){}Constructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 330))

    def test_331(self):
        input = '''Class Cs:_{Val $1QN:Array [Boolean ,05];Constructor (__2,_G,J,_9c,_,_,q,_:_){}Var _,T_2:Array [Array [Array [Float ,0b1_1],5],0B1_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 331))

    def test_332(self):
        input = '''Class N{}Class e_f:u1N{}Class f3lx_{Constructor (K:Array [Float ,0XE];f_S:__;H,LXM,U,_7,_,N:Array [Array [Array [String ,0b1001110],0XA],035]){W9v::$0();}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 332))

    def test_333(self):
        input = '''Class y:_p_{}Class l_:_1{Val $4:_;Constructor (d_572:Array [Array [Array [Array [Array [Boolean ,0117],0B1111],8],0X9_6],0117]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 333))

    def test_334(self):
        input = '''Class _:_{}Class _:_Y_{Constructor (a,M,_:Array [String ,0102];i4:String ;_,t9:Array [Array [Array [Array [String ,0102],0b11],0102],0102]){}Val _,$1,$_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 334))

    def test_335(self):
        input = '''Class n4{Constructor (_0:Int ;_,_,_:Array [Float ,07];y:Array [Array [Array [Int ,0XE],0xA],046];_0,___05:uB){Continue ;Break ;Return ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 335))

    def test_336(self):
        input = '''Class fB_{}Class _{Constructor (_xb13__3_w,_K:Array [Array [Array [Float ,14],2],58];Em,_,v,m086S:Boolean ){k::$_();Break ;} }Class X348JO3__p{}Class _:c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 336))

    def test_337(self):
        input = '''Class Z:_{Constructor (NnS:Array [Array [Array [Array [Array [Array [Int ,0x6],985],1],0b110100],0B1],28]){} }Class m{}Class n_M:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 337))

    def test_338(self):
        input = '''Class _:_75{}Class _:h{}Class q{Constructor (__:Array [Array [Array [Int ,28],0b1],0b110001]){}Destructor (){} }Class _:_{Destructor (){} }Class q9B6:u{Var _2_99:_33_3;Var s,$_G_,l2,_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 338))

    def test_339(self):
        input = '''Class N:_H5w8{Constructor (_Ny,b_9:Array [Array [String ,1],0B1010011]){}Val $q,W:Float ;$8(_V_,o:Boolean ;_:x){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 339))

    def test_340(self):
        input = '''Class _p{Val l,$_5:Int ;$25(s81__:Boolean ;_8K:U38;_:Boolean ;H:Array [String ,5];E,B,_,__q_91,g:_;_:x_;f,_:Q){Return ;}Destructor (){} }Class _l{Destructor (){}Var $K:Array [Array [Float ,0b110110],0x3C];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 340))

    def test_341(self):
        input = '''Class J:c_{Constructor (_,_k:u;__,_C:_O;cI2,d__,e:Array [Array [Array [String ,025],1],0x31];PG:Array [Array [Array [Int ,0b101111],0B1],0x31];_:m;N0:Float ){Break ;}Var __A,$_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 341))

    def test_342(self):
        input = '''Class __:_{Destructor (){}Val $_:Array [String ,49];$U4u8(_:Dx_;_P,_h:Array [Boolean ,49];_:K){}Constructor (C,_:__7I){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 342))

    def test_343(self):
        input = '''Class _:_{Var J,$V_,$w_G,_9:Array [Array [String ,0x9_5_A],04];Var $p,_,C,$5:Float ;Constructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 343))

    def test_344(self):
        input = '''Class _:_{}Class A8{Var $4,$_y_,_m,l,$qK:Int ;_5e(_P8,h:c1y;_:_896t){Continue ;} }Class v:_3{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 344))

    def test_345(self):
        input = '''Class p:__{}Class g56:H{Destructor (){}Var B77,_:Array [Array [Array [String ,0x2_F],0XC_C_8],8];Val pT8:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 345))

    def test_346(self):
        input = '''Class V{Constructor (_,__:BJ;_80,_:Float ;H5_,_E:String ;____Wi,YA:Array [Array [Array [String ,0B1100010],2],6_9_1]){} }Class Kv7:t_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 346))

    def test_347(self):
        input = '''Class _{Constructor (__,X,b_:String ){} }Class _:_{Constructor (){} }Class _:_{}Class n___{}Class o{}Class _z:__3_d{Val _:__3;Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 347))

    def test_348(self):
        input = '''Class z{Val $_,$16_,_,_R,E_:Array [Array [Array [Int ,017],0104],0X4];e(){ {} }Constructor (d:String ){ {Continue ;} }Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 348))

    def test_349(self):
        input = '''Class U{Destructor (){} }Class _{__(G:__2k2_6;_:__;_Q6,V,E:String ;_,_1,N_:Array [Int ,0XE_1];p,OU,O_:Int ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 349))

    def test_350(self):
        input = '''Class __:_7{Constructor (I_,_:_;R,_g:Array [Float ,7];D,_:Array [Array [Float ,061_7],0B1010111]){} }Class _{}Class m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 350))

    def test_351(self):
        input = '''Class __:_1{Destructor (){Continue ;}Constructor (_:Array [Int ,6];_:Array [Boolean ,0126];c:Array [String ,0B1_01]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 351))

    def test_352(self):
        input = '''Class _R:_{Var P,_uE:Array [Array [Array [Array [Array [String ,8],03],04],7],0B1011101];Var $2_,$8,_,Q24_:Array [Array [Boolean ,04],0b100011];}Class I9_{Val _54:Array [Array [Float ,0b100011],0b100011];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 352))

    def test_353(self):
        input = '''Class B9e2_0:_4{}Class _{}Class _:_{_R_9f(_3_28_5,_3,_20:i;g_,v0_,CWUk____:Array [Boolean ,0X18];_:_;_:Array [Array [Array [Float ,0b1],79],8];_:Boolean ;A05y:Array [Array [Array [String ,0B1_1_0_0_0_1],5],0123]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 353))

    def test_354(self):
        input = '''Class l__{$___(__:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,047],8],8],0X5],8],047],0xA4146_D],047];M_:_;__,HC:Array [Int ,8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 354))

    def test_355(self):
        input = '''Class _:_{s(){}Var $_:String ;Val $5:Z_;Destructor (){}Destructor (){}Val _35:Array [Float ,06];$x(){}$_(){} }Class _:ZG{_(){}Val $64:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 355))

    def test_356(self):
        input = '''Class _{qPevs9(k,x1i,_,N:S;e70,U,T:_;_:OU){} }Class u:pB{Constructor (nhW:P;_,L:_;Um_,_4_O:String ;X,TT:JO){} }Class _2:_{Val $36:M;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 356))

    def test_357(self):
        input = '''Class G5{Var $5,E,$5:Float ;Destructor (){}Var P:Array [Array [Array [Array [Array [Array [Array [Int ,9_8_3],82],8_0],0x5],0101],0B1110],0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 357))

    def test_358(self):
        input = '''Class _:hg{$7(){} }Class __Y{O3G6(E,Es_,A8:Array [Int ,0x7B]){Val Q3_,_7:z;}$e(){Val _99,v:Array [Float ,0136];}$_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 358))

    def test_359(self):
        input = '''Class _:N{Constructor (b37_0:Te_;a:Int ){} }Class _AR:N_V{Constructor (nw,S:_z;_:Int ;_,h3O:Boolean ;tQ:Array [Array [Array [Array [String ,0b10],03_3],8],0112]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 359))

    def test_360(self):
        input = '''Class _8_:_{Destructor (){Break ;} }Class _r{g(m:String ;__8v:__){}Destructor (){}SA__(J:Array [Array [Float ,0X7],063];_m:Array [Int ,0B10]){Break ;} }Class _9{Destructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 360))

    def test_361(self):
        input = '''Class _:v{Constructor (_,I,_vr_8df,f,_,z,_4,mV,u_R9_:Float ;_F3M:String ;_,__6:n){Var I:n_;} }Class _vX:o353{}Class _5Si9oc__:S{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 361))

    def test_362(self):
        input = '''Class M:ql{Constructor (h_,_,VAU:String ;w_F:Boolean ){} }Class _:m_0{Constructor (YxC:Array [Float ,0b1];V_,_H:_;_7x8:Boolean ){}_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 362))

    def test_363(self):
        input = '''Class XZ:b_j{}Class _2:_3{Var $6f__9,$Pz,S,$__J23,$_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,82],0b101111],0x2],0xE],82],4],74],82],042],0B1000010],0B1000010];}Class _4:y{}Class __6WQ:_{Destructor (){Break ;s::$Y();}Destructor (){} }Class O:g0C{}Class _{Constructor (_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 363))

    def test_364(self):
        input = '''Class _:b{Val $_g28:Array [Array [Array [Int ,0b1_1],4],075];Var _,$_:Array [Array [Int ,0x4E],0b10];Constructor (b:s;T_f2:Array [Int ,0b1];f2_,U:hq;L:Int ;q_,_8m,_,R,_5,_:Array [Array [String ,73],02]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 364))

    def test_365(self):
        input = '''Class _:_{}Class nu:Y{Destructor (){}Constructor (_,V_E,_8:Boolean ;y_14,_4_i7_4r,b,s_:Boolean ;C,_2_X:String ;_,v,dC,zd:Array [Int ,0B1_1]){} }Class S_:_{Val X,$8g2,_7:Array [Array [String ,5_9_03_1],0b101];_K(){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 365))

    def test_366(self):
        input = '''Class _:_{$Y__(_,RT_,_f,__:Int ;_,_R:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0b1_0],0X6_5],0xE],026103_61_5_1],0x8_4A],0120],0x2E],07_04];i4:H9_i1;_,Y,_6,_0C,G5:Array [Boolean ,2278];Y:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 366))

    def test_367(self):
        input = '''Class _30z_{Constructor (r,T_J_,BB:_x){}e4(){}$_(_,_1yZP,s:Array [Array [String ,30],91];O:String ;_c___49:String ){} }Class m_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 367))

    def test_368(self):
        input = '''Class o:_{Constructor (Cv_:P;Gr,Q:Array [Boolean ,81];_i_:String ;__:Array [Array [String ,0B111101],0X48];Wp,W,_0,Q:Array [Array [Array [Array [String ,054],3],02],0x11];nq,p6,_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 368))

    def test_369(self):
        input = '''Class W_{}Class _{Val $_s:F;__x8(__,_,_:Array [Int ,0X3]){}Var $_,$Ep_9,_s__I:__;}Class _5:__2__k4a{Val $i,$T00,$_,g,M:Array [Int ,0XF0_4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 369))

    def test_370(self):
        input = '''Class k{Var S0_,$_:_;Var $s,_n_9:Array [Boolean ,0B1];Constructor (U8,_,u:String ;Q_:_){}Destructor (){}D(k_e8:Boolean ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 370))

    def test_371(self):
        input = '''Class Z_:G2{}Class __:I{Constructor (){}Val $_:n;Destructor (){}Var $_:Array [Array [Array [Float ,0b101111],5_6],0X1C];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 371))

    def test_372(self):
        input = '''Class __{}Class _:Ju_{Var _,$5,$_,L,$4:Int ;Constructor (__D,_:Array [Array [Array [Array [Boolean ,0b1],0x4D],3],96]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 372))

    def test_373(self):
        input = '''Class _:v0{}Class e:_{_89(I:Array [Array [Array [Array [Boolean ,25],0x9],0b110010],5];_:___E_;y_,__:gy7oD;_:Array [Array [Array [Float ,0X6_3],0B10010],3];__:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 373))

    def test_374(self):
        input = '''Class i:__4{}Class _{Var I_5___7:Array [Array [Array [Array [Array [String ,4],0X4B],06],63],3_2];Val M:Array [String ,0b1];$3p(){Y::$_();}Destructor (){} }Class T_A_{Val go9kX:Float ;}Class R:R0{Destructor (){Var _:Int ;}Val $f:__p;}Class E:w{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 374))

    def test_375(self):
        input = '''Class __QE:_{Val __7:h;}Class v23{_(x,f:Float ;o,_7_0__:Array [Float ,73]){}Val z_,_3,z630:Float ;Var $95,$_8b21:b;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 375))

    def test_376(self):
        input = '''Class U:R6{Val X,_:Array [Array [Boolean ,0B1_1],041];Val Sf,$_:Array [Float ,36];Destructor (){}Var __X_z2_6nP:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 376))

    def test_377(self):
        input = '''Class lYo4:_q{Var _:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,65],0b1001011],4],0B10010],0xB],65],053],0b1001011],0xC];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 377))

    def test_378(self):
        input = '''Class J:_4Q0_D{Destructor (){} }Class F2{$f(r9,x:_v8;_:Array [Int ,0B10];_:Array [Float ,067]){Return ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 378))

    def test_379(self):
        input = '''Class _{__(D3,K5:String ){}Val _,$9,R,_,$B:O;Val $_,$V:Array [Boolean ,0b1001001];Val $__,z_:Lmt0j3;}Class _7{Var D___h:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 379))

    def test_380(self):
        input = '''Class __{Var $1V:Array [Array [Array [String ,1],4],06_55];Var $6_D,$_:Array [String ,57];}Class _EG:FJ{}Class dR{}Class K:_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 380))

    def test_381(self):
        input = '''Class _:_{I(){Continue ;}Destructor (){}Val $_d83,_m,_:Float ;}Class V_4:__{}Class _{}Class _U9P_{}Class n{}Class cP:_{}Class _0:_9{}Class p{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 381))

    def test_382(self):
        input = '''Class _uf:N_6N{}Class __:h{Constructor (__B,_9:_;__:Array [Array [Array [Float ,030],0b1101],030];w1:Boolean ;J,___T,_3yC_,_u,_,X_,q,_4_:_e5b6__5_7_6r8;_:_k_2_9_;a,_,Q,t1,rr8:Array [Array [Array [Array [Array [Array [Float ,01_5],030],8_0],64],0x64],07_76_34]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 382))

    def test_383(self):
        input = '''Class O89_0:_N{Constructor (__2,__:Array [Int ,788];w635__,Q_:_){}Constructor (){ {Return ;} }}Class fQ6T_E2{}Class _:_{Constructor (__:Int ;br:Int ;_:String ;_6_:_G){} }Class d{}Class _:bN{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 383))

    def test_384(self):
        input = '''Class L{}Class _{}Class _NW:P{}Class _l_8{Destructor (){}_IoM(ik77,_,__,_:Array [Boolean ,022];_,Ya,_1,bb,_6:_I){}Var $n97,_,_,$4,$O,$Q:Array [String ,0X1F];Constructor (_Bd:_07;s,d:p5c){Return ;Val _:R;} }Class __{}Class _7:E_JM94{Destructor (){} }Class k_5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 384))

    def test_385(self):
        input = '''Class XU:V_{_(_vm,r8,_:Int ;a,_H,_:Array [Int ,2];_2,G:d39_;M_:Array [Array [String ,60],0X1E];N7:Array [Array [Array [Array [Int ,1],0x2C],50],0X1E]){}Constructor (X:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 385))

    def test_386(self):
        input = '''Class W_7:d{}Class N{Destructor (){m5::$Q();}_(){} }Class _{Destructor (){}Var _33:Float ;}Class _{}Class __B{Val $0:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 386))

    def test_387(self):
        input = '''Class _Po57l{Constructor (_:Array [Boolean ,0x45]){}Constructor (X_,W__,i:_V_;Vy:Array [Array [Array [String ,0B1001010],1],86];_418_qq__iO,e_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 387))

    def test_388(self):
        input = '''Class _V:Z_{Constructor (U_X,_,_Q_:N;_:Array [Boolean ,043];Unn_P,_1O:Array [Int ,0X50];h,n_:_;__:E){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 388))

    def test_389(self):
        input = '''Class m6{_(){}_(_28:Array [Array [Float ,04_145_5_3],0X2];U0,a7k7,C,_5,_,q0,_:KV){} }Class __:H_T{Constructor (_10C,lM:Float ;l_OS_H8:Array [Array [String ,2_6_0],0B1010100];_:M;___,_4b,_:Array [Int ,06_6732]){} }Class B{}Class _:s_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 389))

    def test_390(self):
        input = '''Class _{}Class _{_I(){}Var t:Array [Float ,03];}Class P7__{Constructor (_6:Array [Array [String ,0B11],64]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 390))

    def test_391(self):
        input = '''Class _Q170:__{}Class _{}Class _:_4{}Class _8:NJ{}Class _E_{}Class _HX:i{Val R8i:Array [Array [String ,055],06_47];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 391))

    def test_392(self):
        input = '''Class _66_g:J{}Class VD{Destructor (){}Constructor (X_c,H_MQ:Boolean ){Break ;} }Class __{_(){Break ;Break ;}am04(_,_,G6_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 392))

    def test_393(self):
        input = '''Class I{Destructor (){} }Class _48:t{}Class m:cs{Val $1_,A,_0:Array [Array [Array [Boolean ,0b1100],62],0X12];Constructor (W:_;_,_4,_,_1_,_,_8:Float ;_:p;V2,n67:b2_;_0_:String ;F1o:Boolean ;G0c:E59;Y:String ;_,_,_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 393))

    def test_394(self):
        input = '''Class G:_{Var $_:Array [String ,48];Var $2,$nF_7:Boolean ;$Q(__,m:Boolean ;kt_,_,Y,M:_a){}Constructor (){}Val $Mg158,$G92p6:_I_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 394))

    def test_395(self):
        input = '''Class _{}Class _:x{}Class n{Constructor (){} }Class Jr_:_9_{}Class Jf_{}Class o{}Class c_:_{}Class ____:r6_R8__{}Class __:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 395))

    def test_396(self):
        input = '''Class _{Val _:Array [Boolean ,0X58];}Class _{Constructor (){} }Class A:_{Destructor (){} }Class _w{}Class e_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 396))

    def test_397(self):
        input = '''Class _{Destructor (){}Destructor (){} }Class y{}Class gZ_3{}Class b:u_9_w9{}Class k{Destructor (){Break ;} }Class H4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 397))

    def test_398(self):
        input = '''Class n:p6{}Class _{Constructor (E:_;i,R,_,_S_,o2z_V:Array [Array [Float ,0X1C_B_A],012];a,_7:Float ;_,eMCF:Int ){}$86(_:Array [Array [Array [Array [Array [Array [String ,0X2_5],03],012],7],8_0],0X37]){}Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 398))

    def test_399(self):
        input = '''Class _{$_b_z(wHC,H,c:G;N__b,_et:Boolean ;k:Array [Array [Array [String ,35],01],0XC]){}Val $_e_l,f_,$u,$_7_39,J:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 399))

    def test_400(self):
        input = '''Class U:W{Destructor (){}Constructor (){}Destructor (){Continue ;}Val $M_8:Array [Array [Array [Float ,0b11],0X1D],0b1];}Class Kk:m8_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 400))

    def test_401(self):
        input = '''Class U_{H(i3,sQv,__,U:Array [Array [Float ,0143],0B1000000]){} }Class _W{Val a__,$2_5,$5:O;Constructor (){} }Class _5:x{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 401))

    def test_402(self):
        input = '''Class __{Val m,z:String ;}Class S{Var _:Array [Array [Array [Array [String ,21],0B1_1_0],0B1001001],21];Var $4,$g,$_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 402))

    def test_403(self):
        input = '''Class _4h:_b{_(_1,b_,_,_R,h:_;Dr9__1_,q_p_83,_G:KA;G:Array [Array [Array [Array [Array [String ,07],54],022],0b111011],0x13]){}$T4(e___:Array [Array [Array [Array [Int ,0xDA3],022],0b111011],0x13];_4,_z_:Array [Boolean ,0x13]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 403))

    def test_404(self):
        input = '''Class y:y{$_(__472:_8;_0,g_vY,_W_K:String ;D_Xf:String ;c,_2s:_;a4tU:Array [String ,0B1]){Break ;Continue ;}Val $6t:Array [Boolean ,0B1100011];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 404))

    def test_405(self):
        input = '''Class _{}Class j_p{Constructor (_:Q){Continue ;}Destructor (){Continue ;{}_d1::$54795Z_();} }Class Q{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 405))

    def test_406(self):
        input = '''Class _:BD_{}Class __:_{}Class nZ{}Class Qm:k{Constructor (z_0,W,q_Z_:_F){}Var $Q_4:Int =!Array (Array ())._&&B::$5y().L;}Class g_:_J_4Q14_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 406))

    def test_407(self):
        input = '''Class _8:k37{Var $K:Boolean ;Constructor (__W:String ;Dd_,_d:Int ){} }Class J:a{}Class _405_{}Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 407))

    def test_408(self):
        input = '''Class X:_j{}Class mZ_NmD{Destructor (){}Val _,$O,$2,_,uc,$W,_:Array [Array [Array [Array [Float ,0x1],0X4],64_49_4],041];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 408))

    def test_409(self):
        input = '''Class o7E2{_3(_,c1a_6_5_zOy8_k:String ;_,B,_,C_,__,_,R__0U:Boolean ;R,v,W5_z,_,_:Int ;_:Boolean ;B,_4,f:Array [Array [Int ,0b1_1011],49];g_H95:J_67){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 409))

    def test_410(self):
        input = '''Class x14e{Val H_u_,$_:_;Constructor (Aq,_:Array [Array [Float ,6],0x2B];_R,_,_:Array [Boolean ,013_633_0_4]){ {} }$00__I(e:String ;_,_04I:Array [Int ,0B1_01]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 410))

    def test_411(self):
        input = '''Class F{Val _,d,$_:Array [Float ,0x3];}Class _c8:_{Var t:Array [Array [Array [Boolean ,014],0b1_0],0b1_1];}Class _{}Class Xf__7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 411))

    def test_412(self):
        input = '''Class _:j{$x9h_7(x_:Boolean ;m9,_:Array [Array [Array [Array [String ,90],0B1101],0112],07_7];i:Array [Array [Float ,0XF],0B1]){Continue ;Continue ;}Val G:Array [Array [Array [String ,03_137_1],0x4A],28];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 412))

    def test_413(self):
        input = '''Class Y:_{Val _4:u;}Class _5__x_:_9{Val m:W;Destructor (){}Val a___:Array [Array [Float ,0530_7_20],0xA];}Class I:_{}Class _9_C:W0{}Class _:p{Val $G:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 413))

    def test_414(self):
        input = '''Class Y6__2{}Class bnG_{Val $__6:Boolean ;Var $f,$m,$_:_;}Class _{Val $8c:String ;}Class _:__UE{Var F,$X6M:Array [String ,0x46];Val _7Z:_;$4_(){} }Class _u_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 414))

    def test_415(self):
        input = '''Class __2:_1f_03_{Constructor (O,__:Array [String ,023];n4,G,T,s:Array [Array [Array [Float ,1],023],0b1_110];W:_;c,Q,_,_0:Array [Int ,0B1];_:_4_I;_,_4,m:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 415))

    def test_416(self):
        input = '''Class _6:_{}Class _:z{}Class I_a:_{}Class k:u3{}Class _:QI{}Class _:X{}Class __91B:Z{}Class S_{}Class _:_{_S02(O:Float ){}Var $a5_1,j,$8,DM,$5,s:Array [Boolean ,95];Var V_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 416))

    def test_417(self):
        input = '''Class z:_p{}Class __jr3k:H0{}Class _:_0Er{Var $_,$_aC__1,$2,_,$u3,D:Boolean ;Var $3,U__31,q,$3__r,_Q:Float ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 417))

    def test_418(self):
        input = '''Class _:_xj{Var E,uh4,_c117:Array [String ,0x17];}Class _{Var _,$8X,I,Z_0_y4,Y3_:Float ;_M_(_,Z__8,_,_,_:Array [Array [Array [Array [Boolean ,0b1_1],6],0x17],3]){} }Class s{Val ____,$I_,c_0U:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 418))

    def test_419(self):
        input = '''Class __:_v266d1G{$_(_,A:Float ;P,P:Array [Array [String ,3_0],4_33];_,_J:Array [Array [Int ,0X6_0],4_1]){Var _9,q:Boolean ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 419))

    def test_420(self):
        input = '''Class r9{Var $u78:Float ;Constructor (O,_D:String ;__,_:Float ){}Var lW,W:Array [Array [Array [Array [Array [String ,0X1C],0364],32],0x2],0107];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 420))

    def test_421(self):
        input = '''Class O72_:__{Destructor (){}Var $Q62F_:Array [Array [Array [Array [Array [Array [Array [Boolean ,0X8],1_1_2],6_6],062],58],0X21],0b1001110];$7(){} }Class _{$L(UW,_F48,_,a,l,Y_:Array [Array [Array [Int ,016],0b1_0],016]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 421))

    def test_422(self):
        input = '''Class ___X_:W_8{}Class _:_{Var __:String ;Var f41j:String ;}Class _{Constructor (){}Var u,_,_:Array [Array [Boolean ,94],042];Val $__1_r_D:Array [Array [String ,94],05_10];}Class v{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 422))

    def test_423(self):
        input = '''Class Uj{Var $_:_5;Constructor (m:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,051],0x1],0X63],0xC_0],64],64],0XA],0B1_11],0x5_5_F]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 423))

    def test_424(self):
        input = '''Class _:_D{Var k:Array [Array [Boolean ,0b1],045];}Class _8:_{Destructor (){} }Class y:_{}Class _e{Var $__,$_615,$4,k,Yn:Array [Float ,045];}Class J:Cz__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 424))

    def test_425(self):
        input = '''Class _92{Var _1,$4,NIV8y8,_,_,$s:String ;}Class C:K{}Class M:j{Destructor (){F::$_();}Val $_:String ;Var MEv_,$5r:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 425))

    def test_426(self):
        input = '''Class i__H7:_{}Class _:rW__{Val __:Array [Array [Array [Int ,19_6],0B100001],0b1];Var $0,z_9T,_:Array [Array [Array [Array [Array [Int ,0B100001],6],027],0XA_0],0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 426))

    def test_427(self):
        input = '''Class _M_:_{}Class y:r_{}Class __47__{Var $n0,$_,r5_,dR:Float ;}Class _S:C{Val _:Array [Float ,0122];}Class _{Val _4_B,_,g_____8,x1,$D,uG___:oK;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 427))

    def test_428(self):
        input = '''Class QoD_:_{Destructor (){}Var _8,_:Array [Boolean ,0b1];}Class vq{Val X8,yRz,$_,$__c:Int ;Val $__8_N:Array [Array [Array [Array [Int ,024],0b1],024],024];}Class _:g{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 428))

    def test_429(self):
        input = '''Class ea:L{Constructor (A:Boolean ;c:Boolean ;P_:Int ){} }Class o:_U{Constructor (F1,_,_myx:__;y,_:Boolean ;_2:Int ;_1,cRh397__:_;E,x,e:b;bfr,__8I2,__:Boolean ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 429))

    def test_430(self):
        input = '''Class _H_:___{Val $97_E_:Int ;Var $_:Array [Array [Array [Boolean ,2],0x2C],02];A(){} }Class _{}Class T94_94:h_2{}Class _n{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 430))

    def test_431(self):
        input = '''Class _:x9{Var $O_,__TT:Array [Array [Array [Array [String ,8_87],76],0B111011],0121];}Class C:G{Val $_,$66__u,_6_:Array [Array [Array [Array [Float ,0b1100100],3],0x37],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 431))

    def test_432(self):
        input = '''Class _{Var $N,_,C3:mP;Constructor (){} }Class p___{}Class x1_:__{Var $LO37___P__:Array [Array [String ,26],07];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 432))

    def test_433(self):
        input = '''Class Y:_{Val __N5:String ;}Class _0{Constructor (R:_v5){Continue ;}Constructor (){Continue ;}Constructor (_:_j_;_:Float ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 433))

    def test_434(self):
        input = '''Class r{$U(){}Var $L_,r,$9O,$3t___,JiZ___25,$44_8:Array [Array [Array [Boolean ,0b1100000],036],07_1];Var i,j,$_:Array [String ,91];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 434))

    def test_435(self):
        input = '''Class _5{Val $B1:K;}Class B:_{}Class __3{}Class _b:H{}Class _{Val $_m,I,$3,$_,$1:Array [Int ,05];Val $_4,_,C,_,$A:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 435))

    def test_436(self):
        input = '''Class R:u_{Constructor (_:Array [Array [Array [Array [String ,0X19],0x12],03],07204];h,_060n_,_,B:pj;H:Float ;I,_:_0_){} }Class J8_K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 436))

    def test_437(self):
        input = '''Class _77{Val _9:Array [Array [Array [Boolean ,0b101101],8],0XB];}Class L1{}Class W{Constructor (p:_){} }Class _X{Val X_6,$0:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 437))

    def test_438(self):
        input = '''Class w{}Class P_D:L9_g_{$_(u5,_HCU__:nC3;_FC,s_cp,q74,P:Array [Array [Float ,0B1001111],0B1001111];x:Boolean ;o6,_C3F,H:String ;Ez4,N,r,k,R_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 438))

    def test_439(self):
        input = '''Class _q4{Destructor (){}Var $_9:_44UjK7;}Class qP:_g{}Class B:_{Constructor (){} }Class TM:H7cl{Var _:_;Destructor (){} }Class o:_{}Class _t:P{}Class o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 439))

    def test_440(self):
        input = '''Class _:_S__{Val $_i:_;Val $o:H_;G1T_(uiz:_;j4,a4:Boolean ;_:__){} }Class __:_6{}Class _1{Val _:Array [Float ,50];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 440))

    def test_441(self):
        input = '''Class __:O{Constructor (_,B_:Int ;VN9_:B_;_s_,_,__,_:Boolean ){}Val $8:n;Destructor (){Return ;}Constructor (c:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 441))

    def test_442(self):
        input = '''Class T_:h_{Destructor (){}Var _1:Array [Array [Array [String ,87],87],010];Constructor (_:Array [Array [Array [Boolean ,0b1100010],87],0x2E];c6_p_,_,HqE,_,_7,_:Int ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 442))

    def test_443(self):
        input = '''Class _6{$_Lf(b,_O__2_,_8:B;_:h;_,Dt,_,z:Array [Float ,0B1];P,U,BUw0ED29c_:v;Z_:Boolean ;_:Boolean ;I:Array [Array [Array [Array [Boolean ,0B1],0b1],053],06_4]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 443))

    def test_444(self):
        input = '''Class __{Destructor (){} }Class C7:_{}Class Z__{Var U,_7,$y:Array [Array [Array [Array [Boolean ,02],0x2B],025],0b1011111];Var _z:v7_6;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 444))

    def test_445(self):
        input = '''Class _{}Class __:__0{Var __,_:Float ;Constructor (N:Array [Array [Float ,0b1],06];__,_2uN:Array [Array [Array [String ,93],032],7];B7t,_83T,_3_3_,d0_x,Q,_Y5q:H;b:i){}Destructor (){} }Class Pz0Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 445))

    def test_446(self):
        input = '''Class o__N9359:c_{}Class b{Constructor (){Var _,_079_c,K,__,d:Array [Boolean ,0X7];}Val o_o:Array [Int ,0b100111];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 446))

    def test_447(self):
        input = '''Class _d_T:_{}Class __1d:T{}Class X_3:a_{_(W,Q:p;_M:Float ){} }Class _:_{Val $v___1_:Array [Array [String ,032],032];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 447))

    def test_448(self):
        input = '''Class jK:_{}Class _{Constructor (K_,_20,x5uF_:Array [Boolean ,01];O5:MjY_4m;_,g,F,_L:_){Continue ;} }Class __:CR_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 448))

    def test_449(self):
        input = '''Class I_{}Class _7:_{$_L(){}A_722(){} }Class p{}Class e__{}Class D:_{__(){Break ;Return ;Continue ;{}{ {} }}Var $90,$_ZSy556_,$8,s2:Array [Array [Boolean ,0142],0x18];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 449))

    def test_450(self):
        input = '''Class _{}Class _{_N9(_M_:Array [Boolean ,41];T,_7_,t:P;W:H;t8:_;i,___OQ,__k,__:Array [Boolean ,41];f_H,_C8:Int ;_,J:_y;_x:Array [Array [Array [String ,0b11_01],0B111_1],04];V__:ZG3;dl,k,y,C,X_7_M:b64;z:_;_K,_V8_1:u){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 450))

    def test_451(self):
        input = '''Class _:Bm{Val y9:Int ;Destructor (){}Var $R1:_;}Class _:_4_{}Class a:z{Constructor (B,I:Array [Array [String ,74],0b110]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 451))

    def test_452(self):
        input = '''Class __PHI{}Class h:f{}Class y:_{}Class __:N{}Class _{Constructor (){}Val ___,$__:Array [Boolean ,0137];}Class _{}Class v:t{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 452))

    def test_453(self):
        input = '''Class _{}Class PN_:__{}Class W:X_{}Class B:d{}Class g:O_2_{Var $E_8e,__,$ub1:Array [String ,0B11];}Class _30:B___2u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 453))

    def test_454(self):
        input = '''Class q_d{}Class G{Var _,$4l,_0:Array [Array [Array [String ,0B1],0B10001],0B10001];Val $__:Int ;Destructor (){Var _:Int ;}Var $V__,Q_,$p5,$4w:Array [Int ,0x3C];}Class t7:_8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 454))

    def test_455(self):
        input = '''Class c{Constructor (){} }Class jt{Var $1DL:Array [Int ,036];}Class h:zD{Constructor (E,__71,_:Array [Array [String ,3],0B110110];_:j35){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 455))

    def test_456(self):
        input = '''Class U{}Class _:s{Destructor (){}Constructor (_:_7;j,_,L:Array [Float ,94];u3t_,A8_:Float ;__4mr:P;_V6:Array [Array [Array [Float ,07_0],94],0133]){}Val __:Array [Int ,06];}Class x:_2{Val $y,$78_Xz,$_,$_,_,Z4Y_:x__;}Class L{Var $9,X:__2;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 456))

    def test_457(self):
        input = '''Class E_{}Class b:_{G___(){Var g_M,_:Array [Array [Array [Array [Array [Int ,0B1],0b1],0xB97_6_C_5_D],38],0b1];} }Class u____{}Class _2_e:w{Var $qi,$_:_;}Class Lc_:W_0V_s{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 457))

    def test_458(self):
        input = '''Class __6892pL_:_9{Constructor (_:Array [Array [Array [Array [String ,0b1000000],044],0B101],03]){}Var kL:Array [String ,044];Val P_6G,X:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 458))

    def test_459(self):
        input = '''Class _0I:D{Constructor (n4_l:Float ;w,_6A:Float ;_6:String ;_,z5,_6,_8:R;___Q:Array [Array [Boolean ,0123],0B1];R,W:Array [Int ,02_6_5_0_6_4_5]){} }Class z_:_2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 459))

    def test_460(self):
        input = '''Class f23{Destructor (){Val a0,_b_98__,_2l76_,_,_,_,J:Array [Array [Array [Array [Array [String ,2],8],1],0x5],0X24];Continue ;Var _81_:Int ;} }Class G:___{}Class Qi_:q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 460))

    def test_461(self):
        input = '''Class s{}Class _Qr1h{Val g:Float ;Constructor (){}Val $__,$55,$_,$i2:String ;}Class __030{}Class R:_{}Class n6:xj{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 461))

    def test_462(self):
        input = '''Class _{Var $_,__,$_9G_,$7_e,fh:Float ;RI(Q:String ;H,M:Array [String ,92];z,wB,q,H_m_:Array [Array [Array [Int ,0B10],0b1011000],025];_2:h;f,K1:gFC;u,_,p7AV_,I4,_8_x:Boolean ;d,G:_){_M::$__0_30();} }Class A0r{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 462))

    def test_463(self):
        input = '''Class _:M26x{Destructor (){Val I2,_,D14,Q,_,T32,_:Array [Array [Array [Array [Array [Array [Array [String ,45],0x12],5],0b100000],0B1_1],0x12],0XE];}Val $_:__1;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 463))

    def test_464(self):
        input = '''Class _{Var $9:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0140],0X35],41],0x8],061_0],0b1010111],0140],0B1];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 464))

    def test_465(self):
        input = '''Class o{R_(e:_;v_h:Float ;_T:Array [Array [Float ,0x15],0B1100011];_,_:Array [Array [Int ,84],075_6_365];_,j4,K:Array [Array [Float ,84],615_0];w,dJu_:String ;_:_;_C:Array [Boolean ,84];_W_34G:Array [Array [Array [Array [Float ,84],84],0XA_4_B_4],0xA_A_A]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 465))

    def test_466(self):
        input = '''Class j:_{$Ia(E_,_:Array [Array [Float ,9_94],0X29];_C:Array [Array [Array [Array [Array [Array [String ,0B1011],0X29],0b101],0126],0b11110],0b1_1]){Val _4:Ti6S_;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 466))

    def test_467(self):
        input = '''Class A_{Constructor (_,___,_P:Array [Array [Array [Int ,0B1],2],0B1001];aFQ__,_,_,_:Boolean ){} }Class l{}Class _6{Val m,___k__,_a3:Array [Array [String ,0b111111],73];Constructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 467))

    def test_468(self):
        input = '''Class q:_m_c87m_7T{}Class q_6_{Constructor (_,_e6K_:Int ;u_,s9p,_:Array [Float ,0X51];F9:_){Break ;_::$_();Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 468))

    def test_469(self):
        input = '''Class __{Constructor (){Break ;}Var $L_,$_Y_b3b_9,T:Array [Array [Array [Array [String ,0xFE7],0X5E],0b1],0b100101];}Class _:O{$_(_,_q:Tc){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 469))

    def test_470(self):
        input = '''Class mkY___:_{t(){}Constructor (_,_:Boolean ;_,ol__:d_6N;W_:Int ){}Var $80,_iR:Array [Float ,0X7_4_5];Var M:Array [Int ,9];Var $ho,_:Float ;Constructor (){} }Class K:N{}Class K_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 470))

    def test_471(self):
        input = '''Class a0{Destructor (){} }Class H:R_83{}Class C{Val __:Float ;Destructor (){}Destructor (){}Destructor (){}$_5(S,_f:Array [Array [Array [Array [Array [Array [Float ,0x27],0B1],36],0X7],0x27],0x27];X,k:_;cSy:Boolean ){U::$8();}Val $2c:Array [Array [String ,0x3],0b1000101];}Class f9:_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 471))

    def test_472(self):
        input = '''Class q9:___{}Class _l{}Class g{Q_23(_0:s63;___U,__g:Array [Array [Array [Array [String ,026],0xAB4_4_2_4_F_9],0b1010101],0b10];C_ij,n_n,__,lZ0:Array [Array [Int ,31],026];pX_ZF0_:Array [Int ,0XF];w,____75:Array [Int ,05_75_0]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 472))

    def test_473(self):
        input = '''Class _:KiU{$OF(){}Destructor (){}Var $N:Array [Array [Boolean ,0X9],9];KO9(YZ:N;___9_:f;i_6,g_2,_q___,_j,_,_,VE:Array [Boolean ,23];_33X1,L:Array [Int ,0b10_0];____8p,M,J:__;f1,eO,_644:U){Break ;}Val _2,_:q_;}Class D_0:W_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 473))

    def test_474(self):
        input = '''Class _:_7_{Constructor (y,KQ,_,_,_V78,_T:String ;___8_:Array [Array [Int ,8],8_58_9_665]){} }Class _o_t:n{Val F,$5,_:F9;}Class _:_{Val _:Array [Boolean ,0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 474))

    def test_475(self):
        input = '''Class _9:_{Constructor (cj,V:i;_:Q76__3Io;J:Float ){} }Class c:_d{Constructor (AVYW_,I:Int ){Var G,_,Q:_;{Val _6,u,_3,F_:String ;} }}Class _0{Destructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 475))

    def test_476(self):
        input = '''Class _E:F{X(g_:Array [Array [Int ,011],0B1_01];_:Array [Boolean ,017];_,_,bk:String ;_,D1R:Boolean ;_:Array [Array [Array [Array [Float ,0b1],0b111101],011],0X45]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 476))

    def test_477(self):
        input = '''Class _5:Mj{}Class _:MS_{}Class C{__(_,L:Float ){Continue ;Return ;}Val $_9_,C,$4P,_,$z,IM72:Array [Array [Int ,0X1E],0b11111];}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 477))

    def test_478(self):
        input = '''Class u_:I{$2_(_:Float ;Q1,_d:Array [Array [Float ,0x51],0B1];__U,_,A1,g5,_9,_7,_:Int ;yY_ZC,_:Array [Array [Array [Float ,53],0xF],013];_,u_:Int ;Cn6,k_:Array [Float ,9_9]){Val _,_,_:Array [Array [String ,2_3],017];Break ;}Val $_:l;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 478))

    def test_479(self):
        input = '''Class s_:_{}Class _:I{Val __6_:_7_;I(_5,N,s4__,IrD_:Array [Array [Int ,0x5A],020];m:Array [Array [Array [Float ,0x5A],0X7],02]){Var A,_U_j,d,_,g:Array [Boolean ,020];}Val $oy1:_RH;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 479))

    def test_480(self):
        input = '''Class b{Var n_,$3,$Eh:_;Var $z8c,$O3,$P514:Int ;Val $_,$3e_:Float ;}Class _:_I{Var __:Float ;}Class h{_(){___::$DtU_0();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 480))

    def test_481(self):
        input = '''Class ___{Constructor (_:Array [Boolean ,02];_:String ;S825,_:String ;_,o:Int ;e:_;_:__2_;sv_OWY9,_,_:Array [Array [Int ,0X44],0xD]){Break ;Break ;}Var _,Do_f8,$_K,k,$_,W:_;}Class _E_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 481))

    def test_482(self):
        input = '''Class _B_:z{Destructor (){}Val e7,$U_:_;Constructor (P,K:Boolean ){}E(){}Constructor (__8,V:Array [String ,94];C,__:Float ;__Ms_6:Array [String ,056]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 482))

    def test_483(self):
        input = '''Class o:l_54{Val r,$7:Float ;Val _:Int ;Constructor (q1h,_X3:String ;c_:_;II_:p5){}Destructor (){Break ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 483))

    def test_484(self):
        input = '''Class _{Var mW:d_47;Destructor (){Break ;} }Class f:W{Destructor (){Return ;Break ;}$Z(){Cx::$d();Break ;} }Class aB:hs_0{}Class f{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 484))

    def test_485(self):
        input = '''Class X4852:_{}Class _{Destructor (){}Constructor (_7,_t,_,m,v7,X_,QI,l_9,_,d:Array [Float ,0B110110]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 485))

    def test_486(self):
        input = '''Class WJ:p71{}Class _:_{Var _z,__u8,$k:Float ;}Class m9{$___(){}Var $t_,_j7:Array [Int ,027];Val __:String ;Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 486))

    def test_487(self):
        input = '''Class U_0{}Class __Q_{O_(){Break ;{Continue ;} }Constructor (IR,_:Array [Array [Int ,07],0X12]){Return ;} }Class j{Constructor (_0,A5_978:_){Var _:Array [Array [Float ,0B1011000],20];{} }}Class _:_{}Class ___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 487))

    def test_488(self):
        input = '''Class _{Var $Q88_,p,__,__:__;Val $6P2,_,__Q,z,$__1:Array [Float ,0134];}Class __U{}Class _75:D{Destructor (){} }Class _:_M{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 488))

    def test_489(self):
        input = '''Class M:_{Val $n,W,xhp_2F_7,$34v__vx:Array [Array [String ,05],0XED];$_8(_,_f92:Boolean ){}Val __5,$F:Int ;Var _Y:Boolean ;}Class EL4{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 489))

    def test_490(self):
        input = '''Class _:_{Var bt:Array [Array [Int ,013],0X26];}Class yg:_98{Val $6_2U:Float ;}Class ZI{}Class _aqN8E:J11{}Class w{}Class _6k:_{Val JS,_:Array [Float ,0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 490))

    def test_491(self):
        input = '''Class h_:_{Var $3:s1x;$53(S_,_,OEz:Array [Array [Float ,0b1],6];G_:Array [Array [Array [Array [Float ,0X6],0b1_1_0],6],0102]){} }Class B_1:___{}Class _6_:p_{Constructor (){}Var _2,$B,$R9,_y__q,$Z,s0:r;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 491))

    def test_492(self):
        input = '''Class _z{Constructor (_:Boolean ;_,O_,S,_9:Array [Array [Array [String ,0B1],01],4];_,Hp50,_,d,i5:__;W,YyF__t,P,pc:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 492))

    def test_493(self):
        input = '''Class _0:_S{$Bg_c(__:Array [Array [Int ,98],0XB]){} }Class _WdV:_{_(_,_UW,L_N4aG:Array [String ,0X22]){} }Class C{}Class q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 493))

    def test_494(self):
        input = '''Class n{Var $5Q:___;}Class A:_6_{Var $0,$_,ur6455l4O:Array [Array [Float ,0b1_00],026];Constructor (T:Int ;_:Array [Array [Boolean ,05_2],0X1D];_2V:fv_LO;Bh7_,T:Array [Int ,0X62];_,T:Array [Boolean ,026];_,kPH4R:Array [Int ,57]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 494))

    def test_495(self):
        input = '''Class _{Constructor (_Q:Array [Array [Array [Array [Boolean ,28_2_3_6_8_4],5_50],0X47],83];dfO,_,_17yDI8:Float ;Nuz,z:Array [Float ,0b1];_:Array [Array [Float ,7],0x16]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 495))

    def test_496(self):
        input = '''Class vl2K_6m{Val $3,_OqSY,$_,$O,$Q,F_65,$__4:_a;Constructor (_3,_,ev04,h,__:v;K,Q_:String ){Continue ;Var _6:String ;} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 496))

    def test_497(self):
        input = '''Class _r7:l_{Constructor (d:_44_){0X0._();} }Class e{}Class HyNnEA1S{Var JB_L1,_v_,$7,r5:Array [Float ,4];Constructor (){} }Class Z1_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 497))

    def test_498(self):
        input = '''Class a{}Class Mc{}Class ___:_{Constructor (x7,l_A_9,I5,D3f:Array [Array [Array [Array [Int ,05],8],68],8];U_E3_,_,_,s_3,Mx:Q){}Constructor (_:T;A,_A:Int ;_9___:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 498))

    def test_499(self):
        input = '''Class u:hK7{Destructor (){ {} }Constructor (_:Float ){} }Class e6:_{}Class _{Val $_,T:String ;}Class BT:Q2{Destructor (){} }Class _M:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 499))

    def test_500(self):
        input = '''Class _{Constructor (Ts_:Float ;_,F4lK,D,Z__L_1_n:Boolean ;G40_1tGcr_1:Array [Array [Boolean ,06],04_710_062]){}Var $q__6G548:Int ;Var $_,K___:Array [Float ,067];}Class _{}Class f:_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 500))

    def test_501(self):
        input = '''Class d_M:__{}Class _:rj{}Class _:WI5Bk{Constructor (___N,_____,_q:Int ){Break ;Var B_l:Array [Array [Boolean ,2],0B1];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 501))

    def test_502(self):
        input = '''Class G_Y{Val $v,$5,H7H:Array [String ,0B11001];Constructor (__,_,__0,__C1_N3,B_M,_b9,_,b:Int ;Y,U_,___1Y_4,T,C:L){} }Class W{}Class _{Var D3_1_45_,$5,_4E,$A,$_,_:Array [String ,0B11001];Val _X,$9:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 502))

    def test_503(self):
        input = '''Class i{Var x8,$A,W_,_96B45t,U_2_8i6:Array [Array [Float ,060],0X34];Var $qbZ1X_L2:H;Destructor (){}Val $v_:String ;Var qk_,_,$4:Array [Int ,0B10110];Val $_0H_R,T,_6_,$Bg7:Array [String ,05];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 503))

    def test_504(self):
        input = '''Class R{$t(F,zLe,s,_,__:Array [Boolean ,07];a:Array [Float ,0B1];_:Array [Float ,14];_Y:_;_V,Di,_d_47___5,__L:lo9){}$mg1(_,_T6,f:Array [Int ,0116];_,_:E){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 504))

    def test_505(self):
        input = '''Class _{Destructor (){}Var W_,_K5:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0x7_F],17],067_6_12],40_8],0b1],9_076],0x3F],06_0],0B1_00],17],0XB_E],0131],0x3F];Destructor (){}_(u,X,e:_){} }Class e{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 505))

    def test_506(self):
        input = '''Class _Z5{}Class _:__{Var _9:Array [Int ,07];Var g:Array [Array [Array [Array [Array [Array [String ,0B1],0B10111],0X2B],87],87],0x57];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 506))

    def test_507(self):
        input = '''Class H6_4{Var $y:Array [Float ,58];$a_(){}Constructor (_,_,_x,_96:Array [Array [Int ,0b1],03_3]){Continue ;Break ;} }Class h{}Class G_:_R{}Class C:V{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 507))

    def test_508(self):
        input = '''Class o8:_S4{Constructor (_y,Z,__B9_h_:Array [Float ,0x12];X_v_,P,_,_:Array [String ,01];B:Int ;L__:Int ;n:Array [Int ,74]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 508))

    def test_509(self):
        input = '''Class _J:_{Destructor (){N::$z();}Var P_4_,$_,$_,$_,$_86y___:Array [Array [Array [Array [Boolean ,0B1100011],0B1100011],0B1100011],41];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 509))

    def test_510(self):
        input = '''Class _{Var _63_k_A,$px:Array [Array [Array [String ,0X2],0X7],0110];Constructor (){} }Class I__{_(){}Constructor (_:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 510))

    def test_511(self):
        input = '''Class __8:z{Destructor (){Break ;}Val $6,Hd4Qa,$_:Array [Array [Array [Float ,047],042],042];$_nB(){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 511))

    def test_512(self):
        input = '''Class _9axA1{Var $L,$0q4:Array [Array [Array [Array [Int ,11],0x32_F6],04_46_4_0],0x9];}Class __:_39{Destructor (){} }Class _:P{Constructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 512))

    def test_513(self):
        input = '''Class hs:bo9{}Class z__:AF{_(t:Array [Array [Array [String ,10],0B11],0x8];Ys_:Array [Array [Array [Array [Boolean ,0x35_C_1F_5],10],03_6],10]){} }Class _{}Class __:S1{Val $B,$j_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 513))

    def test_514(self):
        input = '''Class _R{}Class F{}Class M_{Constructor (_C_g:Array [Array [Array [Array [Array [Float ,0B10_0],0b1_0],0B1],0XB],0x8_B_B];_,_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 514))

    def test_515(self):
        input = '''Class U_0:urh{}Class w3{Constructor (_u4,Ne__,__,iR:B;H__:w__y;ev2:String ){}$4c(___,q:Array [Array [Array [Array [Array [Float ,0B110111],0114],80],0b1000000],0B1_0_1];g1:B;_:Array [Array [Int ,02],0b10_0];_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 515))

    def test_516(self):
        input = '''Class t:__s0_{}Class _I04:__Y{Var $r_,$I_U:Array [Array [Boolean ,01_3_0],0x4];}Class g_{Destructor (){}Var $d0T,$d9,___95,_,$2,__,$yrk_,O:D;Constructor (_:Array [String ,0X14]){ {} }}Class _{Constructor (){Continue ;}Destructor (){}Constructor (_i,yb7,eZ,_,__,_7_T7,oH,sH,_E_:Int ;F:N;E_:Array [Float ,0B1000100]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 516))

    def test_517(self):
        input = '''Class __:_{}Class l{Destructor (){}$N_(nIL,_,_,_,_,I,Bih,B:Array [Boolean ,0B1000000];__:a){}Constructor (_k,__:r;Ds:Array [Array [Array [String ,0X4_6_8],9],01]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 517))

    def test_518(self):
        input = '''Class _{}Class i3_:EI{}Class __7{$26Z(){}Constructor (U_J,_,_p,___:_0_;_O,S_38:Array [Array [Array [Array [Array [String ,01_6_05],0b1001],27],0XD],27];_,f,e3F,_,a0:_62_Y_;XEM:e2__3f;_,__,_:_;o35c_:Array [Array [Float ,27],4];c:String ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 518))

    def test_519(self):
        input = '''Class y71{}Class _4_:V{Val $M:Boolean ;Var $_:Array [Boolean ,0B1_0_00_1];Val b_,$o7:Array [Array [Array [String ,100],07],0B101];Destructor (){}c(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 519))

    def test_520(self):
        input = '''Class J5_Z3_r4:_0{Val $_,__,_a3OS,$_I6_0X7__3_:Array [Array [Array [Array [Boolean ,03_6],015],91_0_1_04],06];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 520))

    def test_521(self):
        input = '''Class H{}Class _86:B0{$65E(wZ_,_,_,K:String ){} }Class Z:P60_7{Destructor (){} }Class P_40Xi_:_{}Class bj{}Class aN:go{Var k,A:Array [Array [Float ,0x7],0x6];Val $_,_F:Array [Float ,0105];U(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 521))

    def test_522(self):
        input = '''Class __:Nt2{Constructor (_,_,A_,_,_E__,P:Array [Array [String ,031],0x749];p:___5;d,c_37:t;_,_,_4_:String ){}Val _T,w8:Boolean ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 522))

    def test_523(self):
        input = '''Class B_k9_1{$d(n,K66665:Array [Float ,0xD_09];_,_:Float ;R1:Array [Float ,485]){} }Class C:s4{}Class g{}Class G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 523))

    def test_524(self):
        input = '''Class _0_2_:_3S_3_{Constructor (uq_0,NK90:_4_h_;x:Array [Boolean ,0X10]){} }Class sG_:_O9_X_m{Constructor (){} }Class R{Constructor (_,__,j_:_){}Var _,$1:Array [Array [Array [Boolean ,021],0b1],021];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 524))

    def test_525(self):
        input = '''Class _11_0:O{Constructor (u,_,a_:M;t,__:Boolean ){Continue ;}Destructor (){Return ;} }Class CO{}Class p_:_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 525))

    def test_526(self):
        input = '''Class Wj:b__5{Var $_j9e_:Array [Array [Array [Float ,0B11000],0B11],0B11_10];Val $_:Array [Array [String ,0B1],0B11000];Destructor (){} }Class _41:s{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 526))

    def test_527(self):
        input = '''Class _:_{}Class _T{}Class V:__{Val _9,Zm:Array [Array [Array [Array [Boolean ,07_6],0XB_6],0b1],0X2];Var $_,$6A,$2:Array [Array [Float ,067_1_5],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 527))

    def test_528(self):
        input = '''Class ___u_0{}Class vn{Destructor (){}Var $7:Array [Array [Array [Float ,3_29],0x4],4_8];Destructor (){ {} }Var $F7:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 528))

    def test_529(self):
        input = '''Class ___E:_h{$0(){New j().T_8_();}Val B:m_;}Class r{}Class c9:_4{}Class T{}Class _:_{}Class u:cpt{Var $RB,$0:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 529))

    def test_530(self):
        input = '''Class _m_{}Class _:z1q{}Class e{_(_2_d6_Kd:Array [Int ,0B1010001];O:P;__:____3__;S:A4O;N59A0:_;_I_,_N,On,_s:Array [Float ,0b100001]){Val L,_,_:Int ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 530))

    def test_531(self):
        input = '''Class __{Z_7_(r2fS_,_:Boolean ;_kx,_,f8,m:String ;_We:Int ;_,_,_4,_:Array [Int ,072];_,_,__ie,_:Int ;A,_E:Array [String ,6_7];_q,t,t2:l1;H:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 531))

    def test_532(self):
        input = '''Class _3:____{Var _Pu,_,$93,$R1,$H38:Array [Boolean ,0B1];}Class Fg8:Z_{}Class _{Var L:Int ;Val H0_,$4k:Float ;}Class X:_S__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 532))

    def test_533(self):
        input = '''Class VRp:_1__w_{}Class i7{Val $__VV:Array [Array [Array [Float ,05],0B100000],0xD];Var $T:Int ;_X179(){} }Class _9883{Val _:ow;Val I,$T,$_:Float ;_(){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 533))

    def test_534(self):
        input = '''Class ___1K{Destructor (){Break ;Var _spt94:String ;} }Class J:__{Constructor (j:Array [Boolean ,0x5F];_,___,_:Int ;h,if4ir11_U9:Array [Array [Array [String ,0X43],0b1010],05]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 534))

    def test_535(self):
        input = '''Class _:aq{}Class x:_{Var $9z2,$_:Array [Float ,0B1_0];}Class w__X:_1{$i7(_,_30_,q:Array [Float ,78]){} }Class _E_y_:n{}Class _{}Class _:g{}Class y_0:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 535))

    def test_536(self):
        input = '''Class V_:_{Var $c9:Array [Array [Float ,057],0b1000010];Val $CB4,Ok5_9_,$8,_G:_;}Class _:_{Constructor (_,A2g0,O,s,zq1_q1y_,_,_u8:Array [Float ,07];m_b,_,B,_N:Q1_8s_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 536))

    def test_537(self):
        input = '''Class _I{}Class S17{Constructor (_:Float ;V1,g,_6:_;_:Array [Array [Float ,0xB_4_1_335],04_4]){} }Class _86_:A{}Class _{}Class __:d{U(_W:Array [Array [String ,0XF],8_9_9]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 537))

    def test_538(self):
        input = '''Class _{Var $D6:f___8;Var _:Int ;Var _80i__5ZS:Array [Int ,0b1];_(d,j:Array [Array [Int ,52],0x4B];_q3,O,_7_6y,_W0_d:Array [Int ,0x4_1_F]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 538))

    def test_539(self):
        input = '''Class p_{}Class _:C8X{}Class _:v{Destructor (){}Val cT,_:Array [Array [Array [Array [Boolean ,94],0445],4],066];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 539))

    def test_540(self):
        input = '''Class _{Constructor (u,_N55_,g:String ;V,l,y,_,_,_k:Boolean ;L_:Int ;E:Int ;_,X_1XY_2,_,a1,_:b6;b,n0:String ){} }Class Q{Constructor (_:_7;Y:String ;_,_,x,_u:String ;_,n,L1_,_,E_:Array [Int ,5]){}_4e(){Break ;} }Class _v:O94y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 540))

    def test_541(self):
        input = '''Class a:t{Var _X:Array [Array [Int ,0b1011000],0XC_4_9_D];}Class _2_V:g{}Class _3Q_:_{}Class RZ9{}Class L{$Y_(_:_K){} }Class _:z4_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 541))

    def test_542(self):
        input = '''Class _:_N5{Destructor (){} }Class U{_(k_,__8:Float ;_,f,d_97j:_){} }Class _:r_VZ{Var _F,$J,$_:Array [Boolean ,80];Destructor (){}Destructor (){}Val $60,$5_:Array [Boolean ,80];Destructor (){}Val $__,m,$_,__:Array [Array [Array [Boolean ,0x2_9],0b111100],05];}Class j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 542))

    def test_543(self):
        input = '''Class l{}Class __:_{Val $97:Array [Array [Float ,042],0B100001];$ho8(I,y,l,W:Array [Array [String ,0B100],0x4];I,EB_23,_,_a:Int ){Var _:Float ;} }Class _4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 543))

    def test_544(self):
        input = '''Class _{Constructor (l_:String ;_,Vx_,_,_Vy,_:Array [Array [Boolean ,0B1],07];A,_:K;L_6,s,I:Array [Float ,01]){_9::$_();}Val $R6,U,$_r_,$_B:_J;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 544))

    def test_545(self):
        input = '''Class N{}Class G_{_(x,_,__9,y0,__d:Array [Array [Int ,0b11_1_00],0b11101];_:Array [Array [String ,0B11],7_4_24]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 545))

    def test_546(self):
        input = '''Class f:_7{_(){}Constructor (r:Array [Array [Array [Array [Float ,100],0B1],0B101100],06];pF_:Array [Array [Int ,0B101100],0B101100];T,_j:Boolean ;i,_F:Int ;q2G,_,_,x:X_0_4;_:Array [String ,0x48];S:Float ){}Var $E,$l:_W;}Class _6_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 546))

    def test_547(self):
        input = '''Class _:__0{Constructor (){} }Class _:s_4_{Constructor (f_0:Array [Boolean ,0b110100];k:_0_;v0:D__;Y:_Y9;_,Xi:Array [String ,01];_,Ki_,_,__Q:b;___:Float ;_3,c,_:Array [Boolean ,0B1]){Val _KB_,_0:Array [Array [Float ,0B1],05];}Constructor (){}Val $_5_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 547))

    def test_548(self):
        input = '''Class _b9C8:e{Var _c_,_,$1,$6,$m,$__250,$oB,$W,$E,U:Array [Array [Array [Array [Boolean ,0X4_B],0143],0B101101],07];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 548))

    def test_549(self):
        input = '''Class E{}Class U:_y{Var $S,_:Array [Array [Array [Boolean ,0XB],0B1_1_0],03];Var $6V_0:Array [Array [Array [String ,0B1_0_1_0],024],0b111101];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 549))

    def test_550(self):
        input = '''Class _:__aD{Var $22C_6:Array [Array [String ,0x4],0b1];}Class i_:_{Var _:Array [Array [Array [Array [Array [Array [Array [Array [Float ,023],1],4],0x4],0x2],22],023],0x4];Val $e,__,$t_:Int ;Constructor (R03_,c,_p_:Array [Int ,023];m5:_){}Constructor (){}Destructor (){S::$_3_0_S();} }Class _5{Var $l:Float ;Var q:Boolean ;Val __:Float ;}Class __:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 550))

    def test_551(self):
        input = '''Class _{q__4(y1:Array [Array [Float ,0X4B],0X4B];U,_,_Y4,_,E:Array [Array [Array [Array [Int ,034],45],0b111011],0x3A_7_DA];_,_2:N;OF6k8,__,Oct,T_i5:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 551))

    def test_552(self):
        input = '''Class c9V4:_{Var $w2,$__:Array [String ,63];Constructor (oj___V,q,J:Array [Array [Array [Array [Array [Array [Float ,63],023],37],0X39],63],63]){} }Class _{Var Bi_3D:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 552))

    def test_553(self):
        input = '''Class n5{}Class F:X_w7{$78H5(mc_91:Array [Array [Array [Int ,3],067],31];__:i;h,t0,_:y0128;_,_,f:Boolean ){}Constructor (m:Array [Array [Array [Float ,0x44],0b1110],0b1]){}Destructor (){ {} }Val $Vms_62C89,$_j__:Float ;}Class _6zo485k{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 553))

    def test_554(self):
        input = '''Class _7I{}Class _D:_7_0{}Class _7:E{}Class __{}Class _9_DZ{}Class m{$_(){}Val L_h6__X,_58_,$V_,$62_,$_:_;Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 554))

    def test_555(self):
        input = '''Class _{Constructor (A:Array [Array [Int ,0X2F],0B1001001]){}_(Lf,_,__,F,_z26T_:Array [Float ,0135];u,_,_:__2Q){}$6(){Return ;}$38_F(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 555))

    def test_556(self):
        input = '''Class _{Var _:Array [Boolean ,23_3];s__tw(_:Array [Array [Array [Array [Array [Array [Array [Float ,66],66],03],66],66],66],0b1010101];_,_2_6oy,_hT,d_,dO2:Array [String ,04];_,_:Array [Array [Float ,01],8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 556))

    def test_557(self):
        input = '''Class x:__5{H(gG,t_:Array [String ,042];Z,_8,__:Array [Boolean ,77];pm1t8:_;_:Array [Array [String ,778],77]){Var __,_OV3:Int ;}Destructor (){F::$9_Z._.a();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 557))

    def test_558(self):
        input = '''Class P8:_1Uk{}Class _{}Class Z60{Val Z___z:hr_;$P_(_:Array [Int ,0x8];w8z8,_3d_,_,j8,_,pY,B,_d_:Array [Array [Array [Boolean ,071],0xCB],44];h:F7){}Val $__:String ;}Class _:C{Destructor (){} }Class A{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 558))

    def test_559(self):
        input = '''Class L{Constructor (_V,_MC_5,_,_,__5:Array [String ,0106];M:L_6;_:Array [Boolean ,0106];l,_,_:_2;X:Boolean ;_,fI_,_,B238,_,_,p:b;r_:Array [Array [Float ,7],0b1];_,M:H2;_15,_1:Float ;_j6:o_;m,x3,V:String ;_,Hl:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 559))

    def test_560(self):
        input = '''Class N:_{}Class brT__s:f08{}Class _4r:YX___{Val $4G_,$_,$_47_:i;Var $HW_d_,d:Int ;Constructor (){} }Class _2_8D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 560))

    def test_561(self):
        input = '''Class k{Var $18:ae;Constructor (G:Array [Array [Array [Array [Array [Int ,0b1],0B1],5],05_0],2];q:Array [Float ,0XF8_7A]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 561))

    def test_562(self):
        input = '''Class ___{}Class _{Var v_6,$g,$__E_5:String ;Constructor (){}I(__,i:Float ;s:Array [Boolean ,05_71];U_:__;_0:_;t:__;o:Array [Boolean ,0x55]){} }Class L_:c{__(){Return ;}Val $5b_,$__,_,$4,__0_:_;}Class _:j{$8HK(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 562))

    def test_563(self):
        input = '''Class y4a_4__:_{a_(){}Var L:Array [Array [Int ,070],0x1B];}Class _:V40{$sh(_,L,_,z_,x6,V_6_,B,_Q_6n:Q;_6:Float ;N_s,_:Array [Array [Boolean ,0B11000],0B11000]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 563))

    def test_564(self):
        input = '''Class O:_{}Class _{}Class j{$_Rg(){}Constructor (){Continue ;Return ;} }Class _hp9_y{___2(_H,_l,_2:Array [Array [Float ,0B1_1],0142];n,m7:Boolean ;__28:String ){S__::$d73();} }Class _:N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 564))

    def test_565(self):
        input = '''Class _:_{Var _:Array [Boolean ,5];Constructor (){}Val _,_:Boolean ;}Class _{Destructor (){}Val $_:Array [Array [String ,060],060];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 565))

    def test_566(self):
        input = '''Class C:Tu{Var $U:String ;_ta(J,_,BSm,__f,_:K4;_:Array [Array [Float ,0b111110],0xE];_5:tjQ67){} }Class C__{}Class _{}Class _{Val O,$j,$4:h;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 566))

    def test_567(self):
        input = '''Class N{Var $4__:Array [Float ,0b11_0];}Class _3:X{}Class k4:__{Var _3,x_A,$6,_,$_9:o65;Val QJ:Array [Int ,077];}Class Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 567))

    def test_568(self):
        input = '''Class _{V1_(_9:Array [Array [Boolean ,01],34];b:Array [Array [Array [Array [Array [Array [Array [Array [String ,0b1],0X27],0B1],0763_114],34],0X27],44],01]){}Constructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 568))

    def test_569(self):
        input = '''Class _:_g{Constructor (){} }Class O:y{Var _0n_i:Float ;Val $SYj,$A:Array [String ,05];Var k2:KF;Val X:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 569))

    def test_570(self):
        input = '''Class p_:_Y8___M_I{Var $_k:Array [Array [Array [Array [Array [Float ,0X3_1],0X41],32],0b1],0x6];}Class N0{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 570))

    def test_571(self):
        input = '''Class O{}Class kd1:_VP0{Constructor (){Val _a_:Array [Array [Boolean ,0b1],0B1];}Val $f_:Array [Array [String ,1],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 571))

    def test_572(self):
        input = '''Class _:_3_{}Class T_f:__{}Class V2_{Val E__,__,$_:_;}Class c:Ma_{}Class _:im{}Class __{}Class d_{Constructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 572))

    def test_573(self):
        input = '''Class _{}Class I{Var d,$4__KJ6_,$7,$_61,L_w,_6,$_,$L_0:Array [String ,02];}Class _:_09J{Constructor (u50,_:Array [Array [Boolean ,0B1001011],04]){Continue ;}Var P:Array [Int ,0x8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 573))

    def test_574(self):
        input = '''Class r:k{Constructor (v:Array [Array [Array [Float ,05_1],697_2_1],5]){}Var Ug_,$r3,$Ri,$___V5:Array [Array [Float ,06],0b1011110];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 574))

    def test_575(self):
        input = '''Class oQ_{Var _q,y:String ;}Class qs{}Class OAb9{Constructor (_,_5K:_;__:Array [Boolean ,0X51]){Continue ;}Var $8_e,J,I,__:k;Val $7:Array [Float ,7];}Class c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 575))

    def test_576(self):
        input = '''Class __5l:_W3{$44t(H__Q__L:_;Z_:Array [Float ,0104];_:Array [Array [Boolean ,57],034_5]){}Constructor (_5_:Boolean ;_k,u:l6;_:Array [Array [Boolean ,0104],49_3]){} }Class N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 576))

    def test_577(self):
        input = '''Class _:M{Var P_,F_,$c,$03,$_9_7:Array [Array [Array [Array [Array [Float ,0136],98],9],1_0],0b110];Destructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 577))

    def test_578(self):
        input = '''Class y:_{}Class _:_{}Class a{Constructor (_35:Float ;_1_a,_N8_:Float ){}Destructor (){Var _,_:Array [Boolean ,0X62];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 578))

    def test_579(self):
        input = '''Class n2u_4N2{$_(ry8L0,__D:Array [Array [Float ,0B110001],0x26_2];K2,_:Array [String ,0131];__7:String ;K:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 579))

    def test_580(self):
        input = '''Class Y:_{Var _12R,_,$7:D;}Class _:_{Var H:_s_;}Class Pr:BB{}Class _E1:_{Constructor (){}Val __,KH,zB:Array [Int ,0B101000];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 580))

    def test_581(self):
        input = '''Class e{Var $c2,M_p,_8N:Array [Boolean ,0X5];Var f0,$3T,_,$_i:BV;}Class _:_1{}Class mA:_6{Destructor (){} }Class H_Yf5SJ_:m9{Var z__7:_k;}Class _:Z5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 581))

    def test_582(self):
        input = '''Class b:D2{_(){} }Class _:xZ_{Constructor (){Return ;}Constructor (_d_,_,_6,EP_:_B;_1_q4_5:___;q,nC_1:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 582))

    def test_583(self):
        input = '''Class _:W1{Constructor (a:I;_,_:Array [String ,0b10001];_,_W:_;v1,t:Array [Boolean ,0B1_00_00_1_0_00];_:Array [Array [Float ,067],0B10];u,_o___:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 583))

    def test_584(self):
        input = '''Class _{Destructor (){}Constructor (){}Var $_L1,$C,$TD_1,_:aI;Destructor (){} }Class __:_483{Constructor (_,_,X_:m_){} }Class _k_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 584))

    def test_585(self):
        input = '''Class __Zv5_:__{Destructor (){} }Class _1{Constructor (){}Destructor (){}Constructor (){}Destructor (){Break ;{} }Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 585))

    def test_586(self):
        input = '''Class M{Constructor (____7G:Int ;_z_,HU:Array [String ,0xCA_7];_,_,__:Array [Array [Array [Int ,12],0X4_B],0b111000];E,O,y:Array [String ,6]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 586))

    def test_587(self):
        input = '''Class Z{}Class _:j__H{_9(x:Array [Array [Array [String ,3],8],0B1]){}Var $7_,v,$_:Array [Int ,0x9];}Class sz6_2{}Class f{}Class N:_j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 587))

    def test_588(self):
        input = '''Class _:e{Var $2:_3_;Constructor (_:Array [String ,0127]){}Var M,Y:Array [Array [Array [Array [Float ,0127],0127],03_1_7],0B100];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 588))

    def test_589(self):
        input = '''Class _k:A_{}Class sF:_{}Class _5{K(i,_z_:Array [Array [Array [Boolean ,8_8],0X44],5];_:Int ;y:X;_,Z:Array [Float ,0b1_0];T_,_:__;_:Boolean ;_:__c2){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 589))

    def test_590(self):
        input = '''Class V:E{Val $0_:Array [Array [Array [Boolean ,0X43],56],56];}Class K{}Class fb:K3mZ{Constructor (f,_:v_;_:Int ;V:Array [Boolean ,0143];_,xa,_Nq1_u4,B,_:Array [Float ,0b11111]){} }Class D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 590))

    def test_591(self):
        input = '''Class I{}Class h:_{W(_W:String ;___,_,Y,_,UU:Array [Array [Array [Array [Float ,0b100111],0b1],0xFF],0x3]){Break ;} }Class T_7:Q{}Class _{}Class __{Var $_7__6_i:_Y3;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 591))

    def test_592(self):
        input = '''Class _8:z{Destructor (){}Destructor (){Val a:Array [Float ,0X15]=_::$6_Z_;}Var $_,$4,Z_6,R,___:Array [Boolean ,03_30_6];}Class U{}Class _:CO{Constructor (){Return ;}J8(__h_3_,Tx:_){}Val _,g:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 592))

    def test_593(self):
        input = '''Class _:jx{Destructor (){Continue ;} }Class _4:V{Constructor (_:Float ){ {} }Val $7:__;Constructor (_:Array [Array [Array [Array [Float ,0X9],0b11],0b111001],9_9_6_5];S,CG:String ;_5:__32;q,_0_,PS8,I,_,i_:String ;Js:Int ;_:__){} }Class _0:_5_P{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 593))

    def test_594(self):
        input = '''Class __{Var _,_,M_,i3N2___,$_:Array [Array [Boolean ,0x2],07_6];Val q:Float ;}Class t:D{Val $4,$A2H:Array [Float ,96];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 594))

    def test_595(self):
        input = '''Class y4_:i{Val $_2,$nZ,$M_6:Array [Int ,0xA];}Class i:_{$_3(_,ob_U:Array [Boolean ,9_7]){}Constructor (){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 595))

    def test_596(self):
        input = '''Class F{Constructor (__R__:Array [Array [Array [Float ,0111],0B1],05_0];_:D0){} }Class k_:yH{Var _:Array [Float ,0x55];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 596))

    def test_597(self):
        input = '''Class wl_:_{Val $z,$Pw1p_,_:s_8;Val $__:Int ;_(){}M(e8:Array [Array [Array [Boolean ,0B1],0b1],0X8]){ {Continue ;} }Val $1,_,$_:Array [Array [String ,36],84];}Class _:_{Constructor (x_,p:Array [Array [Int ,03],84]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 597))

    def test_598(self):
        input = '''Class t3{Var $6I2,E27:_;}Class _Z:A_{Val c7:Int ;}Class Wc:w{}Class x:_A{Destructor (){Var Z,_P,_s:_0_;}Val $6,$8:Int ;Constructor (_:uX;_,F8___,_,P,_4:Boolean ){Return ;Continue ;}Destructor (){Continue ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 598))

    def test_599(self):
        input = '''Class _R_:e60YX{Destructor (){}Constructor (){}Var $t,CL,_,__,$M,$__4_X_78,$S:Array [String ,68];}Class _h2{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 599))

    def test_600(self):
        input = '''Class q:w9QSY{}Class pNV2:_3{Val S:Array [Array [Int ,0X62],04_4_76];}Class _{}Class _:_{}Class TU:_{}Class m:_{}Class I:_{}Class _:_G_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 600))

    def test_601(self):
        input = '''Class _6{$8_(_0__,Q_,F:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0x24],0b1],0b1000000],017],0b11],2],012],0x24]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 601))

    def test_602(self):
        input = '''Class _:O{Val $08_V_K,Uk_D__,$49,_:String ;Destructor (){} }Class _:_j{Constructor (__:Float ){Continue ;Return ;} }Class __ZHe_{Val _5,$x21N:Int ;Var V,__:Array [Int ,48];Constructor (){} }Class _{}Class Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 602))

    def test_603(self):
        input = '''Class _S6:_{Constructor (_,y:Array [Int ,0X2_A];_,___,M,B_9:Array [Boolean ,0x8_7_C]){}Val __:_;}Class _9{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 603))

    def test_604(self):
        input = '''Class _c:Jg8{Val $6B,$P:o8;Constructor (){}Var $r:String ;}Class _h__:_{}Class __:c{$LZ_(Y,_LW:__;_,T,_3_:Float ){}I(_:Array [Boolean ,02];_,__,__:Array [Array [Array [Array [Array [String ,0103],0X74F],0xC],69],015_2]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 604))

    def test_605(self):
        input = '''Class _{Val qVn:T1;Constructor (_n,_,P,I_2:Boolean ;_,r2_1,_S,d:Array [Boolean ,6_3];_90o1:Boolean ){Val _:yN3;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 605))

    def test_606(self):
        input = '''Class _{_(C:Array [Array [Array [Array [Array [Boolean ,98],0B1],191],0B110100],1]){Break ;} }Class __L_{}Class F_:g{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 606))

    def test_607(self):
        input = '''Class _{Val $_,$_1:Array [Array [Array [Array [Array [Array [Array [Array [Int ,02_7020],06_2_63],0b1_1_01_0],0B1011_0_101_0],0X2],0b10_0],0143],3];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 607))

    def test_608(self):
        input = '''Class K:ewF{Constructor (_,b:Array [Array [Boolean ,0x9],0B1010001]){k_::$4.v();Var j6,_,k,_t:U;}z(P0,H,_:Int ;_:Int ){ {R_::$_m();} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 608))

    def test_609(self):
        input = '''Class _:E_6{Destructor (){Return ;}W(__,P,_:d_;_,___,Z3:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0132],63],0132],0X29_C],07],04],06],0B1],03],0b1001100];__,o,I,Z,N:_gF_){}Var _:k;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 609))

    def test_610(self):
        input = '''Class _jf{Val _,$_:Array [Array [Int ,0b1_0],26];Val _:Array [Array [Array [Array [Array [Array [Float ,0x10],01],0b1_0],0X4],0xE6_E6],0b1010010];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 610))

    def test_611(self):
        input = '''Class a{}Class _{Var $_,$65_b:Float ;Constructor (s:Array [Float ,0141];N,______,___,_8,_1_:Array [Int ,0xA];Vvyg_4:_3kx_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 611))

    def test_612(self):
        input = '''Class _{Destructor (){}Val H,k:Array [Float ,45];}Class __{Constructor (){} }Class __w_:o{Constructor (){}r_(){} }Class __T{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 612))

    def test_613(self):
        input = '''Class _:O_5{}Class R{Var $61IB:Int ;Destructor (){} }Class _0:q{}Class I_5{}Class H{}Class _yU{$1(C2,n:_){BAm::$17();}$d_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 613))

    def test_614(self):
        input = '''Class l{}Class _{Constructor (Y_N_,C__,_022,M4_:Array [Array [Array [Array [Float ,0X4F],8],0X4F],396_2_1];_,W:l_;P:Boolean ){Return ;Break ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 614))

    def test_615(self):
        input = '''Class _{Constructor (m:O;_2_:Array [Array [String ,05],0xD_A_43];_:Array [Array [Int ,0B11010],56];im,M,_:String ){}Val $_,$y,$r,$K,_,$55,$_c3:_R;Val q,$_9:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 615))

    def test_616(self):
        input = '''Class L{}Class J:_{Var _:Array [Array [Array [Boolean ,0B1_1_1_0],0B1],0B11110];Var _,_,$dfO1,$__0,__s_,A:_____;Constructor (O8_9:U_5){FP::$5();} }Class _:_4L5L{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 616))

    def test_617(self):
        input = '''Class d_j_{$L(w9:Array [Array [Boolean ,0XB_F],0xC];G:Array [Array [Array [Int ,056],0X34],0X34]){}Destructor (){}Var _9:Float ;Constructor (___,P:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 617))

    def test_618(self):
        input = '''Class _k_V_{Var _,$_,_M_:Array [Array [Array [Array [Boolean ,0b1],0x4],04_7],0x30];_U(){Break ;Break ;Break ;} }Class O55F{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 618))

    def test_619(self):
        input = '''Class vV{Destructor (){}_62(z4,P9,_:__8__h;__S,_,_:a_;r1:_){}Constructor (w:Float ;_,__:Array [Array [Array [Array [Float ,0107],30],0X58],0xF]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 619))

    def test_620(self):
        input = '''Class n{}Class L_:_{}Class d7N3{}Class _{Constructor (_W,IsO:Array [Array [Float ,063],0b100111]){ {} }}Class _{}Class _{_g(_:Array [Boolean ,0b100111];_B8n,h:_){}Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 620))

    def test_621(self):
        input = '''Class ___2{$Mx(_:Array [Array [Array [Array [Array [Boolean ,0B1_11_10_101_10_1_0_0],0X40],0B11010],067],067];_:Array [Float ,57];M7__46:_;s:D){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 621))

    def test_622(self):
        input = '''Class J_{$_s(_,A,q,I68,mL:Float ;__c,_:Int ;_072,b5,nL:_;N_,c:_1;__:Float ){}Var _ZT,$7,Q:Array [Array [Array [Boolean ,73],8],0b1_1_1_0];Var $76B:Array [Array [Int ,030],0b111];}Class G_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 622))

    def test_623(self):
        input = '''Class _{Val _:s_;Var $Igd,$_Q,_:_183;}Class _G{Constructor (){}w_r(m:Array [Array [Float ,0B110111],0B110111]){Break ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 623))

    def test_624(self):
        input = '''Class _30:_9o_{}Class _{}Class _4:P4{}Class a:E{}Class _A_1__:_v{}Class G342{}Class _:C{Val $_2_7,$47:Array [String ,05_254];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 624))

    def test_625(self):
        input = '''Class qF_9{}Class _:_{Constructor (B22:String ;D:Array [Array [Array [Array [Float ,057],0B1],64],3];_,_i:__;NY_:_;G3Z:Array [String ,64];_,lT_XTe4:L;IH606:Float ){}Val W,a,$__5:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 625))

    def test_626(self):
        input = '''Class __{}Class _hZ2F_:r{Val $9,c,qD,q18__,_,$Zp:Boolean ;Val $_6,q__:N;}Class _f_M:c{}Class m{}Class _p_:_{}Class V:G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 626))

    def test_627(self):
        input = '''Class a4_d{}Class lQ26a:D{Destructor (){} }Class d1{$_(_:Array [Array [Array [Int ,0b11_0],020],047]){J::$G_V_.X();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 627))

    def test_628(self):
        input = '''Class E5{Constructor (I_K7__:__4;_:_51;_:Int ;b_,v:P;g,_M:Z;t,H,_,J,t,Q_:String ;_:Int ){Var _:Bc8_;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 628))

    def test_629(self):
        input = '''Class w__0Oa:R_003{Var ___,$l:o9;_(){}Destructor (){} }Class iZ{Constructor (){ {} }Var n,O,$0:Boolean ;_(p46,_,_0w,_:_k){Return ;}Var $_L_:Array [Boolean ,0xF3_F];}Class ___k_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 629))

    def test_630(self):
        input = '''Class t:_{}Class y:W{}Class _:e{Val $5:Array [Float ,033];}Class b_6_:_03XU{Var $_,_,Q:Array [Array [Array [Int ,0B1_1_1101_0],0x29],033];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 630))

    def test_631(self):
        input = '''Class n3:_21C{$C(_,___9s:Array [Array [Array [Array [Array [Array [Array [String ,0b110101],5],0b110101],0x20],0b1_0],2],6];_:__){}$1(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 631))

    def test_632(self):
        input = '''Class _:_4M__{Val $_Lx2__,$9:Array [Array [Float ,2],4_5];Val _:Array [Array [Array [Array [Float ,0140],48],48],0b11010];Val $A,__,$6e:Array [String ,0X51];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 632))

    def test_633(self):
        input = '''Class RP7__{Val $Q_,_C:Boolean ;}Class AN{}Class K7{}Class sG0__1t__Y:_{Destructor (){} }Class __{$_(_:Array [Array [Array [Int ,250_226],94],0B10];_:String ;_7,u_:__27;Z,_7,D_K:_){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 633))

    def test_634(self):
        input = '''Class _Q{}Class w___R:U{Constructor (j03_,X,_vCd93,b1p3__b_:Array [String ,41];e:Array [Array [Array [Array [String ,02_7],0b10100],0x8],071]){}$7(){} }Class D:OdA_{Var _:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 634))

    def test_635(self):
        input = '''Class B_R2:g8_{Val V6,$5,X:Array [Float ,3_6_94];}Class _i5:w8ie{}Class _h:_x{Q(C,_,_:Array [Boolean ,10];h_4,I_:Array [Array [Boolean ,6],0B111011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 635))

    def test_636(self):
        input = '''Class ___6{_K60(Y:_){} }Class i:e5{Var $y,$1Lv:Y_O_K_;}Class Zk0W{}Class x{Val $U__,x,__39G:String ;Destructor (){}$_5(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 636))

    def test_637(self):
        input = '''Class K:XK{}Class f{}Class _{}Class __53:y4_{}Class YDt:_6{$F_(_,y2:_){Break ;Var z8G,f__,t_:E;Break ;Continue ;}Val Dj:Array [Array [Array [Boolean ,0B1000101],0xD_72],0b110101];Constructor (A:Boolean ;__:Boolean ){} }Class _{_(){}Var $_7:E;}Class _:Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 637))

    def test_638(self):
        input = '''Class O1:X{Destructor (){}Var I_IG,v8__,$Nm_9,$jw,$H:String ;$O(_:Boolean ;R_,O:GAs__9;m:d90_;_:Int ;Y,_:Array [Int ,0x2_8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 638))

    def test_639(self):
        input = '''Class g0:b9{Var Y_,$7,SB,$8,$I23U9:Boolean ;Constructor (l,_:Array [Array [Array [String ,0b1100],6],0b1]){B_1::$_();}Destructor (){}Var $_,__:Array [Array [Array [Array [Array [Boolean ,7_7_8],0b1],0130],0B11001],0B1_00];}Class l:I_Yc{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 639))

    def test_640(self):
        input = '''Class u6_{}Class p1V_:_{Var d:Int ;}Class _3xvS:__{Constructor (__5_,_:Array [Float ,16];K1,_,H_a_G_:B96;__A,__:String ){} }Class _D_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 640))

    def test_641(self):
        input = '''Class _u9_2{Constructor (_,J:Array [Boolean ,47];_u_XmWAj,_,_:Array [Array [Array [String ,075],075],0x10]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 641))

    def test_642(self):
        input = '''Class _k{Var $V_,Q,_,$1:Array [Array [Array [String ,0x1],0B1],032];$k4P(_:String ;_S,__:I;z:Array [Boolean ,07_4]){Return ;Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 642))

    def test_643(self):
        input = '''Class Qk_:_d{Constructor (T1:_;ju,K__,_:Boolean ;_:Array [String ,04_5_5];_:G;__00,i:Array [Array [Int ,0x3D],64];_,Y:String ;_ny:Array [Array [Array [Array [Array [String ,0b11011],0X4],0B1_1],64],7];_,__:_p_1;_:Boolean ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 643))

    def test_644(self):
        input = '''Class _:u_Vo53_{}Class vF{}Class _:_{Var n,$8yZ8:Float ;$D(_6:Boolean ;_,S:Boolean ;__,k_55,__23074q:Array [Array [Int ,833],0B1010100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 644))

    def test_645(self):
        input = '''Class _{Var __:Array [Int ,021];Var U:gN_4;Var Y:Array [Array [String ,021],0X58];Destructor (){} }Class j:_{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 645))

    def test_646(self):
        input = '''Class H_:j5{_F(Xa3n_096_2F_,_l,d:String ;_n:Array [Boolean ,0124];XXr:Boolean ;_H58_,_:Float ){}Val z:Int ;}Class m82_:V{}Class gk3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 646))

    def test_647(self):
        input = '''Class n84{}Class _:z{Destructor (){}Destructor (){} }Class __3s:_{Val _:s_;}Class _{Val $uV:Array [Array [Int ,1_6_6_8],4];O(P6:Boolean ){Break ;}Destructor (){Val __9__:Array [Boolean ,030];} }Class G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 647))

    def test_648(self):
        input = '''Class _:fW_{Destructor (){}Constructor (r,_:String ;S:Array [Array [Array [Array [String ,7],01_2_5_1],0b1010101],17];_,_:Boolean ){}Constructor (_u,G:Array [Float ,0X5D];_:Array [Int ,17];E,_,_:Array [Array [Boolean ,0b11],17];__:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 648))

    def test_649(self):
        input = '''Class _0:p{}Class _:_{Var _:Int ;}Class _{Constructor (a:Int ;_:Array [Int ,5];G,l_,_,Y8,l,P:Int ){Continue ;Return ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 649))

    def test_650(self):
        input = '''Class __{}Class c:P{$___z(){} }Class __{}Class _f{}Class Kh{Destructor (){}Constructor (g_,r___1,E2:s;L,M0,U8z,_,_:Array [Array [String ,0B1],6050];v_:Boolean ;H:v){_G::$58h4();Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 650))

    def test_651(self):
        input = '''Class u4{Constructor (D_C_:Array [Array [String ,0B1_1],0x6_1];i:I20F_;_,g,_,_4G___,__,__,q,E_:Boolean ){} }Class D{}Class _:R{}Class V_8:_{}Class _T:_f__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 651))

    def test_652(self):
        input = '''Class _{$75(Ay_,j7,_U4,__W_:_){Break ;Return ;} }Class D3_4_{}Class _14:UR{Var $_,_:n;Val t_V:String ;}Class _:W{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 652))

    def test_653(self):
        input = '''Class N{_w(o,__:Array [Array [Array [Array [Array [Array [Array [Boolean ,0126],0x55],29],8_89_3],0x6],052],0x6];_,z,_:x08_;t0:Array [Array [Array [Array [Array [Boolean ,21],6],0B110011],0x61],0x76];s:E){}Var $__:d;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 653))

    def test_654(self):
        input = '''Class u__a:_4__{}Class e_:W{}Class _:t_{Var ZKc_,__1,$R:_;_(y,f,_:_){} }Class T{Var _M75,$1W_,K:Boolean ;}Class Vg_{Destructor (){Continue ;} }Class K_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 654))

    def test_655(self):
        input = '''Class _M:d{}Class _{Val d:String ;$M(_,Ecb_5,H7k,D_I_,d_:Array [Float ,0B1000010]){}Destructor (){}Constructor (){Break ;Return ;}Constructor (_:Boolean ;Q:Boolean ;_8_:Array [String ,0b1];s,_j,_,p_,L9_b__:Array [Array [Array [Float ,2_40],6],4]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 655))

    def test_656(self):
        input = '''Class v__:_U{$_(_,c:Array [Int ,023];__,_:E6;af_,___:Boolean ){Var DZ_p,_:Array [Array [String ,0b1],02];} }Class jy:_t{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 656))

    def test_657(self):
        input = '''Class hf{Constructor (){}$_014(_,_:_;___50,T:Int ;Bz8d,_,_:Array [String ,0B1001]){} }Class S5{Constructor (r:_8;s,_,_f,_:V_8g){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 657))

    def test_658(self):
        input = '''Class _{}Class v{Constructor (_,_Mc,u_9,dz_:Array [String ,031];D,_o7_lf,_k_:Float ;_:ba;__:Boolean ){} }Class __6:___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 658))

    def test_659(self):
        input = '''Class w3t78_:E{$3_0(){}Var i:Array [String ,06_47];$XX(__:String ){}Constructor (S3,C,_,_,J:Array [Array [Array [Float ,0b1_1_1],5],02_5_6];K1:r){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 659))

    def test_660(self):
        input = '''Class _dwb5{Val _C1_,$_d:String ;Val $P3_,x6b741_,$Y:Array [Array [Int ,0X3A],07_7];}Class v78{}Class _0{___(){}Destructor (){}Var $_b,______0:p;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 660))

    def test_661(self):
        input = '''Class W{Val ____92,$_,$QW_W:String ;$9_l(_6,S2,Cb:Array [Boolean ,0X4];h_0Q_m:Float ;z:a_;S1_:nr;_:Int ;y_:Array [Int ,2];G:_R;G:_){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 661))

    def test_662(self):
        input = '''Class _:_{}Class _8jgs{}Class f{Constructor (N_W:_98_;V:E7u;__:Array [Array [Boolean ,0B111101],0117]){} }Class _{Constructor (_:_;_Z_1v36,F:String ){} }Class I:_G8__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 662))

    def test_663(self):
        input = '''Class o:__{Constructor (f:_;E8_,r6,j_Pk9,o,__6_,nQ,c,_,GD,_:X9y7;m:Array [Array [Float ,07_1],0B110101];M9_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 663))

    def test_664(self):
        input = '''Class _:_{}Class T{}Class J3__9V5:_{$fZ_(I28Ks3,_,___:Array [Int ,0B1_1_1];__,_,F2:Float ){}Var G,$w,$t:Array [Array [Array [Boolean ,075],5_56],4_02_5];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 664))

    def test_665(self):
        input = '''Class m_:__{$r(){Continue ;}Destructor (){} }Class _{}Class e{}Class _0:_{Val $_1j_,_5C:_;Var $_,_,$0t_:Array [Float ,0B1];}Class _4{Constructor (Z44_P:_y){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 665))

    def test_666(self):
        input = '''Class _:N9e{Constructor (_,_q,r_:_){}Constructor (){Return ;} }Class _:i{}Class N:_7{k4(_,Xj,X9_:Array [Array [Boolean ,0X2],0X6]){} }Class g:_{Var _,X,_:String ;Var $_l_,$H,$0,$q,_H_9:Array [Int ,9];Destructor (){} }Class nO_{Constructor (__5_:Boolean ;CKmG,_:Array [Boolean ,0x12];U_9_3_2_X3M8:Array [Array [String ,0x12],0B1_0];hq_:Array [Array [Array [Array [Array [Array [Array [Boolean ,7],0X6],6],0b11],0B1011100],7],0b1]){Break ;}LEx21(){Return ;}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 666))

    def test_667(self):
        input = '''Class _{Destructor (){Break ;} }Class v:o{}Class G{}Class _:_{Constructor (_,_V,O0:Array [Array [String ,1],1];_:Array [Array [Array [String ,06_7],0b10000],0b10000];V0:String ;O0:_;__:Array [Array [Int ,0X3E],0b10]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 667))

    def test_668(self):
        input = '''Class _V{Val $__V:gGC4_T;Val $__:BF;Destructor (){}Val _572,E,___,_:Array [Int ,0X4_A];Constructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 668))

    def test_669(self):
        input = '''Class __A{Destructor (){} }Class _f{Destructor (){Continue ;Break ;Break ;} }Class _{o_(){Val T:Int ;{} }}Class _{}Class k92{$__(z7,_3:Int ;_n_:Array [Int ,0B1_1_10_10];_:Array [Boolean ,0b100011]){}Var z6,$R_,f,Em_,$_k,_:e;Var $O:Y313;}Class D{}Class V__ysz{}Class O2_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 669))

    def test_670(self):
        input = '''Class __0{$n(){} }Class _{Constructor (_2_E:Array [Boolean ,0x53];_:Int ;_,Z6y7:Array [Array [Array [Array [Array [Array [Int ,0b1],0x7_B1],5_0_8],0B100000],0B100000],01]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 670))

    def test_671(self):
        input = '''Class _:_{Constructor (){} }Class __Xu:R{v(s_:Array [Array [Boolean ,9],96];_:Array [Array [Int ,0b10_0_1_0],6]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 671))

    def test_672(self):
        input = '''Class FW:R{Var X:Int ;}Class _D1_:_{}Class _o{}Class _yx{Destructor (){}Destructor (){_::$nX();} }Class X_{}Class __8:X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 672))

    def test_673(self):
        input = '''Class z{}Class _70__:v{}Class a_:D{}Class __:w{Val $_,$9,$_,$_Vi:Array [Array [Array [Float ,0xE_4C_DFD],0XC248_7_2_0],5];}Class _7a_7:X{}Class ___{Val $F_,_v__:Array [Boolean ,0X4A];}Class _:_C{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 673))

    def test_674(self):
        input = '''Class _:_g6{Destructor (){}Val _Q99:Array [String ,0B1_1];Destructor (){Break ;}$aI_1(olkk:Float ){_r1::$4.__5.__().P__.k31u2_Hr();} }Class V2:_6x__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 674))

    def test_675(self):
        input = '''Class __{}Class m:_{T(F0:Boolean ;E:Array [Array [Array [Array [String ,05],0b1011000],70],70];R:Array [Array [Array [Int ,0X3B],0X6_F],05];LH,_:Array [Array [String ,05],43]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 675))

    def test_676(self):
        input = '''Class _Q__{$0(G,l07:Int ;g15uh,x,I:w){}Val $11U,$804,$Z6,LfV_o:Int ;Var $_,__,$154_1Q:Array [Array [String ,02_0],0B111111];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 676))

    def test_677(self):
        input = '''Class y_9{Constructor (_37:Array [Boolean ,0b111000]){}Constructor (w_:Boolean ;_,__C_:f;__:String ;__B,oB,_h,W,_,_:String ;_,_3,_Z,DEM_,_s_K_8_86:Float ;c:Array [Boolean ,06_5]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 677))

    def test_678(self):
        input = '''Class _:_1{}Class U1:_{Var $7:Boolean ;Constructor (_:_5;_,_,_:Boolean ;_k,t_,e,_9,D0,t,T__Z7J_8,o:__k4){}Var t,n_a_73:_;}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 678))

    def test_679(self):
        input = '''Class _C{Val $N:Array [Float ,0B1_1];$1(n,_:X7c){}Constructor (_,o3:Array [Array [Array [Array [Float ,22],1],0X9],0x3D];_,S246_I8,r98z_:String ){Continue ;} }Class t:_{}Class I:nx{}Class __l:C7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 679))

    def test_680(self):
        input = '''Class ___:a5{}Class _:h{Var _v,_tI0,$___99,P8,$_,$8k:Array [String ,5];}Class H:X{Var $7:Boolean ;}Class _i1ZvRM_8:_{Val $_7__:Array [String ,0X29];Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 680))

    def test_681(self):
        input = '''Class _{}Class _6:r2{Var I_R:Array [Float ,02];Var l:Array [Array [Boolean ,0x48],0XC3];Var _,_,_0,$v,_,$J,B7___:Array [Array [String ,02],0xA_09_8E];Destructor (){} }Class _{}Class i{}Class mw{}Class _{$2W_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 681))

    def test_682(self):
        input = '''Class _Q{}Class _vq{Destructor (){Break ;} }Class _5_{}Class Ec:_47{}Class _:q{}Class o{Destructor (){}Constructor (){}Destructor (){}Destructor (){} }Class __:F{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 682))

    def test_683(self):
        input = '''Class _37{}Class __{Constructor (J_:Array [Array [String ,0B101011],0b100000]){} }Class _2{Val $Z_C:Array [Boolean ,0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 683))

    def test_684(self):
        input = '''Class i{Var _,$__4m:_;Val $X_,$_K_:Array [Array [Array [Array [Array [Array [Float ,736_8],82],20],92],0B1],063];Destructor (){}Constructor (RR,_:Float ;_A:Boolean ;_:Float ;_,_,_:___;__7,___V:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 684))

    def test_685(self):
        input = '''Class _:_{Destructor (){ {} }Destructor (){} }Class _u{Var _,_98_8:Array [Boolean ,3];}Class _k__{}Class _f5:_ul{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 685))

    def test_686(self):
        input = '''Class _{}Class N{Constructor (_:f__6;Q,___:N;o,D_,_Q_,__,S,_,_6C,_3__,_,O,_5,sK:Array [Array [Boolean ,0122],0X35];M_,_Y,L_:Array [Array [Boolean ,0x49],0x49]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 686))

    def test_687(self):
        input = '''Class A{Val $8,$a,___:g;Val $__:S5;Var a:Array [Array [Int ,066],0102];$D_(_,T:Array [String ,0b1001010]){}_1__(){}Constructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 687))

    def test_688(self):
        input = '''Class W{Constructor (){Return ;}q(_:Array [Float ,0x70];vE:Boolean ){Val u,_:Array [Boolean ,0X1];} }Class J{Constructor (_:Array [Array [Float ,0b111],0x60]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 688))

    def test_689(self):
        input = '''Class _:_{Constructor (P_7m,C__,g__2:Boolean ;_6:n;f9f:Boolean ;Iy0,__3:Float ;k,_:Array [Boolean ,0b1];_S:Array [Float ,026]){Return ;}T(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 689))

    def test_690(self):
        input = '''Class _:_{}Class ___9_LZ{Var $t,P8S:String ;Destructor (){} }Class _9{}Class D:N2TY{}Class _:_2__{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 690))

    def test_691(self):
        input = '''Class Y1_0:_{$_B(R,y_,E,pZ_,___,XO1__p_,__B:Array [Array [Array [Boolean ,14],0B1],6]){ {}Return ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 691))

    def test_692(self):
        input = '''Class _{}Class _D2{Constructor (___:Array [Array [Array [Array [Array [Array [String ,67],0b10000],0X8_BC_F9_F0A],07_7],0b1_1],07]){} }Class _D:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 692))

    def test_693(self):
        input = '''Class __{Destructor (){} }Class L____{}Class __{Var P,$q:_1;Constructor (__95,_,_x30mn2h:String ;_:String ;b,q84:Array [Boolean ,0xF];e20,n,a,Q2,_,_:String ){} }Class A:U9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 693))

    def test_694(self):
        input = '''Class Y_{}Class __:_6{Constructor (_:Array [Array [Array [Array [String ,054],0B100101],07_3],04];_:Float ){} }Class i7W:_09_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 694))

    def test_695(self):
        input = '''Class R_DU5{}Class _{Val R4_:__;Destructor (){}Val $k_:Array [Boolean ,06_7];Constructor (w:H;_,V_,p_,l,D:V_O2B){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 695))

    def test_696(self):
        input = '''Class _:SsH{}Class _H{Constructor (_,R_,_e_:s_7;vT2D:Array [Boolean ,67]){_::$b2a_.__1.sx.Cb();Val A2_:Array [Array [String ,0X2A],03];}Val _:Array [String ,67];Val C,$03_0_4j2H_3,$__,y9:Array [Float ,67];}Class __:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 696))

    def test_697(self):
        input = '''Class _k_{Constructor (_c6_6,L,HX,_:Float ){Continue ;}Var _:___;$V(){} }Class MK{Var i:P;}Class _:_{}Class FB:_{$9(_,_:Float ){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 697))

    def test_698(self):
        input = '''Class R{}Class T__{Constructor (_ZD5_,__3:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1_000],0x2F],0B1],0B101110],0B1_0_1_0],91],55]){}Var E_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 698))

    def test_699(self):
        input = '''Class _:__7G48{}Class _0718{Var $_,e__:Int ;Val N:_2;$WS57_217I4(I,_:Float ;_0I_A_p__,G:Array [Array [Boolean ,01],0b1]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 699))

    def test_700(self):
        input = '''Class _y_D_2{$_(Hh_,Q6,_,_,_p,E,_58_6W5p:_68__){} }Class _x{}Class _{Destructor (){ {C::$8QCg();} }}Class n1:T6b{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 700))

    def test_701(self):
        input = '''Class _{Destructor (){}Constructor (Dl__:Boolean ){Break ;}$43_(){} }Class b:_{}Class b0_{Constructor (){} }Class c77:_{}Class c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 701))

    def test_702(self):
        input = '''Class _:dI_{Var _:Float ;Var $9,$l:Int ;}Class E{Val $tN,$_5b4,$9:Array [Array [Array [String ,0B1110],044],0x2];Val $_o:Array [Array [Array [String ,22_0_7],0b1],07_3_6];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 702))

    def test_703(self):
        input = '''Class fXQ2M45:x{}Class u_T{Var E,_,$L,_,$__K:gq2;Var _:_2;}Class __:___{Destructor (){Var _,__,_J2f,r,_,_:r_X;}R_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 703))

    def test_704(self):
        input = '''Class M_i:_L{}Class k4:GVe_O{_Y6K4(_0:___8_NcrV;_:G70;p,__Z__0X5,Yv,f:String ;H9_:Array [Array [Array [Array [Int ,0b100],0x27],0B10110],0B10110]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 704))

    def test_705(self):
        input = '''Class yZ_:_5{Destructor (){}Var __:Z;Constructor (V_,_8x,w:Array [Array [Array [Array [Int ,05_007],0x29],0b1],0xD]){}Val h:Array [String ,0X3A];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 705))

    def test_706(self):
        input = '''Class X{}Class _5G{Var ___,$0:Array [Float ,0b11];tf_2(z,C:Array [Array [Array [Array [Array [Float ,0X16],0X16],80],07],80]){Var _,K_,y,C_1L:Float ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 706))

    def test_707(self):
        input = '''Class _5E{_3(_,_:String ){}Var $5,$U6K7Yqv,$2:String ;Val BB,$m7,Y,$__:Array [Array [Array [Int ,56],07],02_023];Destructor (){}s(Y_I_4:Boolean ;L,__,_,_6M:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 707))

    def test_708(self):
        input = '''Class _3M{Destructor (){Break ;{} }_(g:Float ){}Constructor (_v,z,W_:Boolean ;_8,_,_VQ,I_,G2aO,_,e:_;C,Kn:Array [Float ,0X4A];_:Array [Boolean ,052]){}Var $C,$N_:Sr2_2;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 708))

    def test_709(self):
        input = '''Class SD:F{Constructor (_O1C5:_;q_:n8;_H_,f:I;l__,_,N_:p;_F:String ;_:Int ;_wc,_:Int ){} }Class j7o:_97_{}Class T:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 709))

    def test_710(self):
        input = '''Class _2{Var __I0c:Array [Array [Array [Boolean ,056],9],04_6];Var $1F9U:Array [String ,12];}Class _89_:_{}Class _7{Var k7k:_;}Class oe{$L(_,k_1_,__:Array [Array [Array [Array [String ,0B1],7],03],0b1_010]){} }Class _{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 710))

    def test_711(self):
        input = '''Class _wg_:N{Constructor (_,d:Array [Array [Array [Boolean ,0B101],0X9],0X4C];_:_;_r4_,_,a8__:Array [String ,0B101];_O:C;YiJ_,p,l,_:Array [Boolean ,0XF];_:String ){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 711))

    def test_712(self):
        input = '''Class n:_{_(W:_;G:Array [Array [Array [Array [Array [Array [String ,0B111_000_01101],0x1A],0X55],0X9],0110],0x1A]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 712))

    def test_713(self):
        input = '''Class _{Val _Q:Array [Float ,0x2_7_C_2];}Class _:T{$19546(_,_5_:_;_:_;s_,_,_:_c3;c,_:String ){Return ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 713))

    def test_714(self):
        input = '''Class V{}Class _0O{$l(_,m7_F,F:Array [Array [Float ,072],7];_,Q__v:Array [Array [Array [Array [Array [Boolean ,0B1],2_2_5],07_6],072],02]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 714))

    def test_715(self):
        input = '''Class _1_:___{Val $9f,$5Q:Boolean ;}Class _1{Constructor (Sc:Int ;T,___,VX_,r5:Float ){}Destructor (){}_T(){ {}{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 715))

    def test_716(self):
        input = '''Class b:g4{Destructor (){__::$__();Return ;}Constructor (_m0U4,_:Array [Float ,070]){Var j3__:Array [Boolean ,0x38];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 716))

    def test_717(self):
        input = '''Class __3:u_{}Class __U{$8(_t_,_:Array [Array [Float ,79],023];_6_:Boolean ;q,_:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0X5],0x3],0b111],0x2],062],79],0b111],79]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 717))

    def test_718(self):
        input = '''Class H{Var zC:Array [Array [Int ,0b1_00],0x48];Destructor (){Continue ;}Var _:Array [Array [String ,0B1],0B111011];}Class I:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 718))

    def test_719(self):
        input = '''Class __:_{}Class E:p{Val _99:_;Var $8_,$ixD,v:j8_6_;Val $a,$_,_2:Array [Array [Array [Boolean ,01_7_5],0X84_7],032];}Class s_yx_{Constructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 719))

    def test_720(self):
        input = '''Class v:M{Q5_(){}Constructor (_9_:String ;lqR6__,_2,u,_,____:Array [Float ,8];_36:Int ;k,x,_y:_;_,_,g:L29;wr,Z,a__u:String ;Q,_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 720))

    def test_721(self):
        input = '''Class _:_{}Class ___i{}Class D:_{Constructor (_0,T,_4:Array [Array [Array [Array [Array [Float ,0B10],0B11100],0X26],0b10100],0x4A]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 721))

    def test_722(self):
        input = '''Class _:_4_{Val $73506,yt,$_,$ou_0_2zJ6,$84TZ,a:Array [Boolean ,05];}Class _:o_39{}Class Z46{}Class _:_2MST{}Class _5:x{Var q,$z_VyU,$729ZJ,$__:G;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 722))

    def test_723(self):
        input = '''Class _:O{Val _7:Boolean ;}Class W2p{}Class O:n_{Constructor (d,_:Float ){}X(){} }Class _l:x_{Constructor (I4:Boolean ;__,B4_7x:____;k,J7_b,_:Boolean ;_,j8m:Boolean ){ {} }Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 723))

    def test_724(self):
        input = '''Class ty{__(){} }Class a:o_{Constructor (_,_:Array [Array [Array [Array [Array [Array [Boolean ,0XC],0554],04],7],0x23],0X8A_1];_,_,KC:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 724))

    def test_725(self):
        input = '''Class O{$T2f(So4w_,E,__,O,d7,_:Int ;_:Array [Boolean ,02_2];E_:_;_:n_4;c:x5;_:_9;_:String ){}Constructor (_03:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 725))

    def test_726(self):
        input = '''Class __{Val $0,$_:Array [Array [Array [Int ,9],89],02];Constructor (){Continue ;Break ;_2_::$C._2();} }Class F7_:_{Val _:u;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 726))

    def test_727(self):
        input = '''Class _{Constructor (_W,uf,_,ibL,__4,_5,a_:__){}$S(u_0:Int ;o,k_,k,_m:o_;a:Array [String ,0X51]){}$_(){} }Class _:xr{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 727))

    def test_728(self):
        input = '''Class W6{}Class w_{Constructor (i:String ){Continue ;Break ;}$V1(){Var Q,u,sMN_:Int ;} }Class _:J7336Sj{Var $9:Float ;}Class D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 728))

    def test_729(self):
        input = '''Class X{Constructor (__,a,B_:Int ;__C,_,_,A,X,i5,a_0rW,_G_:Array [Array [Array [Array [Boolean ,9_3],063],063],0X7]){}Val $a,S:_e;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 729))

    def test_730(self):
        input = '''Class iG__:__t{Constructor (){Continue ;} }Class __L:EvR{Var $G_,$v,_,$7,$c:Float ;Var r:String =2.5._;}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 730))

    def test_731(self):
        input = '''Class F78:_{}Class _y:_{i2(XW,_,K:Int ){Var _,_:_;Var __w,m_Y_U,_,U_:Array [String ,0X4E];}Constructor (_BR_eZ____E:Array [Array [Boolean ,0b1100],0B1_010]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 731))

    def test_732(self):
        input = '''Class __{Destructor (){}$s_(_,D4,__,_:_W;v:Array [Array [Array [Array [String ,0b111110],0x7_F],0b1_10],010]){} }Class v8:m{Var _:LO;}Class _:u{}Class o:x{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 732))

    def test_733(self):
        input = '''Class t:R{Val _c,_,$j:Array [Array [Array [Array [Array [Array [Float ,0B1000],5828_36],2],076],0b111],19_0_2];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 733))

    def test_734(self):
        input = '''Class _X_:e{Constructor (_K,_K:Array [Array [Array [Array [Array [Array [Array [Float ,0B10],36],074],05],454],0b101011],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 734))

    def test_735(self):
        input = '''Class E{}Class __V{Val $1:Array [Array [Array [Array [Array [String ,06],0x9],021],070],16];}Class _{cZ22O(_,jX_,___,u,W7N:i;_3_,__,_:o){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 735))

    def test_736(self):
        input = '''Class _:r_{}Class q:__{Constructor (_4__y1p,S:String ;_626,_u6,_:String ;Z:Int ;s,_,e_,_T,_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,99],0B1000111],0X11],025],0b1_0],0X11],2],025]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 736))

    def test_737(self):
        input = '''Class _:_1h4{}Class __l1_:__{Val $33,$E:n;Constructor (N_:_92L;_Y8:Int ;c8:Array [String ,03];_,x__:Array [Boolean ,05_31_1]){Return ;} }Class _0:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 737))

    def test_738(self):
        input = '''Class K{Constructor (){Break ;} }Class d:__9{r_(_:String ){}Val _:x7;$_(){} }Class __{}Class __1:ugD08D{}Class JO{$__(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 738))

    def test_739(self):
        input = '''Class _e{_5(__:Boolean ;pcaI:__RR2;_wX_:Array [Array [Array [Array [Array [String ,9],0X38BC],0X2B],03_1],3];j:Array [String ,0b1_00]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 739))

    def test_740(self):
        input = '''Class j{Constructor (Fp,Z2,_,_,_h,_63,A0,nc,J,_0,_mz8,I_:g;_re7:_;c_,_B:B;_P,__3Z:Array [Array [Array [Int ,01],0xF_5],0x11]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 740))

    def test_741(self):
        input = '''Class _:_{Destructor (){}Var $zC:Array [Array [Array [Array [Array [Float ,0xE_E],45],0X2D],0b111],0b11];}Class _KP2:_w{}Class _:i{_(__K:String ){Return ;O::$f._._C4()._a();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 741))

    def test_742(self):
        input = '''Class _:_{Var $_:Boolean ;$_(){} }Class W7_:_{$_U(_0:Array [String ,026];P:Array [Array [Array [Int ,0X1A],0B100],80]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 742))

    def test_743(self):
        input = '''Class _{Val _n1_7X_9,$642:Array [Int ,01772];}Class F{}Class _{Constructor (_:Array [Array [String ,0B1001001],9];_D4,_U,c:String ){_::$X();Break ;}Var $_5b,X_:Array [Array [Array [Array [Array [Boolean ,0x3],66],06],0x2],0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 743))

    def test_744(self):
        input = '''Class Sg_Y5_1:r{}Class S:j{Constructor (){}$_(D_,b:Float ;_CPf:a;_,_,g,y_W,_,r:Array [Array [String ,0B100],01];__1_51,D:_){}Constructor (){}Constructor (){}Val $3:Float ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 744))

    def test_745(self):
        input = '''Class __:z_{Constructor (O7,W,__,G:Z;i__,_:A;__:Array [Array [Array [Array [Array [Array [String ,052],0b10101],0x4],02],20],07_2]){}pN_(_2__:Array [String ,3];_,Z_:Int ;J,___:Float ;b7:v){Break ;Break ;Return !!0X0%--H::$3_()._G();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 745))

    def test_746(self):
        input = '''Class __{Constructor (){}Destructor (){} }Class _C:J{}Class q3_0:V_{}Class _N{Destructor (){Continue ;Continue ;} }Class a:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 746))

    def test_747(self):
        input = '''Class CU:_{}Class oZ{z__(w,h,__,o_0,bf_,HK_M___:String ;___:G;wX,_:Array [Array [Boolean ,0X3_B_A_DB],44];_,s:Boolean ;c,_v_,Y:Array [Array [Array [Float ,0b110111],046],0xF];W:Array [String ,0b1]){Continue ;} }Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 747))

    def test_748(self):
        input = '''Class P:vn_{a_(_:_9;_:Float ){}Var $f0E,$_,_:Array [Float ,0XC8];Destructor (){}Val q0j:Array [Array [Float ,07],0x5];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 748))

    def test_749(self):
        input = '''Class _{$8(_:Array [Array [Array [Array [Float ,0x51],48_2],0x7_0],21_5_39];z,_:Array [Array [Array [Array [Array [Array [Int ,0x51],04_2],29],02],0B1],0X55]){} }Class up:_0Ww_R_{Val _b_,j__R:Array [Array [Boolean ,0B11],0XF_F];}Class Gl:___{Val $9:Array [Boolean ,0b10];Val _:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 749))

    def test_750(self):
        input = '''Class i{Constructor (_:Array [Array [Array [Int ,0b11],4],0X1];dsr_,__:m;hR:String ;_5C,_,t,zj,b:F;_7:Array [Array [String ,0B1_01],0X5_4D1]){Val i_:Array [Array [Array [String ,0B110],0x2],01_2];}$N(){Val p:Int ;} }Class D{Val I,$4_4:Array [Array [Array [Int ,0xD],2],0XE_E];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 750))

    def test_751(self):
        input = '''Class dba{}Class Gg{}Class _{Constructor (){} }Class _5:_5{Destructor (){Continue ;Break ;Return ;{} }}Class _5979{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 751))

    def test_752(self):
        input = '''Class K:Y_v{Constructor (){}Var $OK_:Array [Array [Boolean ,0X6_3A_A14_D1],0X52];Val _L,C7:H___;Val $3:Array [Array [Float ,31_3],037]=!--New P()*!"";}Class u:O0_{}Class k_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 752))

    def test_753(self):
        input = '''Class G{__(dF,_:Array [Array [Array [Boolean ,0X24],0b10],02];_:_){} }Class _:miw0{Constructor (_q3:Float ;y:Fq_){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 753))

    def test_754(self):
        input = '''Class J{}Class _H{$_A(VPn_:p;n:Array [Array [Float ,076],0b10];f9:Float ;_9:zkj5;_:Array [Array [Array [Array [Array [String ,02],076_66],0X5],0b1],0b101100]){}Constructor (__2b_:Array [String ,0B1_10]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 754))

    def test_755(self):
        input = '''Class a:A_{}Class I:qH1B{}Class _5:__{}Class R:_{Destructor (){Var _,__:Array [Array [Array [Float ,0B1001100],0x4],0XC_8];{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 755))

    def test_756(self):
        input = '''Class o:i{Val $_5s:Array [Array [Int ,0B100010],0B100010];Var $_,e,$_e8fJ,$8,_2:_;Var $_,$_:Array [String ,0xC];}Class __{}Class D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 756))

    def test_757(self):
        input = '''Class _{}Class n{Constructor (_:Array [Boolean ,0B10110]){}Constructor (_,pA,N,_,_,N,_05:K;G,____:String ;___:_3){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 757))

    def test_758(self):
        input = '''Class x_{Constructor (T:Array [Array [String ,0b1],0B1_1];_s,of4sh_,_Q:_;CA,_,_9:_;uB1E:Boolean ){Continue ;} }Class Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 758))

    def test_759(self):
        input = '''Class _:_{Constructor (){ {} }Val $8:k;}Class _183{$6(_:Float ;_ifh:_r_9;Y52:Array [Boolean ,0b1100010]){} }Class __j:_0o_{Constructor (_:H8){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 759))

    def test_760(self):
        input = '''Class _73_7y_{Constructor (b,_7_R_:l___c;m:Array [Int ,0112];_l,__5,J,_,h_Xli__,_c,tf:_;_:Y){} }Class _:o{}Class _44{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 760))

    def test_761(self):
        input = '''Class kQ:_6{Destructor (){}Constructor (_,__,_:_;_:Array [Float ,0b1010111];_,w04:Boolean ;_,_f,p5:Array [Array [Array [Array [Float ,0XE],9],0144],0b1010111]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 761))

    def test_762(self):
        input = '''Class s_Z_:_{}Class L{Constructor (T,__P_,M,_:String ;_7:Boolean ;bh__:Array [Array [String ,0B111001],06_523];u:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 762))

    def test_763(self):
        input = '''Class _7:f{Val _EQ:Array [Array [Array [Float ,19],0X3B],04_0_3_0_3];Constructor (_57,Q_q_1,s,N0:Array [Array [Int ,4_935],4];tY:Array [Int ,0X4]){} }Class c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 763))

    def test_764(self):
        input = '''Class o2{}Class _:Gc{}Class _i__{$O1(p,_:Array [Array [Array [Array [Int ,01],074],074],02];_R,__5:Boolean ;_7:Array [Array [Array [Int ,94],94],7_64];_3__6,_:_;a7:___;_64:Array [Array [String ,074],0b1011]){} }Class G4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 764))

    def test_765(self):
        input = '''Class __:_2_5{}Class d{Var _:Boolean ;}Class __{Destructor (){}Constructor (_Q:Array [Int ,0x52]){} }Class Am{M(_:Array [Array [Array [String ,0x1],2],0X1];q4,T_:Int ){gG5::$__M();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 765))

    def test_766(self):
        input = '''Class j_{}Class _R:NU{}Class _H{$N(){}Constructor (){}$zu_(d1_h__:Array [Array [Int ,03_63],064_1]){ {}Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 766))

    def test_767(self):
        input = '''Class Q7q3_KZ8:_{}Class _S7:T_27{Var r,$F:Int ;Destructor (){}Var f0_dn:Array [Array [Array [Array [Int ,0104],0X2F],0b1010111],0104];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 767))

    def test_768(self):
        input = '''Class x9:_{}Class _{$M_(o_,_:Array [Array [Boolean ,0b11],99];M,_6:Array [Boolean ,0X37_C];_:__){_::$z_4();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 768))

    def test_769(self):
        input = '''Class _q6{Constructor (_,_,U3:FJ;____,x_02s_:Array [Array [Int ,0B1],0X63]){}Constructor (){}Constructor (j,_,P_,L:Boolean ;_:Boolean ;_2:Array [Int ,0b11110];H0n__a_8,_:Boolean ){}__(s:B6){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 769))

    def test_770(self):
        input = '''Class e:_{Constructor (){} }Class h622{Constructor (_,_0,_y6_8U,C_Vq6_M:Float ;_,Q,k,L,_9,_:Array [Boolean ,0X8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 770))

    def test_771(self):
        input = '''Class J{Destructor (){} }Class _:O_{Constructor (_4__:Array [Boolean ,07];_,_F_e_,v_,R:Array [Array [Array [Int ,07],0b11000],0X45]){Break ;}$_J(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 771))

    def test_772(self):
        input = '''Class z__:_3_L{Constructor (_:Array [Array [Array [Array [Float ,07],0104],0X1],37];_:Array [Array [Float ,6],0104]){} }Class BA{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 772))

    def test_773(self):
        input = '''Class n9{Var F_,$8_1Hq_,_3q_3_YB,$Z:Float ;Val __,h:String ;}Class _Q{}Class __:n_{}Class _{Var f__L__,IR_18,_e:Array [Array [String ,02003],033];}Class A{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 773))

    def test_774(self):
        input = '''Class WxB{Constructor (_,t:_;_Zi,s7:Array [String ,0X9B];_:Array [Array [String ,0B1],03702];_,W,_,F28:v;_23,Y:Float ;n8P,L,_:Array [Array [Int ,0x3_6],0x8]){}Var $37,$_T:Int ;Var $_0__9GB6u:String ;Val $_m:Array [Array [Array [Array [Int ,0x4_0],0b10110],5],90];}Class _{Constructor (){}Var n,$2,zGN:Array [Array [Int ,90],61_43_9];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 774))

    def test_775(self):
        input = '''Class _N_K_{}Class _4_{Constructor (_,_,__:Array [Boolean ,0x2A]){}Destructor (){}Constructor (_,k,_,_,_,_S6,I_a4W8160b:If_5){} }Class i8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 775))

    def test_776(self):
        input = '''Class _5R{_(N_:Array [Array [Int ,0b10],05_4_0_1_7];q7sb,__:Array [Array [Array [Array [Array [Array [String ,0x2],0b1],051],0X9],01],0B1100001];_:Int ){} }Class _:z{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 776))

    def test_777(self):
        input = '''Class _:_{_J(y_,_:Array [Array [Array [Int ,0b1100],0B1100010],42_9]){} }Class SAR:_7{Destructor (){}Val _7,__g,$6OX,_,$Y,$M9:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 777))

    def test_778(self):
        input = '''Class m{Var $6:I5_;}Class F{}Class tQM_:_w_{$_(_:ui;sC,b_98Da:_22){}Var D7H,$_:Float ;_0(z__l57h:Array [Boolean ,047];J,_8_P,N8:_;__x_,_:Array [Int ,047];_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 778))

    def test_779(self):
        input = '''Class _:_1{Var _1yj4,_9o:Float ;}Class s_{}Class _rXpW:_{Val $c,$7,$o__:m2;Constructor (_l_,S:Array [String ,0b1010100];__,_,_3,_:Array [Array [String ,5],04]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 779))

    def test_780(self):
        input = '''Class m{Var b6:Float ;Destructor (){Continue ;Break ;Break ;Val _Z_7_,L:String ;} }Class _{Constructor (_5,__1gV__:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 780))

    def test_781(self):
        input = '''Class h:_{Destructor (){Var _Ge3_:t;} }Class M{}Class K_94_{}Class _:V5{Constructor (TKE___5_n_Y_:Array [Int ,0X39]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 781))

    def test_782(self):
        input = '''Class L_0_2{}Class __1{_(Z_J:String ;i__:Array [Float ,0B10_0]){}Var REz6Z:Array [Boolean ,0x4C];}Class yw:gr4_6_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 782))

    def test_783(self):
        input = '''Class i{Constructor (_o6__,__g_0,v__:Float ){Var IM_644,t,_Ba_,P:B;Var _:Array [Int ,8];} }Class _:x{Constructor (O:_4;_5,T9,_2:Array [Boolean ,2]){}Var $_,s,$02:Boolean ;}Class H:u_Ir7{}Class IX{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 783))

    def test_784(self):
        input = '''Class _:Woz4{Val l,$_,OQ:Kjc_0;}Class k:_4_g{Destructor (){}Var $2,$__0XZ06I:Boolean ;}Class _:q1H0{Val g:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 784))

    def test_785(self):
        input = '''Class _:c01{}Class __:D{}Class _:T33{Constructor (){} }Class _Y3{Val $Q:Array [Array [Int ,9],0b10100];}Class Qt_:_{}Class I_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 785))

    def test_786(self):
        input = '''Class bN{Destructor (){} }Class W{}Class __:F{Constructor (K:Boolean ;____K_,G_:_;_,t_:o25X_a;_:__;j_,U,N:_o){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 786))

    def test_787(self):
        input = '''Class _f:_{}Class __n{Constructor (H__1:Array [String ,2];__X_C:Array [Array [Array [Array [Boolean ,2],0b1_00_0],7_83],0X34]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 787))

    def test_788(self):
        input = '''Class _{Constructor (P_,o_:M__98){} }Class _:X_{}Class __4N:N{}Class _E2_{}Class h___:_{Var _6_gD_c5,$7:String ;}Class _5{Val _7,$Z_,_F,$_,_c_,_:Boolean ;Constructor (x,A_,J_YC,n_p:String ){}Val $_D,_N,$_:Array [String ,0436];Var $iy,$_,$9,$17G:Array [Array [Boolean ,0100],0100];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 788))

    def test_789(self):
        input = '''Class sD{}Class Y{Val C,_,$3,$h:Array [Float ,65];Constructor (){} }Class n:P{}Class _{Val $4,$6,ue:Array [Float ,0x4AE9];Constructor (){Return !t4::$_t();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 789))

    def test_790(self):
        input = '''Class w_:Z{Var Xr7,__,$_h_:Array [String ,0b1011];Val _,$u,$c,_:Array [Array [Array [Array [Int ,86],0xC],0x39],0B1001100];Val $__2__C:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 790))

    def test_791(self):
        input = '''Class _x:N_58{a_z(_X:String ;_:n;__,_:m_;_,B5,_C:_;n,_:Float ;p25b:j;o__,X3:Array [Array [Array [Array [Array [Array [Array [Float ,0142],0x39],02],0X6],44],14_1],0XE];Z_,m,Mj:c;T:Int ;z,_5T,g,y3:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 791))

    def test_792(self):
        input = '''Class __:_6_8_{}Class __{Constructor (d__IRP:Array [Float ,33];t4:_;_,_:Array [Boolean ,0116];_:Array [Boolean ,0x5F]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 792))

    def test_793(self):
        input = '''Class _:m{Constructor (k8,E4,_:Array [Int ,0b1011]){}Var __7,_:Array [Boolean ,25];}Class __{}Class __5{Var $T,W6,_:_C_;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 793))

    def test_794(self):
        input = '''Class _q68{Var _:x_;}Class e2{Destructor (){ {Break ;Return ;t1G_::$_();Val _:String ;} }a_(Ap:Array [Boolean ,0X9];Wc,S:_;_m:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 794))

    def test_795(self):
        input = '''Class N{Var __sp,$_,T,_1_,_:String ;Destructor (){}Constructor (__:Array [String ,8_29];t:_){} }Class _O:_{Val $5,$__:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 795))

    def test_796(self):
        input = '''Class _:_J7{Constructor (g,tc_Z7:Float ;s7:Array [Array [Array [Float ,0x2E],8493079_073],0b1_011_0];_:Array [Array [Float ,0b1],61];_4g,_5,PG:A){}Val h3,$Vf_,g9,$B3,_,$_0__:Array [Int ,39];Var C:Array [Array [Boolean ,0b10],0b111];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 796))

    def test_797(self):
        input = '''Class _3{}Class _:_{}Class _{}Class _7:__7X{Constructor (F:Boolean ;Z:String ;_:String ){}Constructor (dpp,_3:Array [Boolean ,0XE_9E];_,_jR:Array [Float ,6]){Var t84:Array [String ,07_0_04];Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 797))

    def test_798(self):
        input = '''Class _{Constructor (t6,x:Array [Array [Array [Array [Int ,06],44],01_23_01],0b11_1_100];F:Boolean ;ek1__:Y0){}Destructor (){Continue ;} }Class O__c_{Var $_6_:_j;Var _6_,_M:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 798))

    def test_799(self):
        input = '''Class _{Val u_ij,_5__:Array [Boolean ,0b1010110];}Class _5_:ys{Constructor (y,__:__;_:s0_;_n_s76N__,_:Array [Boolean ,0XB]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 799))

    def test_800(self):
        input = '''Class yW:_04_{}Class s4:d16{}Class N_:E{}Class _{}Class W7q9{Val $Fr,$3:Float ;Destructor (){} }Class u88{Var t:RY;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 800))

    def test_801(self):
        input = '''Class n:_4{}Class TS8:D{Destructor (){} }Class _EY{EP(){} }Class _:_{Constructor (_:_W){}Var r:Float ;Var $29:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 801))

    def test_802(self):
        input = '''Class E4:_i{$_(Q38:String ;_4:_;y5_,_0:Int ;G,__d,q:_;g:Int ){} }Class _{Constructor (A:a;U:Boolean ;___6_,Vo6,_:Float ){} }Class _0:f{_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 802))

    def test_803(self):
        input = '''Class __j_{}Class _:A0{v(){}Val _,N7r:Array [String ,0b1011001];Constructor (_6BA231,GM3:_;uN:String ;_:U7){} }Class _{}Class _h9:_{}Class V_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 803))

    def test_804(self):
        input = '''Class C{Var H:Array [Array [Array [Array [Array [Array [Array [Float ,0b11],57],022],0b10110],03],0xE],0B1_1_0_1_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 804))

    def test_805(self):
        input = '''Class n:I{}Class k{Constructor (Yr,_,_,_:Array [Array [String ,0127],0127];_0,___,_,c09,S:String ){}Var QvS,$9,i:_;y(B,WU9:String ){} }Class _9_:_u0rw{$1(){}Val P8b,_5:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 805))

    def test_806(self):
        input = '''Class _5S{Constructor (_:Array [Array [Int ,070],0xA];i:Array [Array [Array [String ,0B111011],0B1],2_538_20_4];_9:Array [String ,05_0]){} }Class Zu{Constructor (e_8:Array [Float ,19_8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 806))

    def test_807(self):
        input = '''Class Q{Constructor (_3_79_79,_4v_7,_,_:__;y,_,_MHE:Boolean ){Break ;Continue ;} }Class _uf2{Val g77___:Array [Boolean ,46];}Class T73084{Val $_1:String ;Var Z,$h_U,$_,Z,r_n0,U,_:Int ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 807))

    def test_808(self):
        input = '''Class _6d2I:_{Val __,_:Array [Array [Array [Array [String ,5],0b100110],0x8],63];}Class _:T{}Class __t:_{f(_L,__6,T,_,o:_w;_y:Array [Array [Array [Array [Array [String ,026],0X41],0x7],07],026]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 808))

    def test_809(self):
        input = '''Class q:_{Var O,$3,$__n,$6,z:B_;$_J(VW:Array [String ,0b1111];Bn:Array [Int ,0XC];f:Array [String ,0b1];_:Array [Float ,0XD]){Val __,_,T:String ;Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 809))

    def test_810(self):
        input = '''Class e{}Class __oM{P1(d95_:Int ){}Destructor (){} }Class W_{Val r37,$L7N,$_,$H,$W:Array [Int ,0x44];Constructor (_:Int ){Val _:Boolean ;} }Class _{}Class m:m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 810))

    def test_811(self):
        input = '''Class sI{$5(X3,Mp:Array [String ,061];_,Rxw_,zT,F___3_:M;_,_63,o,_K:Int ;__,__O,b,tR:wJ18;_R,G_G46,_,t,_pe:G4_;N:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 811))

    def test_812(self):
        input = '''Class _G:_{}Class _{Constructor (_A0:r;_:U6){}Constructor (_c,__:Array [Boolean ,065];t5,n:_6n;i,_:Int ){}_(){Break ;} }Class t_{Destructor (){} }Class _:_2a{}Class __5e_3:_8_2h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 812))

    def test_813(self):
        input = '''Class Od{Destructor (){}Constructor (){} }Class _l:_{Val $_,$2,ka,$44L:_;Var $__,$P,$56_:_;Constructor (){} }Class _{Var $_:Array [Array [Array [Float ,04],0B1],797];}Class _5Z5_D2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 813))

    def test_814(self):
        input = '''Class PYG:X{}Class Fd{Constructor (_:Array [Array [String ,0x2],015];_:Array [Float ,0b1];F_,b_3j:Array [Array [Boolean ,0X56],015]){}Val $_x,$2:s;}Class l{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 814))

    def test_815(self):
        input = '''Class R__:_{Constructor (){}Var _J:Array [Array [Array [Array [Boolean ,0b1],0b1_1],0B1_1_0],0b10_1_0_11_1];Destructor (){} }Class _{}Class _9E{}Class F_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 815))

    def test_816(self):
        input = '''Class _v__{}Class D:_{Constructor (s,_:hN;_,__,__8:Array [Float ,066_0_45];_a__:String ;JP,_GT:String ;_6V3:Array [String ,02];_436,L_,R:Float ;M:Array [Int ,0x4A];It46_,_:Array [Array [Array [Float ,0xC],0b1010001],0134];_,_,_,y2,___,S,w_M:Float ){} }Class x:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 816))

    def test_817(self):
        input = '''Class ___43{Constructor (__7:I_3;_:Int ;I_:Array [Array [Int ,0b101101],0b101101];K0:Boolean ;G,_2,_:Array [Array [Array [Int ,0x62],064],21];S_D19,_p:String ;_,b:_;_,_2_,g,N6,__:D;r:Array [Array [Int ,0B110],041];_:Boolean ;_:Array [Array [Array [Array [Float ,0X2A],03_43],67],0b10];b:Int ){} }Class u__{Destructor (){}Destructor (){}Var _:G;}Class z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 817))

    def test_818(self):
        input = '''Class _a8{Constructor (){} }Class _6{}Class _{Val _:Array [Array [Array [Boolean ,0x1],03],04];}Class VB:d{Constructor (I,E__,__7:t_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 818))

    def test_819(self):
        input = '''Class _97{Destructor (){Return ;}Constructor (){Break ;Continue ;Break ;}Var g,$L,$V0_,b,__:Array [Boolean ,7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 819))

    def test_820(self):
        input = '''Class ee__{$2(_0f2,_Fne,_,G_,I,_,__,N,k_9_6OE_:Array [Array [Array [Array [Float ,0126],0B1],2_9],0B1_110];d__,_:__;J8N:_;_0,_:Array [Array [Array [Boolean ,25],5],99]){Var _:Float ;} }Class _:_{}Class _{Var F_:_W;}Class _{Constructor (E,_,S:o){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 820))

    def test_821(self):
        input = '''Class s{Val b_6,$6,$___,$j:Float ;Val l4__:Array [String ,0b1001100];Var $pC:Array [String ,0x34];Var ___,_,Ke,$x_,$1:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 821))

    def test_822(self):
        input = '''Class _{}Class o__:p5z{}Class __H7_{}Class _G{Constructor (_s_:_C3;X_f_25,Al4:Array [Boolean ,0B101110];w_0_,_4,_o6:String ;_:b){}Var aN51:Array [Boolean ,02];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 822))

    def test_823(self):
        input = '''Class __5{}Class a{Var $h,_,_7:Int ;}Class _:ng_rG{}Class __:_Ha{}Class _{Constructor (){} }Class R_:K{a(_A:Array [Array [Array [Boolean ,016],045],2]){} }Class _{$07(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 823))

    def test_824(self):
        input = '''Class _J_A___{}Class _{Constructor (){} }Class cL:b{Constructor (){Var _043,_69_:Array [Array [Float ,05_64],0b1_1011];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 824))

    def test_825(self):
        input = '''Class i:_{}Class __{Destructor (){ {}Continue ;Val v_3_3:Array [Array [Array [Array [Array [Array [String ,0b1],0x57],0x57],0XB],1_4_5_8],60];} }Class lq:_{_(){Continue ;Var n7:Array [Array [Array [Int ,0B1],8_5_1],60];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 825))

    def test_826(self):
        input = '''Class M4_f{_u(V,q:_Pr;_G:Float ;a:Boolean ;J:Array [Array [String ,2],0B1_00_0];A,_81,m:Boolean ){} }Class _D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 826))

    def test_827(self):
        input = '''Class __{$Jo(N:_PC4a0f_;_,_:Array [Int ,06];M:_;q:Array [Array [Array [Boolean ,0b111010],0b11],8];t1H_b,_:Float ;ej3_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,04],0B1001001],8],0X6_0_4C_5_6_14],04],0b111010],0B1],07_3],0b111010],0B1001001]){}Destructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 827))

    def test_828(self):
        input = '''Class _30__pe:__70{}Class _k:S{Var $_:Array [Float ,0X32];}Class A{Var $_1_,_7O,$i_C,$6:Array [Array [Boolean ,0B101110],0X6_13F];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 828))

    def test_829(self):
        input = '''Class _7:_{Var $42__I:Array [Array [Array [Array [Array [Array [Boolean ,064],0B1_0_01_1],064],0x64],38],0xE];Jen(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 829))

    def test_830(self):
        input = '''Class _8:A4{}Class nI_0:F{Destructor (){}Destructor (){}Val $e___:Array [Int ,0b11];Var $d7t,U__,_6_4:Array [String ,0b1011101];Constructor (t:Array [String ,0X4F];_,_:__;__5_z0R,_,j,X:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 830))

    def test_831(self):
        input = '''Class _Gh___:C{YH(DSa:UN){ {} }_3(J:Array [Array [Array [Array [Float ,0B1],3_69],68],03];C,_9__:n;_,C_,d_10:Array [Int ,1];b,j,_,m:D7;_,_:x_){}$___(DW6:Array [Array [Boolean ,0B1],68]){}Val $_,_,$V2:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 831))

    def test_832(self):
        input = '''Class _{}Class _3:yn2{Var b,McR_,x7:c;}Class _l:_{}Class A{Val $5:Array [Array [Array [Int ,0b1100011],04_0],4];Constructor (){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 832))

    def test_833(self):
        input = '''Class l{Constructor (__:String ;__t69m,_:Array [Array [String ,0xC],0x5]){}Val __7,$A:Array [Array [Array [Array [Array [Array [Int ,010],06110_330_2],0X15],0B11],0xC],031];Destructor (){} }Class h5:v{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 833))

    def test_834(self):
        input = '''Class i:__{Val B,$_,x,$5q,_,$__7_,$_:Array [Array [Boolean ,0B111001],0X42_6_E];}Class I_:_{Constructor (){} }Class Kje9{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 834))

    def test_835(self):
        input = '''Class J:_{$4C(V,T,F_,_,_wi54:Array [Array [Array [Array [Array [Int ,0x6],30],0B1010001],0x2F],30]){J::$5do__().__k.w();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 835))

    def test_836(self):
        input = '''Class _F:P_{Val _,$_,$_:Float ;Val qV_:Array [Array [Array [Int ,3],0xD],0b110000];}Class C{}Class K{Val n:_D;}Class i8:_8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 836))

    def test_837(self):
        input = '''Class _{Constructor (d,M,hT,_MF34L:Array [Float ,46];_D38,w,__N_3,v99:F;iu_,Rn,_2,A:Array [Array [Array [Boolean ,46],0XA1],0b1_1_1]){Break ;}Constructor (){}Val G,g,k:Int ;Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 837))

    def test_838(self):
        input = '''Class a:D{Val $68:O3;}Class xV:b{Constructor (_,M,a_:Array [String ,0b100010];l3:Array [Array [Int ,040],36];_HC1,S1,zr:Array [String ,040]){Return ;}Val $_38_A,d_3,a__:Array [Array [Float ,0B10_0],040];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 838))

    def test_839(self):
        input = '''Class s{_(_,_:Array [Int ,78]){} }Class n:_T{Constructor (){} }Class _{}Class _:_e{Val _,_,Uo:Array [Float ,0B11];Val $_,e:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 839))

    def test_840(self):
        input = '''Class _:UJ__{v(z1,_,_,s1_,_:Boolean ){}Constructor (d,__:Float ){} }Class _{Destructor (){} }Class i__:___j6{_3(_hX_X:_2;U__b:L){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 840))

    def test_841(self):
        input = '''Class U:_18{Constructor (_:Array [Array [Array [Array [Array [Array [Boolean ,2],0B1001110],0130],2_02],7],57];H4T,o,h:Array [Array [Int ,01],041]){} }Class ___K6:yR4{}Class _6{d_W(){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 841))

    def test_842(self):
        input = '''Class _{}Class _:_g{}Class _7:QG22_uQR8{}Class S_{Var $4_:Boolean ;}Class _{}Class z:fKx{_(sA,G,f:Yh;_:Float ;p0,FC,_,W:Array [Array [Boolean ,0336],0B10011];_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 842))

    def test_843(self):
        input = '''Class d{_(_V,Q:_;_,un:Float ;e:Array [Array [String ,077],0b1];_:Array [Array [Array [Float ,0X3E],2],0b1_0];U,_k8,M__O:Boolean ){Continue ;Break ;Continue ;S__::$wbb();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 843))

    def test_844(self):
        input = '''Class _5_n:_{Destructor (){}Var _9,$z_,$_:Array [Array [Array [Boolean ,02],0466],9_9_1_64_99_72];}Class q:i{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 844))

    def test_845(self):
        input = '''Class _3:o{Val $90,$_,$_,$_:Array [Array [Array [Array [Array [String ,02],0B1100100],60],0X29],02_2];Val $_:_5;}Class _:__{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 845))

    def test_846(self):
        input = '''Class Z{Val $_:I3Z;$0e(F__6,_s,b_0_:__466;M,_64,G:Array [Array [Float ,0X1_32_78],0B101];d,_,i:j){} }Class __4:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 846))

    def test_847(self):
        input = '''Class _{Var _:Array [Array [Array [Array [Int ,0B1010],0xE],0X3B],012];t7y(){}Destructor (){}Val _G_,z:_6_6;Var _m,$_lT1n:Array [Array [Array [Int ,0x13],012],0X3B];}Class _{Constructor (){}Destructor (){} }Class a_:_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 847))

    def test_848(self):
        input = '''Class q:_C{Destructor (){} }Class _8:y{}Class __69V9{Constructor (Y,R6:Array [Int ,03];_Q_T2,h2j,E5,_:String ;Spr5,q6m:E__;Lq8y:__1_;m,ko:O){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 848))

    def test_849(self):
        input = '''Class __{Constructor (M:Array [Array [String ,07],0X7];_:Array [Float ,0B1011];_,i,_,B,Yq,_G,L6:String ){Return ;} }Class G{Var h_2,$V,S,$o7J,O_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 849))

    def test_850(self):
        input = '''Class VU:d{_(){Continue ;}Var $t74__:Array [Array [Array [Boolean ,1_5],4],0b1001010];}Class __5:_mO_{Var $6x,$4,$A:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 850))

    def test_851(self):
        input = '''Class u_iS{Val _J:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,01],0b110],75],1],99_8],0xC],1],0B10];}Class __:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 851))

    def test_852(self):
        input = '''Class Ax{Constructor (s2H,A:Boolean ;f_:Array [String ,016];_:Array [Float ,5]){}Destructor (){Break ;Q::$r();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 852))

    def test_853(self):
        input = '''Class _:_{Val _B,_:String ;Constructor (_:Array [Array [String ,0X44],020]){} }Class y_{}Class K{Val _,_:Float ;}Class qB:z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 853))

    def test_854(self):
        input = '''Class a:____{}Class __6:_L_7r{Val $__,$S0:String ;Var A8,$za__5HS_,$1,$t,c:_;}Class c3h:_6B_{Val $l,$a5,$___3,_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 854))

    def test_855(self):
        input = '''Class ____6_:lq{Constructor (){}Constructor (){Return ;} }Class C{Constructor (T:String ){}Constructor (){}Constructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 855))

    def test_856(self):
        input = '''Class hd:_{Destructor (){}Val $W:Boolean ;Var _:Array [Array [Array [Array [Boolean ,0XE5],0x9F],0B1_1_1],6_44_068_0];}Class b1:Y_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 856))

    def test_857(self):
        input = '''Class _2hM{Val iS:Array [Array [Array [Array [Float ,44],013],0X5D],0x4];Destructor (){}Var _c_,$W0,$o,L:Array [String ,3_55_5];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 857))

    def test_858(self):
        input = '''Class _{$e9(_u_4,k,_,_:_9;__97:_;_pTe,D:Array [Array [Array [Array [Array [Array [Array [Boolean ,7_1],02],0x96_66_8],0B100001],0b1],011],0b1];u,b,Q:_;_,_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 858))

    def test_859(self):
        input = '''Class j{}Class W{Constructor (){}Constructor (JL,__h,_809j_,e:Float ;l,__l,_,_,__4rW,f,h,_:Array [Boolean ,0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 859))

    def test_860(self):
        input = '''Class Z3{Constructor (){Break ;Var I6D:Array [Array [Array [Int ,0B101110],0B101110],0B1];Continue ;Break ;}Destructor (){Break ;}Var _,_T0:_i;__(){Continue ;}Var g:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 860))

    def test_861(self):
        input = '''Class _:E{_(_,V,g:q3;_:a){}$29(){} }Class __:d5R{Val z7,$4,$___:Float ;$m__9_33_(C:Array [Array [String ,43],0X1C];_,_,z4:Int ;g_:Boolean ;_,_,_70:Array [Int ,0b1001011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 861))

    def test_862(self):
        input = '''Class j_17_N:A{Constructor (l_04:_242;C:Array [Array [Float ,87],87]){}$_J2F2tUf(){}Destructor (){}Constructor (_:_;_,_,J3,_W4,_:W_J;_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 862))

    def test_863(self):
        input = '''Class z{}Class T5:y{Val A,_15W,____,_:Array [Array [Array [Array [Array [String ,0B1_0],0B1011011],0xD_8],4],0B1];Var $5k_:Array [Array [Array [Array [Array [Array [Array [Boolean ,92],77],4_5_6_370],0B1_0_0],0142],07],0b10101];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 863))

    def test_864(self):
        input = '''Class luR:KH_{$_Z4(a,_TI:Array [Array [Int ,3_0],0XD_8];N,__u:Boolean ;_:Array [Array [Array [Array [Int ,0B1],11],03],06_4_0_7];G:Float ){} }Class _c0:_j8{}Class o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 864))

    def test_865(self):
        input = '''Class _ew_{Val I,$_n2:Array [Array [Array [String ,065],0B1100011],057];Var _,$__,$0,$G_235,SI:Array [String ,5_247];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 865))

    def test_866(self):
        input = '''Class q_h{}Class G{Destructor (){Return ;Break ;} }Class _{Val $36220__E,$61:Array [String ,0132];}Class O{Destructor (){}Var K6,$0_,I6Z:Array [Array [Boolean ,0b1],0b1];En(_,__x:_61){}Var _j:_3;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 866))

    def test_867(self):
        input = '''Class b:_00{_(V:_;O,_9G:_;_w26:String ;ko_D9__2I:Float ;_2,_:Array [Array [Array [String ,9],9],6_2]){}Constructor (T9,_60UW,_:Int ;R:X){Break ;Break ;}Val _5,_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 867))

    def test_868(self):
        input = '''Class m:Q{Val $_5:Array [Array [Float ,077],0b1];Constructor (_:W1__;B,__,__,_z,_,E_NX8:Array [Array [Array [Float ,0450_56],64],0B111100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 868))

    def test_869(self):
        input = '''Class _4{Var $uI,$4:Array [Array [Array [Array [Array [String ,58],033],58],2_7_8],30];}Class DS_:z{Val N:Array [Array [Array [Float ,01_0],0X24],0b1];}Class G5:X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 869))

    def test_870(self):
        input = '''Class GlAI{Var $9z_,$5DJ,$28:Float ;Constructor (){ {} }Dx(_R,_QI:Array [Float ,0X2C];b,_:Array [Float ,0B110001]){Return !---Z::$VF;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 870))

    def test_871(self):
        input = '''Class __:n_{Destructor (){}Constructor (a_,_,__0x,v,l:___D){} }Class H3_X_8P_{}Class a1_{Constructor (B_8:_;k_,E,_,_,_2:_0){Var g,A8_:__05;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 871))

    def test_872(self):
        input = '''Class _:_{}Class y_{$4sl_7(){} }Class _{Constructor (N:Float ){} }Class O4{}Class _{Destructor (){}Constructor (b:Array [String ,0b101000];ev0___:Array [Array [Float ,49],0b101000]){}Constructor (fk,_W:_){} }Class _{Constructor (__,h_d_u___,w8:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 872))

    def test_873(self):
        input = '''Class __{Constructor (){}$R(__:n;_2b5475,__,v,__:Array [Boolean ,0XB]){Return ;}Var D,$_:__;Val $_:Boolean ;}Class E{Var _,__2:Array [Int ,035];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 873))

    def test_874(self):
        input = '''Class TD{$3(B:_9;Rv:X_;_7,g:__Z;Q66,R83D_,_x5:String ;_v7C,s_:Array [Boolean ,6]){} }Class o_1:g1W{}Class _:T____B_{}Class o_:__{Destructor (){} }Class o_y:X{Constructor (x0_6:Array [Array [Int ,1],41]){}Val j:J;}Class _:V_7{$_(_,_,_:_){} }Class jg{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 874))

    def test_875(self):
        input = '''Class Y{_n(g1:Array [Array [Array [Array [Array [Float ,0b110100],0B1_0_10_1_11],0x61],0x3],0B1]){Continue ;} }Class __Y0:_ih{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 875))

    def test_876(self):
        input = '''Class U:_{}Class _:S{Constructor (){Continue ;} }Class q:Q{Destructor (){}Constructor (K5:Boolean ){} }Class S{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 876))

    def test_877(self):
        input = '''Class V{__2(_:Array [String ,0X10];O,_y,_,G,_K4a,H4:Float ;_q09:Boolean ;_6bA_,_:_8_){}_N_____(){} }Class H_:__{Constructor (l_52:Int ){Val _:Boolean ;}$4J(I72,T7_,__:c_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 877))

    def test_878(self):
        input = '''Class __:_{j(m:o_3;_,_:Array [Array [Array [Array [Array [Boolean ,0b11],71],71],71],0X8BF]){Continue ;} }Class E{_6s(){} }Class N{Var $__:Array [Boolean ,0xE5];Val X9o,r:Y__;Constructor (){}Val d__:___;Var $5:Boolean ;}Class _:_{Var _1:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 878))

    def test_879(self):
        input = '''Class d{Var O,$D:Array [Array [String ,0B101],0XA];Destructor (){}Constructor (__,_,_xM0_:String ){}Var ___:RD_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 879))

    def test_880(self):
        input = '''Class G__:Q{Constructor (){}Var __:Boolean ;Val __,_,_0T,_Px6B:Float ;}Class b:_{Constructor (K_:String ){}Val $k,_,U:Array [Array [Array [Array [Float ,0x8_F_A_6],05_5],80],0XC];}Class _:O{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 880))

    def test_881(self):
        input = '''Class n:_{}Class _B_9F:H{}Class c6:_{Destructor (){Return ;{} }Var $7,$7:Array [Array [Array [Array [Boolean ,0b101101],0B1_0],051],0b101101];}Class A1{}Class _{}Class _{}Class _i{Val $f2_,$_:Array [Int ,0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 881))

    def test_882(self):
        input = '''Class ___8s_8:_{}Class _5:_{}Class TN{Constructor (q:Array [Boolean ,12_0];e,f_:String ;T:V__){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 882))

    def test_883(self):
        input = '''Class _1i{Var $1,$_y,$_:Array [Array [Array [Array [Array [Boolean ,074],0B1_0_0],0x63],36],0b1];Var _,$3:Array [Int ,920616];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 883))

    def test_884(self):
        input = '''Class _:A{}Class p{Var C8o,Q:Array [Array [Int ,6],0B1_01];Val R,z2_4:Boolean ;Destructor (){} }Class U5Q:G{Constructor (_,_,k:String ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 884))

    def test_885(self):
        input = '''Class _:Aoq{}Class d1{Constructor (s__4:Array [Array [Array [Int ,38],0x56],04]){} }Class x46:_A{}Class _:aq{}Class _R_:_05Bj{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 885))

    def test_886(self):
        input = '''Class E{Constructor (_g,__,_,_3,rI,_:Array [Array [Array [Float ,0XE],04],43];_,__19_:t2;L2B,Z6_:Array [Float ,0b11100];y,_q,w0en35,y,_:Array [String ,43];fd1,U:f){}Constructor (_,_n0:Array [Array [Boolean ,0x5],0b11100];E0_6_:Array [Float ,0x42]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 886))

    def test_887(self):
        input = '''Class K553:_{Destructor (){} }Class _:L1_{_u(i3eg:_z63024;__:_;_R:Array [String ,0b110101]){} }Class _{Val $G,$_4:Array [Array [Int ,04],84];Val w:b;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 887))

    def test_888(self):
        input = '''Class _{}Class N__{Constructor (_0:Float ;F,_,_:Q;_5,k_:Array [Int ,02_5_4];_8:Array [Array [Array [String ,0XD_0_3],76],0x56];O:Float ){}Var $w,Z:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 888))

    def test_889(self):
        input = '''Class V0_{$L_r5lb_(S,_,Y_,G,_0,_,GrvCUB,S6:Array [Boolean ,0xB0_C_5]){}j(_7:Array [String ,52]){}Constructor (x3:I){} }Class r8:_e{}Class q_____{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 889))

    def test_890(self):
        input = '''Class _:v2_{Constructor (P9:Array [Array [String ,39],0X1];_:Boolean ;_8:Array [Array [Array [Int ,025_76_6],0b110001],39]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 890))

    def test_891(self):
        input = '''Class t{Destructor (){}Constructor (_Oh__J_,P9,Du__0,S0:Array [Array [Array [Int ,58],0x20B4_6_3C_F],0102]){} }Class G4:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 891))

    def test_892(self):
        input = '''Class F{Constructor (C:Array [Array [String ,0b1010101],03_7];_,_,P:Array [Array [Array [Float ,82],055],0X51];_fcZ:String ){ {} }Var _,k,B:Array [Int ,0X5_0];}Class N:b{$i(X:Float ){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 892))

    def test_893(self):
        input = '''Class _B:Wl{}Class _:_{}Class V:o{}Class _91Ey:J5{Val $c_65,L:Array [Array [Array [Array [Array [Array [Array [Array [String ,0140],0X52],0140],35],3_10_8],0X5],0140],0xD];}Class _1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 893))

    def test_894(self):
        input = '''Class ___f8__:zb8{}Class T{}Class V1B{Val v:Array [Array [Int ,0B1],35];Destructor (){}Var $6,$l_1:Float ;}Class sF0{}Class _352_Z{Var zdBi,f_LL:Array [Array [Array [Array [Array [Int ,6],35],05],35],0X42];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 894))

    def test_895(self):
        input = '''Class _:E{Constructor (__5:Array [Array [Array [Array [Array [Array [Int ,0B1011101],0B1011101],71],0XC3_7_1],057],0b100101]){Break ;Var _3_,B_,P,_,p0:W5;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 895))

    def test_896(self):
        input = '''Class h6{}Class b_Sz9:___{S(_j_X2:_18__yy_){} }Class r{}Class y__{}Class ___9919:_{Var z,$_,$P_:Array [Float ,6];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 896))

    def test_897(self):
        input = '''Class _1F:q7_C{Var f_,$6_,$O,s_,$8q,_9Z:Float ;Var $_,$2:_0K;Val $Q9_:Array [Float ,0b1100011];Destructor (){} }Class H:r{Val $_q30,L_42,V,$1m5,_L,_:r;Val $3_Fy:_;}Class _{$04(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 897))

    def test_898(self):
        input = '''Class _:d{}Class d{Constructor (p,_:i4_g_;dl:Float ){}_(_EP37:Array [Boolean ,57];y:Boolean ;_:Array [Array [Array [String ,0xE],0B101],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 898))

    def test_899(self):
        input = '''Class b{Val Z_0CkR_,$3_,__:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0xE9],03_45_4],8_5],0X5],0X25],0B1],21],0B1011011];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 899))

    def test_900(self):
        input = '''Class _jyk:__H_{Var $G9:Array [Int ,6];$y(Y,J:Array [Boolean ,1_9];JVC,__,C:String ;_4M:_;_8:String ;t8:Array [Array [Boolean ,764],0xF];_:__;w30,X,_2,d_,_:String ;a:Float ;Q,_,k,Cg,R:String ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 900))

    def test_901(self):
        input = '''Class F:_4{yi65(_:Array [Int ,0X3E];_,_S:Array [Array [Boolean ,1],02];I:String ;_1:_;_:Boolean ){}Constructor (){}Var $n:h73;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 901))

    def test_902(self):
        input = '''Class __KF:C{Var _:_j;Val $_69N:Boolean ;Val X_:Array [Array [Array [Array [Array [Array [Float ,07_62],16_3],0X237_3_4],0x8F],0x17],0b1010000];Val i:__;Var $J,y,h,u1,d0c,$_A,$54_j_7,$6____S,o3:String ;}Class _:_1_9{m_(z:Array [Array [Array [Array [Float ,01],0xAE_2_BC6A_0],036],036];_9:Q){Break ;Break ;}Var _w,_:JR;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 902))

    def test_903(self):
        input = '''Class R{}Class g:_{Val aO:Array [Array [Array [Array [Array [String ,0B1_0_0],0X10],01_06_720],85],0133];Var DL:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 903))

    def test_904(self):
        input = '''Class g{Val $2105_4:v;}Class __1:_V_7P9h_{Val __B:Array [Int ,01_7506_3_77];Val _,$t4,Ojt,s3i,_o,V,$p:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 904))

    def test_905(self):
        input = '''Class U{Val U_3H_,P5,$h_7__:Array [String ,0B1];Constructor (A_3_,R,_C:Array [Array [String ,027],149]){}$cH___(){} }Class _e{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 905))

    def test_906(self):
        input = '''Class _T30:c{G_6_k(){}$_i0(){Continue ;} }Class K:j{Val v,$n,B:String ;}Class _{$_(A_:_x;B:Array [Float ,072];_5:Array [String ,0b1011];Fz_,D,vZE_,_:Array [Boolean ,6]){Continue ;}Val g:Array [Float ,072];Val $11:Array [Array [Array [Float ,0b1011],06_5],29];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 906))

    def test_907(self):
        input = '''Class _{Constructor (_w,QS,R,_:Array [String ,0b11_0_1];m_uI,B,_,_G:G_De_;_:Float ;_f_o1__,_39:String ;O:Array [Boolean ,0x8];d_4_,J,a49b,_l,_P_t:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 907))

    def test_908(self):
        input = '''Class _2E{Var $__,$77:Array [Array [Array [Array [Array [Int ,0xC],85],0B11000],0X64],0b11000];Val $U:Float ;Destructor (){Continue ;} }Class D___1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 908))

    def test_909(self):
        input = '''Class ___:_b{Constructor (D_:Array [Array [Array [String ,0130],80],80]){}Var $Q,$v__2D,$L,$3I,_,q,$_1,_K12:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 909))

    def test_910(self):
        input = '''Class _{}Class _{$8(h___Q4,a_5:v){}Destructor (){}Val __:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0b1011010],05],0xA2],1_0],0X5],92],0B1],2],92],055];Var nq,$_2:Array [Array [Array [Array [Int ,92],06],10],9_8];Constructor (){}$A3(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 910))

    def test_911(self):
        input = '''Class _{}Class U:u{Destructor (){Break ;}Var $_,s1___,$G,$w8,Q_8:_;}Class _w{}Class h6_It{}Class y{}Class _{}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 911))

    def test_912(self):
        input = '''Class _3:_{Destructor (){} }Class F{}Class K{_(_:Array [Boolean ,0B101000];_,nv:String ;_,T4:Array [Boolean ,0xC3]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 912))

    def test_913(self):
        input = '''Class S:h_{}Class __:t{Val $46:Array [Array [String ,0xC],0xC];__7(I,J:Array [Float ,0b1]){} }Class u_{Constructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 913))

    def test_914(self):
        input = '''Class V5f:V{}Class er:_{}Class M:D_G{Var f,l:Boolean ;}Class __H{Var $A,$_,_,$Z:Boolean ;Var _9,$__:o;Val l,$7,a,_N9b60e:Array [Int ,0X6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 914))

    def test_915(self):
        input = '''Class _:_{Var u:Float ;Constructor (_:Int ){} }Class S5{}Class N_:gz50{Var I,_,yr5_f,ao:Array [Array [Float ,0b101011],010];Var $H,$_1q8,$Ym9_M,$54,__,_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 915))

    def test_916(self):
        input = '''Class Fm:_{Constructor (___:_;_,m:Boolean ){}Var $0:C;Var S4K:q3;Constructor (_G__,AT:Float ){Return ;}Var $I:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 916))

    def test_917(self):
        input = '''Class Uy7:r89{}Class h:__{Constructor (){Continue ;}Var _T_8771H:Array [Array [Array [Array [Float ,565],0XD],0x8],9];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 917))

    def test_918(self):
        input = '''Class _{Val _i,_,$_:String ;__(X,__16:C){}Constructor (R_Ie,dZ:w_gsy59Q___;_:_;r7:Array [Int ,8_0];s_,d:Boolean ;X,_:Float ;E:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 918))

    def test_919(self):
        input = '''Class Z_:_{}Class b{Destructor (){Continue ;} }Class b{Y_(t:Array [Array [Float ,5],0x8_44];O:w){}Val _2:qn;}Class Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 919))

    def test_920(self):
        input = '''Class d3{}Class _{Constructor (__,_s9m_:Array [Int ,0X3];U:Array [Array [Array [Array [Int ,044],0B1010101],0B1010101],01];_,J:Array [String ,0b1]){} }Class sXv6:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 920))

    def test_921(self):
        input = '''Class _y{$49(_,w:_;sa_,TX_,y:Int ;_:String ;__,B,_:Array [String ,0B1_01]){Continue ;}Constructor (_:_;f,g,Wft4Br9:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 921))

    def test_922(self):
        input = '''Class FI:_{Val $I_T,$0_45:Boolean ;}Class _{}Class _{Constructor (){}Constructor (QW2,_:_k10){} }Class _:vN_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 922))

    def test_923(self):
        input = '''Class M70u{Destructor (){} }Class Z_8{}Class _CX{}Class L303:A{}Class _:R_{Var Z63,$_,tD:Array [Array [Array [Boolean ,0X37],026],076];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 923))

    def test_924(self):
        input = '''Class U{}Class j_{Val $0_:Array [Array [Array [Array [Array [Array [Array [Float ,9_3_1],0X4],070],0B10],67],0x54],07];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 924))

    def test_925(self):
        input = '''Class m:uB3w2{Constructor (_,E_h,VW:Y9;_91_:ls;_8,_,cf:Array [Int ,14];V_:Array [Float ,0X54];m,U:Array [Array [Boolean ,0b110000],0b1_10]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 925))

    def test_926(self):
        input = '''Class TJ{Constructor (n,_l78,_:_;_:Boolean ;_,LK5,_,_,_6,N:Array [Float ,9];_9d,_16:Int ;_:String ;H,_6:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 926))

    def test_927(self):
        input = '''Class _{Val $____R,$_0x:Float ;}Class _{}Class b:g5_{$7(){} }Class _{}Class jg9_:_{Var $2,_0:_;}Class _5:b25{}Class U__S:_{_(){}Val $_:Array [Float ,065];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 927))

    def test_928(self):
        input = '''Class __1_{Var _:Array [Float ,0x1E];Constructor (){} }Class _Y:_{}Class _5zil_:_{$G(){} }Class YA_F7:_{}Class z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 928))

    def test_929(self):
        input = '''Class __:kX4_{Val _:String ;R_(){} }Class Qs_6O6{}Class M:_{Val _:Array [Array [Array [String ,56],0b100],1];}Class Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 929))

    def test_930(self):
        input = '''Class _f0_171I_:_{Constructor (U7S1_,_:Array [Array [Array [Array [Float ,06_73_0507],0x9_C],072_0],9];m_:Float ){ {} }Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 930))

    def test_931(self):
        input = '''Class CW_e{Var _nC3:Array [String ,4];Constructor (__N3_:Array [Array [Array [Int ,72],044],1]){}Val _:Array [Int ,48]=!!-y8_4__::$X.k().ql()._f._A._;a(_1,__,O,__N2:Int ){}Val _47,$D,_,$E:Array [Int ,02];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 931))

    def test_932(self):
        input = '''Class _:E{$__E(_0__93,Z809,_5:yM;B:Array [Array [Boolean ,42],0x53];fv5:F){}Var _,_:_;Constructor (d,_:Array [String ,0311_0_4];_,j:__;K_:_1;___:Array [Float ,42]){Return ;_8_::$8_();} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 932))

    def test_933(self):
        input = '''Class _7{}Class _:g{Val $_7_98,yi:Boolean ;}Class B2:w_{Constructor (_,_,_N:Array [Float ,7];_:Array [Array [Float ,0x2_E_1],0b1_10];n:__;K,__8,_R__,_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 933))

    def test_934(self):
        input = '''Class __:_1{}Class Z_s{Val $6V:d;}Class _7{Constructor (){}Var n,_,$E,$_e,_,$8:Array [String ,3];Val $75:Int ;}Class _i:Z3V{}Class _{}Class nv{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 934))

    def test_935(self):
        input = '''Class _:s_x{_ml(__3_:Array [Array [Float ,01],0b1_0_1_110];_B,_:d7;_:String ;_,_:Array [Boolean ,0B1000001];_,K84t_:Array [Array [Int ,0B1_1],0X52];_:Boolean ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 935))

    def test_936(self):
        input = '''Class w:_{Constructor (O:Float ;_,_,U_,_:Boolean ;V:Z3;q2:String ;J__:bPN8){}Val $_:Array [Array [Array [Int ,0B100011],8],03];}Class r{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 936))

    def test_937(self):
        input = '''Class _B50:_{Constructor (_:Array [Boolean ,0X2A];_u:Boolean ;K,Q,__G,_q2L,z:t){__::$E();}Constructor (){} }Class J_n9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 937))

    def test_938(self):
        input = '''Class D_:G{}Class ___:X{Val y,_p__,_C:Float ;}Class _{Var $_,_:Array [Array [Array [Array [Float ,89],033],0B110001],0XA69F];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 938))

    def test_939(self):
        input = '''Class _{}Class _fYZ{_X(__A,_,_2A_7,__,_5,_,w,e:Array [Array [Array [Array [Array [Array [Boolean ,71],71],71],0131],0B10],0xE0FE];_,v:___){Continue ;}_(Z:Boolean ){}Constructor (A,__tD,_,_H8d:Array [Boolean ,7]){}Var $_a,_:mu2;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 939))

    def test_940(self):
        input = '''Class i2{Constructor (B_2_:Array [Array [Float ,0X1_E0_5_B_4_D_0],8];i_U_:Array [String ,72]){} }Class bo_:F{Val $_75__,_95_,$__98_,q,$7,X:Array [Int ,0b1];Constructor (_:Int ;i_,u9_:Array [Float ,0x3];n:String ;F7,G99T,N_,_:Int ;X_:Array [Array [String ,2],0x3];e7,v8:Array [Array [Array [Int ,6_6],0xB],0b11011]){Break ;}Var $s:Boolean ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 940))

    def test_941(self):
        input = '''Class _{$2_(c_:Array [Float ,027];o_,___,_77:Array [Array [Array [Boolean ,027],0b1001000],06];_:Array [Int ,0B1]){ {Return ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 941))

    def test_942(self):
        input = '''Class j_7{Val $5_p_:Array [Array [String ,0115],0B1];Destructor (){Val _0,Pgv,V:Array [Array [Array [Array [Array [Float ,0b10_0],0B10],0115],073],0115];} }Class ___J_{Var $194,$_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 942))

    def test_943(self):
        input = '''Class __:___{}Class n_{}Class X{}Class h_:_{}Class jTiq:_t{_(){}Val $4,$5j:Array [Array [Array [Int ,0B1],0B101],0B1_110];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 943))

    def test_944(self):
        input = '''Class S:__{Var $Bu9:Array [Array [String ,0b111111],0X1D];Val $z,u:Array [Array [Array [Float ,0X9],0b1_1],0X57_A3];}Class __:A{Val $L:_Kw3d;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 944))

    def test_945(self):
        input = '''Class g:__{Constructor (__:__5;_g_V__:Array [Array [Array [Boolean ,51],0x26],72_5];S,Q,__W:_;o:lx_7_;h,OB,____,G,w0__r,_:_;_J7_:Float ;x:Array [Array [Array [String ,0b10111],0X3B],0B110110];_:___c;F_,_,GU,a_:Array [Array [Array [Int ,0x8],51],0b1_0]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 945))

    def test_946(self):
        input = '''Class C_{}Class G:_{Val g,$A:Array [Array [Array [Boolean ,3],0B1001000],0X3F];Constructor (_,R6:Array [Array [Array [String ,4_4],0x9],0X9D_9]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 946))

    def test_947(self):
        input = '''Class T{Y(_7:Boolean ;_7_:Array [Array [Array [Array [Array [Float ,0b110],0x1],022],0b1],1];_,u:K){Continue ;Break ;} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 947))

    def test_948(self):
        input = '''Class _{Var $_H,w71V7M,$8_:Array [Array [Array [Array [String ,0124],75],0b1],0x29];Destructor (){} }Class N_:r{}Class _:R9_{Var b5aPr:String ;Destructor (){} }Class ____:___{}Class _6{}Class O:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 948))

    def test_949(self):
        input = '''Class qVq_d{Destructor (){}H9_1_(__3_6,_g:Boolean ){}Var $X:Array [Array [Int ,031],0x3];Constructor (){} }Class _{Destructor (){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 949))

    def test_950(self):
        input = '''Class K{}Class _{$7(h:Array [Float ,2];q_,N__9_,_:Y0;_c,_2:Boolean ;QA1p_:Array [Array [Boolean ,0112],0b110100];y0_,_:Array [Array [Boolean ,0X1F],8];_:_){}w6(){}Val _,$_Om,$80:J_u;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 950))

    def test_951(self):
        input = '''Class _:_{Var $1,$Q,$1:__;}Class j__XY_:_{Destructor (){}Val $_:Array [Boolean ,0xE];}Class G:AB{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 951))

    def test_952(self):
        input = '''Class _0_{Var $_:Array [Array [Array [Array [Array [Float ,43],0X28],0b11_1],07],43];Destructor (){}Val y_,h8,t:Array [Float ,07];$_7F2_3(){_::$_(!!!!!!!--__43_6::$z7_).N();{}Val u6,_i5,n,AX,p_A:Array [Boolean ,0X5];{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 952))

    def test_953(self):
        input = '''Class g:M__d{__(PzN:Array [Boolean ,0B11110];_0Uj,C5_:String ){}Var z__2,_,_:Array [Array [Array [Float ,31],0X2],0130];}Class EG_F:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 953))

    def test_954(self):
        input = '''Class __{Var $__,$_,h7R:_;Destructor (){Break ;}Destructor (){} }Class p__uN_Y:v{}Class k:_{Constructor (){} }Class _:_d_6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 954))

    def test_955(self):
        input = '''Class __K:w18{Constructor (_K4s:_8;__7_:Boolean ){} }Class _{}Class h_{_(r,O,z_,_3,___,c_5_,____,y4:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0b1],056],0B11001],0b1100],0xD],0b11_0_0],57],0xD];__:Int ){Continue ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 955))

    def test_956(self):
        input = '''Class x1:_E1c{Val $C0,_,$_k4_3p___5:Array [Array [String ,074],0x5A];}Class _{Constructor (){}Val _,aJeq:Array [Array [Array [String ,0XA],0b1],04_6];Constructor (){} }Class l{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 956))

    def test_957(self):
        input = '''Class _:ZWC{}Class G:_{Constructor (){Val HIWI_,__Yh,_:Boolean ;Var _:Float ;} }Class e{Constructor (rF_:Boolean ){}__(){Continue ;}$F_(_2:String ){} }Class _:J{Var $_H_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 957))

    def test_958(self):
        input = '''Class g_{Var $tR_08:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0x1D],0b1100000],3],0X17],0xD_6B_0_E4],68],0134],68];}Class f{}Class __H{Val $z_,$j9:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 958))

    def test_959(self):
        input = '''Class _1DOB{Val e:Int ;Val f:Array [Array [Float ,0b100101],0b1_1];$_(w,a,_:Boolean ;_2A,od,_,b:Array [Int ,0X49]){} }Class x:u{F(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 959))

    def test_960(self):
        input = '''Class X:X9{}Class _7{}Class Q:A{Constructor (){} }Class sq{Destructor (){}Var $eB:Array [Array [String ,0670_4],0b1_0_1_1];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 960))

    def test_961(self):
        input = '''Class EJ{}Class _d_1{}Class _281_:B_{}Class _:_{__(__:Array [Float ,0B1];fv___:Array [Array [Boolean ,0x3E],0b1_10];k04,P9:Boolean ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 961))

    def test_962(self):
        input = '''Class y:SWb{}Class _i{_W_(_:Int ;Q_,_,_W,_5_,j,__:Array [Array [String ,74],74]){Val __G_,YM9C_:_46_;Continue ;{} }}Class __Q6{__5(S_1,k,Q_D,O:String ;_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 962))

    def test_963(self):
        input = '''Class _7:u{Constructor (e:Array [Array [Boolean ,036],0X56];_:Array [String ,036];_6,_,qx,l,S,__M:Int ;l:Int ;_:_0){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 963))

    def test_964(self):
        input = '''Class U{Destructor (){ {} }Val _G_,$7_,$J,g_:Array [Array [String ,06],034_1];}Class _7{}Class _{Destructor (){ {} }Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 964))

    def test_965(self):
        input = '''Class _0_{Constructor (_:_5;bO7,_:Array [Array [Boolean ,047],0XC_B];kI:_;_G,_:x;_,_:Boolean ;lg_7U__,_,j:Array [Float ,0X71]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 965))

    def test_966(self):
        input = '''Class A{$9_da(){Var k0,_:Array [Array [Array [Int ,0x8],0X35],31];Continue ;} }Class _:D5h_{}Class _:u35_w{}Class X{Destructor (){Break ;} }Class b{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 966))

    def test_967(self):
        input = '''Class R:_xQ{Constructor (_9_:Float ;__d2e:Array [Int ,0133];Rg_:Array [Array [Int ,0b10110],0133];_,_,h:Array [Array [Int ,6_7],0b10]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 967))

    def test_968(self):
        input = '''Class GI:_{}Class _120{Val $__:w;}Class _{Constructor (bA3_1,_4,Q,N_:w;_,T,T2_,A:Array [Array [Array [Boolean ,0x62],05],0X4E];f,_2__1,b3,g,i9,CN:Float ){} }Class i:H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 968))

    def test_969(self):
        input = '''Class dR:___a7_{Constructor (__p,_7:Array [Array [Int ,2],0b1_01_110];t,_7M,_R_s:Float ;_,M:V;_:Array [Array [Array [Float ,0143],0b1],2];_:c;_,_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 969))

    def test_970(self):
        input = '''Class ___7:_{Constructor (_,u_:Array [Boolean ,0B10100];_,_,i:aA;_:iIYX){} }Class _{}Class _3{}Class _9{}Class P:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 970))

    def test_971(self):
        input = '''Class __:_{}Class _{o(){} }Class _{Val $9:_;Constructor (F92Wr3_,_2:Array [Array [Int ,0xE_B],0b1010011];_,__,_,o,l,Y4_,_1:Array [Float ,0103];g9uz36:Array [Array [Float ,89],0X4E];_67,_3,r_:_){Continue ;} }Class e:_f_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 971))

    def test_972(self):
        input = '''Class __LJ:e{Val _,$G6,$F5,E,_:Array [Boolean ,6];}Class IN__:F{}Class _3:_{Val J:Array [Array [Array [String ,04],0XB_6_4],4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 972))

    def test_973(self):
        input = '''Class d0{}Class _{$_(){} }Class __n:PG{Val $4W_9m,$_3u,E:Array [Boolean ,0b111110];$1__q(y_J:String ;_y:Array [String ,033];_d,c_,x,__V5:Array [Array [Float ,033],0X7];v:String ;_2,g,____1__0,x:Int ;__:Boolean ;B,___:___;__:Array [String ,0b1];Q,R7:Array [Array [String ,0XF3],0B11111];__:yo;_,_6y:Array [Array [Int ,0X7],0b1];_,w9:u;_:Int ;M2_:g01_;_,w,r0:__;_j:_){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 973))

    def test_974(self):
        input = '''Class qw:_{Constructor (_,_:_m){Break ;Break ;Break ;Val _,_:k;}Var $x,s1__,_,_,$m,$_Oj,$1:Array [Array [Array [Boolean ,6],14],14];Val $___:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 974))

    def test_975(self):
        input = '''Class _{}Class w98:PN{Var $_,W_,ny__,e:Array [Array [Boolean ,03],06];}Class __i41o56:H{Destructor (){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 975))

    def test_976(self):
        input = '''Class Z_7:_CI{Constructor (){}Constructor (_1,i:Array [Array [Array [Int ,026],0B1_01],5]){}$R1_(E,_A1fP:Float ;___u__,S,_t6,______5,AX:B){_::$8();} }Class O:sI{Val Y9:Array [Float ,07];}Class _:N{}Class L9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 976))

    def test_977(self):
        input = '''Class __{Val $3__6:Array [Array [Int ,0x6C8],0x24];Var __:Array [Array [Array [Float ,0X9_1_7_6],45],0X22];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 977))

    def test_978(self):
        input = '''Class _:f{Constructor (I:Array [Array [Array [Array [Array [Boolean ,0B1100100],0B1],075],0B1_0_1_0],05_7];k__0CAr,_h_p0,q_1:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 978))

    def test_979(self):
        input = '''Class _{}Class v{}Class fN0_4:WE{Constructor (z_Lb,Tf,x:Array [Int ,01];z:Float ){}Destructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 979))

    def test_980(self):
        input = '''Class x_Q{Constructor (n_,_c52__z,_c:Array [Array [Array [String ,0b111011],3],94];T:i__){}Constructor (){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 980))

    def test_981(self):
        input = '''Class A2{}Class FU2{Val $8:Array [String ,0b11];Var $s,_,$_U:Array [Array [Array [Array [Array [Int ,9_6],45],0x9_E],1],0x1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 981))

    def test_982(self):
        input = '''Class F_{Destructor (){}Val $_4_5:i4;$FK(_4,_:Array [Float ,01]){}Constructor (_,z,X_,_,t:Float ){}Constructor (_Q,h:__){}y_(F,_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 982))

    def test_983(self):
        input = '''Class _{Val _Y,$t_PR:String ;Var _:Array [Int ,11];Constructor (){}Constructor (_:_;_:H__;_Vm4:Array [Array [Array [Float ,0X89_E_40_79],01],11];_0y_,_:w;_:Boolean ;R:Array [Array [String ,027],82]){Val _XP,f6_19_,___l:Float ;} }Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 983))

    def test_984(self):
        input = '''Class _J_07j{}Class _{}Class _:_{Destructor (){Continue ;}Constructor (_n9:Array [Array [Int ,0X41],011]){}Constructor (U,__:Boolean ){ {}Continue ;Break ;}Constructor (q,__:Array [Float ,0x609]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 984))

    def test_985(self):
        input = '''Class ZX{}Class _{__(){}_9(){}Val _:Array [Float ,0X34_9A];Val A:Array [Array [Array [Array [Int ,0x4D],0B111110],0106],34];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 985))

    def test_986(self):
        input = '''Class _{}Class ____:_2{Val S:N1;}Class _:_v{Val $5,__:Array [Array [Array [String ,4],40],0107];}Class a_{}Class pH{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 986))

    def test_987(self):
        input = '''Class _:A_GD{Val $V:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,03_77],77],77],0133],0X9],0X37],0133],0b101101],9],0x64],9_80_9_095];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 987))

    def test_988(self):
        input = '''Class t:W4{_(_:Q_3;_w:Array [Int ,02];_:Array [Boolean ,50];FN_v:Boolean ;_a:H_C){}Constructor (_:Array [Boolean ,0b1];l658,_h:Z){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 988))

    def test_989(self):
        input = '''Class _:_1{_4YdT(s8:String ;_:Array [Array [Array [Array [String ,0x2],03_1],0x3C],0x3C]){}Var $_:Array [Float ,0B1_1_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 989))

    def test_990(self):
        input = '''Class I:_{}Class O:__{Var _,$8:Int ;Val $9:Array [Array [Array [Float ,0xD],2],01];Val $61fF_3,$m,$6,$__,i:i;Constructor (S:Boolean ;MC:D_){L_JtV::$9Lg();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 990))

    def test_991(self):
        input = '''Class a_{r(_,E6:Array [String ,0b1];h_:Float ){Var b,g7,x6_:Array [Array [Array [Boolean ,74],0X1C],0X1C];} }Class _:_x{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 991))

    def test_992(self):
        input = '''Class _{}Class _:_5_{Constructor (){} }Class r{Val $Y_8,$_,$63,$_:Array [Array [Array [Array [Array [Array [Boolean ,0B1],8],0X8],0b1_00_1],0B11],05_6_7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 992))

    def test_993(self):
        input = '''Class o:_{Val $6:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1],0b1001111],0B1],8],0x7C],58],31_3];Destructor (){Break ;{} }Constructor (_:y1_q){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 993))

    def test_994(self):
        input = '''Class __4{Var x42,_,O1,$4O__:Array [Array [Array [Array [Array [Array [Float ,042],0543636_6_3],0B1],02],8],6];Destructor (){}Val TYv:_j;Val k11,_J,c0_,$_g:Array [Boolean ,0x3A];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 994))

    def test_995(self):
        input = '''Class Ba_:y{Constructor (etu:Boolean ;_,N,D:Int ;_:m;JK,G_4,V:Array [Int ,0X5];__B6:Array [Array [String ,067],0b1]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 995))

    def test_996(self):
        input = '''Class b5:_yN{ZD_(WT_0Oz,_7:Array [Array [Array [Array [Float ,19],0b1],484_6_0_6_0],0X6_1]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 996))

    def test_997(self):
        input = '''Class _5:c_24{Destructor (){Continue ;}Constructor (){}Val $E,_I:Array [Array [Array [Array [Array [Array [Array [Int ,6_0_5_6],26],8],0x9],01],04],0b1_0];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 997))

    def test_998(self):
        input = '''Class _{}Class a:q_{Constructor (_:Array [Array [Boolean ,0x46],0X20];_,B,_,_,Y9___:_;__,_,_,xa_wQhu:Boolean ;C,z,tS_q,_,a:String ){}Val _2,_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 998))

    def test_999(self):
        input = '''Class _{$H_(i,_,QC:Array [Array [Array [Boolean ,0X9],040],0B11];_2:Array [Array [Array [Array [Array [Float ,5],0b1],0b1000100],0x6],0x55];B_,_ZIf4,J_,r_:_2B){}Var _i8_,_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 999))

    def test_1000(self):
        input = '''Class a{Destructor (){Val c,_1B:Array [Float ,0x46];} }Class p_{Val y_5K:Array [Float ,60];_(){}$F7IB(_:Int ){}$52_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1000))

    def test_1001(self):
        input = '''Class V{Destructor (){} }Class We{Var _:Boolean ;Var $_:Array [Array [Array [String ,035],03],035];Constructor (){}Var $p:Array [String ,040];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1001))

    def test_1002(self):
        input = '''Class SZ{}Class _b:_{}Class _72:_{Var $___,$7,_,Gk,m__:C_46;Var _b:_IFjC;Destructor (){} }Class c:r_{}Class _:v{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1002))

    def test_1003(self):
        input = '''Class m:_su{Val $1:_;Destructor (){}Constructor (q,_5s__63X___:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B101010],0XC71D],01_06],0x7],0b1],0B101010],84]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1003))

    def test_1004(self):
        input = '''Class I_{Constructor (){}Var $____r:Array [Boolean ,0x93];Var _:Float ;Destructor (){}Val $E84,u:Array [Array [String ,0X6],49];}Class _alc6_:_K{}Class W39{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1004))

    def test_1005(self):
        input = '''Class P1_{}Class __I:v5k_{Constructor (n_S,ri,D:Array [Array [String ,3],01];l:F0_;_5:Int ;T_,l,_,_wKf:Int ;LY_,p,_8w_:vDy){}Constructor (S,no_:Int ;B,L:b22){} }Class V{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1005))

    def test_1006(self):
        input = '''Class L{Var jusC:_Q1;Val _:Array [Array [Boolean ,0X8],013];Destructor (){} }Class s:x26a{Constructor (){}Constructor (t,__K:Int ){L::$4();} }Class _{Destructor (){}Var $J_6:i;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1006))

    def test_1007(self):
        input = '''Class A_:U{$VI(N9jo81:Boolean ;g:_m;s_,V_:__y;a,_c7Z:String ;D5,_3n,B:Array [Array [String ,0x4_1_F],03_1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1007))

    def test_1008(self):
        input = '''Class _K0{U(_,__3:_;x:_;e,v,_:k;_,_f7H_:String ){}__(){ {_Y_WX::$H();} }}Class Q_{Val _C_,$A:Array [Float ,52];}Class _1:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1008))

    def test_1009(self):
        input = '''Class _8:_3{Constructor (_6,_:Array [Int ,075];_:Int ){} }Class G3I{$_(A_:_B){Break ;} }Class _{Var $5,$a_:Float ;}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1009))

    def test_1010(self):
        input = '''Class _{$_(D,f,_:_6;_,N_:String ){} }Class _J_{Var $59NC__,$_,$s:Array [Array [Float ,0x67_F_1],0x9];_O(_:k5_){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1010))

    def test_1011(self):
        input = '''Class _{Constructor (__,L:Array [Boolean ,0102]){}Constructor (){} }Class D:_{}Class w{Destructor (){}Destructor (){} }Class a:_2i{}Class Do6O5{Var $_,$_,$5_r79_6iZb:Array [Array [Float ,95],6];Constructor (){} }Class k6:_{}Class N:__2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1011))

    def test_1012(self):
        input = '''Class A_n_t{}Class x:__e{_o5v__(TX:Array [Array [Array [Array [Float ,29],051],0xF],0xF]){}$2(V:Array [Array [Float ,3],051]){Return ;} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1012))

    def test_1013(self):
        input = '''Class b{Val f:Boolean ;Constructor (x:_HR_5;_L_,j,F,___:Float ;__4C,__,Y,xr,j_:Array [Boolean ,0x10]){}$z_(){} }Class E{}Class _:B{Var $_s7_,H__11_s:Int ;Constructor (){}Var ___U:r;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1013))

    def test_1014(self):
        input = '''Class _j3_:p{}Class _:_E{zl8(){} }Class O{}Class _{}Class _V9{Val $S:Array [Array [Array [String ,0b1],0135],37_9];$_(){}Var D0_5,$2,gi:Array [String ,0B1];Var $_:Ls_8;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1014))

    def test_1015(self):
        input = '''Class _:_{}Class _:_{Val q2,J,$__:Array [Int ,0x9B_6];Var $0,$_zO:Array [Array [Float ,02],50];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1015))

    def test_1016(self):
        input = '''Class a_:P{}Class _:_74jx{$s(_0_,_,_,_:Int ){}Val CS:Array [Array [Float ,0b10],017];}Class _:_E{}Class _W_W:Z{}Class O:d{}Class jf{Constructor (_,__,_6,u__,P,_:hj_){} }Class n_1E_{$l(_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1016))

    def test_1017(self):
        input = '''Class r:_l{Val x,$8:Array [Float ,0B10010];$6_(e,_,__,___:j){}Var $8,_N_:Array [Array [Boolean ,0b1_0],3_53_206];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1017))

    def test_1018(self):
        input = '''Class _265{Destructor (){} }Class x:_2{Constructor (_,_96,_K,__F:Boolean ){}Constructor (){} }Class _6{Constructor (){Break ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1018))

    def test_1019(self):
        input = '''Class _{a64(U1,q_,_:Int ;FSl3:Array [Array [Array [Float ,014],0X7],014];_,_E_f8:_;b:Int ){}Var $Qi:Array [Array [Array [Array [Boolean ,0x3],0B1_0],0B1000111],40];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1019))

    def test_1020(self):
        input = '''Class w:t{}Class _:Vt2_{__(_,h,_:String ;_,D,_,_:Array [Array [Float ,93],0B11];_:Array [String ,070]){}Val H,m_,$0,$__9:Float ;Val _7,_:Array [Array [Array [Float ,02_3],93],0b1001010];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1020))

    def test_1021(self):
        input = '''Class Pl_8:o{H(W7_:Float ;W,__:Array [Array [Array [Array [Array [Float ,70],02],0b111111],70],0472];i6,xb:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1021))

    def test_1022(self):
        input = '''Class _:__{Var $M3:Boolean ;}Class f2Cj{Constructor (X:Array [Array [Array [Array [Float ,0x7487_44AF4],85],0x3],85]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1022))

    def test_1023(self):
        input = '''Class a4:_N{Ql(){}Destructor (){}Constructor (__:Boolean ){}Var $6X:_;}Class N{}Class _7{}Class C9u:N_5{}Class __{$_6jxk(O54_,y:Array [Array [Int ,44],0XF_9]){Val K_:_;} }Class g:_{}Class _{}Class _:_90A{}Class _:UM{_(){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1023))

    def test_1024(self):
        input = '''Class I{Destructor (){}Destructor (){Break ;}_v(_40:Array [Array [Boolean ,62],0B1_1];XK,p,_:Array [Float ,7];G81,y:_6;_z47483,e9,_26,a,w:String ;_,G_t6,T,YA:_O;n,_Ne_,o:G3_;W,n:Array [Array [Float ,0X18],0B1010010];y:_;___:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1024))

    def test_1025(self):
        input = '''Class _41{}Class _5:y3{$_A(_:Array [Boolean ,0x4F_437_7]){}Destructor (){Break ;}Val Kvj_,_h_8,$53_:Array [Float ,0276_6];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1025))

    def test_1026(self):
        input = '''Class _d{Val _:VK;y(R,GFb_,p759:Int ;h:Float ;O,_,_F_:Array [Array [Array [Boolean ,17],0X98],9_4];z,OC_,__:Int ){} }Class __:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1026))

    def test_1027(self):
        input = '''Class n:i{Var $s,_2:_V__M;$p(h_N_1__:_;_:Array [Array [Boolean ,0B1],0b111101]){}Constructor (){}Constructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1027))

    def test_1028(self):
        input = '''Class _9_{Val T_:Array [Array [Boolean ,0x28],0b1000000];}Class Wx{}Class U{}Class g4_{_0(){} }Class E{}Class o5_:U{Constructor (S:Int ;l,p:Array [Array [Array [String ,0b11],0X37],0105]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1028))

    def test_1029(self):
        input = '''Class _:i{}Class _{Var G,_1:Array [Array [Int ,0b11_01_1_1],04];Destructor (){}_(){}Var _:Array [Float ,0x4E];}Class _:__44_{}Class E:_x{}Class _i{}Class k__3KD{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1029))

    def test_1030(self):
        input = '''Class _{}Class B{Var _9H:_34d;$6(_g,z___,L:Array [Boolean ,49];___n_w:TO2;__p:v){Return ;}Y(){}Val $7,$3_,$l:Array [Array [String ,031],0x19];}Class g4:T{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1030))

    def test_1031(self):
        input = '''Class H81_ib4{$g1y1_682(_s1NWj:Array [Array [Array [String ,15],057],057]){Continue ;}Destructor (){}F5(x,h:Float ){} }Class K{}Class z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1031))

    def test_1032(self):
        input = '''Class _2{Constructor (y6,_8,zfSw6,_Zg:String ;Q,G:Q;M_U:f;wm716_:Array [Array [String ,07],0X24_8]){Break ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1032))

    def test_1033(self):
        input = '''Class _E:g{Constructor (A_:Float ;_041:Array [Array [Array [Int ,0X4],03],02];qM:Array [Array [Array [Array [String ,2],61],0XBF],0x16];RL_,d4QHu:Array [Int ,61]){}_L__38(b,_7,_,_:_41){} }Class _F__:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1033))

    def test_1034(self):
        input = '''Class _{}Class _{Constructor (z,K,__,H,m6,_,_,_6,_:Float ;y:Array [Boolean ,0x1D];_,w__,gp,_:_;S:__2_;_,_,_:Array [String ,0B110101];w,__,g:Array [Boolean ,0b10];A8:c){Eh::$_();}Var $_:_;S(_:_;h,q_,_4:Int ){} }Class T{}Class AK5{Destructor (){Continue ;Val __2Rl:B_;}Destructor (){} }Class o_{Var $_:_;}Class I_:___3__R{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1034))

    def test_1035(self):
        input = '''Class z__H:_{Var a9,$s:_9_;Constructor (){}Constructor (__NF__,_EU41r_3K3Y:Q_0E){}Destructor (){Continue ;Val _:Int ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1035))

    def test_1036(self):
        input = '''Class d{Destructor (){Var J,_4:A;}Var $4:Boolean ;Destructor (){}Destructor (){Return ;Break ;}Constructor (Fehj,r:Y8){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1036))

    def test_1037(self):
        input = '''Class _:_{Var $2:Array [Array [String ,73],0XD];Val $_a,$0,$_p_00__P,$__6,m:Array [Array [Array [Float ,064],21],014_6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1037))

    def test_1038(self):
        input = '''Class _:c0Y_GI{Val $__pU_V,$4z,t_,b_:Array [Array [Array [Array [Float ,0X3],0131],0X680E],6_44_4_6];Var _:Array [Boolean ,9];}Class _Lbp{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1038))

    def test_1039(self):
        input = '''Class _:c{Constructor (){} }Class _1H_{Var $8__0:Array [String ,015];Val O:Array [Float ,25];Constructor (_,_P1_r:Boolean ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1039))

    def test_1040(self):
        input = '''Class _:h_{Val $0:X;Var K7,_1_,X,N_9:Array [Array [Array [Array [String ,2_0],0X11],0X3],26];Destructor (){Continue ;} }Class _5:l{Constructor (_,W:Boolean ;H,_,_I:_2;_:Array [Array [Int ,05],0X11]){}Destructor (){}z2(){Continue ;Var _,Bg:Array [Array [String ,07_3],03_4];{}Val _,C:Array [Array [Array [Array [Boolean ,05],8],0321],4];}Val $_2:Boolean ;Constructor (){}Val $0:g_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1040))

    def test_1041(self):
        input = '''Class _{Var Z,k_:Array [Array [Array [Array [String ,0X19_65A2_45],0B1_0],0xC],0B1001];Destructor (){}Var $_,$_Y,_:Boolean ;Val __34:Float ;}Class m4:X{Var $_,$aj,$w1,$w_,$6,m_,$___q3__6,sHD2,_:_4;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1041))

    def test_1042(self):
        input = '''Class __i{Constructor (_:_k_){} }Class ___:m{Constructor (J_5_D:Array [Array [String ,041],0B1]){}Constructor (){Break ;Break ;{} }}Class _:K_{}Class _9_5:_i_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1042))

    def test_1043(self):
        input = '''Class _:V5{Val __K:Array [Array [Array [Array [Array [Array [Int ,0B1],5],30],0X2],0b11001],0B101010];Var $M86,_,c_:Array [Array [Array [Int ,02],0X3],026];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1043))

    def test_1044(self):
        input = '''Class _R_:_v8{Constructor (g_X:Boolean ;_:_4;_f8:Array [Array [Int ,0B1],013];_,p83,_,_:f;_:Array [Int ,5_9]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1044))

    def test_1045(self):
        input = '''Class l{Var $7S,_a,$m,$3D:X_Q;Constructor (){}Constructor (_:_Ttn;t,_:hk;of:Array [Array [Array [Array [Boolean ,03],0x4E],0x5],9];f:X){}Var U9,$Mn,eRQ1_,$Q_8:Array [Array [Float ,74],0b111001];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1045))

    def test_1046(self):
        input = '''Class __:_2{}Class _:Oqz{}Class __:__m{Var $6,$5_:Array [Array [Array [Float ,05_4_7_0],0B111011],2];}Class _:D{}Class E:v{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1046))

    def test_1047(self):
        input = '''Class m{}Class _{Var $__:T;Constructor (M,U4,_,MHU,_,_o_:P6WC3;_:Array [Array [Array [Array [Float ,55],0X5_A_4],0B111],55];__:E__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1047))

    def test_1048(self):
        input = '''Class r:_8_{}Class Z{$7(__,_G,P,L:Array [Array [Array [Int ,0114],0b110111],0X61]){} }Class _:_{}Class U:Ui{}Class _:X{Destructor (){Break ;} }Class M4{}Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1048))

    def test_1049(self):
        input = '''Class Y:m__{}Class __{}Class _8{Destructor (){}Var _,$3_,n8,q__y4,M,IR:Array [Boolean ,0B10_10];}Class _:eK{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1049))

    def test_1050(self):
        input = '''Class _30{}Class B195{Var $911_R_4,$j,gE2__:Array [String ,01];Var _:S_;Constructor (_:f_323){Break ;} }Class Y{}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1050))

    def test_1051(self):
        input = '''Class ____HS{Destructor (){}$Kf_(_5,_J4:String ;H9,_,wn:c;l_,__,_:Array [Array [Boolean ,6],04];_,z_:Array [Float ,03_02_6]){}Var N_3k:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1051))

    def test_1052(self):
        input = '''Class B{}Class N:_n{}Class c8:__{Val $_:Int ;Constructor (B6A:Array [Int ,0b100];a_,g,C5Us,MV_0,_z_:Array [Boolean ,0b100];_:_;_5:Array [Boolean ,0b100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1052))

    def test_1053(self):
        input = '''Class _:hw{Constructor (d_q,iF52,T:Float ;_:Array [Array [Array [String ,0b1],03],61]){}Destructor (){}Destructor (){ {} }}Class f7_BI5:z9Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1053))

    def test_1054(self):
        input = '''Class C{}Class _:_{Destructor (){Break ;Return ;}Constructor (eL__:String ;K,x,h,_5__89,k,_:Int ;g:Int ){} }Class _2{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1054))

    def test_1055(self):
        input = '''Class B{$_(o4_:Array [Array [Array [Array [Boolean ,13],4],13],39]){}_(_4K,h,_5,V_:QP4;_,o:Array [Array [Array [Int ,0B10100],0B10100],0B10100];j:Array [Array [String ,04],050];_6__:Boolean ;w:_x;f,K_,H:Float ;D3,_:Array [Array [String ,5],0x4C_0_C6]){}Var $5:Array [String ,0XEDC_F4_8];}Class lQ:Y5T{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1055))

    def test_1056(self):
        input = '''Class P9{Constructor (D,_:Array [Float ,0X22]){}Val $2:Array [Array [Array [Array [Array [Int ,0X22],05],0x60],40],0xB];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1056))

    def test_1057(self):
        input = '''Class _v:_{}Class bl{Var _:Boolean ;Constructor (o3:Array [String ,0x7]){}Var $_,D__e_:_7_9;}Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1057))

    def test_1058(self):
        input = '''Class f8:_{}Class T__{Constructor (){Break ;} }Class _:q86{Val $1:String ;Destructor (){_e_f7::$Q._ut_.__();} }Class U4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1058))

    def test_1059(self):
        input = '''Class _{Var X_:Array [Array [Array [Array [String ,80_9_3],0123],0b1100],0123];}Class K5__{}Class __5{Constructor (_3:Array [Array [Array [Float ,0xA],0123],0123];_7_:Array [Array [Array [Float ,0123],0b1100],0B1111];_2q:Array [String ,0123];_f6:_){____1::$_P();Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1059))

    def test_1060(self):
        input = '''Class _f:_{Constructor (_,U,I:Array [Array [Array [Array [Boolean ,0B1],0630],0xA],0b1];_01:String ;_:_;__11,Y_90:Array [Array [Array [Array [String ,0x59],83],057],83];__:Array [Array [Float ,0X54],0x59]){}Var e1_o2l,$H8,$_,_9_:Array [Float ,2];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1060))

    def test_1061(self):
        input = '''Class _{}Class _32:_X{Var n4e,$29,$4,$8_P,_,E,_D,$P_,$2,$_O_46:uUt;}Class m_{Val $__,$__6:String ;}Class _1_:__{}Class r1:_{$3(H_:Array [Array [Boolean ,0x31],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1061))

    def test_1062(self):
        input = '''Class _0{}Class _o_O{_(){} }Class _K{}Class _{$83(){}Var _:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0X47],9],0B1_1],7],12],057],0B11_0],0x6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1062))

    def test_1063(self):
        input = '''Class N__O8_:_{}Class _M7_R_O:w{}Class __{Var $6_,$4:Float ;Var $8:Array [Array [Array [Array [Boolean ,0B1000101],0x62],0B1000101],0X4_3];}Class z:_1__{Val _NH,$6:WA;}Class b:h_b_r__{Val Z:Array [Boolean ,0X55];}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1063))

    def test_1064(self):
        input = '''Class _{}Class L{Var $5Wc,__:Array [Array [Array [Int ,042],0B10],3];Constructor (___:Array [Int ,5_7_10]){}Var $_,$3GR:Array [Float ,042];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1064))

    def test_1065(self):
        input = '''Class N{V_484_(_,U:Int ;_,r:String ;_8,w:Array [Array [Int ,0X3],05]){} }Class M_:_S_{}Class V:Q_{Val _:_;Var q,$_,g:T5;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1065))

    def test_1066(self):
        input = '''Class x{}Class _:O6{Val $__,t,_9:Array [Float ,0132];Var $__,$_,R0_:Array [String ,0XF];Destructor (){}Destructor (){ {}Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1066))

    def test_1067(self):
        input = '''Class _N:xL5{}Class _{}Class __{Constructor (n5X:Array [Array [Boolean ,0x3F],0x7];k_:_;_D:_;r:Nm){New _m_()._().N();}Constructor (_xV1nx_6:Array [Array [Int ,07_4],89];V:Array [String ,034];ZG:String ){} }Class _:_{}Class __{Var $0_:Float ;}Class _2_:_8{}Class _C6{Var _:C;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1067))

    def test_1068(self):
        input = '''Class R:_1{}Class Y{}Class E3_:_{Var $4_,M,$7:Array [Array [Array [Array [Float ,0X7],061],0x2],9];f_(f,D,_ll,P:F){Var X:__u;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1068))

    def test_1069(self):
        input = '''Class _3{}Class gM{$3_5p(){}$J8(_j7:Array [String ,0x3_2_D_7];__,o:_;_:Array [String ,0x54]){}Val $6:_;Var $Z5z:a;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1069))

    def test_1070(self):
        input = '''Class A:_{Val K2_1,E,$25,$A,$_q9:Array [Array [Float ,0b1],71];Var $_,$B:Array [Array [Array [Float ,062],0X5F],0X5F];o7_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1070))

    def test_1071(self):
        input = '''Class _4:_{Destructor (){} }Class _{}Class FN0{Val $5:Int ;}Class lS:Uu9{$342(){}Destructor (){Val _8:Float ;} }Class P:_{Constructor (){} }Class ___:p_{Val _g,$2S,_:Array [Array [Array [Boolean ,0B1],0X45],447685_9_7];Destructor (){} }Class _{Var ___3,$0:Array [Array [Array [Array [Array [String ,0b1],0xBF],07],014],02];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1071))

    def test_1072(self):
        input = '''Class __{Var _,$sM,$_,_:M;Val z,$a6:a;_(y:m;_k:Array [Array [Int ,1_1],0b1];_,_,Y1_:_h){Val _:Array [String ,3];}Constructor (Lm_,_,_:_){} }Class _0_:a{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1072))

    def test_1073(self):
        input = '''Class r879{Val $_,$2o:Array [Array [Int ,0B100011],30];}Class _6{Var _4,x,$P,_:Array [Array [String ,0X4B],9_6_39_2];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1073))

    def test_1074(self):
        input = '''Class X:__{Var IL_G_yn,__,$Yau:Array [Array [Int ,0x5A],0b10_0];Var $_i:_;}Class D:y_{}Class Q:_{X(F_p9:Float ;__Xi:Float ;_,_G,N5,Rm,_5O,c:y1){Continue ;}Var $_:Array [Array [Array [Boolean ,48],48],027];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1074))

    def test_1075(self):
        input = '''Class r_{Constructor (_:Array [Array [Array [Float ,2],0x5],0B1];v,_:Boolean ){Var _:Array [Boolean ,0B1100010];}q(I:Array [Boolean ,0b1111];GE:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1075))

    def test_1076(self):
        input = '''Class _99{$_8(__L,_P:_;Ot1,p_,_b:String ;_:Boolean ;_:Array [Array [String ,72],0b10_1];_:RI8_){V::$_H();}Destructor (){Var E:Array [Float ,0X2];{Break ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1076))

    def test_1077(self):
        input = '''Class s{}Class y_{}Class Z2_{Val $J,$g5,$2:A;Constructor (){Return ;} }Class _2{Destructor (){}Val D69:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1077))

    def test_1078(self):
        input = '''Class H{$y(_1,I6,_1_Q_,__,_73:Array [Array [String ,4],0X1_DB];_,_:String ;o_,q_8_,_,wk_B,B__,__,_,_,_,_Lb_2U:Float ;_E:Array [Array [Array [Int ,0b110],027],027]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1078))

    def test_1079(self):
        input = '''Class _0G3343o8_{}Class o:_{}Class _:t{}Class _:_hy1w{}Class K:_b{Val $8__Q_,g_:Array [Int ,060];Var _:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1079))

    def test_1080(self):
        input = '''Class _:_{Val __:Array [Array [Boolean ,0x4B],0XD_16];Var $1:Array [Array [Array [Array [Int ,0130],78],78],03];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1080))

    def test_1081(self):
        input = '''Class _:s{Destructor (){}Destructor (){_::$e_S();}Constructor (_:String ){Continue ;}Destructor (){}Val $6_6:Float ;}Class E:_____4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1081))

    def test_1082(self):
        input = '''Class _:FR{}Class c2ML:_{Var $_N:Int ;_Q2__(_:Float ;_:Array [Int ,051]){}Constructor (){}Var _:_1;$q(){} }Class _{}Class _:D7{}Class l{}Class kI{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1082))

    def test_1083(self):
        input = '''Class _:_{Constructor (m,_,_2_:Array [Array [Array [Int ,61],0X1E],0b1];YG_55:String ;u:Array [Array [Array [Boolean ,0416_515],0b1010],61];a,_x:String ;K6:Array [Array [Array [Array [String ,0b1010],61],0B1_0_0001],0x37]){Continue ;}Destructor (){}Val i,_j4:Array [Array [Float ,61],0B111];Val eE,$q,_,$_:h;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1083))

    def test_1084(self):
        input = '''Class _:_{Constructor (_2_,k,_:String ;_:Int ;uz,_X,X:Boolean ;_,k:y_;w,_Z,x,fD99,W,o1H:_5){Return ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1084))

    def test_1085(self):
        input = '''Class _1{Val Y:Float ;$3E(_,_,_,_:_w_;C:Array [String ,01_4];____40:Array [Float ,0x44];l8,VQm,_3_E:Array [Array [Array [Array [Array [Array [Boolean ,0x44],046_0],0x44],02_3],91],0XE]){Break ;Continue ;}Destructor (){l::$_();Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1085))

    def test_1086(self):
        input = '''Class _xfr:Z{Destructor (){Val _:String ;}Val J1___,_,$f6MU,$DV,$_F_:String ;}Class t{Var n,$1r,pH:Array [Array [Boolean ,0xF],11];$5(_:Array [Array [String ,11],05]){}Var _U:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1086))

    def test_1087(self):
        input = '''Class D{Constructor (_,o_25,l_,U,N4P:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,6],0XA_1],0x55],12],19],0x55],0B10],7],0xC],043],027];_6:Float ){} }Class _{$i(W:Array [String ,6];K_:Array [Int ,0b1011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1087))

    def test_1088(self):
        input = '''Class y:y{Destructor (){Break ;Var _,U,u:z;}Destructor (){} }Class _1:_B{$9_(_:Array [Array [Int ,45],06];q3,_:C){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1088))

    def test_1089(self):
        input = '''Class _3:_9{$65(__QO,h,z,_,_:Boolean ){ {Continue ;} }}Class _3:W{v(o8,c,_6:Boolean ;u,p,___l:Float ;l_:_2_;_,_36,rr05,_53,_z5:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1089))

    def test_1090(self):
        input = '''Class CQ:G_P{Constructor (P:Array [Array [Array [Array [Boolean ,0X22],0b11111],037],0X22]){Continue ;}Val L:__7_;}Class w{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1090))

    def test_1091(self):
        input = '''Class _:v__{}Class _3:L{Destructor (){}$1(_,_:Float ;_0:Int ;CnhS:Array [Array [Array [Array [Array [String ,0b11],0b10],0B101010],0121],9];_0__,H:m_c_9){p::$g.e();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1091))

    def test_1092(self):
        input = '''Class _X4{}Class ___:d3E{Destructor (){}Destructor (){Val _6g,__Y,I2:Array [Array [String ,5_5],87];} }Class e__S{}Class _:_3Jb8{Var $_8:o3;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1092))

    def test_1093(self):
        input = '''Class a{}Class _:yF71__{Yq(O1:Array [Float ,0b111000];_W_:Array [Int ,02]){}w(_4:Array [Array [Array [Array [Array [String ,57],0X11],4],57],4_5];sGba:Array [Float ,0B1001010]){}Constructor (yH:Array [Array [Int ,0x9],0b111000]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1093))

    def test_1094(self):
        input = '''Class _4:P9_6{q(_:Array [Array [Float ,43],0x27]){}Destructor (){} }Class ___{_(){Break ;} }Class _{Var _:Array [Float ,06];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1094))

    def test_1095(self):
        input = '''Class _{__pp(_:Array [Array [Float ,66],02_7_1_5_0]){} }Class _0{_(f_67N_tJ__I,d:Float ;E3_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0b1011111],0b1011111],05],07],012],0b1011111],012],01];Jx:Array [Array [Float ,0b1],012];u:Array [String ,02]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1095))

    def test_1096(self):
        input = '''Class _{Constructor (b:Array [Array [Array [Array [Array [Float ,0X67],0xF],0b1_1],02],0XC1]){} }Class _9oSd:N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1096))

    def test_1097(self):
        input = '''Class V_8{Constructor (C:Array [Array [Float ,82],03];_L_d:Array [Float ,82];_:Array [Array [String ,07],0b1000011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1097))

    def test_1098(self):
        input = '''Class _{Val $_,__,$2:Array [Array [Array [Array [String ,0B1_111],0x3],0x6],8_76_2];$5(i:Float ;m:Float ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1098))

    def test_1099(self):
        input = '''Class v__:_{$c(n_,_:String ){} }Class _M{Val _,_I_eI_,$_,$y4__,$_0o_:__J;Destructor (){} }Class D:ZN{}Class f:z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1099))

    def test_1100(self):
        input = '''Class __:p_{}Class __0_:_{}Class __523t{Constructor (){}Val $_rzU:_;}Class _zQ{Constructor (_e:_;q:Boolean ;_,o,__,z,bA,x,F_,_f,a,B,_:_3_;_:Array [Boolean ,62];s,_oP:Array [Array [Array [Array [Array [Float ,07],0xD_9CA],0X46],3],0113];_:String ){Var K30:Array [Array [Array [Array [Int ,0X1_0_1_9_1D7_5_7],0B1_01],0B101101],0x60];}Destructor (){} }Class w{Val $n:M7;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1100))

    def test_1101(self):
        input = '''Class X{}Class _{Val o:Array [Boolean ,1_70];}Class y:j{Constructor (ox_,Xvk,_,_O,j,l8:_){Continue ;}Constructor (V,_:_){} }Class __as{}Class Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1101))

    def test_1102(self):
        input = '''Class _:NC{Constructor (A,_F_V_,_m,___,_iZ_,t,_8A,_S,K,F3:Boolean ){}Destructor (){}Z3vf_(_,S4_,_uK,P_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1102))

    def test_1103(self):
        input = '''Class M{Constructor (){}Var Z_I:Array [String ,0b111000];Val e__:j3;Val Y:Array [Int ,0xD];j(_3,q_4l_,t,y0y,_,b_,_,y:Float ;u:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1103))

    def test_1104(self):
        input = '''Class _{Val $1:Array [Array [Array [Int ,0B1_10],8],0x5B];}Class l_:h3{}Class I_:H{_(){}Val $P:J_h_p;Destructor (){Break ;}Constructor (__8:Array [Float ,8]){}Var $3,B:C;}Class r_8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1104))

    def test_1105(self):
        input = '''Class m__:h{Var _,$_,_:_;Constructor (_:Array [Int ,0B100110]){}v(X9:r){}Constructor (){} }Class _{Val Pz_:Float ;}Class _0F3:piS{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1105))

    def test_1106(self):
        input = '''Class N7_90:_{Var Y_L_:_;f_4(H005b:Array [Array [Int ,0b1],51];_,T0:_;HK:Array [Array [Boolean ,022],022];_,J,E,_:Boolean ){} }Class e_V2:a_{Constructor (hzb_:Array [Float ,0B10101]){}_F(){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1106))

    def test_1107(self):
        input = '''Class Y_:_{}Class _6_l{Val dI,$_:Array [Array [Array [Array [String ,65],0x1_29],0b1_01],024];}Class J_1:_{}Class _{}Class _5:S_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1107))

    def test_1108(self):
        input = '''Class O{$7___(){_::$_();Val p5,Sj:Array [Array [Boolean ,0B1],045];}Var __,$_m,$0w_2,$q_F:_R;__7M679__(_:Array [Array [Float ,0x9],69]){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1108))

    def test_1109(self):
        input = '''Class __1_:_{}Class p:Vj_Q4YT{N(_,_,_:Int ){}Var k25,_x9p,Oa,s,$8:Boolean ;}Class P{}Class P:P_{Var _:Array [String ,0XD_17_9];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1109))

    def test_1110(self):
        input = '''Class Z:__{Constructor (){Return ;}Val c8,oN,U_8,l,$_,m8,$9,_1,g9,KW5e,b:Array [String ,7];Val $_730T__,_,_U_:Array [Array [Array [Array [Array [Array [Int ,0B10],4],2_8],58],057],07];_(){}$S9(h_,_m5A5,L:Int ;x:Array [Array [String ,0X4],0b1];j,V,_s:__97p66){}Val _,$d,_,_,$_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1110))

    def test_1111(self):
        input = '''Class w:_{}Class a{}Class ___{Constructor (_G9_B5_gR:Float ;U:Array [Array [Boolean ,0X9],1_1_5];_i,___D87:Array [Array [Array [Array [Array [Int ,0B11101],0b110_1],0X1C],0b1],0B11101]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1111))

    def test_1112(self):
        input = '''Class g:___j{Val $5Z:Int ;}Class n_:__16{_(o:_4818_K;T,Z,_03F,_:_3Iy_;_,___,_6,_g,Q:Int ;_s7,__:Int ;_N:Array [Array [String ,07],0b10];A__gN:Q){}t_l(__:_1;_L,_,n:Float ){ {Break ;}{}Return ;}Destructor (){Val i_:Int ;}Constructor (){Continue ;}Val Zf4gQ_,M1:Boolean ;}Class d{Destructor (){} }Class _:J__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1112))

    def test_1113(self):
        input = '''Class a_W{Val $h7E_5,$6J,$__,$_:Int ;}Class _{Constructor (_:Array [Int ,0B10_0];_:Array [Array [String ,0X9],0134];I,_:Array [String ,0X53];r_O:String ;__,_,_:Int ){} }Class K{}Class _hs{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1113))

    def test_1114(self):
        input = '''Class _15o:_1{}Class _re_:_3{}Class I{_(_:String ){}Val _45:String ;Val _4s_:Float ;}Class s{Var $_:Boolean ;Destructor (){}Var T_,$3:Q_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1114))

    def test_1115(self):
        input = '''Class _s{Val $_3:Array [Int ,0x11];Constructor (WQ_,_:Int ;_0z_:Boolean ){} }Class w9:V{Constructor (T4:H7;sz8TJ1J,h,_4:__;_0:Int ){}Val g:Array [String ,06];}Class V:S{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1115))

    def test_1116(self):
        input = '''Class V1_L:_{Constructor (_,Y,A:Boolean ;O__5:Array [String ,8_7];BN0__v,z,_5,_:String ;E:Boolean ;o:String ;_,__:_Fi4;H,P:Array [Boolean ,0x53];N:nD){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1116))

    def test_1117(self):
        input = '''Class c2{}Class _:_2{Constructor (_,__0:Boolean ;__,P,H__,Dg_,E53:String ;R:Boolean ;_:Boolean ;X:K){}$6(){}Destructor (){}_6(W,I,r__:N){ {Break ;}Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1117))

    def test_1118(self):
        input = '''Class H{}Class T{Var $s_:Array [Array [Array [Array [Float ,05],0B1_01111110_0],0b1],20];Constructor (s:String ){} }Class _{Destructor (){}_4(){Break ;}Destructor (){}Var _j,$_2:Array [Array [Array [Array [Array [Int ,0b111010],0x6],6_7],01],0B101000];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1118))

    def test_1119(self):
        input = '''Class _2_:_{}Class psa:_{$0B(){}Var M38kh6pb,XG_,$w,__Y72__H:Array [Array [Array [Float ,24],0x6],24];u(_:H0p;M,t:Array [Array [Array [Array [Boolean ,052],0B1001101],052],0xB_3]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1119))

    def test_1120(self):
        input = '''Class v_:__{}Class SQ:_9{$_(s2:_;__,__:String ;V:_;Z_,_6J,z:_m;_8_:_;_6:td_u_;e5,J,__:Boolean ){Var _,c7,_5:Boolean ;}Var f_,$K,h_,K5,_,$68:Array [Float ,8];_(k:Array [Int ,0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1120))

    def test_1121(self):
        input = '''Class ___{Constructor (_16,gE0:_;Gi_u:Boolean ;_1y:Array [Int ,8];__9,H,g_R,_:j1){}Destructor (){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1121))

    def test_1122(self):
        input = '''Class _{}Class _:_h_t{}Class i4_29:P{}Class s{Constructor (R,r:Array [Array [Array [Boolean ,8_2],0B101101],05];p_n:_;_84:_4;q___zD4_:_5C){ {Break ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1122))

    def test_1123(self):
        input = '''Class _{}Class __:_V{Destructor (){} }Class _:_6{$1816n(){}Var $_Vgm5,Q:Array [Array [Array [Array [Array [Array [Array [String ,1_3_1],0112],0xA],0X1E],0B101],0x6_192],0112];Constructor (x3G_u:cW;_,B___,v,_6:___){ {}Var _iRb_u:X0__;}Constructor (){Continue ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1123))

    def test_1124(self):
        input = '''Class _:_J{Var $8V,$_:Array [Array [Array [Array [Array [Array [Array [Array [String ,0116],1],0X4_D],37],0b1],0116],07],37];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1124))

    def test_1125(self):
        input = '''Class __{}Class p{l(){Continue ;} }Class O2:g{W_(p4_,_:Array [String ,0X4A];__:Array [Array [Array [String ,0130],0b1],0b11010];_:Array [Int ,0130];A:Array [Int ,0X8]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1125))

    def test_1126(self):
        input = '''Class _{}Class _m:__{}Class r_O78:M{Constructor (){Break ;Continue ;} }Class m:_{}Class zk{Var e,$_,_K1__0r_,___3,$0V,_5,$_:n_X___;Var w,O,$__5T_,$_:V4eK__2_s;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1126))

    def test_1127(self):
        input = '''Class _{Constructor (_:_;_Y:x;_:Array [String ,064]){Var q:Array [Array [Array [Int ,0x10],0B1010100],0x1];}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1127))

    def test_1128(self):
        input = '''Class a_W__{$80(_0,__r:Array [Array [Array [Float ,0B1010011],0x48],0b1];_,_:g){} }Class L3_z__P:_8{}Class i{Constructor (){}b7_(_4WA6,_:Float ;_79n,__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,1_6],0B1010011],0x48],0136],0136],0136],9],05],07];_,_:String ){}M(z,_4_w13__,M,A:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1128))

    def test_1129(self):
        input = '''Class M:C{}Class _:L{Var $5,_,_l_,$a:Boolean ;Constructor (_68I6,D_:Float ;__,ar:_){}$16(){Val G,n_1:Float ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1129))

    def test_1130(self):
        input = '''Class n{Val $_,a,$3:Array [Array [Array [Array [Array [Array [Boolean ,48],02220_3],06_52],5],0x1E],0B1001101];}Class H{Val ___3U,_2,$75:Array [Array [Array [Int ,0b110],0B1_0],4_1_6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1130))

    def test_1131(self):
        input = '''Class sY{}Class S{Constructor (){} }Class __:I5{}Class X:Q{Val _:Array [Array [Array [Array [Array [Array [Float ,0101],0X40],0x48],0b1001011],0b1001011],035];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1131))

    def test_1132(self):
        input = '''Class _{$U___(B332Y:_){ {} }Var ______,l:TN3_e;}Class _3_{Destructor (){} }Class _:_{Constructor (){}Val Z,O:String ;}Class p73484_61{Val _Z:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1132))

    def test_1133(self):
        input = '''Class _2:fj3V{Var $5:Float ;Constructor (Ya:Array [Array [Array [Boolean ,0b1],074],0x36];_:eG_;m,_:Array [String ,0B111110]){}Val $6vt,$bt3:Array [Array [Int ,5_8_3_07_5],074];}Class _:f{}Class _i:_{}Class _{Constructor (){}Constructor (x_:Array [Array [Boolean ,2],42]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1133))

    def test_1134(self):
        input = '''Class Y:x{Var $__,__:_;Constructor (_Pp,b,r1:_;v,x,K_Q,H:Array [Array [Array [Int ,0B1100100],44],01]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1134))

    def test_1135(self):
        input = '''Class s2:__{Constructor (){Continue ;}Var _,$H,$6,_,oO:Int ;Var $bw:Int ;Val K:Array [Array [Array [Array [Int ,1_1],034],5],05_2_77];Destructor (){}y(){} }Class _3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1135))

    def test_1136(self):
        input = '''Class _{Var $Pv_,$2M_:Array [Array [String ,0x6_B],0X5F];}Class _:v3{$_(_:_;_:Array [String ,0b11_0];h_,q:String ){Var qoM:Float ;Val _:Array [Boolean ,0b1];}Constructor (){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1136))

    def test_1137(self):
        input = '''Class L_:O_F96{}Class _:_{}Class ih{}Class Z{}Class _{}Class S:h8_{Constructor (){Break ;}Var $m:Array [Array [Boolean ,0b1_0_1],0x4E];}Class ___r:x{Constructor (_:_;F5,___,_,_:Boolean ;J:Array [Boolean ,0425_5]){}Val M:Boolean ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1137))

    def test_1138(self):
        input = '''Class _:_{Val $d5C,_c4:Array [Array [Array [Array [Float ,05],0B101],0B1],80_3];}Class _{$_(){} }Class c:_681{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1138))

    def test_1139(self):
        input = '''Class __U{Val $8_9,i_A6HQ9M_0_38__269x,$R743:Array [Array [Array [Float ,0b111110],0X9],0b1];}Class _{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1139))

    def test_1140(self):
        input = '''Class j_u9{$8(_3,_:x_){} }Class _:_{Var $1:Array [Array [String ,81],04];Constructor (K4_,D,_:Array [String ,81]){} }Class _447{}Class _:_{}Class R:_{}Class i:_YI{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1140))

    def test_1141(self):
        input = '''Class _1j:_{Constructor (){}Val c:Array [Array [Int ,0X48],0x8_B];}Class _:K_4_{}Class __:_1e{Var _,$_,P:__1_;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1141))

    def test_1142(self):
        input = '''Class _97:baS{}Class O{Constructor (j,_,_no__4_:Int ;_,_:Array [Boolean ,0B1101];_:Vu;_,G:Float ;C881__,_,_7I:B){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1142))

    def test_1143(self):
        input = '''Class _e5:A0{$_33_2(){}Constructor (){ {}Break ;e_6::$_();} }Class T:_{Val __,d9:_;Constructor (a,KL,_:String ){}$6_(){Return ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1143))

    def test_1144(self):
        input = '''Class _:_{Var $L:Array [Array [Float ,0X62B],02_417_4];Constructor (o:_;QKhtN_:Array [Boolean ,05];T_,_,OX,B:Array [Boolean ,0xF]){} }Class QzL:R5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1144))

    def test_1145(self):
        input = '''Class _31_:_{}Class K:U_M{Val $_:Float ;}Class V:P9{Constructor (f,_L:Array [Array [Boolean ,0B100110],0B100110]){Var h,Um_c,_1:Array [Array [Array [Float ,28],0X2],0x1B];} }Class U:_{Var _,LA17O8:Float ;Var $__:Array [String ,0B1_10_0];Var Z,$_h2:j;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1145))

    def test_1146(self):
        input = '''Class PYe_1h:e2{Var $7_,__:__;Var _:Array [Array [Array [Int ,0x9],5],0B1010001];}Class _:_A230{}Class g:Z{P(__,D:Float ){}Var $_,_Bmh,_4:_;Destructor (){Return ;}Var _hI:Array [Boolean ,0b11_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1146))

    def test_1147(self):
        input = '''Class L:_6{}Class _84_:C{_6h(){}Constructor (_:String ;_,X0v,B_O:Array [String ,37]){ {} }Constructor (_72:String ){_l::$8p();Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1147))

    def test_1148(self):
        input = '''Class _{Var zD3k1:Array [Array [Array [Int ,0102],0B1000011],0102];Constructor (_8__:Z){}Val $_h,$_,__:String ;}Class C{Val o_,$x:Array [Array [String ,0b1_1],0x5A];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1148))

    def test_1149(self):
        input = '''Class s{Constructor (I,M__,___:U9){}Val $LE8,$__,Ga:Int ;Constructor (_0:Array [Array [Float ,49],0B111101];L:_){}Constructor (){y::$zI();} }Class A{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1149))

    def test_1150(self):
        input = '''Class _:_m{Constructor (){Break ;}$X_(_:_;_8_,q:_7v4;xG_1a2:Float ;n_d:Boolean ;kj,T,Y___,_,j_:Boolean ;T:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1150))

    def test_1151(self):
        input = '''Class c{Var fi__v:G5;}Class s{Constructor (B__8x,l3:Array [Array [Array [Array [Array [String ,0B100011],0X13],0b1010100],44],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1151))

    def test_1152(self):
        input = '''Class _A1{Var $M:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0XC2],0xF_4],0X41],0B1010000],46],0B1010000],5],8_8];}Class b_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1152))

    def test_1153(self):
        input = '''Class _p{_(_,__Z:Boolean ;R:Boolean ;Is_:_s){Return ;}Var $__7:Boolean ;Val $J,_:Int ;Var $D,o8_0__C,_:Array [Array [Array [Array [Array [Array [Array [Int ,01],032],1],0X50],0x10],54],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1153))

    def test_1154(self):
        input = '''Class _:J{Constructor (_J_:_f){Continue ;}Constructor (J_9D:W29973){} }Class mR:_{Val $61:Array [Boolean ,2];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1154))

    def test_1155(self):
        input = '''Class _:W__{Val m,D:Int ;}Class p__S_{$5(){}Var $a7:kx541N;Constructor (_,_,_,_4E2,_6_,_2UP__R2,Y,_0_9,_7_,v,e1:GpD){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1155))

    def test_1156(self):
        input = '''Class _V4:I{Constructor (YX_,_U:Int ;S,O:Int ){Val M,_05_,d_:Float ;}Val L,$_:Array [Float ,0133];Val J,$x,$Cv:Array [Boolean ,1_3];}Class d{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1156))

    def test_1157(self):
        input = '''Class t:t0{M(_:Float ){Var _,__,_:Array [Int ,0b1];} }Class S_{$fDs_z(){} }Class _t:I{_(__,_,kG,T_i2,R,_jR:Array [Array [Boolean ,0B1001011],65532]){Val _7_5:Int ;} }Class k60{Var _q:Q4;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1157))

    def test_1158(self):
        input = '''Class w5:u_{Var r_,$1Y:Array [Array [Int ,0x4_A_6_4_7],62];}Class _05{}Class A_{}Class x:ut{}Class T:__{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1158))

    def test_1159(self):
        input = '''Class _:b63_6gH2_r{$0(F:Array [Array [Array [Array [Array [Float ,0144],0X6_F],24],06_7],1]){}$EQ___6(j,_752o:Array [Boolean ,0B11];E:o7){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1159))

    def test_1160(self):
        input = '''Class _{Constructor (_:x_;_,SG:String ){} }Class _{Destructor (){}jVCT(Op1_,bk:Boolean ;mg_ic:__;_237c_:I3){} }Class U_YU_{$_O(Q,pHL,g_Q_:Float ;Tr:Array [Array [String ,2],0123]){}Constructor (H:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1160))

    def test_1161(self):
        input = '''Class J_K4{Constructor (_,_:Array [Array [Array [Float ,0B1],79],02_1];Z_I:Array [Boolean ,07]){}Constructor (){} }Class _:_{$O(sn,__:K4_;_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1161))

    def test_1162(self):
        input = '''Class x6:im_64J_{}Class y:_{$UL9(__q8:Float ){}Var $I,$e:Array [Array [Array [Array [Array [String ,9],0B1],0b1011010],12],05];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1162))

    def test_1163(self):
        input = '''Class _:_t{Destructor (){}Var _:Int ;}Class I{Destructor (){} }Class R:R{}Class _6{Val v6t:Array [Array [Boolean ,0B11011],35];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1163))

    def test_1164(self):
        input = '''Class h8Il_3:_{Destructor (){}H9_(PJn,ub,_l:Float ;I:Array [Float ,0B1011111];_,__c_2f_W,_,y,_1__:X){}Val $p,$d,_1,$_:Array [Array [Array [Array [Float ,0X1B],0X1B],0b10],054];}Class u_D:U5{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1164))

    def test_1165(self):
        input = '''Class I_z:__0_{Destructor (){}Var b,_p,$_52:Array [Array [Array [Int ,0x9_A],067],7];Var $B,y,__fe2,h,$3,L8,_:Array [Float ,067];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1165))

    def test_1166(self):
        input = '''Class Kr_O:_{Val $_:a;Constructor (__,_,q:_;h,_9j:String ;Q:String ;D,_:Float ;AZ__,R,_:Array [String ,0XC];I,n4:Array [String ,070];__:Boolean ){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1166))

    def test_1167(self):
        input = '''Class H:___{Val r,$nQ,$3,a,$o8rw,$w,r,_,_,g_,k0eD:Array [Array [Array [Array [String ,0b1_1],0xA_9],0B1],0xF];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1167))

    def test_1168(self):
        input = '''Class j7_:__{}Class b{Destructor (){Break ;}Constructor (){}v(_z:Int ;_,r:Int ;__0:Boolean ){Continue ;}Constructor (B,Y,_,_zmKY:J;V2:_){}Var $_:String ;$_(q:Array [Float ,0125]){} }Class AT79:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1168))

    def test_1169(self):
        input = '''Class _{Constructor (_:Int ;___,_w,_4pH:Array [String ,0X2];_jJ,L2,_oa:Array [Int ,0B101010]){} }Class t:_{Destructor (){}Val $S,u:I;}Class gW{}Class V_V:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1169))

    def test_1170(self):
        input = '''Class o{$33(g0,_V,_,_,V:h;_Q_X,K__:Array [Boolean ,033];_,_:_){}Val $__,$5,__,$o7,_:Array [Array [Int ,97],4_6_73_6_1];}Class Cs{Constructor (_,_,__:Array [String ,0x59_C]){Continue ;{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1170))

    def test_1171(self):
        input = '''Class __:s{$n(_:w_){}$_80__r0(){}Destructor (){}Ab_(){} }Class _:_I{}Class _{__(_2:String ){ {Continue ;} }}Class _Rg{}Class _p4:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1171))

    def test_1172(self):
        input = '''Class _{Destructor (){}Val _,__,i5,_p_:K_G;Constructor (c:Array [Boolean ,0b101100];_4,T9r_2M701k,_:Float ;bA,Hr,_:Array [Float ,0x60];LF__:String ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1172))

    def test_1173(self):
        input = '''Class __{}Class o_:v{}Class J{}Class __O:I3{Val $3,$r:Array [Array [Array [Array [Boolean ,0X3],24],0x2C],01];Val $__:Int ;}Class _:j560pZx_3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1173))

    def test_1174(self):
        input = '''Class S:mo{Var $s,$ZJ,$p:_N;Val $C,_,_:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,7_8],05_36],07],0b1],0B11101],030],9],0137];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1174))

    def test_1175(self):
        input = '''Class t7_q3U{Constructor (){}$__U(){}Var X82_,$_6,$_HgR_,$a,$N,_,$D4As90_,$_39:Array [Array [Array [Boolean ,4_87],0b1001100],0b1];}Class _v_0:L_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1175))

    def test_1176(self):
        input = '''Class g:us{Val $V5,_,__,Il4n:String ;Var $__,$sm,M439,C_2:z;$JU(_:d;c6s,r_:D_;Qu:Array [Boolean ,12];_QU5,_21,p2,_:Array [Float ,02]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1176))

    def test_1177(self):
        input = '''Class hP__:_{}Class A{}Class _:W{}Class a94:_{$3(p0c,N:_;g:Boolean ;u:Array [Array [Boolean ,8],0b11];_,__,_,K___R,_,a,_:___){} }Class _6:_4{}Class _{}Class F{}Class Gw_:_{Val f:_3;Val j:Array [Array [String ,0x2E],0B100101];Val $O86c:Float ;}Class v9:_T{}Class TD7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1177))

    def test_1178(self):
        input = '''Class L_R:N_{}Class _76_:I4V{Var _,_,_:Array [Array [Array [Array [Array [Float ,0B111101],036_22_2_0],99],0B1],99];}Class _{}Class a5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1178))

    def test_1179(self):
        input = '''Class V{}Class _0_I:_{Constructor (){} }Class __{$9(T:Float ){Continue ;}D(_,Qq:Iy;z:p){}$7(){}Val $_,Z:String ;Val $6_D,_,b:ML;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1179))

    def test_1180(self):
        input = '''Class k{Var rs7_:Int ;Val $K:Float ;Constructor (_,_:Array [Array [String ,0B1],0XF];_:Array [Boolean ,0xD];_,_,_20_1_,w:Array [Boolean ,025]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1180))

    def test_1181(self):
        input = '''Class N4:l09{}Class _Fh:w_{}Class mp{}Class _:z{Var _C__,t,t5,r1_,$08_,$_,$_n1n:Int ;Var $_:Array [Int ,0x19];}Class J:_m62{Val n:Array [Float ,38];Destructor (){} }Class Lu{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1181))

    def test_1182(self):
        input = '''Class M{}Class _Y0:X{}Class i:S{v(_Ej_p:_;_:zz){}Constructor (FZu_m1i__7:Array [String ,066];__:Float ){} }Class i_TY_:_{Destructor (){}Val $t,_x,$_:V;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1182))

    def test_1183(self):
        input = '''Class __K{$_V(_,_,N,_5,l_:__9){}Var $0_F,$_z,$0_:Z2;Var $5:Boolean ;Val $4,G4n,h:Array [Array [String ,03],03];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1183))

    def test_1184(self):
        input = '''Class ZC_{Val _:Array [Array [Array [Array [Array [Array [Int ,0b1_01_1],59],0x9E],0X39],98],0X39];Val _i_7rJN,$_,$9,$_,$__:Array [Array [Array [Boolean ,0x9],0X986_F],7_0];Constructor (){} }Class i:qZ{}Class N:_{A(V:C;__,_c:Int ;M0I:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1184))

    def test_1185(self):
        input = '''Class I_{Destructor (){}Var p,$5_:Array [Boolean ,0x346];}Class R{}Class __{Constructor (Oj:_){} }Class _q:__e{}Class j_:_8{}Class _1__i{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1185))

    def test_1186(self):
        input = '''Class _:F{Constructor (){}Constructor (J0_,i_Y_7,mF_,_,K:String ;__:Array [Array [Array [Array [Array [Array [Boolean ,0X9],7],39],0x9],0b1_0],0X7F50_F_C_E];_:X){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1186))

    def test_1187(self):
        input = '''Class b:_{Constructor (_V,A,_2:Array [Array [Float ,01],0122];q:Array [Array [Int ,0B11],0B1];C4_:String ;n07T885B:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1187))

    def test_1188(self):
        input = '''Class v_3_:_{$_91(Yj:Array [Array [Array [Array [String ,8],05],012],0xDA3];_0t:Array [Array [Array [Array [Int ,06],0274_5],07],0b1011110];G_4:String ){} }Class f{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1188))

    def test_1189(self):
        input = '''Class f4{$1Xy(a:Array [Int ,0x46];_,_,A6Eo_5,N,_,_:Array [String ,0b110100];F2_,z4,X,___,_,t:Array [Array [Float ,9_2770],071_4_0]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1189))

    def test_1190(self):
        input = '''Class d1:_7_{}Class _:_83_{Var $8__,$9:String ;Destructor (){}Var $0p7c_,$8,$5,R,U_5:Float ;Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1190))

    def test_1191(self):
        input = '''Class F:Q{Constructor (){}Constructor (_,A2:_4){} }Class ____e{}Class _v5__5{Constructor (_:_){Break ;} }Class b:T{Val $_:_;Var $u1:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1191))

    def test_1192(self):
        input = '''Class _{}Class Xg:_1{}Class _{}Class _:_{}Class __LQ0{}Class n{Var _:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0143],0x1],4],0B1_010],0B11_01],8],0X53],0B10],0112];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1192))

    def test_1193(self):
        input = '''Class __{Constructor (_12,_,_6_3_:Array [Int ,01];R,l:Int ;Q:Boolean ;c:Array [Array [Array [Float ,0X53],0b10_1],0B1100000]){} }Class P0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1193))

    def test_1194(self):
        input = '''Class B:_{}Class Z_O4{Val $Z4,$9jP,j9,$__:Array [Array [Array [Array [Array [Array [Array [String ,032],0b1011100],0B111],0B11],0x3_64],0B1010101],45];}Class _049:_8_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1194))

    def test_1195(self):
        input = '''Class _:i6{Q_9_(){} }Class r_{}Class _:Z_K{Constructor (){}Var $_r,_p_Q_ZA__:Array [Array [Array [Boolean ,0b1010000],89],0b1010000];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1195))

    def test_1196(self):
        input = '''Class _8{}Class L5_N:M0{Constructor (_:E){}Val $1:Boolean ;Constructor (){}Destructor (){}Constructor (_,_:Array [Int ,0b1];Q_8,Z,__1786:Int ;R7:___U){Return ;}Var $_:B;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1196))

    def test_1197(self):
        input = '''Class JGMm:_{Constructor (){}Val $_8,$39,$b,$2___,__,$_,_m,__,$3B,$9:Array [Boolean ,0X36];J8(){} }Class _T{}Class _:_{$_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1197))

    def test_1198(self):
        input = '''Class _o__7_{}Class x77_7{}Class _:u{}Class _U{}Class __6DMvm:yS3{}Class M8B:_dkF{}Class _6__:_{}Class _:_UU{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1198))

    def test_1199(self):
        input = '''Class G0{Constructor (q__gf_2,F_,U,_:Array [Array [Float ,0b11010],04_6_6];_,__,_,_Jd,_:Array [Array [Array [Float ,1],066],0b1];hW:Array [Array [Float ,1_17],0X33]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1199))

    def test_1200(self):
        input = '''Class _U:_{}Class _:K68{Constructor (){} }Class K_11{Constructor (){}Constructor (O,_0,v,D:Array [Int ,01_64_0_2];d,K1__:Int ;_,VN,_0,_0_6,k,__:_){} }Class W__6:O{Val $6_R,$3:Int ;Var Q517_2V7,$4:Float ;Val O_8:Array [Array [Int ,01],0B10110];_69(){ {} }}Class _{Val $62,_,$n:Array [Array [Array [Array [Float ,77],8],0b100101],77];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1200))

    def test_1201(self):
        input = '''Class _:o{}Class eV:_gx{_C(G,h:c;_:_y;_,_Oog_:__8O;y3b_:Array [Array [Array [Array [Float ,04],061],061],2963]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1201))

    def test_1202(self):
        input = '''Class _1:abM{$S(_:Int ;__c8jaU_,__:Array [Array [Array [Array [Array [String ,034],041],4],0b1],0b1_0];_O__:Array [String ,034]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1202))

    def test_1203(self):
        input = '''Class _0{Var ___:Array [Float ,047];}Class _:_8{Constructor (){}Constructor (){Break ;}$__(){} }Class _{}Class M_lP{Val u__,$_,$6:W45b;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1203))

    def test_1204(self):
        input = '''Class _{Val $8:Array [Int ,0b10_1];}Class __:_1{Val n_,_90,_,$5_:Boolean ;Destructor (){} }Class t{Var n9_T0:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1204))

    def test_1205(self):
        input = '''Class AT{Destructor (){} }Class n_:w{Val $7U,JW1O,S:Array [Float ,0B1000];}Class _:_8{}Class _{}Class p:_O{}Class S{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1205))

    def test_1206(self):
        input = '''Class __5{}Class B:J_0{}Class _j{}Class _M:_{}Class _C:_{Val $_,$M2_33t_,$_,$_,$Cc9,$sc,K6,_,_l_,$6_,R:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1206))

    def test_1207(self):
        input = '''Class W7:__{AU(){}O(t:Array [Float ,4];C:__bS8;f092:Boolean ;_:Array [Array [Int ,04],0x61];_h_s,_n2,J99:Array [Array [Float ,0B1],0x61];u,Z,_,_0___2:d){}Constructor (I,_:String ){} }Class Z5:___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1207))

    def test_1208(self):
        input = '''Class MO_I{}Class H568{}Class _yV7_:_{Constructor (_2,x,_:Int ;jZP_l,_:A3){Return ;}Constructor (K_,_O86v,EY:Array [Int ,013]){}$_(){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1208))

    def test_1209(self):
        input = '''Class A9:_{}Class X5D:n{Destructor (){}Constructor (_,_f_Z_,t,_:_;cm2,_7,__U_O4:Array [Array [Array [Boolean ,0B1011111],0B1011111],1]){Break ;{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1209))

    def test_1210(self):
        input = '''Class A{$D5(){Break ;}Constructor (_:Array [Array [Float ,0b1100011],0b11];g_j_:_6;_,_,_5,_9:_X;__te,o:z;_235:B__){} }Class _{Constructor (p2,f,__ws:S){}Var ___U_,$_:Array [Int ,03];}Class M{}Class I:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1210))

    def test_1211(self):
        input = '''Class _{}Class _{Var _:Array [Array [Array [String ,034],0b110010],04_63];}Class _:_{Var $_2_,$_:Array [Array [Array [Array [Boolean ,85],0xD],0X95],85];$A(_:Array [Array [Array [Array [Float ,25],0B1011111],02],0b101];_9:Array [String ,0x23];_,r:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1211))

    def test_1212(self):
        input = '''Class __{Constructor (){} }Class cU:_{Var $_92_3,_:Array [Float ,023];Constructor (G_,__:Float ;H:Array [Float ,0XC]){} }Class _7:Lq38_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1212))

    def test_1213(self):
        input = '''Class _vZ{_(_:Array [Array [Array [Boolean ,0102],0b1],0x5C]){} }Class Q_{$g_(N9o,_,a:z;_,_,_,_8,t:HN4;_,B,f,Id:Array [Array [Boolean ,0X39],07];a:Boolean ;_:String ;l,R,z1M:Array [Array [Float ,0b100],0XE];_pC,_D,P,_:Array [Boolean ,0102];_,_:String ;_997:Array [String ,2_86]){} }Class LxJ5:p{}Class __00:Q2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1213))

    def test_1214(self):
        input = '''Class Cs{Var $9:d;}Class _:_{Constructor (_bs_,__:o_i;L1__,P:Array [Float ,06_7_3]){} }Class _:X{}Class _4:_g{Destructor (){} }Class _{$_0(_:String ;X,t1,s,Rc:Array [Array [Float ,21],21];t:Y){} }Class __:__C{}Class _Ph_s:w9{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1214))

    def test_1215(self):
        input = '''Class _{}Class m{$38Dhgb(Ss,_,x_,d,w_f:Int ){Break ;}Val _:Array [Float ,67];$n(Z,_,_C:D;AThrV_2_8:Array [Boolean ,0x30];T__,_8_:M;_,p_,_:D8){Continue ;}Var $m0_:S39h;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1215))

    def test_1216(self):
        input = '''Class Zv_:g{Constructor (_L_,S:_;n:F){}Val $8:j_4M;Constructor (_,_t:Array [Int ,8]){}Val $V,_,_,__,$2:_;Var _:_6e;Val _,$q,_:Array [Int ,0120];}Class _c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1216))

    def test_1217(self):
        input = '''Class __:M4{}Class w:Ay_{Val $Z,$pT:Array [Boolean ,5];}Class __3wf_{}Class g{}Class _1Yr{Constructor (){} }Class j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1217))

    def test_1218(self):
        input = '''Class P7:_7_{}Class _{Val O_:Array [Float ,6];Destructor (){} }Class _3{Val $LUC:String ;Constructor (){Return ;}Destructor (){ {Break ;{} }Val _:Array [Float ,0x21];} }Class _3_5_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1218))

    def test_1219(self):
        input = '''Class Y_:w__{}Class zt0{Var m,J8:_N1_;Constructor (){} }Class __8P:_13{}Class _{Destructor (){Return ;}Val T,_:__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1219))

    def test_1220(self):
        input = '''Class __iy370{Val $__51:Array [Array [Int ,69],0B1_0];}Class _{Constructor (_0_5:q__;_E:___;V,_9,l93_p2_,m_:__){} }Class _:J{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1220))

    def test_1221(self):
        input = '''Class hP{Var $s_,$_,t:String ;Destructor (){}Destructor (){}Val x5,D:_8_;}Class _{}Class _{Destructor (){}u(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1221))

    def test_1222(self):
        input = '''Class _F_:_{Destructor (){}Constructor (_,_f:Array [Array [Array [String ,04_32],9_940],04]){ {} }}Class _0:R5{Destructor (){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1222))

    def test_1223(self):
        input = '''Class _:_{Var _9:Array [Array [Array [Array [Array [Array [Array [Boolean ,0143],8],0b110011],0143],0X2E],2],0b10];Var $P_I3_:_;V(l:ZuT_;H_W,rH,_:Float ;__:Int ;_a,_:_){}Var ip_,_,w_:Array [Array [Float ,2_1],45];Val $6_,$1:Array [Float ,0143];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1223))

    def test_1224(self):
        input = '''Class B:_{Val _0,V_,$20_,j:_;Val r_d,g,m_:Array [Array [Array [Boolean ,35],0b1],042];Constructor (H:Array [Array [Array [Float ,0X57],040_1],042];_:_21){} }Class y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1224))

    def test_1225(self):
        input = '''Class _:x_A4{Var $Y,$_:Boolean ;Destructor (){} }Class kK:m{Destructor (){} }Class j_2_{_(_:_w_){}Val $y0_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1225))

    def test_1226(self):
        input = '''Class M:_{$_14l(){} }Class _{Destructor (){} }Class o_{Destructor (){}_(){} }Class B:bi{}Class _:_N_g9W_R{Var o,_v,a:Array [Int ,0XC_6_9_9_7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1226))

    def test_1227(self):
        input = '''Class ____bT_:X{Val _:Float ;Constructor (ybd_,k_:Array [Int ,0B111000];C3:Array [Float ,076]){Break ;_3__::$_P();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1227))

    def test_1228(self):
        input = '''Class P{F(_,__,_:L;_,__,m,_74,Q__:d;__:Array [String ,0x5D];GC_R,z,I:Int ;C,__,S:Array [Array [Float ,0B1],0105];Cm,_1_,_m,_,_:Float ){Break ;} }Class p{}Class l:H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1228))

    def test_1229(self):
        input = '''Class K_2{}Class t:_b__{}Class d54_2Nk__c_:_{Destructor (){}Var i_,$UP:Array [Array [String ,0103],0x7_4];Val $5:Array [Array [Float ,0xF],4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1229))

    def test_1230(self):
        input = '''Class ____:o1M{u(d,_:R;_,_3:_;z,_:_;N:ZU){} }Class U9_9:t_1_{g(Q:Array [Array [Array [Boolean ,0b1],0b11],051];_,_k:Array [Boolean ,0B1_1_01_00]){} }Class _{Var _6,$5,i,_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1230))

    def test_1231(self):
        input = '''Class q{}Class _2:h__{}Class bK:___{Var _,_:Int ;Destructor (){} }Class Tp{}Class _{Val $_9,Ni,_:Float ;}Class __{Destructor (){Continue ;} }Class i:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1231))

    def test_1232(self):
        input = '''Class _p:_i{}Class B:_{Val $19,n,$___,_,$_,$2km:Array [Int ,0x16];Var $_,$7sq,_,$t,c:Boolean ;Val $3,$C,$_,d9:__;Var $T:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1232))

    def test_1233(self):
        input = '''Class b:_0_{Constructor (i,Y,_Y_,_:Float ;p2:Boolean ;g,r:K;_,_:e4){}$__(__gD_fH,_12,y7,_7,yzMvP_,_,_:_){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1233))

    def test_1234(self):
        input = '''Class y_:g{Val $1,w:WBo;Destructor (){} }Class k4:_{$8(_,_,z,_:Array [Array [String ,0x1_F_2_A],0xE];M___7_p_:Array [Int ,016]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1234))

    def test_1235(self):
        input = '''Class _:i_{}Class pq:_{n(g__4R,_U_,__3,_h,x_9,__O,x,_f,fb:Boolean ){}Constructor (){Break ;}Constructor (_,Ay:v14){ {}Break ;} }Class u_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1235))

    def test_1236(self):
        input = '''Class _{}Class j{Constructor (I7,_,_:String ){Continue ;} }Class KYf_:_7{}Class c__:P{$S(MH9_F,f,_,V_:__){}Val $1d8,_q:String ;Destructor (){}Constructor (_:Array [Array [Boolean ,0XC],0X1];p1:Array [Array [Array [Array [Array [Array [Array [Array [Float ,030],3_9],8],030],2],0b10100],030],030];_DD,_,__:Int ;_y:_;N:_x){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1236))

    def test_1237(self):
        input = '''Class __{Var $w:P;}Class OU:nfv9{}Class __:b{Constructor (y:Array [Array [String ,0x5],07];_,_I,_,p:Array [Float ,06]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1237))

    def test_1238(self):
        input = '''Class __18__:y9H__n{Constructor (){}$1(o,l49I,_:Boolean ;__,_,_5_0w1:v;_:String ;__U_,A:Boolean ;___:String ){}Constructor (){} }Class U{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1238))

    def test_1239(self):
        input = '''Class __:__{Var _4S:String ;Constructor (S8_:Array [Array [Int ,01_50],0xBD7]){} }Class _{Constructor (e:_;M9:Array [Array [Array [Int ,05],0107],46];Xd7____l,_f:Float ;__,Z4,Zr,Ft,bO_:_;tc_:w;_,t_:Array [Boolean ,2_2]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1239))

    def test_1240(self):
        input = '''Class _36_3D{}Class M:__d_{Constructor (_:_;B:Array [Array [Array [Int ,021],0X5A],0B10]){} }Class fP_6{Var C:Array [Boolean ,0B1_11];}Class _i_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1240))

    def test_1241(self):
        input = '''Class _366p{Var $__,$Y_7,$8_,_,$_9:Boolean ;Constructor (){} }Class __I:_P7{$gB_(ar_,__:String ;_:kS_;__:String ){Break ;{} }_i(L__,e,L3q:String ;I5,u_:Array [Array [Boolean ,0340],0x9];S:Int ;u,z,eu:Boolean ){_e::$m._();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1241))

    def test_1242(self):
        input = '''Class _:_i{Constructor (){}Destructor (){}Constructor (J:Array [Boolean ,0XF];x,Rk7,N:Boolean ){} }Class s64{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1242))

    def test_1243(self):
        input = '''Class ____O_kX_:___{Var $_:Array [Boolean ,02];Constructor (_:Ei_7){}b2(__,c_,D,F0:Array [Array [Array [Int ,02],02],02];_,_,_P:Boolean ;gC__4:e;__t,z_Ke7,_A99:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1243))

    def test_1244(self):
        input = '''Class _{Var $Y:Array [Int ,0X5C];$3Y(_,W0,N_k,S,_A,L,s7:Array [Array [Array [Array [Array [Int ,2_308],85],0b1],020],020];__,__:_n;R_:Z_;UD,l:Array [Int ,4];_T:Boolean ){Break ;}Constructor (){}Var $Y__,B__,__,$_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1244))

    def test_1245(self):
        input = '''Class k:__o{Var f:Array [Array [Array [Array [String ,07],0b1001011],4_4],42];Var $4:_;Var $C,$s,$_7:Array [Array [Array [Int ,0x44],0B1_111],22];Val $1:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1245))

    def test_1246(self):
        input = '''Class _p2:k9gg{$_pA(_,A9,_D:_2V_;Bci0,__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,070],8],0X17],3_7],01_2_0_62],83],01_7],014_23_0],07]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1246))

    def test_1247(self):
        input = '''Class _Q6:J_{$k(_:Array [Boolean ,7]){}Constructor (_:B__;__7,__fk__:_;p,_:Array [Array [Array [Float ,41],01],0B11];zF:Boolean ){Continue ;}Constructor (){} }Class M{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1247))

    def test_1248(self):
        input = '''Class ACB7pn4_3p{}Class D08_{}Class M8_2_1KH{$w(M_3_,f,o:Array [Boolean ,032];_kY:KaL){}Destructor (){} }Class B:_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1248))

    def test_1249(self):
        input = '''Class u5:N{O9(__qO,__y,_:Array [Array [Boolean ,051],04_1]){} }Class _:__1{}Class __:_4{Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1249))

    def test_1250(self):
        input = '''Class __{Constructor (){}Var _:Array [Array [Array [Float ,62],075],0b1000001];Destructor (){} }Class zF:R_31{Val __,$32:Int ;}Class z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1250))

    def test_1251(self):
        input = '''Class _122:_8_{Constructor (__:Float ;I,_,r__:Boolean ;__:Array [Array [Array [Boolean ,0b1_0],036],0b11];_,o_L:Int ){}Val D,$_joN:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1251))

    def test_1252(self):
        input = '''Class __:_8{$8_3(_c,_:Array [String ,75];_w6_m:Boolean ;X:I;Z_7BY,r,V:Array [Array [Array [Array [Boolean ,0b1000101],0B10100],0XA],0b1_100110_1];n_:Array [Array [Int ,05],6_0];_3,J_,_,F:Float ;_:G2_;_,__,g,__:String ;_,f,rD:Array [Array [Int ,0x36],75];_,sG_72_D,R_,d:Array [Boolean ,0B10];_:A;C,E3,_,_,_65:Int ;_i:Array [Float ,75];_5:Array [Float ,0123];F,__,K,E:Array [Boolean ,9]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1252))

    def test_1253(self):
        input = '''Class KT_Q:_{}Class _:_{}Class _:ba{Val $p_,r:Int ;}Class U:___{}Class _{Val _M6_g,$_:Array [Array [Array [Float ,0b1011],0XF],2];}Class _{Var _,$6:M;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1253))

    def test_1254(self):
        input = '''Class __:z_E_{Constructor (w4_,_,sM3:Array [Array [Array [String ,0X3_7],071],22];_:Array [Array [Array [Int ,0x97_FFB],05_06],0x1_5];__:Float ;_:String ){Val _N_4,V:W__;}_(HFUhI_276:Array [Array [Array [String ,05],0xB],0X5]){}Constructor (r_,_:_5){} }Class v_:d{Var $H:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1254))

    def test_1255(self):
        input = '''Class _{$4(_,a_8_V_,s:String ){}Val P2_1864P_Z:Array [Array [Array [Int ,057],07],0X48];_(ar,Y,P7y:Y_;_J:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1255))

    def test_1256(self):
        input = '''Class _NZ0:_9e{$6(N_,j,R7A:Array [String ,8];P31I,_,Jb,Q,_,B:Array [Array [Array [Boolean ,0b1_1],6_6],0b1]){Val ___6:Array [Boolean ,8];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1256))

    def test_1257(self):
        input = '''Class N:acm5_{Destructor (){}Constructor (){Continue ;}Val j,$_,M,a3:Array [Boolean ,06];$_(_pB,W:Array [Array [Float ,0X50],0X50];_,I:Float ;_,gE9,B_0d_:Array [Boolean ,03]){}Constructor (_6_L_,_3,V:Float ){} }Class _{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1257))

    def test_1258(self):
        input = '''Class _:_82{S(z860_r,_N_:Float ){}Val $Ig31,$D,$T,$5_,$11,$W__P,U_O,Y5_:a2;$e2_(){}Destructor (){}Val $jY,t,__:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1258))

    def test_1259(self):
        input = '''Class _:___{Constructor (_,_,Y_2,_9_,_XM:String ;g,V2Q,_3,_1,_25,Gh43_7:_){}Var __7_,$_9:Int ;}Class _:E{}Class g_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1259))

    def test_1260(self):
        input = '''Class V__:x{Constructor (){}$2(_,_:Boolean ;_:a;_,_:Array [Boolean ,0123]){}Var _6B,__p,j,A:Int ;}Class _{}Class A_4{}Class L{}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1260))

    def test_1261(self):
        input = '''Class C68_{}Class _{}Class _5{$_a8(___v,_,o,s5_r_w:Boolean ;_,_:Array [Array [Int ,0115],0115];_:Boolean ;o:Array [Int ,0115];_CtK,o:Array [Int ,0x6505_E_C_9];P,K_P7,_,_y,__N8z,_,_:Float ;_c2,zj__H:Array [Boolean ,0x26]){} }Class _{Var K,$g:Array [Int ,0B10101];}Class N_kr:yA{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1261))

    def test_1262(self):
        input = '''Class m51{Val r,$5wC:_;Val $_,$l:Array [Array [Array [Boolean ,4],86],0x4_2_5_3_3];Var $Hh1:G511;}Class j{}Class _{}Class ZB:_6L{Var $N37,$VkiJ_,$_j3_2_:Array [Int ,0B10_0_101_0_0_1];Constructor (_,__,_3_0:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1262))

    def test_1263(self):
        input = '''Class P_:_{Var B_,iEc,_:Array [Array [String ,0B1011010],0B1];Destructor (){} }Class _:_{}Class _:o{Var $05_:Array [Array [String ,22],0xAA];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1263))

    def test_1264(self):
        input = '''Class D_:k8{Destructor (){} }Class y_:F_P{Constructor (_45_0,___:Array [Array [Array [Array [Float ,0X2F],0B1000101],0X68],58];e:v;t_:Array [Array [Array [Float ,0X2F],0b1_0],0XD]){b::$4y();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1264))

    def test_1265(self):
        input = '''Class R:O{Constructor (_l3_:Array [Array [Float ,0b1],0X19];V:Array [Boolean ,0b101111];f1c0:a7A;_G_Mh,s:Array [Int ,0xF]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1265))

    def test_1266(self):
        input = '''Class p{_d_(_Z:t;Pone,an5j,l,sy5:Array [Int ,0b111100];__:Array [Array [Int ,65],6_7_5_44];__,_Z:String ;m,_,_,_jar,_,f_r_s:w){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1266))

    def test_1267(self):
        input = '''Class _2{}Class _qNX:zx__{}Class __3{}Class _:_{Val $L_:Array [Array [Array [Array [Array [Float ,072],0x48],0XFF],0xC],0B1_01];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1267))

    def test_1268(self):
        input = '''Class __{}Class __3_o{$8__(_,_Z:l_;_,L,t____,_,J4:Array [Float ,9_36];O,_4:Array [Float ,0X75_9_C]){}Var _:Array [Float ,0b1001011];}Class _n:X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1268))

    def test_1269(self):
        input = '''Class _:h{Constructor (){} }Class _07_:N{}Class _:GW{Var $_:Array [Array [Boolean ,76],0102];}Class B{Val ___,$9,$0:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1269))

    def test_1270(self):
        input = '''Class _{Constructor (n:_N_4;mA:Int ){} }Class W_6:h_{}Class _m:F0{Destructor (){}Destructor (){ {} }Constructor (y_c,__,_:Array [Float ,0x12]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1270))

    def test_1271(self):
        input = '''Class i:_{Var $5,$IN,___2B1,__,$22_v,$3U:Array [Float ,0x9_1DA_3_9];}Class _{}Class p13334:p8{Constructor (w__,j7_l,__P6,_5w0,k,_0X:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1271))

    def test_1272(self):
        input = '''Class _{Val $_,$_,$35,$8,c:Array [Array [Array [Array [Array [String ,05],72],72],044_1],0b101111];Var $0,_f:_8_Q_9;Destructor (){}Val _0:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1272))

    def test_1273(self):
        input = '''Class Q8{$_(__:_){}Val r_,$6k_:Float ;}Class Y{Destructor (){}Constructor (_P_,D:Array [Array [Int ,0b1],0B110011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1273))

    def test_1274(self):
        input = '''Class __{Constructor (){}Var _:Array [Array [Array [Array [Array [Array [Boolean ,0xF],04],0x4D],0B1100100],87],0250];}Class _{$O(__,__,_P__1,d:_6){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1274))

    def test_1275(self):
        input = '''Class _{}Class _8{}Class _:Bl{}Class _{Val $_:Array [Array [Array [Array [String ,0141],7],0x6_0_D],0b1_1_0];Constructor (_,_7g:Float ;m:Float ){Continue ;_::$9();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1275))

    def test_1276(self):
        input = '''Class _z:X{Constructor (){} }Class _:ea9__{Var _:Boolean ;$1(_22S__:_;r:Array [Boolean ,056]){} }Class x1:__{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1276))

    def test_1277(self):
        input = '''Class _:_{Val __:Array [Array [Float ,7],7];}Class _{Var $2:Array [Array [Array [Array [Array [Int ,7],0102],07],9_11],0102];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1277))

    def test_1278(self):
        input = '''Class X_6__Fs:y__V{}Class o:_{Constructor (G2:Array [Array [String ,072],50];A,_:y;T,_:_;K__3:Array [Array [Array [Float ,0B110110],50],0xC]){}Var $0_,$_,I,$___6:Array [Array [Int ,072],50];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1278))

    def test_1279(self):
        input = '''Class __:__{}Class L:P8{}Class _0{Constructor (m7a:Float ;okp:String ;_R:Array [Int ,05]){}Var Fl:Array [Array [Int ,0B1010101],0B1];}Class x_:sh{}Class DF:_09_u9_O{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1279))

    def test_1280(self):
        input = '''Class b03s_:t_{Constructor (){}$_F(_:Array [Array [Boolean ,0x5],0b111100];W8_5:Int ;pW:Array [Array [Float ,0b111100],0B10];_:N2){} }Class o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1280))

    def test_1281(self):
        input = '''Class b__{$_(_h_r,B,u_,_,_,_:Array [Array [Array [Float ,0B11],0B111000],0x4_3];__:Float ;_:qW){}Destructor (){} }Class F{Val V:Boolean ;Constructor (){}$4(){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1281))

    def test_1282(self):
        input = '''Class S:Zw{Constructor (_H:Array [Array [String ,032],0b111000]){}Constructor (_,o,M_,_J_:Array [Array [Array [Array [String ,0b1_1],0X4],0X4],0b111000];hs_l:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1282))

    def test_1283(self):
        input = '''Class _:kN{_(_66__,_3:Int ;P_,___,_g6:_S;_,_:_;_,g:J;A914zL2w_,_:Array [Array [Boolean ,0XF25_A],046]){__::$_d63.u.aR.__._();} }Class _:D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1283))

    def test_1284(self):
        input = '''Class y:i__S9a{Destructor (){} }Class a_y_:_n{Var F0:q7;}Class G{Constructor (z:Array [Array [Array [Float ,074],28],9]){ {} }}Class R__t:F{}Class _:b_{$_(h:_;C,KS7_06:Array [Array [Int ,0b10_1],0b101000]){} }Class E:_90{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1284))

    def test_1285(self):
        input = '''Class _22_{Constructor (d_:_2){}Val Ig_4,$91:_;Constructor (){} }Class _{Constructor (){}Var $_,M4,m,$9__:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1285))

    def test_1286(self):
        input = '''Class cC7:X___10{Val _f0d,$J7,$_y1:Array [Array [Array [String ,14],0B1_0],0117];Val $__:Array [Array [Array [Array [String ,0b1],0x3],0b100010],06];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1286))

    def test_1287(self):
        input = '''Class o55_{Constructor (_5__:Float ;__:Array [Array [Array [Array [String ,012],0X6],0X5C],4];B:Array [Array [Array [String ,0x23],86],0b10];t:Array [String ,3];H,d3_:Array [Array [String ,0x23],86];r,a:Int ;_:Array [Array [String ,0b1],0B1]){} }Class oS_{Var $3E,_,$bVh,Wc1,___,_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1287))

    def test_1288(self):
        input = '''Class i:AU{$fq(M,__o,Z0:q1V;_:Array [String ,0x72A_3]){}Constructor (){} }Class L{Var $p:Float ;}Class _:q{}Class ces:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1288))

    def test_1289(self):
        input = '''Class w:f{Var $x_:Array [Float ,0x7_0];p(L7,_h,_,_,__93,_6d,_T:Int ){}Var $om09:Array [Int ,01];Var $e:U;}Class H:L{}Class lV:Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1289))

    def test_1290(self):
        input = '''Class _2_q{}Class D:f{O(oJ52,_6:Array [Array [Array [Array [Array [Boolean ,0141],0b1100100],0b1100100],2],8_94_419_5_47_8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1290))

    def test_1291(self):
        input = '''Class __:__6{Val $_:Boolean ;}Class T{}Class l{Val r,$b_r,$_,$2,_ZU,N,$3,$Rp,z:Array [String ,0x2E];}Class u_5:A{Qx(_:p5V;_:e_P_){ {{} }}$_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1291))

    def test_1292(self):
        input = '''Class v6:O8Ru_{Constructor (){}Val U_:Array [Array [Array [Array [Array [Array [Int ,0B101],0X6_A],0X31],0B1000011],0XA3],0x2D];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1292))

    def test_1293(self):
        input = '''Class _X{}Class __:B{}Class _E_{_(_,j0k_:Array [Array [Array [Array [Array [Boolean ,0b1100010],0b1100010],0x20],9],0B1];v__:Boolean ;T44,_,w,_,Q,f:_11_){} }Class rF11_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1293))

    def test_1294(self):
        input = '''Class _0:_F_{}Class _fk{$8(I,_y6,_,G4,Vo:Array [Float ,07_3];J:Array [Array [Int ,0B1],0b1]){}Val $8:Float ;Var _322:C;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1294))

    def test_1295(self):
        input = '''Class m_0_4_y:_W{}Class _:_8_9{Val $__,h:Array [Array [Array [Array [Array [Array [Boolean ,017],0XD],06_55_42_01],0X1E],8_8],0b10010];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1295))

    def test_1296(self):
        input = '''Class C:_{Constructor (_,Cz:String ;_:Int ){}Constructor (){} }Class V{Constructor (_m:Array [Array [Float ,0XB],0B1];k:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1296))

    def test_1297(self):
        input = '''Class _:GG7_{Constructor (t,_7,K,Hy_,__,N_g:Array [Array [String ,0B100000],71]){}Val _9,F4:_;}Class __k_{$5E10(s,W5,_mO_f_:__7E_;_EO,_,_:Float ;S46,_,_:Array [Array [Boolean ,0B100_0],0B110]){}Val $_0,$c,$72:Float ;Var $8_I:Array [Float ,7];}Class j:jR{}Class V_J_e__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1297))

    def test_1298(self):
        input = '''Class __{}Class M_:L4{Constructor (t:Float ;f:U;_,__G:String ;q6,_,_:_8_;v:Float ){}Var $5_:Array [String ,01];Var _,$3,O,$5,_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1298))

    def test_1299(self):
        input = '''Class _56e3:u_1{}Class P{Val $7S,$Z,$_93qs_8ZlEo:Array [Array [Array [Int ,0xAD04],9_27],0B1_01];Val t_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1299))

    def test_1300(self):
        input = '''Class s{}Class M:_{}Class _{Val P:bU_;}Class _:o5{k(___,C:Array [Array [Float ,0b1000010],4];P:Array [Boolean ,0123];q:Array [Float ,7];__,e,N2w_,_9sM4:Array [Array [Int ,5_8_1_1],077];_PY:Int ;_,Qbw__7:Q;e5,G4:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1300))

    def test_1301(self):
        input = '''Class b:_8{Var $_R:Array [Array [Array [Array [Array [Array [Array [Float ,0xE],0b1_1_0],0B11111],0137],0b1011001],0x64],0XA];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1301))

    def test_1302(self):
        input = '''Class _57{_1f(M,_:Float ;_I_:_){}Val $BA,$z_0x,$2N:Array [Array [Int ,0B1001110],0b100101];Val $6l,__77_,$42_,_:Array [String ,0X41];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1302))

    def test_1303(self):
        input = '''Class q{}Class w0W3:_2w1i{}Class wQ_{Destructor (){}$fM(_:Float ;Q0r3f9G_3_:Float ;t1,__9k,_3_ri6:G){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1303))

    def test_1304(self):
        input = '''Class E9:__{Constructor (p,k2,f_Z,bd,R:____){} }Class _{}Class _{}Class r_4{}Class _{}Class oO{$e3(){Break ;} }Class s:c{Constructor (_07P:s;_:Array [Array [Float ,07_3],022]){}$_(___:Array [Array [Float ,95],0b1011011]){} }Class _{}Class _2xw{$V_73(){} }Class f{}Class _:I{Val $_,$7,V_,$N,$9_8:Array [Array [String ,022],0b110];}Class _P{Constructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1304))

    def test_1305(self):
        input = '''Class ca:__{Val $2x5,Yon:Array [Array [Array [Array [Boolean ,053],0b10],0b1010111],06];_8_k(__T,N__34:u){}Var $8:__6;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1305))

    def test_1306(self):
        input = '''Class _{}Class s:W{Var _,p7xU,iI:t;Destructor (){}$_(_:Int ;B_,_fn,_:Array [Float ,0X2C];o:__){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1306))

    def test_1307(self):
        input = '''Class _:x{Constructor (_,___L:Array [Array [Float ,0b10111],0b10111];e8:Array [Array [Array [Int ,0b1],0x9],7];c:Float ){}Var __28_1:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1307))

    def test_1308(self):
        input = '''Class ueN8{P_2(_,_,x:zJ;_,__,P,_4W,_:a00A;_:Array [Array [Array [String ,066],0b11],0x4C];_:_v;_:Int ){}Destructor (){Break ;}Val $N_,__,j:Array [Int ,380];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1308))

    def test_1309(self):
        input = '''Class _{Var $M,_:Array [Array [Array [Array [Array [Array [String ,0B111011],0X56],3_2_3_2],0b110001],07],0xE];}Class o_5_l{}Class _:_K_{}Class W__{$Kl0(_:Array [Boolean ,02]){}$0(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1309))

    def test_1310(self):
        input = '''Class w91fg:_{tk(z_:J;NW8V,Y,__s_:Array [Array [Array [Float ,0B11],0x63],0B1]){Break ;} }Class _:_{Val _15,f,_,D:Array [Array [Int ,20],0b100001];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1310))

    def test_1311(self):
        input = '''Class _{Constructor (_,_:_;___1,_658,_,G:Array [Array [Array [Array [String ,8_0_9],0X590],6],6];X3,_Bh:_;E5,L:Int ;_z:_b;_TR_:__;_,_3:g_7){} }Class _6_{Constructor (){} }Class YD_{Constructor (C,YRP:F_){} }Class _{Val _:wo__;}Class n{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1311))

    def test_1312(self):
        input = '''Class W{Var $_9X_,_:Float ;Constructor (_,d,X,_,_:Boolean ;M_,_s:_m){}Destructor (){}Constructor (_7,_:Float ;E_,_mJ0,_36_x:_){}Val $8:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1312))

    def test_1313(self):
        input = '''Class T9{Var $_:Array [Array [Array [Int ,0x22],91],0X6];Constructor (O,v2,D:wb_3_){} }Class __{$51(){} }Class Ek:h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1313))

    def test_1314(self):
        input = '''Class P9:_1E___{}Class Wk:GF6T{Destructor (){Break ;} }Class I3{}Class _9:_J{$u(_5:Array [Array [Array [Array [String ,5_3],0b1001101],0X5E],0b1001101];_:String ;_:_){Return ;}Var $A:Array [Float ,1];Var $3,$0,__z:Array [Array [Float ,0B100],02243];Destructor (){Return ;Break ;} }Class v_r{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1314))

    def test_1315(self):
        input = '''Class Ca:_{}Class J___8_3:_{Val y:F;}Class _:yI_{_(){} }Class N1:j{Var _7:Array [Int ,761];Var $Rp_,$_,$m3,_,$_:Array [Array [Array [Boolean ,016],5],0x2F];}Class AiP{}Class _:S{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1315))

    def test_1316(self):
        input = '''Class _Y{_(_,iI__:Boolean ;_,P:Boolean ;p,N_,__:Array [Array [Boolean ,0x7],0X43];_,r9:s;Jb,_70,p,K:Array [Array [Boolean ,0112],0b111110]){Break ;Val ___4_09_8m:Array [Float ,0B1001011];}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1316))

    def test_1317(self):
        input = '''Class _9_:_{Var n:N1;F(t6,_:_;b:Array [Array [Boolean ,075_60_1],27]){Break ;}_(____:Boolean ;M:L_;e_Q:_a;W:t){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1317))

    def test_1318(self):
        input = '''Class _3{}Class m0Z_q:_{}Class _7{}Class _:__{}Class _{$_(){}$_R(W9,g6z,z_8,_:Array [Float ,28];_:Array [Float ,06];Q37j0,_,_7:__;J:Int ){Return ;}Constructor (i_:_;_,C:Array [String ,0b1011111];d09,H:Float ;X4,H,s:Array [Array [String ,05],07_3];_6:Array [Array [String ,0x29],28];_5_x8,_,F,rt_:c71E){_9::$h();} }Class _5:n{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1318))

    def test_1319(self):
        input = '''Class _:p9{Constructor (_6:WY6_;_:o;K4,_0:Int ;_o:Array [Array [Array [Array [Boolean ,0b11_00_10_1011],0x47],0b1011101],0XC]){Return ;}Val O,$_,e0:Int ;}Class _:h955{}Class R:n2Sc{}Class W:_u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1319))

    def test_1320(self):
        input = '''Class JfQ{}Class ___{$_V(_:Int ){}Val __:_;Constructor (N:Array [Array [Boolean ,0XFEEED],0B1];_o2N,J_,_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1320))

    def test_1321(self):
        input = '''Class L1{Constructor (_cb_:Int ;_O,__D_:_D_4_3;_:Array [Float ,2076];V_F0:Array [Array [Array [Array [Array [String ,0x21_A],0b1],0124],03],0b1100];Sv,T_,___,_,_:__;_A:Array [Float ,0b10_0];K_:Float ;S,____N_,_:Int ;Z3G9:Array [Boolean ,0X54];s:Array [String ,0124];__8_:sKl){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1321))

    def test_1322(self):
        input = '''Class _W:_{}Class E{Var _:_8;}Class __X:j{}Class xto{}Class y:_{Destructor (){} }Class _24{Destructor (){}l8(){ {Return ;Break ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1322))

    def test_1323(self):
        input = '''Class _:Anr7l9s{}Class __30:_C{Val _:Array [Array [Int ,0x7],0113];}Class _8:_3{Constructor (__,_Rx5:Array [Int ,0X5]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1323))

    def test_1324(self):
        input = '''Class _:_8{Var $O_l_:Array [Array [Array [Array [Array [Array [Array [Float ,01],59],02],044],0xE],0xE],59];Constructor (___:R){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1324))

    def test_1325(self):
        input = '''Class _X8z{}Class _{Destructor (){}Constructor (_m:Array [Array [Array [Array [Int ,01_51_4_233_36],05],0x22],63]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1325))

    def test_1326(self):
        input = '''Class Y:a{Val $_,$8:Int ;Var $2:Array [Float ,0B1001010];}Class fZr{Var _:Array [Array [Array [Array [Array [Array [Boolean ,034_57_6146],034_5_4],0x61],0X4],0b1_1010_00_11],87_9_580_0];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1326))

    def test_1327(self):
        input = '''Class M{Val _6,$6N_:Array [Array [Array [Boolean ,61],0b1_0],0xE];Var $I,v,_:Array [Array [Int ,0B1_1_11],0XD];Constructor (){} }Class d:U71{Destructor (){}Constructor (){Continue ;{Var C9,B,i6:X;} }}Class _1:_{Val $G___,Iq__9,_1_49:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1327))

    def test_1328(self):
        input = '''Class O:l3_k{}Class _:ZZ{}Class B{Val $u,$_v:Array [Array [Array [Float ,13_2],0x5],78];}Class __6{Var Q:wi5__;Destructor (){}Destructor (){}Val G:Array [String ,0141];Val $6:Array [Array [Array [Array [Int ,78],0b1100100],0X43],03];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1328))

    def test_1329(self):
        input = '''Class v:_0{}Class _5{$7(){}Constructor (O,v,__:Boolean ){Return ;Continue ;} }Class i{Constructor (){} }Class __:k_{}Class __K{Destructor (){}Constructor (o,_:Array [Array [String ,0B1010010],60]){}D(_:v){} }Class W:__u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1329))

    def test_1330(self):
        input = '''Class _K{Var __i8,$40J1,$7,mc,$0:Boolean ;}Class Ms{}Class _hc__{Var $__t:Int ;Constructor (){} }Class JBem:h{Destructor (){Continue ;} }Class cr{}Class __{Var _8_4,w_,A:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1330))

    def test_1331(self):
        input = '''Class _T9I:o{Constructor (x:Array [Array [Int ,2_9],0x1];_2V,K,Kj,__:String ;tO,__89:_1){} }Class _:_{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1331))

    def test_1332(self):
        input = '''Class f:_44{}Class _F:_{}Class _:_{}Class _:H{Var _1_,$__:Array [Array [Array [Boolean ,80],0X14],0244];Var YK:Float ;}Class _:PA_8M{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1332))

    def test_1333(self):
        input = '''Class _42_K:k__{}Class __9:_{Var _:Array [Array [Array [Array [Array [Boolean ,0b1001110],3_5_3],05],0x7_0],0xCBE];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1333))

    def test_1334(self):
        input = '''Class _N{Var __,_,$__25a,$_:Boolean ;Constructor (){}Var $3:_n;_____6(_8_G:Array [String ,0X12];k9:Array [Array [Array [Array [Int ,0xA],57],2],0x29];s_,__:Int ;_5,D:Array [Array [Array [Int ,04],57],046];u_8,l:Boolean ;wd,_:Boolean ;H,v2:Array [Boolean ,0XE];_:Float ;_,S1:Int ;x3t:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1334))

    def test_1335(self):
        input = '''Class _19:Q4C13G65_z_{}Class _5_:g{Var y:Array [Array [Array [Array [Array [Boolean ,0B1_0],0xD],0xC],0X20],8];Val K:Array [Array [Array [Array [Int ,027],0b1_11],0B1],027];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1335))

    def test_1336(self):
        input = '''Class SI:j{rx(i:n;__,z,_6I_,__,xpo___Oas:String ;q_J4,_,_:Array [String ,0103]){} }Class _:_{Val $2,ii:___;Var _x_,Q7,I,$_,$_4,$__o_,BA,l58,$_,$_3C_,_,$m:_N7;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1336))

    def test_1337(self):
        input = '''Class _fy{}Class _:_L6D_{Val $w_,$3u0:Float ;Constructor (_3:Array [Boolean ,0B10];_1,_1_7cH_a8,l:Array [Array [Boolean ,03_1_461],02];_,_,JWq21__:_){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1337))

    def test_1338(self):
        input = '''Class E4{Var ZR:Array [Array [Array [Array [Array [Array [Boolean ,02_1_31],070],0B11110],070],72],0x9_7_A_15];$_t_(__:Array [Array [Int ,070],52];__:r){}Destructor (){} }Class __{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1338))

    def test_1339(self):
        input = '''Class _c:_{$G(G:Array [String ,2];_6,W:String ;G_B,mV9,___5,H:String ;w_,v:Array [Int ,01];_v_,f20:Int ;vN,_,C_:O){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1339))

    def test_1340(self):
        input = '''Class _o:_V1_{Var $2_,Z1m,$58,$_88,$4:_;}Class __{$j2(p,__,r:Boolean ){}Var B,$0_:Array [Array [Float ,0x51],5];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1340))

    def test_1341(self):
        input = '''Class X:_9_{__(){}Var r,$5,$w:_O6;Val w,$30,$A,M,Ay,$Y:Array [Int ,58];Constructor (W,p:String ){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1341))

    def test_1342(self):
        input = '''Class _{$_5_0_(M,__,_,m49:Array [Array [Array [Array [Array [Int ,03_5],0X1],0b1_1_0_011],0X26],0B101101];_d6:___;C,b:Array [String ,026];_,_yR:PS){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1342))

    def test_1343(self):
        input = '''Class y6_8_{}Class _{$_(C,____:Array [Array [Float ,0b10_1],0X5_7E];_:_){} }Class _9:__{_(v:U;__,_9:_;_0,F_,__c336G:Array [Boolean ,010]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1343))

    def test_1344(self):
        input = '''Class j:___{Var $_,k_:_;Var $_064_,mV,$f,$B:Array [Array [Array [Array [Array [Float ,0105],0XB],0b100010],0105],0x55];Constructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1344))

    def test_1345(self):
        input = '''Class xSFl:_8np{Constructor (_,__,__u_1_,__,U:Array [Int ,0B10];j:n;i:Int ){ {n3::$_();}Break ;}Constructor (BH0:Boolean ;_:_U_){} }Class _2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1345))

    def test_1346(self):
        input = '''Class q{Var _,Y1,$6_:Array [Array [Float ,20],5];$4(x:_Z){ {Val _8,l:Array [Array [Array [Array [Array [Array [Array [String ,0b1011101],0xB],0B1],0x4C],20],81],20];Break ;} }}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1346))

    def test_1347(self):
        input = '''Class _{}Class Y7:__A_{Var $1:Array [Array [Array [Array [String ,0130],0x3C],0130],0b10111];Constructor (){} }Class DO:F{}Class d:R{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1347))

    def test_1348(self):
        input = '''Class x:_B{Constructor (_f,_:String ;_,b,_,KF_,_:Array [Array [Array [Boolean ,2],0B10],0B11101];_Pz_nA,C_:D;____:Array [Array [String ,0B11101],0xA_3_4_C]){}Destructor (){} }Class _{}Class l{Constructor (){}Var $2vd,$_0:_;C(){} }Class _p__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1348))

    def test_1349(self):
        input = '''Class m{$_(C2:Array [Array [Array [String ,0X5F],35],0B1]){}Constructor (_,z8,_:Array [Array [Float ,61],0x60];d:Int ){}m(_8W:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1349))

    def test_1350(self):
        input = '''Class _j:_ju6{Destructor (){} }Class V41HU_IH:d7{Constructor (___,W46,I:Array [Array [Array [Array [Array [Array [Int ,0B1011001],4_0],0B1011001],0b1001000],1],0110];_3:Array [Array [Float ,05],0B1011001];z:Array [Float ,0110]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1350))

    def test_1351(self):
        input = '''Class _3:o5{$5(d:Int ){} }Class _:__{Constructor (_:Array [Array [Array [Array [Float ,0B111001],064],26],04_3];_8Hq8,u,_0,_5M,__,C0__:O;w,bd,b:Array [Int ,0X25]){}Val t:F_B_7;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1351))

    def test_1352(self):
        input = '''Class p1_:L{Val $3:String ;}Class _{GL2U938_a8i__X8(){} }Class _u:_{}Class T:j{}Class _3:h{$7_(_733:Array [Array [String ,01_2],8_79_6_3];pZ8,R4:Array [Boolean ,0b110111];I,_,s_,E:Array [Array [Array [Array [Array [Array [String ,0b1],0x62],0X1],03_4],0B110101],0b110111]){} }Class _U_:g3{M(){Continue ;} }Class ___g{}Class _Y_1:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1352))

    def test_1353(self):
        input = '''Class _v{}Class h:_{}Class _:_{}Class _9{Var $t:Array [Array [Array [Array [Array [Boolean ,0X15],06],83],5],012];Val _,$T:r_;Var a,M,P:__;Constructor (B0_:x_7){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1353))

    def test_1354(self):
        input = '''Class __X:_{Constructor (h:b;C,_,a_:Array [Array [Array [Boolean ,72],0b11_110],0144];_:W_63;_8:Z_0;_,q:_;F_,_,bE,_0_p_6:Int ;_:Float ;__0__29_X_,_,__:Float ;zJc:String ;_,_R:G__Q;__:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1354))

    def test_1355(self):
        input = '''Class F:_2{$E(h:Array [Boolean ,61];e,_:Array [Array [Array [Array [Array [Int ,6],0B1],61],0B1],2_2];_2_,_9n,_5_:_;h:Int ;K:Array [Int ,0b111111];_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1355))

    def test_1356(self):
        input = '''Class S{S3(){}Constructor (A:_;__5:String ;_,j,Md:Y){} }Class v0j5q:_7{Val $_,$5Sy_,_,$3,$2:Float ;}Class n{$0b_(_9,_,_L,_N,_nx:__;u,R:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1356))

    def test_1357(self):
        input = '''Class _:F_{Val _8:Array [Array [Array [Array [Array [Array [Int ,0b1000110],0X1E],6],40_1],047],0B111_0];}Class z:_{Var __:_4;Val j,_B,_:Float ;}Class sK_3_FKS_38{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1357))

    def test_1358(self):
        input = '''Class _1:X__{$2(__7_b:Array [String ,0X55];So,d,_57:Array [Array [Array [Array [Array [Array [String ,0x5],024150_75_7],0x47_1],0X7],022],02]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1358))

    def test_1359(self):
        input = '''Class f_I{Constructor (){}Constructor (__,f,_,G:_19){}Var _873,$K5:Float ;Var P,_,X,_8:_;Constructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1359))

    def test_1360(self):
        input = '''Class _1{__9(D,o:__;_,_W_,__a,z:String ;L,__:C5;_69,_:j;v8V:df6z;_:Int ){Val _yu0HF:Array [String ,0x44];Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1360))

    def test_1361(self):
        input = '''Class ___c85{Constructor (___,v,_,_t8_1,_:Array [String ,01];fJ:Boolean ){} }Class _8fX{Destructor (){} }Class v:T{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1361))

    def test_1362(self):
        input = '''Class Xc{Constructor (){Break ;}Constructor (ZV,z,oQ:_;V:Array [Array [Array [Array [Array [Float ,0X2C],011],011],011],43]){}_1f_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1362))

    def test_1363(self):
        input = '''Class __h:j_{}Class f2:Jj{Destructor (){} }Class K___K{Destructor (){}$K_(_,v,_q:String ){ {Return ;Continue ;}Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1363))

    def test_1364(self):
        input = '''Class _{$_(_,_,E4:String ;_:Boolean ;Wl,_:Array [Array [Array [Float ,0X4],0X5],9];__:i___;pT_8,i_,_:Array [Array [Boolean ,01],7];r_f,_:Boolean ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1364))

    def test_1365(self):
        input = '''Class _b_:P{Var _,_,$G,$0__:v9;$Z(){} }Class _6{Constructor (_:_S2){ {} }}Class w_{}Class b__{Var ___:W_B;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1365))

    def test_1366(self):
        input = '''Class t_2p{B_(__,__0N,BU3:Int ){}Var $__B,$N__,_,$B2:Array [Array [Array [Array [Array [Array [String ,0x6],07],0XC_4_F],58],07],0B11];Var _71:Array [Array [String ,07],3];$D7_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1366))

    def test_1367(self):
        input = '''Class _0{}Class a{Destructor (){}Destructor (){Return ;{} }}Class Y:gt{Val $5:Array [Int ,47_9];Val C,_c___3M,$N,$_:String ;}Class _9o9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1367))

    def test_1368(self):
        input = '''Class s{Var _r,$2C,q:Float ;Constructor (){Break ;}Var _:_;Var Z:__vx;Destructor (){}Constructor (K3,b,_:_){Var kMT,_,_:Boolean ;} }Class __:_{}Class K:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1368))

    def test_1369(self):
        input = '''Class _N{$r(C,_:Int ;_:Array [Array [Array [Float ,0x21],07_1],0b11_0];T:u5;_,_:Array [Array [Array [Array [Boolean ,0X20],0X9C],02_4],077]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1369))

    def test_1370(self):
        input = '''Class O7z_{Destructor (){}Destructor (){Val _:Array [String ,50];Var I,z_99,F,_:Array [Array [Array [Boolean ,04],063],0b1011101];Continue ;}Constructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1370))

    def test_1371(self):
        input = '''Class Z:_6_{}Class _{Val $Q,_:String ;Destructor (){Var _5_:Array [Float ,7];} }Class J:_a{A(_L:Array [Array [Array [Int ,0xD2],07],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1371))

    def test_1372(self):
        input = '''Class W0_:s{Constructor (__N__,E_68,Z2,T,L3:Array [Array [Array [Array [Array [Boolean ,6],0B11101],0b1010100],0B11101],0B11];_:String ){} }Class g{}Class B6:W0{Var $1iQ7,h0,c,$8_,J_1_:Y_z5;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1372))

    def test_1373(self):
        input = '''Class _{}Class Q{}Class _8_R3__:_{Val _:Array [Boolean ,07];Val $56_:h;Constructor (Xd1,z,_1,_:Array [String ,71]){}Val _82,_,_d:v;Var jX:String ;}Class F:___{$__W(){Return ;}Constructor (X1X_,r,R:Boolean ;__,b__0,____,n,_:Z__;U,g_xLs_,UCe_:Array [Array [Int ,0x29],0XA6A];u:Array [Array [Array [String ,02],0b1_0_0],0x5_AC];X:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1373))

    def test_1374(self):
        input = '''Class D{$2(X,u_,C,T9,_j,_:__;_,t,t___:x_49;_,u,_,__8,d:Array [String ,0XB8];U_3,_,_b,m_91:__){Val _6__:String ;{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1374))

    def test_1375(self):
        input = '''Class M6:m{}Class O:M{___(C1p,_X,_,_:Array [Array [Array [Array [Array [Array [Boolean ,13],0105],0X30_FD9],0x4_4],0105],0105];r___N,h:Array [Boolean ,0xB];h:Array [Boolean ,0b1100011]){ {} }Constructor (_J:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1375))

    def test_1376(self):
        input = '''Class _{Constructor (){} }Class _4{Constructor (d:Z_0;_L__z:Array [String ,027_2]){v_::$3();}Destructor (){} }Class n:a_{}Class d_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1376))

    def test_1377(self):
        input = '''Class _y{Constructor (_:t;_4_:Array [Array [Array [Boolean ,0X44],46],46];_I06,P,Q_,__,_8,c__,p,_,r_n,o8:Array [Float ,04_35];_:_7){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1377))

    def test_1378(self):
        input = '''Class kIP{Constructor (__:_;_,U,_wbL48,_2_5t:String ;_:Float ;_a:Array [Array [Array [Array [Boolean ,0XB],0x58],0XF],07_1];_,_:X_5){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1378))

    def test_1379(self):
        input = '''Class V6{Var k,$YWl6__v_:Int ;Constructor (m,_,_:Array [Array [Array [Array [Boolean ,80],0b100],024],0xF_F_3];_,M:Boolean ){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1379))

    def test_1380(self):
        input = '''Class E:Oy_{$__1(o8,R:Boolean ;I4r__y:String ;_j_u6K:Array [Array [Float ,0x2],0x2];_,s,_,_:Array [String ,0B1010000]){Break ;Return ;}Destructor (){Break ;Break ;}M1i4(_:Array [Array [Array [Float ,0x2],0x2],01_7]){}Constructor (o0,_,_D,W__E,Jk7__:Array [Array [Array [Array [String ,0B1010000],0x2],87],0b100100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1380))

    def test_1381(self):
        input = '''Class HX__7E:aV{Val $_,i9:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0xA],0X51],0X51],1],0x2_5_0],0X51],0XB9],0x5E],0370_3],0X51],0X51],0107],2_2];}Class I{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1381))

    def test_1382(self):
        input = '''Class N9:W_{Constructor (){Var E63:_S;Val _y,S_,c,_,_:w;Val _:Boolean ;} }Class _0:h{Val $5,$k:Array [Array [Array [Array [Boolean ,07],56],0B1011111],0X17];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1382))

    def test_1383(self):
        input = '''Class _X{Var $x,A:Array [Array [Array [Int ,0x2C],5],0B1];Destructor (){}Var $_7,$74f_:Array [String ,0B1000010];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1383))

    def test_1384(self):
        input = '''Class _{Var _Xs,$_,$4:Array [Array [Array [String ,0X4_3],06],0X32];}Class _2{Val $_,_a,$g,$5_,U8:R;}Class r_:U{Val $_,V_e,_6:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1384))

    def test_1385(self):
        input = '''Class p:_{}Class _2w_o7i:S{Constructor (h:Array [Array [Int ,0X60],0127];_,e,___1,lqj:Float ;_,_:_;A:Array [String ,8];N,Ew:l16K_p;_xF,fB:Boolean ;dP:P7yK;iJZ6,K_35wN:M){Val __4,_6_:g;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1385))

    def test_1386(self):
        input = '''Class o0g{}Class D{Y2(__,X:Array [Array [Array [Boolean ,8_3_8],0X8],02]){} }Class Y1_II{}Class C_5:q{Val $_25Nf0_,_:Int ;}Class b{}Class Z{}Class _:i{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1386))

    def test_1387(self):
        input = '''Class __:_{}Class _:__{Destructor (){} }Class _J{}Class g{Var $_4,o:Float ;Val $_Hi:_;Val $cE_b_,_,c,$8K_F:_;$d(_L392:Int ;J:Array [Float ,53];C,J8W5_,k9_06V,_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1387))

    def test_1388(self):
        input = '''Class C8:_{}Class _{Constructor (_:_;_:Int ){}Var $_o,$F___M,U:q9k_;Val _,$d__:Array [Boolean ,0B1];Var $M4_1t:b_y7;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1388))

    def test_1389(self):
        input = '''Class G:_3Of{Constructor (){}$_V(){}Var $_,_:Array [Array [Array [Array [Int ,0XB6],0xC],043],0b1];}Class N:B{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1389))

    def test_1390(self):
        input = '''Class _{$DZ(){} }Class _7:_{Constructor (__,cK,L_16,_h_:T_){} }Class _:__{Val $U_,_:Array [Array [Array [Boolean ,0x3_5],0B1],0x1];}Class _m9Afq{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1390))

    def test_1391(self):
        input = '''Class __v8:z1u55__{Constructor (__Q,M:Array [Array [String ,0B1],8];_q:String ){} }Class m:H_1{Var _,ja_:Z;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1391))

    def test_1392(self):
        input = '''Class M6d_:_s{Var $_o:Boolean ;Val _,$7O_98u_f,$n_:Boolean ;Var $0,$G:Array [Boolean ,42];s(_S:Float ;tL:Float ;_,__204:E_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1392))

    def test_1393(self):
        input = '''Class _{}Class _v:_{}Class _:H8{CtN(___:Array [String ,43];__,s,_gY:Float ;o1h:Q;_:Boolean ){}Val _:String ;}Class A3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1393))

    def test_1394(self):
        input = '''Class O{Var $3:_;}Class U3_{Constructor (T0,_:Array [Array [Array [Array [Float ,0B1011101],0x11],02],0x11];GF,_,_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1394))

    def test_1395(self):
        input = '''Class j:_x{Var _2:Array [Array [Float ,0x9],0xA_76];}Class _8:VKkZ{}Class aZd:_{Var $M3__Z:Array [Array [Array [Int ,0X17],0B1],25];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1395))

    def test_1396(self):
        input = '''Class _:X{Var _,$__8__:n;}Class A:b51d_{}Class Z6{Constructor (_,_,__h:String ;_:U0;_,_:Float ;_,lg:QF_;__,w,_,L:Array [Array [Int ,03_7_0],0143];_P,_,D_,m,_,_n:Boolean ){}Var _,_p:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1396))

    def test_1397(self):
        input = '''Class KN:e{}Class pC{}Class V7_{Destructor (){Break ;}Var $_2b:Array [Array [Array [Float ,0B1_1],34],05056_7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1397))

    def test_1398(self):
        input = '''Class FL10{$_7(_41G6J:Array [Boolean ,64];T:Array [Array [Array [Boolean ,64],0B100011],0B100011];__k,_Y,X__,_:Array [Boolean ,64];VK:_){} }Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1398))

    def test_1399(self):
        input = '''Class _0{}Class F07_{Constructor (_:Int ;c:Boolean ;_,_,y,_,h,_6,D_,_:Array [Int ,0x47];__,X:String ;_,h__:q_){} }Class _k9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1399))

    def test_1400(self):
        input = '''Class _:_s{}Class __:_{}Class _8{_3m(_:String ){} }Class __H:EV_{Val $36,_,$_lk:Array [Array [Boolean ,02],0X18];}Class Fc{Destructor (){} }Class c4_1__{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1400))

    def test_1401(self):
        input = '''Class D{Destructor (){}Destructor (){Continue ;} }Class ub{}Class b_:_{$0l(g,____2:Array [Float ,0b1100_0];s__wz:Boolean ){} }Class H0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1401))

    def test_1402(self):
        input = '''Class ___{Constructor (L_:String ;VrLu,PE8,y,F:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,03],31],0XA6],0X50],0115],0X7_A_1],0x8],0X50],0b110_1];_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1402))

    def test_1403(self):
        input = '''Class _:__{Var g,_4,Wl9N:Array [Array [Array [String ,0b111110],0b111110],0b111110];Val _:Array [Boolean ,0x18];Var q1b_d:Array [String ,3];u(){} }Class o{Val g:Float ;}Class _{Val $_,$5_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1403))

    def test_1404(self):
        input = '''Class uY6_{Constructor (N_1_,_U,w__,_2:Float ){Continue ;Continue ;} }Class _3:_{$_(){} }Class A__6{Val $1M:__;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1404))

    def test_1405(self):
        input = '''Class _{Constructor (Z,e,e_,_:Array [Array [Array [Array [Boolean ,9_94],0b10110],81],81];_WM0:String ;U,WX:Boolean ;l,G,_:Int ){}$N_(){}Destructor (){} }Class Ku_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1405))

    def test_1406(self):
        input = '''Class K_:m_X_{Val $_7,_,$_7,$a,$_,l0:Boolean ;}Class f:__{}Class O27:_3{$___z_(){ {Break ;} }}Class _4:F{}Class __N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1406))

    def test_1407(self):
        input = '''Class v:_m_{$KU(jg__n1,L0_:_H__){Break ;Return ;} }Class V{}Class _6:o8_6{Val vG:Int ;}Class A{Var M4q,$__,$N:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1407))

    def test_1408(self):
        input = '''Class _{}Class _{}Class m{$_(s1_,__:_;_k6_,_,s:Array [Array [Array [Array [Boolean ,057],14_4],0X48],0x35]){ {} }}Class _K7g__:g_B{}Class _:TXA{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1408))

    def test_1409(self):
        input = '''Class _{Constructor (yYz,__,E_:Array [Array [Int ,01],91];_7_FML_,_:o){}Var $0:String ;Val $D8,$9:Int ;Constructor (){ {{} }} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1409))

    def test_1410(self):
        input = '''Class _6p{A(Z,d,_3_:Array [Array [Array [Array [Array [Array [Int ,1_8],0X33],0b1000000],047_6],0b1000000],0X33];_2:Array [String ,071_5]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1410))

    def test_1411(self):
        input = '''Class o:g{}Class _:__2{}Class BV{Val _:Float ;}Class w8{Var $m,A3,XQ:Xh;}Class b{Val _:Array [Int ,0b1001011];}Class _:o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1411))

    def test_1412(self):
        input = '''Class Q_{Var _,$47,$3E,_9:Array [Boolean ,037];Constructor (_3,__8:Array [Int ,0xF_9]){} }Class x:_____064f{Var _:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1412))

    def test_1413(self):
        input = '''Class b{Constructor (y_6:Array [Float ,474];_8:Int ;V_:Array [Array [Array [Array [Boolean ,0X4],02],046],046];V_,_,_:_;IU__m__5,_a,KP:String ;_I:N1){}Constructor (){ {Return ;Break ;} }}Class i3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1413))

    def test_1414(self):
        input = '''Class _e_:K{$269(r,k5x,_F,H9_,h,_R:Boolean ){}Var $_,B:Array [Array [Array [Array [Array [Array [Array [String ,1],0XE_3],0100],58_2],0b1010101],0B101000],0100];Destructor (){}Val TR2,$40,$T:Array [Array [String ,30_8],46];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1414))

    def test_1415(self):
        input = '''Class QX:_{}Class J:_{Var $1j76:Array [Int ,0B1];}Class _X0:k{Val _:_8;Var $_:Boolean ;Var u_,$Y6,X:Float ;}Class o_Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1415))

    def test_1416(self):
        input = '''Class _{Var $_z_:Array [Array [Array [Array [Array [Array [Boolean ,05_3],02],82],03],82],0x7_7];Constructor (k:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1416))

    def test_1417(self):
        input = '''Class Rn:_{}Class e:_{Var _:Array [Array [Float ,03],8_90_3_0];Val $K,_7,$9,$_,$_:__8;}Class qu9:V8Q28{Var p2:Array [Array [Float ,3],04];gJt(_:Boolean ){}$4(T:_y;__U_:i7_F;_,_3:_7;W,W,_9:_;E,_D__,_7i,__W:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1417))

    def test_1418(self):
        input = '''Class S4{Constructor (Q,g__,_:H_;m4,_,_,_KQ,g,_Rd,_g:Array [Array [Array [Array [Int ,1],28],01_3012],0X4];Q_,T:_;P_:Array [Array [Float ,55],1];__,_V,_6:_;_0_,j:Boolean ;t4,__:__){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1418))

    def test_1419(self):
        input = '''Class d:_{Constructor (_,I:Boolean ;m15:Array [Array [Array [String ,32],0X38],0134];R,__,__0,K9:k0;y,_,Cci,s,_,k:Array [Array [Int ,2_6],0134]){ {{}Continue ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1419))

    def test_1420(self):
        input = '''Class Q{Var $___:Array [Array [Array [Float ,072],04],0b101001];}Class t__c3{Constructor (_,E7,_,__,_:h;_:Boolean ;B,_,hm,R:String ;__:Boolean ;_2:_1_){}Var $7_9,$_,$8:x;}Class b_:ixN37405{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1420))

    def test_1421(self):
        input = '''Class _{R8(PD:p3O0J;c277c_n,_,_,_,i1:String ;r_:Int ;_7:_;sE5,_,_3:Array [Float ,1]){}Val _,_Q:Array [Float ,0B1_0_0101_0_1];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1421))

    def test_1422(self):
        input = '''Class __y{Constructor (){}Var $24,c_:Array [Array [Int ,0b11],0x9_4];$__(){}$4x(){}Constructor (s9:Int ;x4_,_j:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1422))

    def test_1423(self):
        input = '''Class g:m8{Val _:Array [Array [Array [Array [Array [Array [Int ,83],044],044],0x3C8],5],04];}Class l:__{}Class __{}Class _7:si1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1423))

    def test_1424(self):
        input = '''Class _:Z0{}Class ___:_82_{Constructor (v:J;oy:Array [Float ,22];G,__,t0,__,_AgC5_X_9k:Array [Array [Int ,0x6],22];R:_){}Constructor (){} }Class _{}Class t:P{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1424))

    def test_1425(self):
        input = '''Class l:Ms_2{Constructor (_15___:Array [Array [String ,0XE2],859];kU_1c_,_,__21_7:_){Break ;Return ;} }Class j:_____{Destructor (){} }Class __:q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1425))

    def test_1426(self):
        input = '''Class K{Constructor (_:String ;_x,S,v:Array [Array [Boolean ,0b1010],69];G7_,_,_y9,Y:Array [Array [Array [Boolean ,0B100101],0XBC_F7],69];_,__:String ;J:Y){_::$7()._16a_j_()._.K().lm.F1();Continue ;Break ;} }Class E:_{Var $_K,L:w9LKO;Destructor (){Continue ;_::$17._();}Destructor (){Continue ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1426))

    def test_1427(self):
        input = '''Class _9{D9(PW,Y:_;RC7DFK,_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,1_0],22],0B1],0X5],0b100001],0137],0X43],0B1],07],0X43];HY:Float ;_,_:Array [String ,0X43]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1427))

    def test_1428(self):
        input = '''Class KbR:j{Constructor (_:Array [Boolean ,0b1]){}Var _f_,_:KL;Constructor (){ {} }}Class O:g{Constructor (){}Var __x_:m;}Class _3:K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1428))

    def test_1429(self):
        input = '''Class G_3{Destructor (){} }Class l:Ov{Destructor (){}Val o2:Array [Boolean ,0x2D];$_(){} }Class _:_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1429))

    def test_1430(self):
        input = '''Class f:__{}Class _:k{}Class _f8j{Constructor (){}Constructor (_,_:Int ){}Var $9_V:Boolean ;Destructor (){} }Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1430))

    def test_1431(self):
        input = '''Class F_:__{}Class _{Var $_:Array [Array [Float ,7],0x14];Destructor (){Val _,T,_,__j,_9:Int ;}Var _:Boolean ;Constructor (){} }Class _:O{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1431))

    def test_1432(self):
        input = '''Class H_:T{Y_(){__H1::$__();}Val $__,__,li,$90,$__:String ;}Class _:J_3__{Destructor (){Continue ;Return ;Break ;}Var $_4_j,_v_,$_n,O,h8:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1432))

    def test_1433(self):
        input = '''Class V8:_0F{Val _,___y536:Array [Array [Float ,0XE_4],07_5_631];Val $5:Array [Array [Array [Int ,26],0b1],0x47];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1433))

    def test_1434(self):
        input = '''Class _:u{}Class _:_28cJ{Constructor (W:Array [Array [Array [Boolean ,0B1001],0x61],6];G1_8,_,_,r0,G,S8U_W_j:l){}$j(a,C:Int ;kS_,_IS7,e7:Boolean ;___:Int ){} }Class Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1434))

    def test_1435(self):
        input = '''Class I_{Constructor (_,_uS,Q_4_x,V,dI3_66,l:Array [Boolean ,0X3C];_:ly;_0c_,u:Float ;_:Db){} }Class __747n_{}Class __:z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1435))

    def test_1436(self):
        input = '''Class __T{Constructor (x____7_,_,_:Array [Array [Int ,0X2],0x19]){_::$r.BV._.___._._39_()._._C();}$_(){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1436))

    def test_1437(self):
        input = '''Class I_{Val _p26_3:Array [Array [Array [Array [Array [Array [Array [Array [Float ,072],0X71_E],10],072],072],0B1],072],072];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1437))

    def test_1438(self):
        input = '''Class Byx :K{}Class l33:k_{$wf_(_:Array [Array [Array [Float ,033],0X13],0X13];_,_:Boolean ;fS,zb:_D){}Val _,$3:String ;}Class X63_:fZ{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1438))

    def test_1439(self):
        input = '''Class _{Val $7v,L,$__:_;}Class _Y{}Class _{Var mD1:String ;Destructor (){}Val _:VN_;}Class tw33d_{}Class _5:__{}Class P{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1439))

    def test_1440(self):
        input = '''Class _{Destructor (){}Val $9Y_2J4,M:_3I;rp(HS:Boolean ;_,__4_60,C_W:Float ){}Constructor (_q:K){} }Class E:p{$___(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1440))

    def test_1441(self):
        input = '''Class _3:w{Var $_,__:Array [Array [Array [Array [Boolean ,2],04],0B111010],07_6_7_5_6_5];Val __,q:Float ;$7X0_(__:Boolean ;g__:P;N:String ;xpI:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1441))

    def test_1442(self):
        input = '''Class f_h:_y_Q_{O3(){} }Class l1:L4{}Class r8:_{_3_5_(_t_6_,_:Array [Array [Array [Array [Array [Boolean ,0X57],53],0X9],0b110111],0x25]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1442))

    def test_1443(self):
        input = '''Class _{Destructor (){}$z(__4_,e_1,O,_:X;p_,__c4o:A;t8s,_2:Array [Boolean ,97];_,y6z:Array [Array [Int ,0xC],0B1_1_11];__,K_:Int ;__g:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1443))

    def test_1444(self):
        input = '''Class _p:a{}Class ___{Constructor (){} }Class _{}Class _{Var C:Array [Int ,0x22];Val E:Array [Int ,01_4];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1444))

    def test_1445(self):
        input = '''Class _0{Constructor (h:Array [Int ,7_6_8_1];R:Array [Array [String ,0B10],1];Z_B_b,q,_:Array [Array [Float ,0X7_1],0X33]){} }Class _9{Var $6Y2,$7_:Int ;}Class M___:_{}Class ___{Constructor (_24,i_n,s:Array [Array [Array [Array [Int ,0X6_1],93],7],93];ZcJ6,r:Int ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1445))

    def test_1446(self):
        input = '''Class n{m(L:Float ;_:Int ;m80V,_U:Array [Array [Float ,0b111101],0B1010100];_:m8){} }Class ____{Constructor (){}Var $L:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1446))

    def test_1447(self):
        input = '''Class k9:_{}Class _T:_{Constructor (_:String ){}Val J,_:Float ;Var J14_,$0_EgR:String ;}Class _z{}Class _CdtY_4h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1447))

    def test_1448(self):
        input = '''Class __{Constructor (__c,a:Boolean ;_:String ){} }Class P:_6{Constructor (_:Int ;Oog_9_U3Gu,_:Array [Array [Int ,05],0X6];r0:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1448))

    def test_1449(self):
        input = '''Class _{}Class Qz8G1{}Class _XJ34S:k2t_{Val $S,r_,M:Array [Float ,0xE];}Class U_2y9_2r_o_X4:C{}Class _{}Class __7:k3{Var S__7:Array [Boolean ,0B1011];}Class a:ml{Val $_:Int ;_(dp3:Float ;q:Int ){Continue ;Val _,F:Array [String ,4_3_8];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1449))

    def test_1450(self):
        input = '''Class A:O{}Class V:q2{Val j:Array [Float ,0X32];Destructor (){}Var j:String ;Constructor (){}Val _,$_0_,i,D_:Array [String ,0142];}Class O{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1450))

    def test_1451(self):
        input = '''Class Q_:_{Constructor (_3,_3,C_0V_,_p_,u7:Array [Array [Array [Boolean ,065],065],0x4F];H,I,M4,_:Array [Array [Array [Array [Float ,0X6D_5],06],0b1_00],0B1];G,_1,A:_y;_,_d:Array [Array [Boolean ,07_1],0x7];g_,F:_J_;X4,_Y:_49){ {}Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1451))

    def test_1452(self):
        input = '''Class Y:x__4__{}Class _Q{Constructor (){}Var $9:__0;Constructor (Y,_,_:Array [Array [Boolean ,0B1_1],017];N:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1452))

    def test_1453(self):
        input = '''Class qy_:a{Constructor (_F:_;G3:String ;A:_;_:Array [Float ,04];_9:LK261h9){I::$_();Var _8:Array [Int ,8];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1453))

    def test_1454(self):
        input = '''Class _:_G{$We(_T6,d_:Array [Int ,01_74];_n:T;_6,_:String ;_j:Array [Float ,0B1_00]){} }Class _:_{}Class n{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1454))

    def test_1455(self):
        input = '''Class _:_{Var _6:Array [Int ,5];Var gtQ_,_24R1_,O_:_;}Class _:Q{Constructor (df,w,f,z,v_:a_;_:Boolean ){} }Class Qh:p{}Class _395_:_{$_(){s_7_8KL::$_.__();}$9(_,a_S:_){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1455))

    def test_1456(self):
        input = '''Class VC_2{}Class g_{Var $_,tz:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,19],0X5],063],0x48],4_7],89_311_2],03],0X5];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1456))

    def test_1457(self):
        input = '''Class _1K:_{Constructor (lz:Array [Int ,0B1];_:Array [String ,0B100011];_yu:Array [Array [Boolean ,84],02];H:Boolean ){}_4(){}Val $_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1457))

    def test_1458(self):
        input = '''Class __{Constructor (){}Destructor (){} }Class _:s{Var $02_,$04:Array [String ,0X4F];}Class C{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1458))

    def test_1459(self):
        input = '''Class AU:___{}Class __I{Val $_2:Float ;Val $2,Ee:Array [Array [String ,0X53],060];}Class _Z2_27:_4k{Var ___3_,go,_9_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1459))

    def test_1460(self):
        input = '''Class _7{Val $8:___;Val _:_9;Var _:Array [Float ,91];Constructor (__:_){}Var _,$386:Array [Array [Array [String ,0B1100],015],0b100111];Var $iJ_:E_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1460))

    def test_1461(self):
        input = '''Class V_hx:__{Var _,$24:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0b101],0B1_0_0_1],071],027_02],47_3],0B1],2],0X38],0XF];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1461))

    def test_1462(self):
        input = '''Class F{Val $_:Array [Array [Array [Array [Array [Float ,0x9],46],5],0B100],46];Destructor (){} }Class _u:_{}Class _{Val $s_q:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1462))

    def test_1463(self):
        input = '''Class _:u{Constructor (p8:String ;Y:Array [Array [Array [Int ,0X57],7],0x26];_2,_X1_1,y:__;__,__dC:Int ;Lm_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1463))

    def test_1464(self):
        input = '''Class Y{$_4_(__a:Array [Array [Array [Array [Float ,0x5D],01_3],2_8],0X64];jZ6,K:Array [Float ,03];___iF3_l:Array [Array [Int ,066],3_5_5];_d8_:Array [Array [Array [Float ,0x5D],0x5_2],0x5D];_:_){} }Class _:_{}Class U:_1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1464))

    def test_1465(self):
        input = '''Class a7:_2{_(_2_:J;h:Array [Int ,62];uo:Array [Array [Array [Boolean ,0b1000100],0xAD],0B1001100]){}Val _1__:Array [String ,0124];}Class _:B{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1465))

    def test_1466(self):
        input = '''Class J:_{Constructor (r:Array [Array [Array [Int ,8],0X5F],8];_,O9,_,fwK,_,kr,B2:__){Break ;} }Class _M{}Class W_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1466))

    def test_1467(self):
        input = '''Class _:F9{Var m:String ;}Class _:m{Var $7d__C,_096,_:Array [Array [Boolean ,07_05_7],05_3];}Class u:_{Var $6_,_:Array [Array [String ,8],0B1];Val $r_1_:Array [Int ,0X22];}Class _:_7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1467))

    def test_1468(self):
        input = '''Class RAP{Val _:Array [Array [Float ,33],0X3];_(u12_u:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0b1011011],0B1],0x63],03],042],33],0X29],042]){} }Class _X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1468))

    def test_1469(self):
        input = '''Class _{}Class _c8:eQ{}Class N_6_{}Class _k{_1(_:_;b8,v49Y:Int ;m5:Array [Float ,0X33];j,_o:Int ){} }Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1469))

    def test_1470(self):
        input = '''Class Fj:_x{Val $_:Array [Boolean ,0x397];}Class U{Destructor (){}Val $_,$_,$__1_:u;Destructor (){}Var __,zBE:Array [Array [Float ,2_6],013];_4(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1470))

    def test_1471(self):
        input = '''Class _T{Var $_,h_:Array [Array [Array [Array [Array [Boolean ,03_3_1],02_0_3],0B1100001],0XEE7_4D_8_E_5],06120_3];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1471))

    def test_1472(self):
        input = '''Class __:_Y{Constructor (_,__2_,J,T:o;_S,p_:Array [Array [String ,0x7_9],0X4];lQ:Array [String ,0x3D]){} }Class l0__mc{}Class _{Var f:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1472))

    def test_1473(self):
        input = '''Class __pgO3_{Val f_:Boolean ;}Class G:_{Destructor (){} }Class _3:_q{Constructor (_c5_:Int ;_,_i,_9:String ){}Val $_0_n,$u,$7,$4_Q:Array [Array [Array [Array [Array [Array [Array [Array [String ,15],0103],87],04],0XA],02],02_5],0B1];}Class _IR_{}Class k24_{}Class t:_{Var s4__J,$2_w:CZ;Val $3:Array [Array [Array [Array [Array [String ,0X33],0b1_0],0X33],0X7],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1473))

    def test_1474(self):
        input = '''Class ____:FR4{Var m__:_6_R;Val $08_,o,$Q,b,_:Array [Array [Boolean ,0B110],0b10];}Class __I__Q___{}Class Jw6{Val __4__,c_,$O,U:Array [String ,0112];}Class _{h__(_,H,_:Array [Array [Array [Boolean ,0X5F],0112],25]){}Var __G,$T:D0;Val $_,_:a;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1474))

    def test_1475(self):
        input = '''Class _:R_1{Destructor (){Continue ;} }Class _:yc{$l6(){} }Class k:OQ0_{Destructor (){Var _,_:Array [Array [Array [Boolean ,0xA_0],0XC_F],0b101111];}Constructor (H,D,__:Array [Boolean ,0xC9]){Break ;}Var _,K8r1____,zX0_,H97:_d;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1475))

    def test_1476(self):
        input = '''Class V{Constructor (_4:String ;_5,A,t:Boolean ;_:Int ;_,_K:Array [Array [Array [Int ,0B1_110],0b1],0XB_E]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1476))

    def test_1477(self):
        input = '''Class _I_:X3s_{}Class ev:k{}Class _9:_{Val $__,Lm,$54,id,$_:Array [Array [Array [Array [Array [Int ,0x9],03_33],0xBF],4],020];Var _,$8,D:p;Constructor (r:Boolean ;a_:_){Break ;__04Z2::$y.c.z().__l();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1477))

    def test_1478(self):
        input = '''Class _{Var $x5G3_,$3:Array [Array [Boolean ,0X50],0b101010];Val $0_J4X,z2_:Array [String ,06];Val $2,__,_,_:_h;_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1478))

    def test_1479(self):
        input = '''Class s:_{}Class _:_5n{}Class wr{}Class A{Val pFo1_o__83,Z4:Array [Float ,9];Var $N:Array [String ,0XC];}Class _N:__6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1479))

    def test_1480(self):
        input = '''Class _:__{$1R0(P:Array [Array [Boolean ,0x5D],0134];_,N,p,P_:__;i,_9__T:s;Q,J9wL,j_:Array [Int ,0B100110]){}Destructor (){}Var g:String ;Val __:Array [Array [Array [Boolean ,6],0x5D],0134];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1480))

    def test_1481(self):
        input = '''Class l:_{Destructor (){}__(){}$1(i6,_2_,N6_9,F_:Int ;_,Y,_,v:_;mCg,_79:Array [Array [Boolean ,0X1D],5]){}Val n:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1481))

    def test_1482(self):
        input = '''Class _{Constructor (_,_,F__g:Int ){}Constructor (d_:__GTi;_uf:M0_ip_;_,_:b6r;_,z:Boolean ){}Var $__:Array [Array [Array [String ,05],0B110_10],723];}Class z:u__4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1482))

    def test_1483(self):
        input = '''Class o:_{Var $w,$_5F:Int ;}Class l3:_{}Class H:__{Var U2,$_:Array [Array [Array [Array [Int ,04_0_27_3_4],5],0x61],062];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1483))

    def test_1484(self):
        input = '''Class YS{}Class x:_{k(_Y,_,A_8,A:Array [Boolean ,0B1001101];G,j:Array [Array [String ,6],37];__,_:Array [Boolean ,9_3_4]){}Var $_:_4;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1484))

    def test_1485(self):
        input = '''Class c{Constructor (_p:String ;q_,_,RdH:Array [Array [String ,73_51],0b10];B:_4;_:String ;_,s,_G,_:String ){} }Class __{Val $_:Array [Array [Array [Float ,0x1A],0X4],0B1_1];}Class d1{}Class O0:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1485))

    def test_1486(self):
        input = '''Class _D:r324_{}Class w:K{Var Nevf___x0:Int ;Destructor (){}J_(Zv64dP:_9_){} }Class J{}Class X{Constructor (_e_:Boolean ;N:Float ){}Val $__m:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1486))

    def test_1487(self):
        input = '''Class B9{Var $_8:G;Val y,_,$9_8:Array [Boolean ,0x36];Val _,_9:String ;Destructor (){}$_f_g2(){Continue ;Continue ;Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1487))

    def test_1488(self):
        input = '''Class ab0:_4{U(B_:Array [Array [Array [Array [Array [Float ,0753],7],0b101010],0x7],0B10];xm_,_:x;__:Array [Boolean ,0XE];R,_:I;_4b:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1488))

    def test_1489(self):
        input = '''Class _{Constructor (){}iw_o(){}Constructor (s:Float ;_,K,l,L,M___,_6:Boolean ;___:Array [Array [Int ,0B111001],0b1_10];_:Z4){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1489))

    def test_1490(self):
        input = '''Class q_{Constructor (L,_,i0:Array [Int ,0X3_3];_k:Z24){}Val _5t,_,$v:Array [Float ,0x41];Destructor (){}Val $_4,B,m,__,_8_,O3_2v:__A;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1490))

    def test_1491(self):
        input = '''Class _:z{Constructor (o_:u;B,S:Array [String ,0x47];M,_:_x__6_;p,n06:_K_){Val p,_:Array [Array [Array [Float ,92],0B1],0X5E];} }Class o_{$E_08(y_Z,o,_4,_3N:Float ){} }Class Z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1491))

    def test_1492(self):
        input = '''Class b{Var $_3:_2;Constructor (__:_;O_,_:_){}Var __:Array [Array [Array [Boolean ,0b10_1],0b1011],06];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1492))

    def test_1493(self):
        input = '''Class __c_{$_e4_8(Fr_:oT;_4_,d,_,_El__C75D:Array [Boolean ,05];n_,_lY:Int ;b____88is,_6__87:Array [Array [Array [Array [Array [String ,0B1_1],19],01],06_57],04];_,_:Array [Int ,0124]){Continue ;} }Class _:Y{Var $_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1493))

    def test_1494(self):
        input = '''Class ___{}Class _g{Var __,zF_,$_,$73R98_2,M8nd,u,$5kW7,__,$H3,DJ5_:Array [Array [Array [Array [Int ,9],0b1],01],0B1_1_0_0_0_0_1];}Class CVK{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1494))

    def test_1495(self):
        input = '''Class _5:_{}Class g__{}Class __{Constructor (){}Destructor (){}Destructor (){} }Class __{Constructor (X2_,p:___){Break ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1495))

    def test_1496(self):
        input = '''Class Wk_{Val mX,$0_,y4:__;Constructor (u,_,_:c;_:_;_v:Array [Int ,02]){Var _3Q__:Array [Array [Array [Array [Int ,05],02],0B100010],10];}Destructor (){}Var $H,y1K:Float ;Var $_,_:Boolean ;Destructor (){Val P:Array [Boolean ,0B100010];} }Class _j4:_{Val $_,$_:Array [Array [Array [Boolean ,10],0XF],6];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1496))

    def test_1497(self):
        input = '''Class __1{Constructor (){}Val $5_163,L_,$9WDAn,$_,_:Array [Array [Array [Array [Boolean ,0b1101],03_50],03_3_6_1],024];Val _,$_5:String ;}Class _:_5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1497))

    def test_1498(self):
        input = '''Class _:_w{_(L_:__I){}Val _9,$_,$r:String ;Destructor (){} }Class __2{Destructor (){} }Class _c_8x5_:Q{Constructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1498))

    def test_1499(self):
        input = '''Class _Fl:B__7{Val i0:_;d84(R:Array [Array [Array [Array [Array [Boolean ,0x9],0B1_0],0B110000],0B110000],48];z_,__,_:Array [Array [Array [Float ,0X3_A],48],016];_:Array [Array [Array [Array [Array [Array [Array [String ,0XF],0x6],5],0X5],0x6],06],016];_N4,K0:Array [Array [String ,0x6],1];_37a,U5:E){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1499))

    def test_1500(self):
        input = '''Class __{Constructor (e,__5,H2:Float ;s:Float ;UE,Q,__U_:W;__,_:Array [Array [Boolean ,0XD],0101];uf_:Boolean ;_:Boolean ){}Val Y:lD;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1500))

    def test_1501(self):
        input = '''Class Y{Val G,T,f:Int ;}Class _AY8{}Class KC{}Class f{Constructor (F5:Array [Array [Array [Float ,0b1000111],077],0B111]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1501))

    def test_1502(self):
        input = '''Class _{Constructor (_:Array [Int ,0X26]){}Destructor (){} }Class aX:_{Constructor (_9_:Array [Float ,0X9]){}Destructor (){} }Class z{Constructor (_:WO;_,_4,ti,_:Float ){}$L(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1502))

    def test_1503(self):
        input = '''Class f{}Class __1:a__{}Class G:LXo3{Constructor (__72t__2:String ;_2,_,f_:Float ;_X,Oo:c3;__,__:Array [String ,0b11];Y_:Array [String ,0X48];_,_:Array [Int ,063]){}$Z_(__,_1,N5,_7,C:Inf ;a6:Int ;__5:z){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1503))

    def test_1504(self):
        input = '''Class _{Constructor (_04HU,e_:Boolean ;A0:Int ;x63:Array [Array [Array [String ,0X5E],06],0B1];Q5G6e,Z,_,_3b,b_:M3){} }Class _2:_w{$6(I_,d:String ){} }Class _:W{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1504))

    def test_1505(self):
        input = '''Class _40U:_{Constructor (I,B_:_16_;_,P68,C,_,_:k;G:_4Q;m,y59_:Array [Int ,05_5];hun:Int ;r:Int ){Continue ;}Val $w7_4,_f___,$_0,a,$5_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1505))

    def test_1506(self):
        input = '''Class y:_{Val C,D:Array [String ,05];}Class _s:_{}Class C_{_80(){_::$_();}Destructor (){} }Class f_g{}Class F:_{Constructor (){Val t,J_,W,_E,__:Array [Boolean ,91];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1506))

    def test_1507(self):
        input = '''Class __:_{$_(_,_:Array [Array [Array [Array [Array [Boolean ,1],1],0B1000101],0X1_9],023]){} }Class _p:k_{}Class G8:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1507))

    def test_1508(self):
        input = '''Class __{Constructor (Jr,_,S__I4j:Array [Array [String ,0x1F],0B1];_,j:Array [Array [String ,0b1_1_1_0_01],0x5F]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1508))

    def test_1509(self):
        input = '''Class v__:R{Val _2_:Array [Array [Int ,36],0xB];H(u,A,_,_,gU4_,_,YkE:_){Continue ;} }Class w{}Class O2Fbci2:Q_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1509))

    def test_1510(self):
        input = '''Class _M{Constructor (_2,Q_,_Lz4_fN_:Array [Int ,87];W_,_,_,___,Z,_N0:_){ {} }Var $z_a_,$_,_E__u9:Array [Array [String ,0B1001001],0564_4_1_6];}Class _6__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1510))

    def test_1511(self):
        input = '''Class _o9P{b(lmEuH5:__;_,h,N:_;_:_;_,_:Array [Array [Array [Array [Array [Int ,0X42],26],0b1],05],8]){}Constructor (f,_,tGx,P,_:Array [Array [Int ,0b1010111],0X42];A:_;_:Int ;cK,y3,X0L:y){}Var $__:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1511))

    def test_1512(self):
        input = '''Class __01{}Class Zm{}Class ryZ{}Class _64:_{}Class t__66_11_:KX{Var $4X0T:Array [Boolean ,0x5];Constructor (){Var i_,g31,O,_:_1;}Val $_S,$5__,_7,$_:j;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1512))

    def test_1513(self):
        input = '''Class cud{Destructor (){} }Class T{$9(_:Array [Array [Array [Array [Array [Boolean ,040],0X9],0xE],0B10],896]){}Val _x,_:Boolean ;}Class g{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1513))

    def test_1514(self):
        input = '''Class K_c_9:p{}Class PI:_{Var $z:_L;$6(I:Array [Array [Boolean ,01_620_1],0B1010011];_:Array [Boolean ,0B1010011]){ {Continue ;}Return ;Break ;} }Class j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1514))

    def test_1515(self):
        input = '''Class _:__{Val x0Q,_6:Array [Array [String ,0x31],28];Constructor (V,S,_h,__,C,q3,xhY,_:String ;I8E:Float ;_B,T,b:Int ){Continue ;}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1515))

    def test_1516(self):
        input = '''Class DyTu__C_:___c{}Class n{Constructor (){}Var $K,_X6:Z_q4_8_;$35(){Continue ;} }Class H:_9{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1516))

    def test_1517(self):
        input = '''Class H{}Class k{Destructor (){} }Class _:M_{Val v:Array [Array [Int ,0XB],65];}Class __{Val _:Array [Boolean ,0B11111];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1517))

    def test_1518(self):
        input = '''Class v_B_{Var _J,_,X,$i3o4K37,_7:Array [Array [Int ,0b111100],0112];Constructor (O:Ai_l_4){}Constructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1518))

    def test_1519(self):
        input = '''Class BM6:X{$___(_,T,LIw,K,c,_L:L_C;_n_Xej5_,X,s,I,Qu,s:Array [Array [Float ,0B1001011],3];E:Float ;D,z,_BS_8_,_:Array [String ,0B1001011]){}Val t:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1519))

    def test_1520(self):
        input = '''Class r{Val $y:Array [Array [Array [Boolean ,3],0b1000110],36];}Class _{Destructor (){Var X,L:Int ;} }Class g:_{}Class M_:cM61p{}Class U:U{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1520))

    def test_1521(self):
        input = '''Class F9_8Y{T28(){} }Class X5:_{Constructor (X,_s8,_:Array [Array [Boolean ,0153],010];_:Pj0;b_33_,x,_3C,_:__;p1:X){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1521))

    def test_1522(self):
        input = '''Class b:__{Destructor (){}Val _:_;}Class _9__{Var $z,B23E:Array [Array [String ,0X9],3];Ww_(p93o4_EG8,__,_:Int ;NX:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1522))

    def test_1523(self):
        input = '''Class _e{Constructor (_:_;_U:Array [Array [Float ,0B1100],3];_,_:s;L:Array [Array [String ,0B1],0B1_1];_2,_,_R,c_:Array [Int ,0B1];p,_,H:String ){}Destructor (){} }Class E{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1523))

    def test_1524(self):
        input = '''Class cZaVQ{$m(){}Constructor (_:Int ){}$PC31(__M5:Array [String ,0B1];_,_:Array [Array [Array [Float ,0b1],8],0x8B77_BA];zl_:_){} }Class Vn__:h{}Class _4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1524))

    def test_1525(self):
        input = '''Class _2{Constructor (q_3,_x:_05__;F:Array [Array [Boolean ,017],0x40];c:rl6;d0_E9:Boolean ;_:Array [Boolean ,7];b:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1525))

    def test_1526(self):
        input = '''Class Ajh6{}Class _9:_{}Class _:_{Val _0Q:Float ;_(){} }Class _{Constructor (_,_7:J;__:_;_,_:Array [Int ,9];_frhP,U,Er0P0,i,d:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1526))

    def test_1527(self):
        input = '''Class T6:m{Destructor (){} }Class c:_{Destructor (){}$8_(){}Destructor (){} }Class N{Constructor (x_7aVkmSI:Array [Int ,0X1]){} }Class _0_rPs{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1527))

    def test_1528(self):
        input = '''Class __{}Class _{H_T(W:Array [Array [String ,49],0B10011];Z:v){}Destructor (){} }Class n4V{Var _,_M8:String ;}Class cz5:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1528))

    def test_1529(self):
        input = '''Class _:_{}Class _:_1P_o_{Constructor (c,__:Int ;_:Array [Int ,16_9];d:Int ;__9,_n,_:Array [String ,075]){} }Class vb{___(A0k,z,_:d){}Var _:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1529))

    def test_1530(self):
        input = '''Class b__W{Var $0:_;_(___,_,_,_,a__:w;W_:Array [Array [Int ,03],16];_,U,z6:_){} }Class m_:haL{}Class _4{}Class z_:_g{Val $_2,$0_,__:r_;}Class H_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1530))

    def test_1531(self):
        input = '''Class s_:_{}Class q{_(tD,_,j:Array [String ,5_9];__9,__:String ;Q_,M_,DW:Array [Array [Array [Float ,0X16],35],033];L_,_,_,_:Array [Int ,86]){}_(_,__:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1531))

    def test_1532(self):
        input = '''Class _:_Z{Constructor (_,__30,_9_06,_,_9P3:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,60_72],79],06],79],0X5],043_3],2],0B1_1];S,z:String ;__,_P,_:Array [Array [Array [Array [Int ,0B110010],79],4_4],0b1101]){_::$947();Continue ;Break ;Continue ;Break ;Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1532))

    def test_1533(self):
        input = '''Class c6:_{Constructor (k79,i_:C;__6:String ;_:Array [Array [Array [Array [Array [String ,14],06],0b1],0B1011_0_1],0b1]){} }Class s8{}Class _:l{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1533))

    def test_1534(self):
        input = '''Class _{Var $4:___;Constructor (T,Q,__1q_:_){}Val $CJ:_;Constructor (){} }Class r_{Var $_:Int ;$_06S8p(){Continue ;} }Class vin:C{}Class v1:_fcY{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1534))

    def test_1535(self):
        input = '''Class _g{Val u,_:Boolean ;v(_0__:_){}Constructor (_:Int ;_:Int ;_,_,t:Array [Array [Array [Array [Array [String ,0X3_C],0x4F7],0x7_5],0x5],0b101011]){} }Class JS:__{$5(){R::$_0L();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1535))

    def test_1536(self):
        input = '''Class __{$_(U6:Float ){} }Class O:_{}Class v:_5a{Var Q_rj,T,$2,Aa:Int ;Val $3:R;Constructor (_,e,DL_6M:U;_:Boolean ){}Constructor (w:Float ;__,F,_,yJ,b:Boolean ){}Val ___,Y_5P_,I,$t:Boolean ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1536))

    def test_1537(self):
        input = '''Class _{Val _6fB_:Array [Array [Float ,0x62],50];Val $6b:Array [String ,020];}Class q{Var _:__b;Val $__:uU;Var __,_m___:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1537))

    def test_1538(self):
        input = '''Class J:Q_0{Var $XT79__:Boolean ;Constructor (X:Boolean ;DS:Array [Array [Array [String ,1_4],0x6A],37];_:_5V;_,_,M,_7_,_:Int ){} }Class a9:Sdv{Constructor (N_909__b4,VD:Float ;_o:_;_S5:Array [Array [Array [Int ,0X58],0X58],0134];_,_,v8:Array [Array [Boolean ,37],0b1001000];M:String ){}Destructor (){}Val L,_G:Array [Boolean ,9];}Class Id{}Class W8{Val $_1_A9,y,_,Kh__69:Array [String ,03_3];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1538))

    def test_1539(self):
        input = '''Class _:_{Constructor (rL:Array [String ,12];ff,H__0:Float ;_4m_1O,_1:Array [Float ,0x3]){} }Class ____F7_96{}Class IO_{}Class __:_{}Class _:f1_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1539))

    def test_1540(self):
        input = '''Class N_5:c{}Class _1:Sy{$_8_(u56_fW,_9:Array [Array [Int ,0121],03_3];m81,_o__:Array [Array [Array [String ,0x30],0b1],0b111101];__0:A;OV,__:_){} }Class j{}Class _{}Class O:p{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1540))

    def test_1541(self):
        input = '''Class p:_9{Destructor (){} }Class v_f1ge{Val _,_T69W_:Boolean ;Destructor (){Var b_t9:Q;} }Class P05a:_{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1541))

    def test_1542(self):
        input = '''Class _:r{}Class _{$i(_:Array [Boolean ,6_1]){}Var Qv:Array [String ,046];}Class __w_3:D{}Class F:R_Y_qhm__{Constructor (a,_:Array [Array [Float ,89],0x41]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1542))

    def test_1543(self):
        input = '''Class _8b0:z_{}Class jR8L{Constructor (_,__:String ;G__,c,_h:Array [Float ,9];d,g_:Y;k,_:Array [Boolean ,041];_c:L_){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1543))

    def test_1544(self):
        input = '''Class e{Var g,$8_71:Int ;Var $D2j:Array [Array [Int ,15],075_2_4];}Class m:a{}Class _4{}Class n_B_X8__{_(_03,_,Bu5:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1544))

    def test_1545(self):
        input = '''Class a{Destructor (){Return ;}Constructor (_:__;Lo6I:A;___:Array [Boolean ,0B1];w:Boolean ;__:K1;_:_;_27:Array [Float ,0XF];_:N){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1545))

    def test_1546(self):
        input = '''Class _1{}Class J{}Class Q8_V:_{Constructor (_:Float ){Val _4_,W,_S,MdO_,Y,__,i_:Int ;} }Class b9:_B{Destructor (){} }Class _eH5k{Var $2u:Int ;Constructor (j_,H,o:Array [Array [Boolean ,0B1],35];_30,S_:Array [Float ,97];_,_5h:String ;z__9_,_,_:Array [Array [Float ,0B11001],0X1];_X,_,_1GLF:Array [Int ,6_4]){Re::$_P();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1546))

    def test_1547(self):
        input = '''Class _:_J9{}Class ___{_(_,s24Lc_:Boolean ){} }Class d9_{_(_ZE_zj:Int ;t,_41,O:_d9;_dzW,UE,j9:Array [Array [Float ,04],037]){}R(_:Array [String ,4];__,_:_8;_d7,y:Int ){Break ;Val k_p,i_09:v;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1547))

    def test_1548(self):
        input = '''Class i{Val _:Array [Array [Array [Array [String ,0x17],0b1100001],02],0X97];}Class J59:v{Var $_:Boolean ;Var $_,_,T,$J,J1,$8,$5,$f,S_Z:_1d;}Class _:I669{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1548))

    def test_1549(self):
        input = '''Class t:g3_{Val f_,S,U_,$Y,$9y:Array [Float ,85];}Class _{$_U(__L,_:L;y84,__:Int ){Continue ;} }Class _9{}Class q_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1549))

    def test_1550(self):
        input = '''Class _:L{_(){}$_b_52(IY:String ;_f41,z:Array [Array [Array [Float ,0XB],0x23],0B1_0]){Return ;} }Class Z{}Class Wi__z{}Class e{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1550))

    def test_1551(self):
        input = '''Class n_3:_{$_17(_,d_E:t;_:Boolean ;r,W,h:Array [Int ,0B11000];U8:Array [Array [Array [Array [Array [Array [String ,99],0b1110],012],5],0b1],0b1110];C_:Boolean ){}Var $E:Array [Array [Float ,0B1101_1],99];Constructor (){ {} }}Class w__YZ3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1551))

    def test_1552(self):
        input = '''Class _9:l3{_(_,_zy3,_:Array [Array [Boolean ,0X8],02]){}Constructor (_Z,_,J,G:Array [Array [Array [Array [Boolean ,0b111],07_4_5],03_400],0X7];_,_01_,_:R;__,_:Array [Int ,0107];FV4:Array [Array [Array [Int ,82_87],58],0B1_1_11]){}Val $b_n:Array [Int ,6_2];Constructor (){} }Class _8__:B{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1552))

    def test_1553(self):
        input = '''Class _{Constructor (u,_:Array [Int ,0x12]){Return ;Var goY:Array [String ,0x4_2]=!!!!!Null ;} }Class G9{}Class _:A{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1553))

    def test_1554(self):
        input = '''Class E_{Constructor (){Val N,_5:Float ;} }Class __:_37{Constructor (b_Hc:Array [Boolean ,0110]){}Val cC:_4;_(){}Destructor (){}Destructor (){}_(){}Val __8_j_44:bJ5;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1554))

    def test_1555(self):
        input = '''Class _:_3__h_5{$f_7(uU_d,z5_:String ){ {} }Var X_:__;Constructor (V,dh,E,_:Array [Array [Array [Boolean ,041],0B110_10],0b1]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1555))

    def test_1556(self):
        input = '''Class Z{Constructor (){}Var $_,$c,$u:Array [Boolean ,64];$0(_j_QR,_7,_O9:Array [Array [Array [Boolean ,01_3],0X5F],4_5]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1556))

    def test_1557(self):
        input = '''Class _2{Constructor (ZL,_E1C_FP_,Jn:Array [Array [Array [Float ,041],0x57],0B1_00];___,w_f6_9_rN1:_616;E2s,_,_,_:Boolean ){} }Class F:_{}Class _{Var $F:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1557))

    def test_1558(self):
        input = '''Class Bxw:_{Var __,_,_,$1,__w04,__q:Array [Boolean ,054];Destructor (){d_A::$4();} }Class F{Val $_,$__8,nr6_8,$T,_,_K:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1558))

    def test_1559(self):
        input = '''Class _{}Class _{}Class _3gMQ_:k_4_NWi{}Class j85{Destructor (){}Val $3:String ;Var C_:__1_37_j;_(_:Boolean ){}Destructor (){}W(){}Constructor (Uvl:Boolean ;_5_K_,KC4,_q:o){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1559))

    def test_1560(self):
        input = '''Class Q:_{}Class _{Var $7:Array [Array [Array [String ,32],075],010];}Class pJ{Constructor (Fic3_:Float ;___:Array [Array [String ,0B1001100],32]){Return ;}Destructor (){} }Class V88{Val $_,$087,SU,_g:Int ;}Class _M{Var W,$_,HO:Float ;_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1560))

    def test_1561(self):
        input = '''Class _6:_{Constructor (t0,_C_515_5_,_,__:Int ;J:Array [Array [Boolean ,0b110011],7];_:String ;N_,_,O,_,V0,no,__,_1_,jW,H,r:__B){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1561))

    def test_1562(self):
        input = '''Class _{Constructor (){_::$_._.Dr5().__._.m__p0P.QA._3.V();}Constructor (){zi::$48M().Hz1q();}Var $_,h,C,_py:Array [Array [Array [Boolean ,0113],0xF],0X60];$O_(){Continue ;}_9p(y_:_){}Var _9456,$JQ,$F,_3_X:String ;}Class _{$w(_5,_,_,_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1562))

    def test_1563(self):
        input = '''Class L{Val _4H6_WE,_,_7:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,6],43_314],2_6],0x7],0x3],02],7],041];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1563))

    def test_1564(self):
        input = '''Class l{}Class _2:t{Var _8:Nc;Constructor (Yx:Array [Array [Float ,0B111101],0677];_6,__,__:String ;_,w_,_,_:Y_w_e;AQ8,_,J,D,__,q,_4K,u,K,_S:Int ){} }Class __:h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1564))

    def test_1565(self):
        input = '''Class t__{u(J3:_;u_,GTp,V:_;k6cm_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0X1C],8],0b101011],0X1C],9],01_7],0XEF_8],77],0b101011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1565))

    def test_1566(self):
        input = '''Class _{Constructor (){} }Class _5:_{}Class _gG{}Class _:j{Constructor (){}Val $_,$81_,_,_A4,_7c_:_4_;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1566))

    def test_1567(self):
        input = '''Class H:_x{}Class _{Val _iI93:Array [Array [Array [Array [Boolean ,27],27],0B1011111],0B1_1];}Class _:_23{}Class F__N:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1567))

    def test_1568(self):
        input = '''Class iC0{}Class G:l{Val $4,_,_:Array [Array [Array [Array [Array [Array [Int ,0XB_68],0X99],9],01],99],0b1001110];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1568))

    def test_1569(self):
        input = '''Class H{}Class _{Val $2S__:Array [Array [Boolean ,7_5],8_5];Var i,$_,$_Q,_,$5_Y,$U:Array [String ,0XE];}Class k:E81{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1569))

    def test_1570(self):
        input = '''Class Y__{$___(_:__;f8,_,x0b_,_8:Array [Array [Array [Int ,0x2C],0B100010],73];w:Array [Array [Array [Float ,0b110101],58],0b110101];__:Boolean ;_3y:Array [Float ,01]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1570))

    def test_1571(self):
        input = '''Class __5:tr_18N{$p_(F:Array [Boolean ,0x4];b:Array [Array [Array [Array [Float ,1_6],0B111100],35],0X4]){} }Class Z_:_14{}Class _5:g{}Class _:_6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1571))

    def test_1572(self):
        input = '''Class _m:c_5{Destructor (){}Constructor (){}Val $i5:_9;Val W:Float ;}Class M:_{Val $_:_;}Class KX:D{}Class _:I5_{Val $G1_:Array [Boolean ,38];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1572))

    def test_1573(self):
        input = '''Class _:_{$34(_7_,_:Boolean ;QU2T__I:uP07;f_P,L,_:Float ;_:Array [Int ,0xC_B];_9,r:_X;_0,MuuH,v:_){Break ;} }Class b_:___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1573))

    def test_1574(self):
        input = '''Class f{Val k:__0;}Class Y:a{Constructor (GL:Float ;_,Z:L;F,_:Hc_v;__6_B_:Boolean ;i:Array [Array [Array [String ,4_42],0B1010000],017]){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1574))

    def test_1575(self):
        input = '''Class __{Var $L,_M__8:Array [Array [Boolean ,0x4],0125];Constructor (){} }Class j:_{Var $_,$h,j_:Boolean ;}Class _T{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1575))

    def test_1576(self):
        input = '''Class _:__{Var t:Array [Array [Boolean ,02],071];Val L,V:Array [Float ,0XE];Destructor (){} }Class a7:_{}Class k3{_(__70:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1576))

    def test_1577(self):
        input = '''Class _N_8_8e:_1__{xE(z:_;uK,_,X:_;_7:_;_4,L:__4yQ7_;j,hd8:Array [Array [Array [Array [Int ,0x59_C_E_D_1_B],07_3],0B1010101],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1577))

    def test_1578(self):
        input = '''Class _9{}Class v082:_{_b(__tU,_2:W896){Continue ;} }Class ___5:l{}Class _:__j1{Constructor (_1y:Boolean ;R,__2,aZ:Float ){}$8___D80(){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1578))

    def test_1579(self):
        input = '''Class ___:_{Val _:Array [Array [Array [Int ,07_7],0b11_0],0B1];Constructor (_5:Array [Array [Array [Float ,0xC],0X1D],07];y2,_:Array [Float ,0x2]){}Val $__:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1579))

    def test_1580(self):
        input = '''Class J{Destructor (){} }Class _:_{Val _71B:_8;}Class s:m{Val $88:Array [Array [Array [Array [Array [Float ,9_2],0b1],0135],0135],0B11_1_1];Destructor (){} }Class c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1580))

    def test_1581(self):
        input = '''Class _9_{Val Z:Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1_11],1110_6_25],010],04],62],0b1001000],0x4D_D];}Class n{}Class _{}Class A__:f{Constructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1581))

    def test_1582(self):
        input = '''Class _Z:H___P_{Constructor (k6_,H7:Array [Int ,0B1000000]){} }Class kV{_(_S:Array [Array [Float ,0b1],0B1000000]){Break ;}Destructor (){}_(_:Array [Array [Array [Array [Array [Boolean ,0B11],0B1],05],05],0b1000101];d5:Array [String ,05]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1582))

    def test_1583(self):
        input = '''Class _{}Class __{}Class _r__s:_00{}Class _:_J_{}Class __:A{}Class R:_n{Var $u:Array [Array [Array [Int ,0x2],0b1],0106];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1583))

    def test_1584(self):
        input = '''Class n6{Var W_:_;}Class _5_5{Val mh_0,$_,$f,$9:Array [Array [Array [Array [Int ,0X49],0b11],04],40];Var $2,$v5,$_:u;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1584))

    def test_1585(self):
        input = '''Class _{Constructor (_H,Q7_,_,_,__1,_:String ;__j:Array [Float ,0B110110];_,__i:_;S:Int ;_,X4C:Boolean ;_vR_,_f0J:__){}Var ap,_h,__:String ;}Class _:lV10{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1585))

    def test_1586(self):
        input = '''Class h{Var i5:Array [Float ,69];Constructor (vk,E_3:Array [Array [String ,0126],69];Hd,U_,E0:Array [Array [Int ,0b1],0126];__:_){Continue ;Continue ;}Val $_9__:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1586))

    def test_1587(self):
        input = '''Class p:g{Constructor (K:Array [Array [Array [Array [String ,0X3_F],0XC],0137],23];N:Array [Boolean ,01];_,A,_,x,H_,_1b__,b9A2:cu){ {} }Val R:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1587))

    def test_1588(self):
        input = '''Class G_6{Constructor (_:String ;p,__:_3_;_:String ;__24:Array [Array [Float ,20],0B10_01];_,_:String ){} }Class I{Var $Zk:G;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1588))

    def test_1589(self):
        input = '''Class _Q3:IQ{}Class _8_1{Constructor (Uj_O1N_,_:Array [String ,0B1];V:Int ;A,_,_,_,_:Array [String ,0B10011];_,__,V6:Array [Float ,0B10011];J:Float ;p0:Array [Array [Array [Array [Array [Float ,05],0B10011],035],7],0B1]){}Val $n,$___,b,$5_J:Array [Array [Array [Array [Array [Array [Int ,0B10011],14],0X78],0b110010],0B10011],0X63];Constructor (I1,R___,__:o__;BV,_,ru1:Array [Array [Array [Float ,0B10011],0B10011],013_4];c,e,M,p,_:b){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1589))

    def test_1590(self):
        input = '''Class hc:_{}Class Y{}Class _:_5_2{}Class _:U{Var O,iH,$_OIub8,U__:Int ;}Class U_6{Val $t,a_9I:Array [String ,0102];}Class _k{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1590))

    def test_1591(self):
        input = '''Class o_{Destructor (){}Var Xh__,$_p46,$_:String ;$_5(_,cW,_7h,I,_,s,_0q94:Array [String ,660];_,_:Array [Boolean ,0x5];a_,B:Int ;B,J,_6:Array [Array [String ,0X21],0b1];de0_8_:r;J,x7,x_,_,ecq,d,w_,O_2__:_h;_:String ;gS,e,kL,_,j:Array [Array [Array [Array [Float ,370],0b100_11],8_66_1],0b110101]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1591))

    def test_1592(self):
        input = '''Class _:_{Z_(){}Var $W,_8:Array [Array [Array [Array [Array [Float ,0B100001],0X2F],01],0xA],03];Constructor (F_:Float ){} }Class t:J_5O{}Class y4:u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1592))

    def test_1593(self):
        input = '''Class N__{Var _:Boolean ;Destructor (){Break ;}Constructor (v:Array [Array [String ,066],54];_,B,_,_:Array [Int ,64]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1593))

    def test_1594(self):
        input = '''Class _1N_OI:_{Constructor (b82,I4:String ;_8v:_;H6v,_,_y:Array [Float ,0100];_3_x,_,_:G0;_5p,_:Array [Array [Array [Array [Array [Array [Array [String ,4],0b1_0],0b1],0b1_1_100],0100],0B1100],0100]){}Constructor (){Continue ;} }Class C{Val $_4_t_,$D,$d,dt:Array [Array [Array [Array [Int ,077],0x44],0b110101],670];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1594))

    def test_1595(self):
        input = '''Class _W_:_5__{$__(){Return ;_44::$o_();}Constructor (a,X:Array [String ,0b100101];B_,rQ,Z86,__6:Int ;V,D:_8){} }Class __:_2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1595))

    def test_1596(self):
        input = '''Class __o:__6_t{Constructor (__:Array [Array [Array [Array [Boolean ,0X41],05],0B1],0B111]){Break ;} }Class lt_:_{}Class __{$k(_7:__;__99,_cTY_49HS,_4,_:Float ){} }Class d:c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1596))

    def test_1597(self):
        input = '''Class XN_{}Class _9_YI:K{Constructor (__:Float ;K__,_8:Array [String ,0B1];_0:String ;_:Int ;_:Array [String ,35];Y,__9,__,Klz_A_5_:Float ){} }Class m{}Class _:P{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1597))

    def test_1598(self):
        input = '''Class _{Val $g_:_;Constructor (W,_,_23,Z04W,_8BT:fu;_,_:Int ){}Destructor (){} }Class v:__f1{Val y:_;}Class J__:h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1598))

    def test_1599(self):
        input = '''Class h{Constructor (_:Array [Array [Array [String ,6],0XA8],0123]){} }Class K:b{Constructor (G,O2__:Array [Array [Int ,0B10100],4];E__:_;x_,__Z2s:k;_,_o,_,b5m:O){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1599))

    def test_1600(self):
        input = '''Class _{Constructor (Z:Array [Array [Array [String ,0B1000100],0B1],0b1010]){}Var $Um5_,_p3I:Boolean ;z_(){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1600))

    def test_1601(self):
        input = '''Class D:z{}Class _:_K{Val _8,$1:Array [Int ,03];Var $F,$_06,R8,$D6,R_y_01,_6H_3_,$_1_,Z,$U,G:Array [Boolean ,58];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1601))

    def test_1602(self):
        input = '''Class __T{Var _:gSp;Constructor (p5d:Boolean ;_,_,k1,__2,_:_){}Val $_,$3_f:e4_;Constructor (k8_S6,n,__,_8:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1602))

    def test_1603(self):
        input = '''Class _n:v{}Class Jq:_QP_{Var $_:Array [Int ,6];}Class _1{Destructor (){}Constructor (_,_,o_i5,_:Array [Int ,0xF_1_4_A];__,M:Array [Array [Array [Array [Int ,88],0XA2F9],0114],0x9DE_0];j_:Array [Int ,0x12];p:Float ;i720:TQ1){}Destructor (){Break ;}Constructor (){}Constructor (vc9,S,FcI_,kTe5:Int ;_:W_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1603))

    def test_1604(self):
        input = '''Class a{}Class W{}Class _:_8{Destructor (){} }Class h{Destructor (){}Destructor (){}V_(){ {_Z_7_::$_();Break ;}Continue ;} }Class _:v{Val $WY7:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1604))

    def test_1605(self):
        input = '''Class _{Constructor (){Break ;}Z6(Hi:Float ;_7,b7:Array [Array [Array [Array [Array [Boolean ,042],0x7],02_6],0X14_0],0B1000_0];_,_:Float ){} }Class Z:y{}Class eRI{}Class J_00:Qy_8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1605))

    def test_1606(self):
        input = '''Class __:L8{Constructor (QS,Uff3_n4_:_;__M:Float ;_,_d_:Float ;_,P_,C:_;_,_:Array [Int ,29];_,k,vln:Boolean ){}Val $_44,$fD:Array [Array [Array [Float ,0x10],01],04];}Class A{Var $lvXg:Array [Float ,34];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1606))

    def test_1607(self):
        input = '''Class _U__:_3{}Class _c:X{Val _,$g_,$9_,$I_6,_015:Array [String ,5];$a(){ {Break ;}{} }eP(f,_8,_:Array [Array [Array [Array [Array [Array [Int ,1],0X5A],0XCA],0B1_0],0xE7],0X9D]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1607))

    def test_1608(self):
        input = '''Class O__k9:j{Var $b__,z3:Array [Array [String ,03_352_7],0b101010];}Class _{}Class f2S0W:M{Destructor (){} }Class _f:_t___6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1608))

    def test_1609(self):
        input = '''Class _:_I_3n_{r_8U6(e_nt,_,k3:Int ;n_:Array [Array [Float ,0B1_110],0B1];_:Array [Array [Array [Int ,0X3],024],32];eK:Array [Array [String ,1],0B1011111]){} }Class _A{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1609))

    def test_1610(self):
        input = '''Class _{Constructor (i:Float ){Break ;Continue ;Var Y_,YPN__,_MJ__20_:Array [Float ,0b11];r::$1._69ov3._7();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1610))

    def test_1611(self):
        input = '''Class _{$8_(_:Boolean ;_,_:Z_){Continue ;}_(){}Var $6:h=New ___().R0/!-f::$t2()._().R.u1._2*!!New _8Q().D._.___67_5.Y5_()||-New u().C.E;}Class _{}Class _:Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1611))

    def test_1612(self):
        input = '''Class Z{}Class _r_{Val $9t_B_,$M,Wu:Float ;}Class _4{Constructor (g:Array [Array [Boolean ,0X47_C],0XF_F6_C9]){}Var I:l;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1612))

    def test_1613(self):
        input = '''Class _7{Var $2:Array [Array [Array [Array [Array [Boolean ,66],0B11_1_1],075],0B110101],0X51];Var _t,$_Ps1_4,$I,$Z,SK,$_:Array [Array [String ,5],0x66];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1613))

    def test_1614(self):
        input = '''Class z6n:_{Constructor (_13,C87:Array [Array [Array [Array [Int ,046],0B1],0B100111],0X44];H:String ;t,_V,O__,_9R_5_:Array [Boolean ,3_6]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1614))

    def test_1615(self):
        input = '''Class Y74:_{}Class U{}Class __{_(_:K){}$_(){Break ;Break ;}Val $Ej,_:Array [Array [String ,76],045];Var $___:Array [Int ,76];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1615))

    def test_1616(self):
        input = '''Class _V{}Class _v:_B717{Constructor (X:p_P;K_:Float ;_,o_7:String ){ {} }Var _D_:Q0_;}Class Zo{}Class LoIX4z:y{}Class Rv_:_Wq{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1616))

    def test_1617(self):
        input = '''Class q3:_{}Class nk7:_{Constructor (){} }Class nc{}Class _6h59_F9:m__29__{}Class r__3:V{$_L(){} }Class W:gR{}Class V:RQEU{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1617))

    def test_1618(self):
        input = '''Class _jA:_4__{Var $ej,$7:i_r4;Var _,$_:Array [Array [Array [Int ,0x324],0X72_2],02];Var $_,f_,__9L,_,$_z,$c_,l6:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1618))

    def test_1619(self):
        input = '''Class C{}Class G{Constructor (){Continue ;}Var $_:Array [Array [Float ,0X20],0b1];Constructor (){Break ;} }Class k{__(){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1619))

    def test_1620(self):
        input = '''Class l{}Class _{Constructor (l:String ;_,T_:Array [Array [Array [Array [Float ,1],62],0x1B],01_6];X,sK8w,om,_w,_31N_,rt,_9Ha,t:_){s42::$0();}$1d(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1620))

    def test_1621(self):
        input = '''Class _{Var v,_,_:g_;Constructor (D_IKG2,_,_n,H:Array [Boolean ,022];hb_,_,k02:Float ){} }Class _1f:_{}Class o:P{$_c(){}Var $O:J_kq;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1621))

    def test_1622(self):
        input = '''Class _:T{Constructor (_:Float ;L,Z:Array [Array [Array [Array [Array [Int ,03_04_216],0B10000],0x3D],0120],56]){}Val _6,L:e;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1622))

    def test_1623(self):
        input = '''Class Y0{$v(){}Val _:Array [Array [Array [Array [Array [Array [Boolean ,0x52],0B1000],057],0b101011],2],28];}Class _t:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1623))

    def test_1624(self):
        input = '''Class _b{Destructor (){}Val $6v_,_,$3:Array [Int ,0b1_0_1_1_11];Constructor (_0,y__,_,x_,_c,_:Float ;B,Ud:Array [Array [Array [Boolean ,0x15],0X8_8],0b1];_,_:Array [String ,0b1];__y_e_:Array [Int ,0b100100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1624))

    def test_1625(self):
        input = '''Class H_{Val $U_S3_,_,$0:_;}Class r{Val L4,C5,_4:Float ;_(_:Float ;GR:String ;l_z:Array [String ,0114];J9Wc_:_Y){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1625))

    def test_1626(self):
        input = '''Class _{Var $_:_;}Class _{S(_,T:_;S46:Boolean ;_,Z,nK51F:_){}Var $9,N7:Boolean ;}Class QT:S{}Class NY{Var _9,_,$7:__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1626))

    def test_1627(self):
        input = '''Class _:J{}Class _:z{Var H:Array [Array [Array [Array [Array [Int ,0X2_D],0131],93],0b101_0],93];Var $412:String ;Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1627))

    def test_1628(self):
        input = '''Class F:nn_{Destructor (){Val qj,B__,y,i_M,n_G:Array [String ,0xE_8];}Var $31_:Array [String ,0XB_D];Val x29,$6_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1628))

    def test_1629(self):
        input = '''Class p:d{Constructor (s7____,D,__48S6,_,G:Float ;_6_:Array [Int ,0XB];n,d:Boolean ;b_:Array [String ,06]){}Val $F:Array [Array [String ,0B111],0B100101];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1629))

    def test_1630(self):
        input = '''Class c5:__{Var _2A4,_:Array [Int ,35];}Class _:_{Constructor (){}Var $q,_:Float ;}Class _:G{$5_(){_::$_();} }Class _9{}Class o0{}Class Z_:e{}Class _f{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1630))

    def test_1631(self):
        input = '''Class __:S{__(_,S:Array [Array [Array [Array [Array [Float ,0x8],0b111001],0X4],2],0b111001];fa,DZ682k:String ;_,A:Array [Array [Array [Int ,0X22],6_75_9],06];PH:dB;C2Z,__,_,h:Array [String ,0B100101];g_,_2b,_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1631))

    def test_1632(self):
        input = '''Class z:_{$9_j(_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,01_1256],074_7_1],63],0101],0b11],072],056_3],63],0B1_10_10],63],0B1_1];k:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1632))

    def test_1633(self):
        input = '''Class _:_{Var $1Hl:__0;}Class b:H{}Class __:_{Val _6,N,_:Array [Boolean ,0x42];Constructor (){} }Class P_:y{Var $_:_g5;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1633))

    def test_1634(self):
        input = '''Class _{}Class __c{w4(){Break ;} }Class _{X(W5,_e:String ;c:Array [Array [Boolean ,92],05];K:_;B_502_,_:Array [Array [Array [Int ,057],0X9],0x7];___5:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1634))

    def test_1635(self):
        input = '''Class _:G__{}Class _:N{Val $k1:Array [Float ,0x9];}Class _:k{}Class d_9E93{Constructor (W:Int ){}l(T54k_:Array [Array [Array [Int ,0XF],0x9],01];K_,c_:Array [Array [Array [Boolean ,0237],066],62]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1635))

    def test_1636(self):
        input = '''Class j0{}Class __:_Fg__{Destructor (){}Constructor (){}Val $m23:Float ;Constructor (_,_,_,_:g;___:_9){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1636))

    def test_1637(self):
        input = '''Class _:__{}Class _:_k{Constructor (_:Int ){}Var $___:Float ;Constructor (___w:Int ;_9,____:__67;W,_:Int ;_,H9,ah1_,__:Array [Array [Array [String ,0X5_C],0x42],91];_1,r_,U,__,_z3:v8;k9_:Array [Array [Boolean ,0x4_11_9],0X5D]){}Var __3:L9L;Val $_:Array [Float ,0x41F];Constructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1637))

    def test_1638(self):
        input = '''Class _4{}Class _G:_4{}Class _p:X__8{Val $_:String ;}Class Lo_{Destructor (){Return ;}$N(){}Val z,$59:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1638))

    def test_1639(self):
        input = '''Class Ey{Constructor (u0,LH,_,_:Array [Float ,061];_y:b_;Z7l:L;d_:Int ){Val _:Array [Array [Array [Float ,0b11_10],0XAC4_2],1];} }Class _{C_(__:Boolean ){ {} }}Class _i3v0_6_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1639))

    def test_1640(self):
        input = '''Class _{Val $2_:Array [Array [Array [Boolean ,9],7_94],01];Var Lp,_6v_0:Array [Array [Boolean ,56],0XF];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1640))

    def test_1641(self):
        input = '''Class L:_U{Constructor (v,_,_,w:Float ;Z__:Array [Array [Array [Array [Float ,2],041],0B100],8_8]){}Val _:Array [Array [Array [Array [Int ,59],0XA_1],057],0B1_0_1];}Class w:X{Constructor (_2:_;_:Array [Array [Float ,0b111101],0b1_1];u:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1641))

    def test_1642(self):
        input = '''Class h{$_(_u,_:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0b11_10],6],02],02_4],0144],0xB],0144],39];_:X;_S:String ){}Val $__,$_4_0:ZG;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1642))

    def test_1643(self):
        input = '''Class _{Val $m_,$r,$Q7b:_;}Class _:_K{Destructor (){}Destructor (){} }Class O:__{_7F(_,_5W,z_____,_5:Array [Array [Int ,8],22]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1643))

    def test_1644(self):
        input = '''Class _x0:_A{Destructor (){}Var $R:y;Destructor (){}Constructor (__wvO1:z){Break ;}Constructor (_:U){Break ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1644))

    def test_1645(self):
        input = '''Class r_h_r{$__(_,_:_;J:Boolean ;n:Array [String ,0B1_1_00];u:Array [Array [Int ,0144],0x3];__9_,_Md_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1645))

    def test_1646(self):
        input = '''Class p5V:_{Constructor (C_,r:String ){}Constructor (R_8,_:_L){ {} }$_6_(_,e_j_,N,t,_6:Int ){}Constructor (){} }Class Kb{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1646))

    def test_1647(self):
        input = '''Class _N:x{$_(y,S:Float ;x:Float ){}Constructor (_:Array [Array [Array [Array [Array [Int ,4],0b100101],067],2],04]){}Constructor (_ZU,_:String ;_,Y7Ef7,__,_B:Array [String ,067]){Continue ;E::$W();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1647))

    def test_1648(self):
        input = '''Class _:_N{}Class _QP:L{Constructor (lV0:_){Val d,J:Array [Array [Boolean ,06_4],55_88];Continue ;}Var $_,$6_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1648))

    def test_1649(self):
        input = '''Class _:_i{Var $O_,n,_,___:Array [Array [Array [Array [Array [Array [Array [Float ,0B1_0],0x9],022_7],06],05],4_0],76];$l(){}Val $_7_:Array [String ,7];}Class _{Val C:Array [String ,0b111111];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1649))

    def test_1650(self):
        input = '''Class Z:_{}Class S:_e__b{Val $_341,_,$_24_K17h:Float ;}Class g:O__{m(_r:Int ;_,_j_:Array [String ,0B1000100]){}Val x_:Array [Array [String ,81_1],0X37];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1650))

    def test_1651(self):
        input = '''Class __:_{Constructor (){Continue ;Var _:Array [Float ,01];}Constructor (_:String ;_0,_49,_98_:__;H:oS9;___,P,W7,___:Float ;B,oE:Hh__;j_65__:Array [Float ,0131]){}Var $547L,d,$4,$5,h:String ;Var $k0,x1:String ;Destructor (){} }Class B6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1651))

    def test_1652(self):
        input = '''Class _1:_W{Var $1,C4,_,$750,us:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,59],0B1_0_0],0x8C_3D],0B1010110],01_3],0x4],0674],0b1],0x2],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1652))

    def test_1653(self):
        input = '''Class _:QOq{Val $0,$d1Kk8_:Array [Array [Array [Int ,0125],23],0b1];Var _:Array [Array [Array [String ,0X4D],0xC_2],1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1653))

    def test_1654(self):
        input = '''Class __w{}Class _:__{_(_8,_QN0,__0:Array [Int ,0XF_4_E_E];h,_:f){} }Class S__{}Class ____:a{}Class N0_:__84{}Class _2{Val $__,$4f_9_i,V87:Boolean ;$B(_:O;J_,L:Float ;_F,_8:Boolean ;uX__,_,_W,D_1,_,x,__:_6;_,s,k:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1654))

    def test_1655(self):
        input = '''Class S:UD7_52{Destructor (){Continue ;Break ;Continue ;}Constructor (s,Z,_,_S,_85__,_,__,_t95:Array [Float ,83];_3:Array [String ,0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1655))

    def test_1656(self):
        input = '''Class _:V_d3{}Class __{$_Y(){}Var $5Y2:Array [Array [Int ,0XA],35];}Class Y{Var $5,e__J_:Array [String ,02_1];Constructor (_,_1Nn:Y6M;_lI_,_6D7O:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1656))

    def test_1657(self):
        input = '''Class S:_3{Constructor (_2s__:Array [Array [Array [Array [Array [Boolean ,0x5],0b10111],0X1F],0b1_1],0x5];_:Int ){} }Class _7:K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1657))

    def test_1658(self):
        input = '''Class Hri{}Class _6:l{}Class x:X_{Constructor (Z3:Float ;_Z:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0X22],2],0X3F_2B_F],0x2],3_6],023],0x9_3],2],0X22]){}$3(){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1658))

    def test_1659(self):
        input = '''Class _I__A:X{Var $_:v;Var $58:Array [Array [Boolean ,025_6],0x8];Var _,L_C__8:Array [Array [Int ,0b1010100],0b1010100];}Class _0:C_{}Class B7_{Constructor (_:Array [Array [Array [Int ,022],0xD1_C],0x51];_:Array [Float ,46];v:_T;Y_8,_Q:Float ;l:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1659))

    def test_1660(self):
        input = '''Class b7:Q{Constructor (B97:Array [Array [Boolean ,03],5];K:v2){}Var $h,$ly:Array [Array [Array [Array [Int ,44],0X53],0B1011110],02_4_53];Val N_r,$7424_:_N;}Class e_1{}Class UQ{_qfw_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1660))

    def test_1661(self):
        input = '''Class V{$x_(mh,W:Float ;_:String ;_2:Array [Boolean ,0111];_e_,tMX,p76J,_,C_:Int ){}Var nK:Array [String ,963]=!_A__3_CW::$_a.c();Destructor (){}Constructor (G:er9X){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1661))

    def test_1662(self):
        input = '''Class kU:__{}Class K{}Class __{Constructor (){}Val _2,$_8V,X_,B6_,$8L:Array [Float ,14];Var ____7__4_,v,$_:Array [String ,28];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1662))

    def test_1663(self):
        input = '''Class W{$4(_,_2,H8_Gl:Int ;_:o6;V7:Array [Array [Array [Array [Int ,0XF],0b1_0_10],0B1010110],0X1_1_9_A_3_3D_0F]){}Var _,_:Array [Int ,0B1_0_11];}Class _9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1663))

    def test_1664(self):
        input = '''Class _:s{$_c2(J33_,_,Y_4:_;_,O,_:Z;W_3:Array [Float ,0x4D];Jp7:Array [Int ,93];_,_:Array [Float ,0X5E]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1664))

    def test_1665(self):
        input = '''Class _{}Class _:_5{}Class _{Destructor (){}g6_(a:Boolean ;O:h_;Q__,_q:String ;n,U8_4:Float ;_:Array [Array [Array [Boolean ,016],0x4B],10];_,K:R){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1665))

    def test_1666(self):
        input = '''Class _I8L_77s{Constructor (O_:Array [Boolean ,0b1000011];_cj:_;_46:Float ;t_9y_f__:E121;_,X:Array [Array [String ,07],12];_:D){} }Class bw{Destructor (){Val _:Uh5;Continue ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1666))

    def test_1667(self):
        input = '''Class z{}Class __{Val $5Vg2:Array [String ,0B1_0];Destructor (){}Var $_,d8o,$w,$48:Array [Boolean ,01153];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1667))

    def test_1668(self):
        input = '''Class __{}Class F_:kPZ{}Class tQ_{Destructor (){}Var $_9g_:Float ;Destructor (){Val _q,_yb:_O7;} }Class _{}Class __{Var j,_,p_,_,S__,_:Boolean ;}Class _9:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1668))

    def test_1669(self):
        input = '''Class _{$_(__S51:Array [Array [Array [String ,2],5_1],4_1]){Val _,_:String ;}Val $L:Int ;Destructor (){} }Class _:_x{}Class _1:J_1{}Class _{}Class _:M_{Var D,$Dp_YS024,$____:Array [Array [Array [String ,0X10],01],064];$_Bx2(V4_,A:Int ){} }Class n:g{}Class _:i_{$T_(_:Array [String ,0xD]){}R5(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1669))

    def test_1670(self):
        input = '''Class d:n{Var $_,$h61me_:Array [Array [Array [Array [Array [Array [Array [Int ,0b10001],0x38],0B11_1_01],43],044],43],43];Var $W7,$u,$s:_;Var W6X2_A:Array [Boolean ,43];Val $_9,$26,_,$7F,Y96,$7h17:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1670))

    def test_1671(self):
        input = '''Class __{Val _0E,_4:String ;_L_EYm39_(r4y,M3_:Array [Array [Array [Array [Array [Boolean ,0x7_4E_6],6],0X89_8_6],6],0x4D]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1671))

    def test_1672(self):
        input = '''Class WI:__{Val $_:Array [Array [Array [Array [String ,031],0b11000],062],05];Var $2n:Boolean ;Constructor (q,_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1672))

    def test_1673(self):
        input = '''Class _v{_(_,_D:Array [Boolean ,40];d,_,m,_,_:Array [Boolean ,0b11_11_1];H,_,M__,i:Float ){}Destructor (){}Var $S,$1g_2z5a_qK130_,e_,_,r8v_72u,$4:Float ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1673))

    def test_1674(self):
        input = '''Class d:_{}Class _{Var A_l:Array [Array [Array [Array [Array [Array [Boolean ,053],053],053],053],0b1_1000_10_1],55];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1674))

    def test_1675(self):
        input = '''Class jhRS_:Ow{Var _,$0,_,$_,$2:Int ;Constructor (__,L0,_,_,__:Float ;_:Array [Array [Array [Array [Array [String ,0XC],0112],0112],0b1],0XF0];_:Array [Array [Boolean ,02],0X26];f,r3_,f:Array [Array [Array [Array [Boolean ,98],0x50],580],0xE6];_3s,_0_t,_j9_,_,_G:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1675))

    def test_1676(self):
        input = '''Class __{}Class _:_{Val $9:V;}Class _{Var _7c:String ;Destructor (){} }Class _:_4{$59(){}$_q(___,_,Y32:Int ;M2:_;G___:_){} }Class _z:b{}Class P05{Q_(_u:_){Break ;} }Class _:_p{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1676))

    def test_1677(self):
        input = '''Class s_45{Constructor (y_:Array [Array [Array [Float ,0726],0b1],0b1111];__:_B;_:_8_;K,P4:_M;_,t_,_,_0_:Z1){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1677))

    def test_1678(self):
        input = '''Class ___:K{Constructor (TH3:Boolean ;K:F_fy;_5,N36,_,i:Array [Boolean ,0b1]){}Var $B_2G:Boolean ;}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1678))

    def test_1679(self):
        input = '''Class H2:__d{}Class _E:L{Val $8,z2,$_9,$Q6:U_;}Class _:_{}Class n:_{}Class _:zKA9x{}Class _1O:_{}Class t{uo(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1679))

    def test_1680(self):
        input = '''Class be{Var $o5,_,$H7Gy:Array [Array [Array [Array [Int ,050],0B1],0B11011],0xF];Var $_,$__:Array [Float ,0B11];}Class _:Y{}Class E:p7T{}Class _E_{$o(){} }Class gU{Val _70:Int ;}Class w__0_{Constructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1680))

    def test_1681(self):
        input = '''Class xV_h{}Class P{}Class n{$q(_,e:i3;h5__:Array [Int ,0x3D]){Return ;}Destructor (){} }Class F:I{Var $X,$_:Boolean ;_(X,__jE:Array [Array [Array [Float ,036],0B1],0b1011011]){} }Class _:xD_p0O__W{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1681))

    def test_1682(self):
        input = '''Class gw__:n{}Class __2{Var ____,$Z2_5aG1u,$2:Boolean ;Var z,_,$_:_;Constructor (g5P,_,LG,v6,u:Int ;_L,y:String ;_,_,_,i:Array [Boolean ,0B1];_l00_:Int ;_,_mDx,y:Array [Array [Boolean ,12],12];ad1:Array [Float ,01]){} }Class qo8:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1682))

    def test_1683(self):
        input = '''Class _:_{Constructor (Y_4__:_2_;m,_x_:oPH_;__:Boolean ;_,_K:Array [Array [Array [Array [Float ,04_2],0X80],04],0x13];_E,i,r___:Boolean ;_50__:Array [Array [Array [Float ,07_1],65],0133];ZO_622,c,__,_:Array [Int ,0x13];_:Array [Array [Array [String ,0B111111],0B111111],8_7_8];_:String ;h_:Array [Boolean ,0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1683))

    def test_1684(self):
        input = '''Class _:m__U___{Val _Z:Float ;Var __,Uv_,_,$5:String ;$__8I(V3,D,c:Array [Array [Array [Array [String ,9_42_5_2],0B111000],0B11],057]){}Destructor (){Return ;Var _9_VL_A:x;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1684))

    def test_1685(self):
        input = '''Class m_b_{Constructor (Z,Bl:E_;_d_dj0:K8;_4:_;_,j2:_8_;_1,m_,a9,I,_j:Array [Boolean ,73];__,_,UI,O,_G_f4nsT9Cn7:Array [Array [Array [Int ,73],73],3]){Continue ;}Var $_,I_0,E,_,_,_5:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1685))

    def test_1686(self):
        input = '''Class x:x_{Constructor (){}Constructor (__I:_;K63:Array [Array [Boolean ,0b1],0B1001011]){}Destructor (){} }Class _{Destructor (){} }Class _:K33{}Class B2_8j{}Class C_Z6{}Class _:_7z1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1686))

    def test_1687(self):
        input = '''Class __:_{}Class M:_4_1{$0(T:Array [Array [Array [String ,0xA],0B1],027];Y_,__HB:Array [Int ,4];_b:Int ){}Var $_g,N9_:Array [Boolean ,78];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1687))

    def test_1688(self):
        input = '''Class _:r{Constructor (ZVb,_,e,V7,x:Float ;_,_:Array [String ,0641_4];_8B_:Boolean ){ {{} }}Destructor (){}Val $i,$_1k:s01;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1688))

    def test_1689(self):
        input = '''Class _2{Constructor (g:Array [Float ,0b111110]){b2::$4();{} }Var X,$Wd,_,c_:Array [String ,0B1];}Class Q{}Class S:W_9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1689))

    def test_1690(self):
        input = '''Class _:_{_(n:String ;h_,JQA,_93_:_F_Sn;_1:__vqvEp){Var OYcY:Int ;}Var $_:_x5;Destructor (){} }Class S_mR02{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1690))

    def test_1691(self):
        input = '''Class z{Val P__:Array [Array [Int ,0XAC_39_B6],69];Var _o:Array [Array [Int ,067],69];$8(s,I3X6L3_h:String ;_:Array [Array [String ,0B1],69]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1691))

    def test_1692(self):
        input = '''Class X{Var W_,_,_:y;$_(H,_:_;h33K2i,__,_:__;_:y;_P,_n4:___;i34,_h:___q2PP){}$c(_:Array [Array [Array [Array [Array [Array [Int ,39],0x7],0xE],011],0b10_00_1],39]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1692))

    def test_1693(self):
        input = '''Class c{}Class _4{_(F:String ;__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0113],0B111011],0b1100100],36],02],0xE],0X2],37],37],0x21]){}Constructor (_7w_,___,_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1693))

    def test_1694(self):
        input = '''Class __5:_{Destructor (){}Constructor (r,w:_0;_,Z_:Array [Array [Array [Float ,01],0B1000],81];_,m,_7_:Boolean ){}Var $7:Array [Array [Boolean ,81],0135];}Class _:_r_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1694))

    def test_1695(self):
        input = '''Class __lx_4___g_{Var _,F_,$t7Bj_,$9,_W:Array [Array [Int ,11],0b11];Val M,__40_:Array [Array [String ,0B1],450_7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1695))

    def test_1696(self):
        input = '''Class P:_{Var c,$_,a__9n_krU:K82_Q;Val _Z,_:Array [Array [Array [Array [Int ,0b1],0B1_1],65],0B1110];Var $11,_l:Array [Array [Array [String ,0b11],0X4A],07];}Class iy:_1{}Class M3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1696))

    def test_1697(self):
        input = '''Class i0Ht:_Q{Constructor (_,B,_,Ky:Array [String ,017];ah_,_,_,EQ,__s,C:Array [Int ,017];pKAZ,y0:String ;_,f,P:Boolean ;x:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1697))

    def test_1698(self):
        input = '''Class _6:_{Val $5,__y:Array [Array [Boolean ,050],98];Val $_9__sQ4:Array [Array [Boolean ,0B111111],5_3];}Class F_{}Class _d{Val $__,$g_:b_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1698))

    def test_1699(self):
        input = '''Class Q{}Class _{Constructor (R8:Array [Array [Array [Array [Boolean ,0b1011110],0b1_01],0X42],027]){}Val $c,_,_1ii,_6,$8_no:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1699))

    def test_1700(self):
        input = '''Class __{_(_N1X,W,_,_,_f:Array [Array [Int ,4],0xF];_,_:s;_,c:U;_HTZ_:Array [Array [Int ,052],0B1_1];b,_,F,Y__,_,_:Array [Array [Array [Array [Array [Float ,0x4C],0X5],0b1100010],056],0b1];_,_,_,K_g:Array [Boolean ,055];_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1700))

    def test_1701(self):
        input = '''Class U_:JO{}Class n:V{Destructor (){}Var k8,$_,$__:Array [Float ,98];}Class __:H_{Constructor (){}_(){}Var __w,$_v_F8:__B;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1701))

    def test_1702(self):
        input = '''Class D{O(_,Y:Array [Float ,9_7]){}$_6346(w8,P,_F,_L_:Int ;vJ:String ;_0K__:DM2;B8U0,_,B6,c_,_1I,s3,V3:__;N_:String ;N,__:Array [Boolean ,0X6]){} }Class __9{Constructor (_8:T_k_9){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1702))

    def test_1703(self):
        input = '''Class _9__:o3{Destructor (){ {Return ;Var z,_:Boolean ;}{Continue ;}Break ;}Var $1:Float ;Constructor (){} }Class n:J{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1703))

    def test_1704(self):
        input = '''Class _C:__t4{}Class __:___{Val $99P_:Array [Array [Float ,0xC_8_A],22];}Class r:_{}Class _:__3_1{Val $a4__26IZ31,_,_V1,sda:U7;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1704))

    def test_1705(self):
        input = '''Class G9_m{_H(){ {}Val _:Array [Array [Array [Int ,0XF6],0XF83],2];}Var J__9_,C914__,$__,c7Nj_,Q,_b,_,v___:_X;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1705))

    def test_1706(self):
        input = '''Class _3_{Val _,$x,$1_,d3_,_,A6,$_,$2oEA,_7:Array [String ,0b110000];$z(__n2,_09,I26,G71:fF;I,zO,U,lm,_:Float ){}Val $UI__40_Y6K5,b,$O_:Array [Array [String ,0b1],51];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1706))

    def test_1707(self):
        input = '''Class N2Sd{Constructor (){} }Class V_{}Class v:_{}Class _8:UkN{Var $7:A49_y;}Class _81_:_r_{Constructor (_,O,Y___98,_M:Array [Array [Int ,05],931]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1707))

    def test_1708(self):
        input = '''Class l:_8d{}Class _:_KNp{Val $U,Cbu,_3:Array [String ,0b10100];}Class X{}Class L:o{}Class T{Var _:m;}Class E:_8{}Class _rV9_{}Class I{}Class iP:J7KH8{}Class t:_1966J{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1708))

    def test_1709(self):
        input = '''Class d:_1{Constructor (S_:Array [Array [Array [Boolean ,5],3],07]){ {Continue ;} }Var $5,$u:Array [Array [Float ,0B1011011],9];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1709))

    def test_1710(self):
        input = '''Class y:_YL___P{$_(_w:Array [Array [Array [Array [Array [Int ,93],9],0B1],03_657],020];a2y3,_,_,_,_:_x;_,h,IU9,xZ,f,c8_3:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1710))

    def test_1711(self):
        input = '''Class _9_{$_3(_12:_;_,_,_:Float ;Q,Rf:kAZ556__sp;_LY:Array [Array [Array [Array [Array [Array [Array [Boolean ,0X7_6],0x61],0X40],0b1],061],0XD],640_7]){}Destructor (){}Val x,$_,$0_,$___:Array [Array [String ,0B101011],0b1000100];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1711))

    def test_1712(self):
        input = '''Class _{}Class _:_{}Class _I{Constructor (_:Array [Array [Array [Boolean ,0b11],0b1],06_74];t:Int ;L:Int ;C,_:_;_q8_9_,_:_;_C:Array [Int ,53_9]){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1712))

    def test_1713(self):
        input = '''Class o{W9(_:String ;_:aPCk;_,W6N,_6_z,j:Array [Array [Boolean ,0X706_D_1],0X2];S:Array [Int ,96_8_8]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1713))

    def test_1714(self):
        input = '''Class _:_k{Val _,$0:Array [String ,0X24];}Class _QR:G{Var _9:Float ;s(Y_,A:Array [Array [Boolean ,033404],0X24]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1714))

    def test_1715(self):
        input = '''Class g:P_{Destructor (){}Var _9_:Float ;}Class J6:D{$_(a,_,__6h_4007,c:Array [Array [String ,54],064]){}Var p:Array [Array [String ,0X9_7],0B1_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1715))

    def test_1716(self):
        input = '''Class _B36{Constructor (xi0_:Array [Array [Int ,075],0X9];oL3:yah4;MH_XYD,g:Array [Array [Array [Float ,0X5],0B1001001],0X1F];QS,b1:Int ){ {} }$H_(___6:DM){}n(){Break ;Var _:Boolean ;} }Class _9M4:_{Constructor (_,c:l;Y:Boolean ;_9,T,p:Array [Boolean ,0x56];T2R,a8:Array [Array [Boolean ,0X2],03];_21,v:QH_;_:Boolean ;Q,_,_,m:Float ;___:Array [Array [Array [Array [Float ,0x56],13],0B1_0],05]){} }Class K8:h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1716))

    def test_1717(self):
        input = '''Class Z{}Class R_:_D_8vM_{$d(G,D_:Array [Array [Array [Array [Int ,0xF],4],6_8],0B1011111]){}Val $0:Float ;}Class Sj:R2N4_X_r{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1717))

    def test_1718(self):
        input = '''Class K{Val $_,$_,mK,$a:Boolean ;Val $_u:__I;}Class _{Var $EE,$5,$_R,$T1s_289_P:Array [Boolean ,28_1_1];}Class iQ_{}Class _e:px85X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1718))

    def test_1719(self):
        input = '''Class Q3{wo_(Si4:String ;U,Z,_:Array [Array [Array [Boolean ,0b10],0B101101],0b1_01];x_,_5:Int ){Return ;}Var _,E,$_5:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1719))

    def test_1720(self):
        input = '''Class D_1I{}Class _a{Val _:W;}Class __{}Class _9{}Class _k{Var y,_:Array [Array [Array [Array [Array [Float ,0X17],01742_6],86],0131],06];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1720))

    def test_1721(self):
        input = '''Class _{Constructor (h,V:Array [Array [Array [Array [Array [Array [Array [Float ,064],8_0],0b1100],0X58],41],41],06];m1p:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1721))

    def test_1722(self):
        input = '''Class _{Destructor (){}Val z04:Array [Boolean ,96];Constructor (_:_){}Var $6l,$8m,U,$U,p_,$cv,_:Array [String ,0b110];}Class _:_m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1722))

    def test_1723(self):
        input = '''Class b:Cs{Val $5_,BaW:String ;Var $_4_V:_h;Val $S,$16,$DCVj,P:Int ;}Class _{$EH_(){}$__(){} }Class V{Val _B:Array [Boolean ,5_85];Var _Ht0_:_;Var $c_:_p_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1723))

    def test_1724(self):
        input = '''Class _:V4_E0{Val U_,_,$pi_,_:String ;Val $_8_t,L:Q7z;Val $I:Array [Array [Array [Boolean ,0B1_0_0],81],0x3E];$_(){}$l(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1724))

    def test_1725(self):
        input = '''Class _:O7{}Class _{}Class _:_{$5(kU,_E:Boolean ;_,_26:Array [Array [Array [Array [Int ,03_66],0b10_110_0_111],0b1010],0X8_F_EF]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1725))

    def test_1726(self):
        input = '''Class __:_{}Class _5:_0u_{Val $4_1:Boolean ;}Class _{$Kk(M8:Boolean ;P,__,_,_:Array [Array [Array [Int ,0X32],24],0xE7_7_B_1];lA:Array [Float ,24];N_6C:__;nsf0:Array [Array [Array [String ,24],07],24]){}Destructor (){} }Class X5_85:_i8_{}Class b:_0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1726))

    def test_1727(self):
        input = '''Class _7{Constructor (__:Array [Boolean ,0x1E]){}Constructor (H8:Boolean ;_K9:Array [Array [Array [Float ,0106],0106],0B111111]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1727))

    def test_1728(self):
        input = '''Class ___{Var $v_k,U3,$_u:Float ;Constructor (Z__,Q9__,_,Z_5__I,X_,ld,_w9:Array [Array [Float ,0x63],2];WN:Int ;_:Array [String ,2]){} }Class W:YB3_{Val __,$_,$62,$s,$N,___,sQ__,$_5:Array [String ,031];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1728))

    def test_1729(self):
        input = '''Class l4:_{Var Z,$_,i,$74U:Float ;Constructor (){Continue ;} }Class h:DB3Bt_{}Class p__{}Class P{Val $_,$_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1729))

    def test_1730(self):
        input = '''Class N{$_UN(_,C:Array [Array [Int ,82],0B1_111_1];E:k;_Z,eIZ:Array [Int ,0x9]){}Constructor (R:String ;__,_w:String ){} }Class _358{Destructor (){Return ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1730))

    def test_1731(self):
        input = '''Class _:K2{Destructor (){}$p(k:Array [Boolean ,0XEB];nJ:Array [Array [String ,0X2B],061_5]){} }Class _:_{}Class _:__{Val $_0,F:Array [Float ,011];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1731))

    def test_1732(self):
        input = '''Class B{Destructor (){Break ;Continue ;nXo::$5R();} }Class _y:pZ{}Class _KY5:Mr{}Class j20:yX_4r9Z4{}Class p{}Class U_:K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1732))

    def test_1733(self):
        input = '''Class _{Constructor (__:Float ;_3,z,q_:Int ;_O_,h:Array [Array [Int ,0b1_0],6];_:String ;_Z___,_,i39,N_,_:String ){} }Class l{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1733))

    def test_1734(self):
        input = '''Class v7:h{Val _P:_;}Class xs0{_(){}Constructor (b__,Y_,P3,_Cci_h_c_9:Array [Array [Array [Array [Array [Array [Boolean ,0b101111],0b101111],0X2E],06],0115],0115];_,R_9:Array [String ,8];_:w;rk,d,_,c8:Array [Boolean ,05];_0:__){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1734))

    def test_1735(self):
        input = '''Class _56_:__{}Class h:___R_5{__(h_,_v,_,_:Array [Array [Boolean ,0B1],0x76_A];A_26,e6w,DL:Array [Array [Array [Boolean ,0B1010010],0B1],02];_,U:Array [String ,7]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1735))

    def test_1736(self):
        input = '''Class _:_Ui{$k_(){Break ;}Constructor (iaA:Array [Array [String ,3],02];_,_,_:String ){}Destructor (){_::$r6();} }Class _x_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1736))

    def test_1737(self):
        input = '''Class __j7{}Class K_{$u(_,_i,M,_1u_m:Array [Float ,0B1000_0_0_0_1];_1:Boolean ;_:Array [Float ,0B1000111]){}Var ih,$3g:Array [Boolean ,52];Val $c:Array [Float ,037];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1737))

    def test_1738(self):
        input = '''Class _:_{_W(my_9,v_:Float ;sM,e5y5:Array [Array [String ,10],0X2F];_,S:Array [Boolean ,06_32];F:Array [Array [Float ,03],3];_,__,_,_79,_1I1S,__u:Array [Array [Array [Boolean ,3],01_1_0_4_6],0147]){} }Class A:_{}Class Jx:UJ{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1738))

    def test_1739(self):
        input = '''Class r_{}Class hDQ9{Constructor (_:Boolean ;F,R,M_3_:TX_;q,_GE,_:Boolean ;x,d9i,D9:Int ;__39_,___9F_24:Array [String ,61]){} }Class C:z_{}Class _{$_(){Continue ;} }Class O{Var _9,X_:String ;Val xxl:Boolean ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1739))

    def test_1740(self):
        input = '''Class U{$_i(_A9,z__:Array [Float ,0XC];C:String ){}Destructor (){ {} }Constructor (_:__){} }Class __{}Class __nDW{Destructor (){Return ;} }Class _{}Class _{$IJK(_S,t,_:Int ){}Destructor (){}Destructor (){Var _,_VbP:Array [Array [Array [Int ,0B1101],0x55],03_6];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1740))

    def test_1741(self):
        input = '''Class _{Destructor (){}$610(_:Qe_;If6S,_A:Int ;E_,i:_;x,_c,_58:String ;__,_,_W,_s3K,_4,y_1,a8V0:Boolean ;g9,_:Float ){Continue ;} }Class q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1741))

    def test_1742(self):
        input = '''Class __:_{Val d:Array [String ,4_8_734_6];Val $88hr,$3,_,$k,_:Int ;Destructor (){ {Break ;} }Var _,$_Q,$3:f731;Constructor (o_:Boolean ;_8,__1:Array [Int ,6]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1742))

    def test_1743(self):
        input = '''Class a0:_{Constructor (r,A:Array [Boolean ,0b1];Q4,AmZ,E,N4,_:Float ;_:Int ;_G_,h:z;u4:Array [Float ,0X8D]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1743))

    def test_1744(self):
        input = '''Class w:_v_{Constructor (h,__2:Int ;_:Array [Boolean ,7];f,o,G,B,s_,_:Array [Float ,1551];X:Array [Float ,0x9_95]){} }Class _ALXy{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1744))

    def test_1745(self):
        input = '''Class n_dr{Constructor (){} }Class _4{Val I,$a:U;}Class P1{Constructor (){}Val $_:Array [Array [Float ,0b1],0xB];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1745))

    def test_1746(self):
        input = '''Class w4_9_P{$9(e08:Int ){}Val $PC,$41,_,$48,_,E_y_d7,_,_,$2___I,i5,$49,z5,__:Boolean ;}Class x{_Z_(){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1746))

    def test_1747(self):
        input = '''Class _4:_{}Class _:_{f_(){}v4_(GP,u_,_1,_IZ:Array [Array [Int ,0X34],0163]){} }Class _{}Class _:O8{}Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1747))

    def test_1748(self):
        input = '''Class _f{}Class O{___F3Y(_9C,X,_,_3_:Array [Float ,0x2]){} }Class y:Tv{}Class L{Constructor (){} }Class __{}Class _{Constructor (){} }Class _{Constructor (HM,_,__,c:Array [Array [Float ,0B101001],0b1]){}Val $F_1M0,_,_,$d,_93:Array [Int ,25];Val _o:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1748))

    def test_1749(self):
        input = '''Class _:qC6Y2{Constructor (_,R3:Array [Array [Array [Array [Boolean ,0b1_1],1_8_4],0X67],0b1011];YX,__r_:Float ){}Destructor (){} }Class N:z{}Class _m{}Class __5:_Y1{}Class _:_75j07{Destructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1749))

    def test_1750(self):
        input = '''Class _:_{Constructor (_4S_,_9_qF_,b__:_7Y_){}Constructor (){Continue ;} }Class D{Val _:Float ;Val _:Int ;}Class ___62{}Class n81_w:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1750))

    def test_1751(self):
        input = '''Class O{Val _4:Array [Float ,0b1100011];Constructor (X,Q:Array [Boolean ,063];p6v878v_,_s8:Array [Array [Int ,0x8_C0],0B101101];_:Float ;_26,P:Boolean ;R:String ){}Constructor (_,___4___1:Int ;V,_:String ){Continue ;Return ;Val Ry0,_9,_:Array [Int ,0x21];}Val $_Oo,$10:String ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1751))

    def test_1752(self):
        input = '''Class _K{}Class s__{}Class _:m{$6_h_7(){Break ;}Var $H_g:Array [String ,0B1000101];}Class _:_8{Destructor (){Break ;}A(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1752))

    def test_1753(self):
        input = '''Class _{Constructor (B_,c,_:_;H_:Array [Array [Float ,0X2],0x16];jc_,K_,_7,v,_,I8:Array [Array [Array [Array [Array [Array [Boolean ,0xB],0B1_10_1],0B1000111],0130],1],06_0]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1753))

    def test_1754(self):
        input = '''Class k_:__{Constructor (O,_8K2:String ){}Constructor (){}$63(a1b,___:Array [Array [Boolean ,05],0x1C_B_C];Isp2:Array [String ,0b110010];v1_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1754))

    def test_1755(self):
        input = '''Class _{}Class a:u{Constructor (){}f(){Var V,Q,__,m,_,_6,z_H__B:String ;Continue ;} }Class __{Constructor (){}Constructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1755))

    def test_1756(self):
        input = '''Class _{Destructor (){} }Class _{Val $1,$161Q,___,Yl:Array [Array [Array [String ,01],0176],0B1_1_00];Val $d_:__1;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1756))

    def test_1757(self):
        input = '''Class sW8{Constructor (nv8___,_:Array [String ,0XF];K_tt:String ;_:__;L3:Array [Array [Array [Int ,05],0b1_1],0b1_0_1];q32,__9i:Array [Array [Int ,0B10],81]){}Val $_,X,$0:Int ;Constructor (){} }Class X:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1757))

    def test_1758(self):
        input = '''Class ___:t{Var $i,$7Gk9D,$_:Array [Array [Array [Array [Array [Int ,87],87],06],87],060_2];Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1758))

    def test_1759(self):
        input = '''Class o_86:_Fh{V(_,G6_X:Array [Array [Int ,0XD_EF],6_0_9_0]){} }Class _:Y__{Val $mU:String =!!!--Null %-_::$K1W;Var $Ohp9:b4_;}Class _{$4d(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1759))

    def test_1760(self):
        input = '''Class _{}Class Y41{$_3_(_1:Int ;_,cP:Array [Array [Int ,0X3_6],13]){}Val __:Array [Array [Float ,0b1_0],0B1_11];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1760))

    def test_1761(self):
        input = '''Class n:_V_{}Class Y_06:d5{Constructor (g:Bz;V3a,_:Int ){} }Class _l{}Class M6:_{}Class U9a67{}Class j:_M{}Class I:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1761))

    def test_1762(self):
        input = '''Class w{$_(){}Val $__:___R;Val $Y83165:Boolean ;}Class i{}Class Q:_{Val $__,R:Array [Array [Float ,79],3_21];Constructor (l,i_2K,B6,_pI,S:_){}Var _S_:_;}Class W{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1762))

    def test_1763(self):
        input = '''Class M_:US{Destructor (){ {} }}Class x{}Class h_{Var $_:Ta;}Class p_s6_D_3__J_6N2_BX:_{Var _R,JE:Int ;Destructor (){Break ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1763))

    def test_1764(self):
        input = '''Class __{Val $4,$1:Array [Array [Int ,0x6E],0x7];_5E(_,s:k){}Constructor (V,_:String ;_DE00,__b_,wvn,H:__;n:e_213z_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1764))

    def test_1765(self):
        input = '''Class _:_{Var $__D:Array [Boolean ,41];}Class x:_1{$_56_(){Continue ;Continue ;}Constructor (P___,_:_;_,O3_:_;_:i3s_;RE,_x:Array [Array [Array [Int ,0b1001110],045],0b1001110]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1765))

    def test_1766(self):
        input = '''Class x{$X(W,wR_:S;B4,_:Array [Array [Array [Array [Array [Int ,0XB],2],8],0X3F],2]){ {Break ;} }Constructor (_,t:Array [Array [Boolean ,6],0b11101]){}Var $6x,Y_,g4:String ;$VL(_,H:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1766))

    def test_1767(self):
        input = '''Class _:v{Var $Z:_;Val _3_:Boolean ;}Class _70z{Destructor (){} }Class _:_{}Class _:_R8I_g3{}Class _:c{}Class E__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1767))

    def test_1768(self):
        input = '''Class l{Var $__,$bD:n_y;Constructor (_:Int ;_p:Array [Boolean ,0XE]){}$_7(_0,_D,f:Array [Array [Array [Array [Array [Boolean ,6],63],0173_3_2_1],070],63];b6,Em_,_:Float ;__f,Fw_9:Array [Int ,0B11000];c82_,vO:Int ){}_1(_N:Int ;_,_,__Y_:_){Break ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1768))

    def test_1769(self):
        input = '''Class _:O{}Class __:J{}Class _:__3_{Var $3,_:Array [Array [Int ,07],0X62];Constructor (){}Val am_:p;}Class _:C{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1769))

    def test_1770(self):
        input = '''Class A___X_{$j(){Continue ;}Val h:Array [Array [Int ,1],036];Constructor (Ia__l,_:_2dR){Var UM,q2Uy_,n2_:Boolean ;} }Class _{}Class _{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1770))

    def test_1771(self):
        input = '''Class _{Val VG,g1_QdN:Array [Array [Boolean ,0XE4],53];}Class _:_x8ky__q{u_(n:Array [Array [Array [Float ,4],0xDF_2],4_41];_6,W2:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1771))

    def test_1772(self):
        input = '''Class K_:_1{Val _s:Array [Array [Array [Float ,0134],0XA],05_2];Constructor (_,r,_:Array [Array [Array [Array [Float ,04_1_6],0B1_00],0B110100],46]){} }Class j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1772))

    def test_1773(self):
        input = '''Class _{Val $g_,$9z,q_8,_:Array [Array [Int ,073],03_5];Destructor (){ {Rx::$V_B();} }$74(Q:_w86){} }Class F{Constructor (){ {} }Constructor (){} }Class ___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1773))

    def test_1774(self):
        input = '''Class C:_W{}Class _2:__{}Class U{}Class w_{}Class ___q:_2{Val _,$7U:Array [Array [String ,87],0xF_A];Destructor (){} }Class _S9:e{Destructor (){}Var $6_T,_c,s,$zW_:Array [Array [Boolean ,1],20];}Class _T9{}Class i{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1774))

    def test_1775(self):
        input = '''Class _{}Class N:i{Var A,f0,_X,u22_1,_:Array [Array [Boolean ,0X20],0X20];}Class _{}Class __:_Wc_{Val _:Boolean ;Constructor (){} }Class s:Z_29{}Class a{Val $_:Y_;Constructor (T,XO,_,T_,_a:Array [Array [Array [Int ,0x2],0xB_0],0X9_B]){}_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1775))

    def test_1776(self):
        input = '''Class W{}Class _{}Class __1:K{Constructor (z_:String ;s,_:Array [Boolean ,0B11100];R:Int ;_,_,_,o,_1:w_;_,_,l:Array [Array [Array [Array [String ,0b11001],0B11100],0B11100],0b10];_,_R0,_8_:Array [Float ,2];c_:Array [Array [Array [Float ,0XA],0102],0XC];_,_:Array [Array [String ,0X30],8];_,s:_){Return ;}Var $_,_:_;}Class _:_C{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1776))

    def test_1777(self):
        input = '''Class _{Destructor (){}Val $_G2_,$_a,C4,IE,$s8,_,__,__,$6:Br_;}Class _D{U0_(){} }Class _{Destructor (){o::$8K0_uLz();}Var Q_:Array [Array [Array [Int ,3],0b1010010],0b1_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1777))

    def test_1778(self):
        input = '''Class O5:eD_{}Class _{Destructor (){Continue ;{}{}{} }Constructor (_f,_,Y:Float ;R_,I_:_SWi2){} }Class _m6{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1778))

    def test_1779(self):
        input = '''Class _S:_Q{Var r_,c:Array [Array [Array [Array [String ,0b100000],0b100000],69],0X40];Var $____iZ:r153;}Class _:_Z_S{}Class w{Val __,_Um_7:Array [Array [Boolean ,0x8E_4],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1779))

    def test_1780(self):
        input = '''Class s__{ys5(p4:Int ;W__:Float ;_,_:D){}Val _:Array [Array [Array [Array [Array [Boolean ,03_5_6],014],0X2B],6907_6_2],0x49_13_1494];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1780))

    def test_1781(self):
        input = '''Class _9{}Class W{Destructor (){Var U:String ;}$r(wqT:Array [Array [String ,12],12]){Val S,T,_:_n;} }Class C_:_d{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1781))

    def test_1782(self):
        input = '''Class __kE_6:Tt{Var $8,h0Kg:Int ;Constructor (g,_8O,_6,s:Boolean ;_p6_,a,_8q,_na6,_QU__eZ4:Array [Array [Int ,0b1_1],53_1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1782))

    def test_1783(self):
        input = '''Class _5R:J_u{Destructor (){}Ol(_,kB4,x:Boolean ;m:Int ;Be_,_:Int ){}Constructor (m_:Array [String ,011]){ {} }}Class kZ:cp4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1783))

    def test_1784(self):
        input = '''Class _:_34{Var _o:Array [String ,49];Constructor (_,w,w_H,_:Array [Array [Array [Int ,5],0xD],0b110011];_:u){} }Class _I:Dt_5{Var $_x_:j;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1784))

    def test_1785(self):
        input = '''Class _:r2{Var m:Array [String ,04];}Class _s:t{}Class b{Var $_:Array [Float ,0b1010001];}Class _{Constructor (_0:String ;_6pId__,m_,y6,_2,T,_,e0O_:_;e:Array [Float ,04]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1785))

    def test_1786(self):
        input = '''Class Y{Constructor (j:Array [Float ,03]){0b11.G._()._.W_Gr()._();{} }Constructor (D4,__U:Array [Array [Array [Array [Int ,064],0b101110],34],06];_,p,RH:Boolean ){}Val $_fK,ep:Float ;}Class k{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1786))

    def test_1787(self):
        input = '''Class _3:_e7h{Val __,_5,$_,$y:Boolean ;Destructor (){Continue ;{_::$1l().Kt_();}{} }Var $023_,$8,$_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1787))

    def test_1788(self):
        input = '''Class k19_{Var _1_,$T5:Array [Array [Array [Float ,0b10],0B10_0],02];Constructor (nb,G,g4:Float ){Var _4:Array [Array [Array [Float ,0B1010111],1],0x3D];} }Class _:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1788))

    def test_1789(self):
        input = '''Class Z:M{_(_,_,E1_:__;_I:String ;__J,_:_J_U4_;N:String ;UB_:g){}Val $92,L_754V_8:Array [Array [Boolean ,0B1000101],60];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1789))

    def test_1790(self):
        input = '''Class Sx{}Class _{Var $_7_6,$_9:Array [Array [Boolean ,61],0xE];Constructor (){}$__(_F_:Array [Float ,06]){Val E:Int ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1790))

    def test_1791(self):
        input = '''Class c:Jq{}Class _:v{Constructor (_:Array [Array [Float ,711_31],0X22]){}Constructor (_:Float ){}$7(){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1791))

    def test_1792(self):
        input = '''Class h1_78:F_5{}Class _3:_{}Class Z_:H_{Constructor (M65:String ;_:Array [Array [Int ,4_8],07];_,z_:zA;W_3:_;_A_4:Int ){}Val $X,$_1,Gu,$_2,$_,$2_:Array [String ,0XF_6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1792))

    def test_1793(self):
        input = '''Class i86:__M{Var _,$9_:Array [Array [Array [Array [Boolean ,014],014],12],0x5E];Destructor (){Break ;} }Class S{Destructor (){} }Class _C8B{Var _,O_5,$_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1793))

    def test_1794(self):
        input = '''Class _6:z{Destructor (){}Var Utu:Array [Array [Array [Array [Boolean ,0111],0B1_1_1],0B10101],0111];Constructor (){Return ;_::$X();}Var _3:_S;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1794))

    def test_1795(self):
        input = '''Class _:_{Constructor (_,___S,C:Array [Boolean ,0B110100];Zq,f,U:Array [Array [Array [Boolean ,0B110100],0B110100],0X1];b_,F018Y,_:Array [Array [Float ,0B110100],0B110100];O_2_:Int ;_:Int ){Return ;Continue ;} }Class B{}Class __:o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1795))

    def test_1796(self):
        input = '''Class G:S{Constructor (){Continue ;} }Class _:e{Constructor (){ {} }Constructor (K:Y;_:e6_h_;E:_;ne:String ;__,_,_j2:Array [Array [Array [Float ,10],5],046]){Return ;{}Val __g:Boolean ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1796))

    def test_1797(self):
        input = '''Class lF{Val $_:Boolean ;Var $_,$_:Array [Array [Array [Array [Array [Array [Boolean ,070],62],2],02_5],070],02];Constructor (){Break ;Val __7A_,__:_q_2;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1797))

    def test_1798(self):
        input = '''Class w{}Class _:_1I_{Constructor (f_:Boolean ){}Var c,_,$18_,_,K,$A_,K,$_g:s4X;$_(_F:Array [Boolean ,0B1]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1798))

    def test_1799(self):
        input = '''Class ln_{}Class a_{}Class _s6{$E(){} }Class h{Constructor (_,_:_U;x,VKb,__B:Int ){}Val $_:Array [Array [Float ,0XC_7],694_3];Val Q,_4,_,$M:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1799))

    def test_1800(self):
        input = '''Class CC:HQ{Constructor (){Continue ;}Constructor (_,h5_M_:Array [Array [Int ,78],0XD]){} }Class _:_9sVv0{}Class iO:R_{}Class R:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1800))

    def test_1801(self):
        input = '''Class _:c{}Class __:H{}Class _3__:P{Constructor (){}Var t:Array [Int ,0x7];}Class _P{Var $S:Float ;Constructor (){Var n,n_:_h_;} }Class Fz{}Class _2___:_t4__{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1801))

    def test_1802(self):
        input = '''Class R_{}Class S_O:_{Constructor (Q__,O:Boolean ;r:_;L6_,z,Y_7,vf2,_,_Xy_884,H:Array [Boolean ,0x69_779_2]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1802))

    def test_1803(self):
        input = '''Class M{X(A,_,_:C;_,S_UF:Z){} }Class _{}Class _:v91{Val $_hlb,$R:Array [Int ,23];Val _,_K_2,T:Array [Array [Boolean ,02],0b1111];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1803))

    def test_1804(self):
        input = '''Class _57{Destructor (){Continue ;{Break ;} }Val $4,_0am9_:Array [Boolean ,02];}Class _d_:___{Var m_:Int ;$XZ(_,s:Array [Array [String ,0105],0X11]){} }Class J{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1804))

    def test_1805(self):
        input = '''Class Q3{Val D,$_01:Array [Array [Array [Array [Array [Array [Array [String ,0x37],0XE],056],0X5_BE],93],93],0b1_0111_1];Val _:Array [String ,0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1805))

    def test_1806(self):
        input = '''Class __{Var $9j,E:T;Destructor (){ {Break ;}{}Var K:Array [Array [Float ,0b1_1_1_0_0],6_6_8];}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1806))

    def test_1807(self):
        input = '''Class d:FsBL9{Val S6:Float ;}Class v{Var $_:Array [Int ,9];Val $6:_;}Class __3{}Class _:P{Constructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1807))

    def test_1808(self):
        input = '''Class ____0_:_6{Var $A_,$7_:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0xA_B],05_3],03],93],03],0xD42_B],0X58],0X3_C0_7];}Class a{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1808))

    def test_1809(self):
        input = '''Class eUM{Constructor (_2z:Array [Array [Array [Array [Array [Array [String ,0124],0124],02_7],4_4],47],8_4]){Val X_:String ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1809))

    def test_1810(self):
        input = '''Class K{Var $_E:Int ;p(__:Array [Array [Array [Int ,03],0b11110],0X2_A_C_5]){Continue ;}Var $_e:Array [Array [Array [Boolean ,3],0x3A],3];}Class _7{Val $c:X;}Class _{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1810))

    def test_1811(self):
        input = '''Class r_8y___:mu{Var v_:Array [Int ,6];}Class __Bk_:g1{}Class __z96{}Class R3:Nb{kq24_(){}u(_,x1_:Float ;E,c,uH,_:Boolean ){}____(){} }Class iL7{Var $_,$6,u,$_:Boolean ;Val $_7,u5:T9;}Class k450_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1811))

    def test_1812(self):
        input = '''Class jL:k_{Constructor (u,_:Boolean ;_D,_5:Array [Array [Array [Int ,17],0B1],06]){}Constructor (_7D2,_:String ;J:_k){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1812))

    def test_1813(self):
        input = '''Class _T:w_g{Constructor (_,_2M,SX:Array [Array [Int ,0xB],0B11011];__6:Array [Int ,0x4D];_:Array [Array [Array [String ,0b10],06],0x4D];z:Int ;_,_,_,t_5,_,_:Array [String ,0103];a,F_3:U){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1813))

    def test_1814(self):
        input = '''Class ___7__{Var _O:_;}Class lU:_9{Constructor (_3_ppC_4D8,_92,Q40,_:Int ;_:Array [String ,5];c:Array [Array [Float ,4_7_4],5];rX:Array [Array [String ,041_5_5_60_63],064]){}_(){}Destructor (){} }Class _:_E{Val u_:Array [Float ,0x8_2];}Class m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1814))

    def test_1815(self):
        input = '''Class K:_m_{Val $75q_5,__,_,$i,$_Qd,t3j,_,Bf:Array [Array [Array [Array [Boolean ,24_8590],27],07_5_01_437],073];_(){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1815))

    def test_1816(self):
        input = '''Class _{$7___M(OQ0:Array [Boolean ,064];_1,rt9_p9:Array [Array [Float ,07],033];j:Array [Float ,0x3D];Q9,f,_6,_:Array [Array [Float ,0b10100],0b10100];_:Array [String ,0b1_0];_:Array [String ,0x3D];C:Int ;_,c:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1816))

    def test_1817(self):
        input = '''Class _:L_{}Class _1_9_4z_c{$_(_:Array [String ,0101];_z2:Array [Boolean ,0x1E]){} }Class _:_{Destructor (){} }Class k0{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1817))

    def test_1818(self):
        input = '''Class _{Val $L_k,J,w,$_,$H:Boolean ;Val _,_0IK_9:Array [Array [Array [Boolean ,7],03_0_1],0x2B];}Class W_:L_{Var n8_:Boolean ;Var B,$5,$___:Array [Array [Int ,034],561];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1818))

    def test_1819(self):
        input = '''Class _jt2{Val $R,$U_,v___g80,$3,$6E:Array [Array [Array [Array [Array [Array [Array [Boolean ,0121],0x6_F_DA9_1],0x3],0X56],0b1010001],0121],75];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1819))

    def test_1820(self):
        input = '''Class _{}Class _{Destructor (){Continue ;}$8(w,_2n30t,_4v9,_y:Array [Array [Array [Int ,0b1],0140],03];l:_;__C_:_4){} }Class _{}Class r1:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1820))

    def test_1821(self):
        input = '''Class _:m5{Destructor (){}Constructor (){Continue ;New gL().U27z();}Constructor (_,T,Uv:Array [Array [Array [Array [String ,0B1],6_1_0],0X2F],87]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1821))

    def test_1822(self):
        input = '''Class l2:Q8{Var _7b:Array [String ,11_1];g(H,mo3_:_;_:T_;q:Boolean ){} }Class _0{Destructor (){} }Class __{Var o:s;}Class _5mg{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1822))

    def test_1823(self):
        input = '''Class F:_{Val P_:Z;}Class N:c{}Class H{}Class a_:_2{Var S,$_,$e:Int ;Constructor (___,cd_,r:Array [Float ,71];_:String ;q:Boolean ;kCx,_f_:Int ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1823))

    def test_1824(self):
        input = '''Class y{c___77W(_:Array [Array [Array [String ,83],0B1100001],0b11_1];D,t,E:String ){}Val U,$q:g;}Class N:T3{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1824))

    def test_1825(self):
        input = '''Class _5_92{Val $_,$__M,_D:Array [Array [Array [Array [Array [Array [Array [Array [String ,0X24],0X24],0116],0b101001],033_5],0B1110],0X7],0B1110];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1825))

    def test_1826(self):
        input = '''Class G{$_(_9,G,_:String ;Y_,__,j1:Array [Array [String ,45],36]){}Var $8X,$56,$__,f,_,$_78:Array [Boolean ,36];Var d,$_U4:Array [String ,03_0];$7(){} }Class _8B{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1826))

    def test_1827(self):
        input = '''Class _{Var _p,$9:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0X1F],43],43],061],0X1F],6],0B1_0],0X1],0X29_4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1827))

    def test_1828(self):
        input = '''Class N:xV{Destructor (){} }Class _{Constructor (_,y:Array [String ,61];y,__:String ;_,X_:String ){Continue ;} }Class X{__q(){} }Class P{Val $F,B,$R:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1828))

    def test_1829(self):
        input = '''Class A:Q{Val x,$2S7:Array [Array [Int ,0b1_1_1_0_1_0],060];}Class M:_{Constructor (A:_9;_:z9_){} }Class _g87{$4(_L2,_,K_47:y){} }Class Z:V{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1829))

    def test_1830(self):
        input = '''Class _3_:_P3{}Class y{$_Z_(x_3_,_3_:H_6){}Var _7b11_3:Array [Array [Boolean ,25],0XDD];Val $0:Float ;Destructor (){}Val L_,$h:Array [Array [Int ,0x1],0X1_90];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1830))

    def test_1831(self):
        input = '''Class _2_:_{}Class m:I{}Class w_z2{Val _:__;}Class R:_q_{}Class v___11:_{}Class _3:o{}Class a:w_9{}Class __2:bA{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1831))

    def test_1832(self):
        input = '''Class zz9os:yQ{Constructor (){t0::$_();}d(o:Array [Array [Array [Array [String ,0B1_10_00],0x21],0x6_A4],0X2];w:Float ){Break ;} }Class _:_{}Class X:_{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1832))

    def test_1833(self):
        input = '''Class y:h{r(B,__,u:Array [Array [Boolean ,0x30],0x30];c_:TUq;W_:Array [Boolean ,033]){Val c:Float ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1833))

    def test_1834(self):
        input = '''Class n4{}Class j5{Destructor (){Return ;}Var $5:Float ;}Class I{Val $_2_5:Array [Array [Float ,33],0133];}Class __:_GZ{Destructor (){}Var n_N:Array [Float ,0x38];}Class _t_N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1834))

    def test_1835(self):
        input = '''Class _D:_{}Class __:B_{Var kD8,$40P:Array [String ,05_5];Var $__:_=!!!!-U9::$_7.E();}Class l{$7_(m:s1;jl_Q_:Array [Int ,0X35];h_Z:Array [Array [Array [Array [Int ,0X35],0b1110_0_1],54],0B1_0_0_0]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1835))

    def test_1836(self):
        input = '''Class _e8{}Class A:eX7{h5(a0,__6F4__,_,n6:_;_O6,sB,_l7:y;__:Array [Float ,016];_8j_,w:Array [String ,016];z_4_0,_:Int ;H2,_,_:Int ){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1836))

    def test_1837(self):
        input = '''Class ___{}Class g0P_:_{Constructor (_,w_:String ;___,K1:_;G,O:g;A,r,_,d,_,_B:Array [Array [Array [Float ,022],0b1_00],93]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1837))

    def test_1838(self):
        input = '''Class _:F{Val A:Array [Array [Array [Array [Array [String ,0b11000],2],7_9_59],06],94];}Class G:___{}Class O{}Class _5R{}Class y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1838))

    def test_1839(self):
        input = '''Class _:_{Val $2N,$5_2_:Array [Array [Array [Int ,2_66_0_5_209_0_3],040],040];_c_U80(_S,E_,_,u31_:Array [Array [Array [Array [Float ,5_0_2_6],03],040],03];_T_:_){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1839))

    def test_1840(self):
        input = '''Class _B{Constructor (_:Array [String ,0b1];_:_2){Continue ;}Constructor (k77p,_:String ;f:Boolean ;_:Array [Array [Float ,0B1_10001],76_1];o,B,k,Pw:String ;U:String ){Return ;} }Class _{}Class _:t4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1840))

    def test_1841(self):
        input = '''Class _:r{Val L:Int ;}Class _{Val $__,_N:Float ;Destructor (){}Val $_,$x,U,K3i,$l,$9v_,x,$_,$_:_4;Var $1:_;}Class _{}Class _{Var __e1_,_,Z,A,M:Float ;Val A_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1841))

    def test_1842(self):
        input = '''Class _:_4{Var $_,$6:Array [Array [Array [String ,0B1],0x2F],05_4];Destructor (){Continue ;{}Var d,_2_:Array [Array [Boolean ,0x2F],07];} }Class Z:_{v6(){}Constructor (){} }Class E{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1842))

    def test_1843(self):
        input = '''Class Q{Destructor (){} }Class _{}Class _J4:EuJ_{}Class S:__{Constructor (_NT:w;V:Array [Boolean ,0X44];H:Array [Array [Array [Array [Float ,1],07_63],0b1],0X44]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1843))

    def test_1844(self):
        input = '''Class R:___f_TT_{Constructor (){Continue ;}Var $_y_,$Z6:Array [Array [Int ,9],0x27];}Class z5:_6wO{}Class Y{}Class _2_60y:w_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1844))

    def test_1845(self):
        input = '''Class _e{Val __:Array [Array [Array [Float ,0xA],030],85];}Class fF:n_{$F(){}Val _,$2,_7_:vQ_;}Class t3:__8s3_91X{}Class _R{Destructor (){}Var C,__,c_,$c0:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1845))

    def test_1846(self):
        input = '''Class _:w51{Var $d:v06_H_;}Class _:hT{}Class G{Val $3zd:Array [Array [Array [String ,07_34_0],0X49],0X49];Destructor (){}Constructor (){Break ;} }Class _y:k_c1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1846))

    def test_1847(self):
        input = '''Class Q{}Class _{_4(a_:Array [Array [Int ,064_7],1_1_8];i9:Int ){} }Class c5:_{Var $__,_06_r,$_:Array [Float ,067];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1847))

    def test_1848(self):
        input = '''Class _{Var a:W;Destructor (){ {} }Var _K,$H30t3Xng,a_:Array [Array [Array [Array [Array [Float ,49],0b1111],0130],48_59],49];}Class _D{Constructor (){} }Class _9:_2_{$e(__:YE;k,_4:Int ){Continue ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1848))

    def test_1849(self):
        input = '''Class F:_9n80{Constructor (K,_:Array [Boolean ,0x4_2EE24_F_A_3]){}$J__(){Break ;} }Class __n{Destructor (){}Destructor (){} }Class g{Val $99:_;Destructor (){Break ;} }Class M{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1849))

    def test_1850(self):
        input = '''Class _:I{Destructor (){} }Class w{}Class _N:H{}Class k0:__{}Class gs:j{Constructor (_,q7,rObUr:Boolean ;_:String ){}Val N:Array [Int ,0b100011];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1850))

    def test_1851(self):
        input = '''Class q{Val KZ,$6B,$_:Array [Array [Array [String ,0B1],0b100011],0B11_01];Var _D:Int ;Var __c_,$_7:Array [Array [Array [Array [Array [Array [Array [String ,90],0B1_1],0B101110],0x64],1_7],0b100011],056_7_4];}Class lY_5:_j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1851))

    def test_1852(self):
        input = '''Class b5:_{Val $_,e1:Array [Float ,0b11];}Class z_:k{Constructor (){} }Class _M4A_{Constructor (){} }Class eF__I_R_E37{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1852))

    def test_1853(self):
        input = '''Class w_1:_{Var _:Array [Array [Int ,16],0b1];Destructor (){Break ;Continue ;}Var _a,_:Int ;Var _,$_W_L99,$2,$3_A,_t__:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1853))

    def test_1854(self):
        input = '''Class _{Constructor (r_q,_4,__:Int ){} }Class z_:_{Constructor (f8:_;j_,_hh:a;sV0_,_,_:Array [Array [Boolean ,0B1_01],10]){} }Class s{Val _4__,$1,$7D,$dw_:Array [Float ,0x6_5];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1854))

    def test_1855(self):
        input = '''Class nt4Q_5eD6{}Class _T_:_S_{Val $2:Array [Int ,0X9];_(){}Constructor (){Break ;} }Class _:_d_{}Class s{Destructor (){} }Class _:w{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1855))

    def test_1856(self):
        input = '''Class Y:U_{Constructor (c:String ;u,CK_z1:Float ;_:Array [Array [Array [Float ,0X41],0X9_1],0B1]){} }Class CR_m11:_{}Class _Y_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1856))

    def test_1857(self):
        input = '''Class z:Z_{Var $1___:_;Var $_,$_:u7;$__(){ {} }Val $8:Array [Float ,0X29];}Class j4:_{}Class t{}Class _V3{Constructor (_1s___t,_:String ;_9,_Zqb,e:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1857))

    def test_1858(self):
        input = '''Class x{Var B___8,M:_;Val _,$4:Array [Array [Boolean ,26],0X3_0];Val $1o,$_:GK;}Class _5q__4P__I_{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1858))

    def test_1859(self):
        input = '''Class _:__{Constructor (__:Array [Boolean ,0X6]){ {} }$_63(__,v,E:Int ;__,_f:Array [Array [Int ,07_4],73]){} }Class _3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1859))

    def test_1860(self):
        input = '''Class e{Var $1:Array [Array [Array [Boolean ,1_0_714],0126],0b100100];_3(m:Float ;_8,__:Array [Array [Array [Float ,0B11011],0B1],0126];Nm6,z,_,U,u:_;_0:Boolean ;__U:Int ;y:Array [Boolean ,0x8];u,_,YA:D7){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1860))

    def test_1861(self):
        input = '''Class _:_6_{}Class y{}Class _{}Class _:a{Constructor (q,M:_;_,_,_:String ;__:Boolean ){_::$E()._73();} }Class ___Y4:wq_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1861))

    def test_1862(self):
        input = '''Class _:wB{}Class _:_6B_JUA0__{Constructor (){}jIoK1(){Continue ;}Val $AM3,K0_,_:Array [String ,02_6];}Class _:d0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1862))

    def test_1863(self):
        input = '''Class _lr{Constructor (_0,k:Array [Boolean ,40]){}Destructor (){} }Class m1{}Class _t6{}Class e{}Class _i:t_11{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1863))

    def test_1864(self):
        input = '''Class J:v0{$_9(_:Boolean ;t__,Q:Array [Array [Array [Array [Array [String ,0B1],0X4],0x3_2],0XC],0b111000];N32__,_4:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1864))

    def test_1865(self):
        input = '''Class _A03V:X{}Class _{$_(){}Constructor (_j_,_O,Ov:Array [Array [Float ,0B11101],01]){} }Class Y:Sa8_{Val Nel:String ;Destructor (){} }Class N:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1865))

    def test_1866(self):
        input = '''Class S2K:T{$q(_3_8:Array [Array [Array [Array [Array [Array [Array [Float ,0XF],0B1_0],075],9],0XF_8],0B1100010],2];w:Array [Float ,0X35]){}Val _:String ;Destructor (){}Var $u,_1:Array [Boolean ,0b1110];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1866))

    def test_1867(self):
        input = '''Class _{$3(){}Destructor (){}$_(__8,L__:Array [Float ,05_6];_3Dwr,P8,KQ:Array [Array [Int ,0137],0x2];b87,j02R:Boolean ){}$_b0mO(){} }Class _1:E__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1867))

    def test_1868(self):
        input = '''Class u{}Class _{Val $6:_;Destructor (){}Val $_1s2_,$6rP_:Y;Constructor (h:Array [Array [Boolean ,80],07_2]){}Destructor (){_::$4__.Y();} }Class _1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1868))

    def test_1869(self):
        input = '''Class J__{Val $a:S_;Val fj,uZ__49_x,$_x_,lh:Int ;}Class _0{Val $C5,$__J_:Array [Array [Int ,1],57];}Class _:O_{}Class h{Val $mB,__E__:x;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1869))

    def test_1870(self):
        input = '''Class ho_0_:Rs{}Class B{Constructor (_wV:Int ;_6:String ;_01:Int ;_2:__8_S;_,_D:Boolean ){Return ;}Destructor (){Var _:_;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1870))

    def test_1871(self):
        input = '''Class v{}Class l1:Y_bQ{}Class _6:M{z_(Q2,Ob,_:String ){} }Class _m4:K{Constructor (){}Var __Q:Array [Array [Array [Int ,0x49],06],0X19];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1871))

    def test_1872(self):
        input = '''Class U_:J_{}Class s2{}Class K:_V{Val $TU,$Kq66,J:_;Var $2,l:Array [Array [Float ,0X2],0B1100001];}Class S_{}Class __3:X{}Class _9:zFY_{}Class rp:b{}Class _:G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1872))

    def test_1873(self):
        input = '''Class l4{}Class y:u{}Class Ru_:q{Val H,s9:Array [Array [Array [Boolean ,7],41],0B1];Destructor (){Var _n,tDh17kC:S;{Val _,P_:Boolean ;{ {} }} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1873))

    def test_1874(self):
        input = '''Class _:_{Var B,$i_:Array [Int ,0536];}Class _9a_1__{}Class _T:k{}Class r:D{}Class d:_B{}Class _{Var x_7:Array [Array [Array [Float ,0B11],0B10],21];}Class W{Val z:__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1874))

    def test_1875(self):
        input = '''Class _d{}Class _m{Constructor (N_6,m5_2_:Int ){ {} }Val n,wn5I,p_3S:Float ;Destructor (){} }Class _5:q7{Constructor (_:_31;K3,_:Array [Array [Boolean ,0b1100000],064];__:Array [Float ,3]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1875))

    def test_1876(self):
        input = '''Class i:O{__(g,O_,r:__;_:R_;R:Float ;N:Array [String ,0610_6];_,_,_,u,x:Array [Array [Array [Array [String ,0B1001110],07],6],0B1001110]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1876))

    def test_1877(self):
        input = '''Class _1{$Ogb(_5e2:Array [Array [Array [Array [Float ,070_6_5_4_6_6],42],07],5_452]){Break ;}Var $e__1_q:Array [Float ,0xF];}Class H:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1877))

    def test_1878(self):
        input = '''Class m:j4{}Class _:_{Constructor (){}_(_S6:_;wG,z,u__,V:_;_e4,_0,M_,_,u,_b:__W){} }Class _5J{Constructor (){}Var _:Array [Array [Float ,96],96];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1878))

    def test_1879(self):
        input = '''Class _{__E_D(_,b2_H:Array [String ,7];_,f:Boolean ;V,_7L:Array [Array [Boolean ,0XA],0X8]){Val _0:Boolean ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1879))

    def test_1880(self):
        input = '''Class _:h{Constructor (M,z784:v__U){Continue ;} }Class _:m3{}Class K{l(m2__k_57_:Array [Float ,0B101100]){Continue ;Val _5,Q9s:String ;} }Class _:D8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1880))

    def test_1881(self):
        input = '''Class _5f_C0X:_G{Constructor (JO:Int ;G2,E,t,f5,f2_:Float ;_,_:Array [Array [Int ,0132],78]){Return ;} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1881))

    def test_1882(self):
        input = '''Class _8{}Class _0{Constructor (a0,_,_9:____;cB:Array [Int ,0b100101];XZtjZ:Array [Array [String ,0X51],2];N1_4Z,_,_2,P9:Array [Array [Array [Boolean ,0x56],0121],0X6];_,F8,h:_){}Val $_:Array [Float ,0b100101];Destructor (){_::$i_S();Var Y,N:String ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1882))

    def test_1883(self):
        input = '''Class _:_{g(){Continue ;{}__::$w9();Var P1_63o3:Int ;_::$__La();Break ;Continue ;_::$_();Val __G:Boolean ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1883))

    def test_1884(self):
        input = '''Class Y:_l_{}Class b_:sg{Constructor (_:_){Break ;Break ;}$g8_(_,_D__7_,x:Boolean ;__F:Float ;SU,e:_){} }Class _7{}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1884))

    def test_1885(self):
        input = '''Class F_{Val _3:cnqu_6;Val $2,FP,$6I:Array [Float ,045];Constructor (t:_C;_:Array [Array [Int ,0xD_0],0b1];_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1885))

    def test_1886(self):
        input = '''Class _Ao{Val _,$_:String ;Var H3,RO,$S0W,n:Array [Array [Array [String ,0B1],0b101001],03_10_4_5];}Class k{Val $b:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1886))

    def test_1887(self):
        input = '''Class N{$_u_(B_,_UJ___K,_,__,_B:Array [Array [Array [Array [Array [Array [Float ,16],16],014],0x26],4_90_61],4_3_86];_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1887))

    def test_1888(self):
        input = '''Class _:uA{$m(){l__::$31_();}Val $71s,a,_54mF_,wX2_1Z_,$2B,$n:Array [Boolean ,0x4];}Class R_0{}Class e_87{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1888))

    def test_1889(self):
        input = '''Class __{}Class _:Ek{_5E(_,_,_,u,_:Array [Boolean ,43];__kW_3_O_4,_,c:y5;Ip,N_:Array [Array [Array [Float ,056],0X5_3_2],43]){}$x(_:Boolean ;H:Array [Array [Int ,035],0x29];J,_:_8){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1889))

    def test_1890(self):
        input = '''Class p_{Var $431_M7:Float ;Val _:Array [Array [Float ,0B10_11],0B1011];}Class D{$7a(g:_){Var _70:Array [Int ,48];} }Class I5h:nJ6_Lh{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1890))

    def test_1891(self):
        input = '''Class A81_Q:_P{Constructor (k:Array [Array [Array [Array [Array [Array [Array [Boolean ,037],0b1],65],65],65],0X4],1_1_0]){Return ;Q::$7();w_6_::$nd.__();Return ;Var w,_:Int ;}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1891))

    def test_1892(self):
        input = '''Class A:o{Constructor (w_45:String ){}i(g,__E_,_:Boolean ;d,_48:Array [Array [Array [Int ,22],047],0X4];_2,a_:Array [String ,0B1_1_01];J:Float ;_9:_2;Z8:Array [Array [Boolean ,047],0x4C]){ {} }Var _1:_7;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1892))

    def test_1893(self):
        input = '''Class _{Var $1:N1;Var K7_,$8P,_,$a6,$_N,m_4H:Boolean ;$4(){} }Class _:_{Var _y,$_e_:String ;$X(){}Constructor (){}Var $4,$Zi,$I,$3K_Jd_p:Array [Array [Array [Array [Int ,0X10],0b1011111],0B1],0XF];}Class __:M5536{}Class _:___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1893))

    def test_1894(self):
        input = '''Class _{Val $5,_,_019:Boolean ;}Class __40GU__{Var $1Y,$_,_,i,$3,$_:A;}Class b:Z7{Constructor (){}Var wN,$_e58:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1894))

    def test_1895(self):
        input = '''Class F3{Destructor (){}Constructor (q:_;__63:N;n_:String ;E7:Int ;_34_,k_,KS0:Array [String ,5]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1895))

    def test_1896(self):
        input = '''Class _:I8_u_6{Val Q,_2_,$782,l,$_z:Int ;_(_,n,_,z:B___;De:String ){} }Class _{Constructor (_,P90,V:Array [Float ,0x31]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1896))

    def test_1897(self):
        input = '''Class U:Q78__{}Class K_{Var P:__;}Class _{}Class M{Constructor (){}Destructor (){}Constructor (__Y_4,_,w__56_9:_r5_;f:j){}Constructor (){ {}Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1897))

    def test_1898(self):
        input = '''Class c{}Class _8:__FQ{Var lg_m:Boolean ;}Class _C_:_{}Class _:_{Var _a:Array [Array [Array [String ,0B1],0b1_1],0X1A];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1898))

    def test_1899(self):
        input = '''Class B{Destructor (){} }Class z_9:_6_{$3_(){}Var __,$__0,$0_:pN;Var $_2:Float ;$d_h(){FC::$81();Var K,_,Y4P:Int ;Val _,____2_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,5_9],0b10],0b1100001],07_35],0B101011],0142],0X2],0B101011],0b1100001];}Val _:Array [Float ,0B101011];Val t0,t:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1899))

    def test_1900(self):
        input = '''Class _{}Class N{Var l:Array [Boolean ,0X31];}Class _2:j_G__8h{Constructor (_,_9:_;_0:d;_:Array [Array [Array [Array [Float ,0b1_1_00],024],0B1000011],024]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1900))

    def test_1901(self):
        input = '''Class _r:u{}Class _jM6{}Class __8{}Class _5{Constructor (y,dk:Array [String ,79];N,J:Array [Int ,05]){} }Class _7_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1901))

    def test_1902(self):
        input = '''Class z98:_737k{Var $07,$_5X:_;Destructor (){}Constructor (){Val _I_11R60:W;}Constructor (){}j(__:Int ){Return ;}$00_7(_:Float ;j_s:___;p,_7_7,_,_b:_){Return ;}Val NU_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1902))

    def test_1903(self):
        input = '''Class X6_3z{Constructor (P2,zh7,R_:Boolean ){Continue ;} }Class K:i{Destructor (){}$_(xM_,_,j_,__,_:Array [Array [Array [Boolean ,0b11110],0b1],0xF_A];__:O;G:b){}Var O,_:Float ;Var _:Int ;Val $_,_8:Array [Array [Int ,0X6],0x5B];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1903))

    def test_1904(self):
        input = '''Class L_:_{}Class _{$_(cT_D:Int ;D92:Array [Array [Array [Array [Array [Array [String ,608],0B10],0x1A],04],0b10000],0x1A];S,_5m_:String ;a_p,N_:__;_,_,t300c_:_){Continue ;}Destructor (){}Destructor (){ {}Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1904))

    def test_1905(self):
        input = '''Class H{}Class c8:_{Constructor (_:Boolean ;bY:Array [Array [Array [Array [Array [String ,0B11000],015],015],0b1],70];C9:Int ){W::$2();Val _,V2:Array [Int ,0x12_C];kT::$4._()._();{} }Constructor (c,_53e__:Array [Array [Array [Int ,0B10],1],0B1];B_d:String ;brG__5,_:String ;a,_4:CS9_t;_:Array [Boolean ,0B1];qv75,_:Boolean ;__,o20_,_____,_,_:_;W,E_:Array [Array [Array [Array [Array [Array [String ,70],31],0b1],015],015],0XD_E]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1905))

    def test_1906(self):
        input = '''Class _{}Class _{Constructor (){Return ;}Constructor (){}Var __:Array [Array [Array [Float ,0X3_8_97],03_36_7],013];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1906))

    def test_1907(self):
        input = '''Class MP{}Class i{Destructor (){Continue ;}Var $_,_c,_:_g;Constructor (W_,v_2:Array [Array [String ,0X1A],03]){}Val _,$R,$9:Array [Float ,0b111111];}Class __S{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1907))

    def test_1908(self):
        input = '''Class i{Var $_1,Z_9_:Array [Int ,60];Var $0_,Z,_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b11],0b1010010],60],0b1010010],0X3B],0b1],60],60],0X3B];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1908))

    def test_1909(self):
        input = '''Class f{}Class _:_{$1(_9:_6;x8_:String ;B_:Int ;xmk:_Y3;_:_){Break ;}Constructor (H,D:Int ){Break ;}$__(){}Var $6,$2:Array [Array [Boolean ,45],0x33];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1909))

    def test_1910(self):
        input = '''Class _o:_{}Class W_9X:_{}Class _{Var N,__:Float ;Destructor (){Val J8:Array [Array [Boolean ,055],0b11_1];Continue ;{ {} }} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1910))

    def test_1911(self):
        input = '''Class T:Q{$3f(m,_3:Array [String ,015];_4:W;_,O,s:Array [Array [Float ,0b1_1],0B11101];x,__,_:Int ){}Var $_:Array [Boolean ,0x4];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1911))

    def test_1912(self):
        input = '''Class _4{Var __3:_g;}Class _:_{}Class _{$Z__(j_,E:String ;i,__i:H0jdR;X80g,XU:Array [Array [Float ,0b1000011],02]){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1912))

    def test_1913(self):
        input = '''Class Xr__{}Class __:q{Var $___:Array [Boolean ,0b1001010];Constructor (o_9,p,_,__M,d,_:_N_2_;x:Float ){ {Continue ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1913))

    def test_1914(self):
        input = '''Class _:_{}Class _{Constructor (t_:Int ;_:__;__:Array [Array [Array [Float ,0X22],0b1_10],03];B_,zz,A_Qqr,nF_:Float ){} }Class X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1914))

    def test_1915(self):
        input = '''Class R{Constructor (u:y){} }Class _{Constructor (_:Array [Array [Array [Array [Boolean ,073],0b10111],0B1],0b101];_,tL_8_h0_7:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1915))

    def test_1916(self):
        input = '''Class _{Var $xa_,_M:Array [Array [Int ,39],48];Var b_1,td36_,$9,$jgH18,$_,$0:Array [Int ,39];Val $Y4d0,_1,$2:Array [Int ,0X2D];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1916))

    def test_1917(self):
        input = '''Class __:a{}Class _5:__eK{}Class _C:_{Constructor (t:_T){Self .D7Rhj().Y3_.A();}Val $_:Float ;}Class ___1_{}Class xT7N3_:OLe{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1917))

    def test_1918(self):
        input = '''Class _:_3p{}Class _Ro5{Val H:Array [Array [Array [Array [Array [Array [Boolean ,6_5],02_0_2_2_7],0121],0B1000010],0b101111],58];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1918))

    def test_1919(self):
        input = '''Class _7{Destructor (){}Val _0:Array [Boolean ,0b110];Var _,$VV:Array [Array [Boolean ,0b110],0xF8_2];Val $8:Float ;}Class n:_{}Class Dx7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1919))

    def test_1920(self):
        input = '''Class i{Val A,j7,$___:K64ji;Val $9l_,$__K_:String ;Constructor (q9_:Array [Array [Array [Boolean ,0XB8D_0],07_4],0X2_3_3E]){} }Class _:_{}Class _{Destructor (){}Var $c,$_054,$_:_;$_9(__,x:_){} }Class _{Val $_:W;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1920))

    def test_1921(self):
        input = '''Class _i__s5{Constructor (){}Val l_:Float ;Val $1b:Float ;}Class p{Destructor (){Var N:Float ;}Constructor (){}Destructor (){Break ;Continue ;Break ;} }Class YJ:B057X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1921))

    def test_1922(self):
        input = '''Class cb:b{}Class __{Constructor (){} }Class _9t:_{Var _7,$_0_h9_A__f1__:Array [Array [Boolean ,0B110001],0X8];}Class l{Var $_,$_t_,$I02:Array [Float ,0x56];}Class __:_{Constructor (){}$i7(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1922))

    def test_1923(self):
        input = '''Class _5y{}Class M:_br{Var hY:Array [Array [Array [Array [Float ,79],0XA],037],45];}Class Me:__5_{Destructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1923))

    def test_1924(self):
        input = '''Class __5:_{Val E:Array [Int ,0144];}Class _{Constructor (_:R;_,__:String ){}Var $F08:Array [String ,0xF_82];Val _2:Array [Int ,0b11_01];Var $9:CA4;Val _:Array [Float ,0b1000011];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1924))

    def test_1925(self):
        input = '''Class H4:o{Val _,Xy,$e_,_,$8__:Array [Array [String ,0x8_2],0b110001];Destructor (){} }Class __:k{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1925))

    def test_1926(self):
        input = '''Class _:B{$_(_4,_c,__:Array [Int ,0x14];C:Array [String ,0B1];J3T,e,_792:Float ;W_,U,_:Float ;j0:Array [Array [Array [Array [Array [Array [Float ,33],02],0115],0x11],4],0115];J_,_:Float ){Break ;Continue ;}Val $_:A9;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1926))

    def test_1927(self):
        input = '''Class cP3Q{}Class __{Var $7,___7,$_:X;Var d:Array [Array [Array [Array [Array [Boolean ,064],63],0X24],0x10_8DAE5],63];Destructor (){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1927))

    def test_1928(self):
        input = '''Class R0:fML8_v{Var $Q:Array [Array [Array [Array [Boolean ,3],0X11],03_7_0_5],06_61_766];}Class z_b{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1928))

    def test_1929(self):
        input = '''Class _73L_{$__4_(){}Val $__,d_4,_8:Array [Array [Array [Array [Float ,3],0x20],3],0xB];Destructor (){Var _:Array [Array [Boolean ,02],0x20];}Var $5:Float ;Val $67_:_X=_d::$_/!m::$_IM2()._()==.!!New _().__.H;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1929))

    def test_1930(self):
        input = '''Class F{Var $g,$5:Array [Array [Array [String ,0X4_D],14],0X57];Destructor (){Var __E5b_xY,Fby:Lk;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1930))

    def test_1931(self):
        input = '''Class _:T{Constructor (l:C){}Destructor (){}$_E(_5,Z_,_:_;_:Float ;_,_7:Float ;Icb:String ){Break ;} }Class k{}Class _48{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1931))

    def test_1932(self):
        input = '''Class _09{}Class _026{}Class _{}Class a3A:___{Var s_,Fn_,_,$Q:Array [Array [String ,04],0x33];}Class _:m3_{}Class Ny7q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1932))

    def test_1933(self):
        input = '''Class _7:_Y{}Class Rh:X{}Class _{Constructor (){Break ;}Var _o_:Array [Array [String ,050],0B10];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1933))

    def test_1934(self):
        input = '''Class _1_:_3{Constructor (_2t72_Z2:Array [Array [String ,7],0B11100]){Continue ;} }Class _{_(_1dP8_:Y){} }Class _2_{$5(mv:__Ij;rZ,__,_,___:Array [Float ,016_4];Q,_8_a854,cy:Boolean ;z:M){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1934))

    def test_1935(self):
        input = '''Class _:H_27{Destructor (){}Var _:String ;Destructor (){}$6(_,_,_,_:String ;__,_:Array [Float ,6_2];O:_){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1935))

    def test_1936(self):
        input = '''Class _{Constructor (I__,S,j:Array [Boolean ,47];_,t:Array [Array [Array [Array [Array [String ,0b1111],01_1_5_4],0XE],0B1111],04];_3:Array [Array [String ,0B1111],04]){} }Class y{Destructor (){} }Class _:___l{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1936))

    def test_1937(self):
        input = '''Class _3u:_{Constructor (){Val e_f,s:Boolean ;}$dv7(s2:Array [Array [Array [Array [Array [String ,9],9],9],05],0b1]){ {} }}Class K{Var __:g;}Class r{Var $7D_,$_3:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1937))

    def test_1938(self):
        input = '''Class l___:_rU__3K{Constructor (_,_:Array [Array [Float ,0x21],0B111001];l,ud___,X:Array [Int ,0B1];G:z;_,_,_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1938))

    def test_1939(self):
        input = '''Class __:S_{Constructor (_1:String ){}X(){}Destructor (){ {}Break ;}Constructor (o:Array [Array [Array [Array [Array [Array [Boolean ,1_0],0B1011110],07],0X5],0b10],0B10_0_11_0];i,_0,_,F:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1939))

    def test_1940(self):
        input = '''Class _:F{Var _5:Array [String ,0x6_1];}Class S:_w{Val $9_:Int ;Val _1_o:Array [Array [Array [Boolean ,0105],0X23],0B1];Val $__0,$9:Array [Boolean ,0105];_U(uD__:a;_1_,OI1:Array [Int ,0105]){}Val $9_zz,Nu3,Vg_:Array [Boolean ,67];}Class ___29_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1940))

    def test_1941(self):
        input = '''Class I{_2(){}Var $kyKF_l:Float ;Constructor (y_:Array [Array [Array [String ,0B1],43],03];D0:Array [Array [Array [Boolean ,0b1],0X54],43]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1941))

    def test_1942(self):
        input = '''Class zz:UQ{Val $3:Array [Int ,1];Constructor (){} }Class C{}Class q9:A1{Var _4:Array [Array [Array [Boolean ,02],0X1],40];}Class d:K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1942))

    def test_1943(self):
        input = '''Class z{Val $_:String ;Constructor (){}Constructor (_,_85_t5r,j__:q_8;H7,_:Array [Int ,0x37];_:Array [Array [Int ,0b1],55];_,zH,n:Boolean ;___,n_,_7,_____0s:Array [Int ,0x37];Xf_:z){Continue ;} }Class _{}Class S:D{}Class t:F{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1943))

    def test_1944(self):
        input = '''Class _4r:W{Val $07:String ;}Class m:_{Val D9_V__,_:R_;Val _,S:Array [Array [Array [Array [Float ,5],0b1010110],0X41],0b1010110];}Class f_J{H(){Continue ;Val _:Int ;{} }}Class _:R91rjzV{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1944))

    def test_1945(self):
        input = '''Class p_A5V2X:_G{Var D:String ;Constructor (J,_1,i:Zfq;g:Array [String ,011]){Break ;} }Class E7:__6_VlX{Var $8:Array [Float ,015_5];Destructor (){} }Class __9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1945))

    def test_1946(self):
        input = '''Class h88:_rPGD{Destructor (){Continue ;} }Class __A:_K{Var $_,$9,IA_9:Array [Array [Boolean ,3],48];Var M:__7;}Class QS:_{$4(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1946))

    def test_1947(self):
        input = '''Class B6_1n_{Destructor (){}Constructor (_A,_,_:Array [Int ,4_6_1_5]){} }Class B{J__y(_,S9p:Float ;uY1d:Int ){Continue ;Break ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1947))

    def test_1948(self):
        input = '''Class L{$_(S_JC,_4___:Array [Int ,06_5_4_1]){}Val $T_hh,$3,$7l,x9_:A;Constructor (E:_M5AEs;klP,_,IV57,_k_,k8,a:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1948))

    def test_1949(self):
        input = '''Class _U:L{Constructor (__3,_1_4,__T_l_:Array [Boolean ,04]){Continue ;Break ;Continue ;}Destructor (){Var _,__H,_:Array [Array [Array [Boolean ,0XDF],04],04];} }Class F{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1949))

    def test_1950(self):
        input = '''Class __3{}Class B:i_3{}Class rZ_:_{$06_(){Return ;Continue ;}Val $9,LI1,L7,_V_,$_,__:Array [Float ,0b1_010_1_01];Val $4:Array [Array [Float ,063],05_2];Var M5,$Mp,x:O;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1950))

    def test_1951(self):
        input = '''Class A:r{Var $3lF,_5:Array [Boolean ,04_21];}Class _{Var $7:Array [String ,0b110001];_7(R_,d0:Array [Array [Array [Array [Float ,26],0B11011],0b11_1],0xC_F];_,_2,k_733,d:H;_x4,z:Array [String ,0144]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1951))

    def test_1952(self):
        input = '''Class _gq:Y{Val _:Boolean ;Destructor (){ {Break ;Return ;Break ;} }}Class w{}Class _:J{}Class _{Var $e:Array [Array [Array [Boolean ,06],06],0X39];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1952))

    def test_1953(self):
        input = '''Class _2{Destructor (){}Destructor (){}Val z,CTw4:Array [Boolean ,0X3];}Class S{}Class _7V:P__{}Class _8{Constructor (V,_RR,q_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1953))

    def test_1954(self):
        input = '''Class W:t{}Class G5:l{}Class B9:_6{Var $_:y;}Class a_:C{Constructor (_,_:H4;P877:Float ){}Destructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1954))

    def test_1955(self):
        input = '''Class J{Var _u:Array [Array [Array [Int ,0117],0117],72];Constructor (D:Array [Float ,023];p,O:Array [Array [String ,0X42],0x5C];_3M,_,u3,W8_0_,_,i5,X:Boolean ;Y,b_3:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1955))

    def test_1956(self):
        input = '''Class _:_{}Class elT:K{Destructor (){}Val $l:Array [Array [Array [String ,444_0],0X5F],07_7];Val $m,$_,$6,$g,__:j;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1956))

    def test_1957(self):
        input = '''Class c:h_Us{}Class _:Dt_8_{}Class m{Constructor (_:Array [Array [Array [Array [Float ,0b1011],0B1],0b1011],99];Q:l){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1957))

    def test_1958(self):
        input = '''Class _{Var b,$__,$_7,_x:Array [Array [Array [Array [Array [Array [Float ,15],0B1],0B11_1],025],0X4],0b1];}Class K:_{Constructor (){}Val __,$_,$4,_Gl:Vyd;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1958))

    def test_1959(self):
        input = '''Class _0:_5{Var $396,$_7Ky,FM:Array [Array [Boolean ,0140],0b1011101];Y(__J,_FA1,W,k_5:v;_S_:Int ;_,_5,m,_i,_,_,z__,__,_J,_45_:Boolean ;w,P5,_63I,J:Int ;_6,X:Array [Boolean ,016_27_5]){}Val $5,Z:Array [Boolean ,0b1011101];Destructor (){} }Class _:j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1959))

    def test_1960(self):
        input = '''Class _V{_F(_:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,060],0X57],0XDD],71],0X57],0b10],0b1],0x8];j,_,p_9,_,w7,y6,_8,_,A:Array [Array [Array [Array [Float ,0b1],71],0b10],0b1_01];_o,t_,__:Array [Array [Int ,0673],0X57]){Continue ;Var _:OH;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1960))

    def test_1961(self):
        input = '''Class _{}Class __{g(){}Constructor (_,__:_d;m_G_7,__7,_K:Array [Array [Int ,99],0b1]){}Destructor (){} }Class _:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1961))

    def test_1962(self):
        input = '''Class Q:_{Val p,_9,$13,$_:Array [Array [Array [Array [String ,8],0x65],872_2],8];Constructor (Mf:String ){} }Class _{Var $_40X1,t6_7:Int ;}Class I_7:_4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1962))

    def test_1963(self):
        input = '''Class __T:O{Val $5,$_552:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0X23],0B1],0x45],0b110110],0b110],0b1],7],28];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1963))

    def test_1964(self):
        input = '''Class _e:Pf{Var pu8:Array [Int ,0B110010];$__D_(X:Float ;__,G:A;_,_0_,_,a:Array [Array [Float ,0x63],0B110010];Xh9_w:String ;_,_:_2g8){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1964))

    def test_1965(self):
        input = '''Class d_:b_L{Destructor (){Continue ;Return ;} }Class _m:j_{Val ___N8,$_,J:Array [Array [Array [Float ,0xF_5_2],017],0B101001];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1965))

    def test_1966(self):
        input = '''Class P{Var $0_:Array [String ,01_1];Constructor (_h,_4,_,_,i,U:Boolean ;_o_1,_h_2,a,_o_06j7,y8J_,_,_5703_2J:a7N;_:Array [Array [Array [Int ,0XF],93],0B1011110];_,_,_5_,_,x____,DJ5:_M9_){} }Class G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1966))

    def test_1967(self):
        input = '''Class ___:p_{Var Bk,$2,E,J_,$l,_,___,_V:_2_n8;}Class _{Var Lr_:__;$__4(sPa:pO;_:Float ;x:Boolean ;TH:v;d,_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1967))

    def test_1968(self):
        input = '''Class b93:j__{}Class a{Val $_9:b;Var i:Array [Array [Array [Array [Array [Int ,0X4C],03],05],50],0xC];Val _,W__H07w:Array [Boolean ,0X4C];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1968))

    def test_1969(self):
        input = '''Class q:p{Destructor (){}$9(_:Float ;_,nZJM,_J:Int ;e,C:_M;_,_:v9;_,_Vu,f:Float ;_,ab:Array [Float ,0b1010];q09,_Wz7_:_;Q:Float ;_99:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1969))

    def test_1970(self):
        input = '''Class e:r{$5_(){} }Class e:_{}Class uW:y{}Class j_{}Class _:_{}Class _:W_{_(_:Float ;o,_8,i2n26:Array [Array [Array [Array [Int ,0114],7],8],0b110000];_9:Array [Boolean ,0114];_,W:String ;s3,V5_g68Y18,_r,R:Int ;D,O:y_5;v,O,Y,_,d:Float ;_,__,d,____H:String ){} }Class _K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1970))

    def test_1971(self):
        input = '''Class _{}Class G{}Class _8{Val _:Array [Array [Boolean ,49],060];}Class o{Constructor (_7_46,_:Int ){} }Class __pY:_f{}Class _H4_:b{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1971))

    def test_1972(self):
        input = '''Class lv4{Constructor (_666:String ;____0,___3_,S_:Array [Boolean ,0X1];H,b:Bz;wVt,v:Array [Boolean ,02_64]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1972))

    def test_1973(self):
        input = '''Class _3:_T{Destructor (){} }Class kQ{Constructor (){}Constructor (E0Ia:u){Continue ;} }Class _U36_F:V{Var XCNxl,_27:Array [Array [Int ,0B110_1_10],0X4E];}Class i:r{Constructor (__Z:Int ;__H,g___B:Int ;O4:Array [String ,0X1]){}Val B:Array [Int ,100];Val _,l_,_:Array [String ,1_71];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1973))

    def test_1974(self):
        input = '''Class D2:_{Destructor (){}Val $L:Array [Array [Array [Array [Float ,0B110],02],42],42]=!----_4y::$4o;Var n5_,$f:Float ;}Class S:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1974))

    def test_1975(self):
        input = '''Class d_{Destructor (){Var m_8_,H,_7:p;_::$__l4();}Constructor (){}Constructor (){Return ;} }Class _j:vE{}Class _:S{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1975))

    def test_1976(self):
        input = '''Class H_:_{}Class m:___J{o(_:Array [Array [Array [Array [Array [Float ,0112],0112],0XF_0],0X7],0b1];b_:Float ;K,_,lZ3:Float ){} }Class _k:__2{}Class _9:_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1976))

    def test_1977(self):
        input = '''Class IV{Val $wf,_,$5_:Array [Int ,02_61];Constructor (){}Var x:_U;Destructor (){}Var $UH,R:Int ;g(){}Destructor (){} }Class _1k_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1977))

    def test_1978(self):
        input = '''Class C:_{Constructor (w,to_5:Array [Array [Array [Array [Array [String ,06_77],0x2A],5],07],0X3];_,Se,__9:String ;O,I:Array [Array [Int ,04],0x2A];T,_:Z;_:Array [Boolean ,03];_:_8_;L,_:String ){}Val $_,z,u_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1978))

    def test_1979(self):
        input = '''Class __o:A{}Class T:y_{Constructor (_4,_,_,_,_:h25){}Var h8Xu:Kl;Constructor (vM57:I;_ph,M9_,__:__;g,_:Array [Array [Float ,78],0b1];_,_,_3_,_,L__,j,_8e,_:Array [Boolean ,0X4];_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1979))

    def test_1980(self):
        input = '''Class W8{Var L:__;Constructor (C:Array [Boolean ,0b10010];_b,_:Array [Array [Array [String ,072],0X14],0B1]){} }Class W:M__0H{}Class K_:U{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1980))

    def test_1981(self):
        input = '''Class ___:_{}Class D_{}Class _hd_6D:__7C6{}Class d{Constructor (_7:Hp;L1:Float ){}Var $1:Array [Array [Float ,1],0x1];Val _:String ;}Class _{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1981))

    def test_1982(self):
        input = '''Class __:q3W{Var __Ee__,$i,uKkf,$q5:X;_(){} }Class __r0{Constructor (ZR:Float ;X__H,cX46:Boolean ){}Var H,_,$_,_,Nu,fW__,h8:Array [Array [Int ,0165614],0XC_4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1982))

    def test_1983(self):
        input = '''Class P:L605{Var $_8:R;s3(_f9,_l:Array [String ,0B1011000]){} }Class _{c_o(T:Array [Array [Array [Boolean ,0B1011000],056],0X1];G5_:String ){} }Class H6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1983))

    def test_1984(self):
        input = '''Class _2{Destructor (){}Constructor (){}Var P,_,$e_5:Boolean ;Var C34R:Array [String ,6_1];Constructor (k,_,_:Boolean ){} }Class r:k{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1984))

    def test_1985(self):
        input = '''Class _b:_{$36_(_:Array [Array [Boolean ,0X4_1],02]){}Val T:String ;Val $F:Array [Int ,0X28];}Class _:_{}Class _28_:ZF_M{$hj(JxiL:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1985))

    def test_1986(self):
        input = '''Class N:ZB{Val b,$v:_;}Class my{Constructor (W8Hl5,_,B:Array [String ,0b1];__2:Array [Array [Int ,0XA],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1986))

    def test_1987(self):
        input = '''Class _t{Constructor (Ut:Array [Array [Float ,0XB],0XAD_25]){Break ;} }Class J__81v_{M6_F_7_O(H601C:_1){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1987))

    def test_1988(self):
        input = '''Class h___{____(r,a:Boolean ;_zt,N_36NTX:Array [Array [Array [Array [String ,0B1011001],0x17],0B11],0X46];_,_1:String ){Break ;} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1988))

    def test_1989(self):
        input = '''Class _J_{Destructor (){}Constructor (ox_,I,R:Int ;v:U1;_8iv:Array [String ,0b1100000];h9,_,_u:Float ){} }Class __0b64:Hbj{}Class g0:_{_6(R_,_:Array [Float ,060]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1989))

    def test_1990(self):
        input = '''Class _{$6(P,s_8:c02___;_:_;C_:String ;Y,GXk:Array [Array [Array [Array [Array [Array [Array [String ,0104],0x7],0B1_01],0B1011101],6],2180],0x55];n,f_:_){} }Class _{Destructor (){Val c_4:Array [Float ,0b111_10];{Break ;} }Val $9:String ;Destructor (){Return ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1990))

    def test_1991(self):
        input = '''Class _:n{}Class X:_I0{Constructor (){vB__2::$0_();}Var $_,$6:Boolean ;Val $U:I;}Class Z:U{Constructor (xh,Z5_G6:Array [Array [Int ,6],010]){} }Class _6:Z_{}Class _{}Class _{}Class L{}Class ___y:_{}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1991))

    def test_1992(self):
        input = '''Class R:__{Val _:Array [Array [Float ,0x18],0b1];}Class _{Constructor (_,_:Array [Array [String ,0b1],67_8_0];j:Int ;s_:Boolean ){}Val n,_4m,$39,Q14N,am_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1992))

    def test_1993(self):
        input = '''Class _0_{_(){} }Class _{Constructor (I:_;_:Boolean ;m,rIh:Array [Float ,0b1000110];_7:String ;_:Array [Array [Array [Int ,88],0X38],0X6]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1993))

    def test_1994(self):
        input = '''Class _{}Class q_0{Var $_,g__4:Array [Array [Array [Array [Array [Array [String ,057],0XE],0b11111],0x8789_D_DF_F],0B111101],0x20];}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1994))

    def test_1995(self):
        input = '''Class p:M{Constructor (_2,_10,_D_,_:_;_e__,J,F8h8_jj_O:Array [Array [String ,0b11100_1_0],0X4D]){}Val $_v_7,d,O:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1995))

    def test_1996(self):
        input = '''Class _:_{}Class u{Constructor (){}Constructor (f7,D,T:__6;m,I70:_;s_,_9SI:_2;G1:Array [Array [Array [Array [Array [Array [Boolean ,0101],037_2],88],0X4],0B1],072_102]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1996))

    def test_1997(self):
        input = '''Class _:H0{Var a8q:Array [Float ,0132];}Class P_:__{}Class _:_6M{}Class _:_{Val L3:Array [Float ,27];}Class _{Var _:__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1997))

    def test_1998(self):
        input = '''Class __2B{Constructor (_U_,F7hd57i96,_,_,_,p_6u:___){}Var $_:gU2;}Class _{$_(Gi_r,R:_;H_,_:d;_:Float ){}Constructor (Z,WLS_17_FT1:Array [Array [Boolean ,033],0X5];_1k:Int ;OT27:Array [Boolean ,0b10]){} }Class _h0L6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1998))

    def test_1999(self):
        input = '''Class _9_:N{$m2(i,_:D8){}$36(){Continue ;{Break ;} }Destructor (){Continue ;}Destructor (){}Destructor (){}Var S:Boolean ;R(){} }Class t__pU4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 1999))

    def test_2000(self):
        input = '''Class k:R{}Class dw:s{Destructor (){Break ;Continue ;}w(){}Constructor (_,G,k:Array [Boolean ,0144];E_,_Ue9D:Array [Array [String ,0X1E],06_5_7]){} }Class n:_{Val _,k,$__:Array [Boolean ,9];}Class a2W0:_s{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2000))

    def test_2001(self):
        input = '''Class F2:W_{Constructor (_p:_C;J___,_:Array [Int ,27_3];E56T,_:Array [Array [Array [Array [Int ,06],044],04_25320],0B1]){} }Class _{}Class ko_{$x4(nG,_bC:_3){} }Class _:h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2001))

    def test_2002(self):
        input = '''Class _{Val v,$__0,__JR_:Array [Array [Array [Float ,01],67],01];Constructor (k:Array [Boolean ,01];_,cH,l,F,D:Array [Array [String ,0b1],3]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2002))

    def test_2003(self):
        input = '''Class _c_:x{}Class W{Constructor (_v,_:Array [String ,0x1F]){}Destructor (){} }Class O:ctTZ__5{Constructor (jf:Zg11;P_:Array [Int ,0b111110]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2003))

    def test_2004(self):
        input = '''Class Q:N{Constructor (s,_5:String ;f:String ;V,_:Array [Array [Array [Array [Array [String ,0B1],03],0b1100],2_0],0X33]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2004))

    def test_2005(self):
        input = '''Class _{Val h:Array [String ,0X50];$_(){}Var e:Array [Array [Array [Array [Array [Array [Array [Boolean ,0X1],0B1101],0B1101],0B1],0X50],98],04];Var r:_;}Class yn3:__6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2005))

    def test_2006(self):
        input = '''Class P:_r_3{Var _:Int ;}Class _:_{Constructor (___:Boolean ;i,p:Array [Int ,0x5];_,_97,F:Array [Float ,41];_,WP:Boolean ;_:____;mN:_7_;__:Array [Float ,0B1]){Continue ;Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2006))

    def test_2007(self):
        input = '''Class __{Constructor (g:c_;r__8:Array [Array [String ,0b11000],0b1];_7:String ){}Val _Q,B:Int ;Var $J,$4,_X_B_Zuz_A5_:Array [Boolean ,03];Destructor (){} }Class _:o{}Class _:jr{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2007))

    def test_2008(self):
        input = '''Class _H{$Cr3R9_aG8___w(_Eb_:Boolean ){}Val $0_D2rEs:__0;}Class p:B{$1(_:Array [Array [Boolean ,0x29],0xB_F5_2]){}Val _,P:Array [Int ,03];}Class J1:_i{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2008))

    def test_2009(self):
        input = '''Class _{Constructor (__9,b:H){} }Class _:x{Destructor (){}Val _,$_,u:Array [Int ,0b1010100];Var _:Array [Int ,3_9_7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2009))

    def test_2010(self):
        input = '''Class __i{}Class r_{Constructor (_,_44:_;W1d:Float ;w,_O0,d:o;_,_,_CQ,_,_:Array [Array [Array [Array [Array [Boolean ,15],6_44],023],15],0x53];_:_;_:x;_f,Z9,_:String ;_:Array [Array [Boolean ,0B100011],04]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2010))

    def test_2011(self):
        input = '''Class _{Val M,rO,$P_,_,$3:_;_(){} }Class oA:_{Var _878d___A:j;Val N:Array [String ,0x9];}Class R_:K{}Class k:J_7e{}Class T{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2011))

    def test_2012(self):
        input = '''Class o:_{}Class _J:_{Val i:Array [Array [Array [Array [Array [Int ,0x19],01],0B10],0102],1_5];Var __:Int ;}Class __{$55(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2012))

    def test_2013(self):
        input = '''Class _7:_{}Class _u72{Destructor (){} }Class I_2_egC_{Constructor (){} }Class __yq{Val $68,$t,$__,_l:Boolean ;Var _:Int ;}Class Y{Var $_Fy,m,$c,$5:_;Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2013))

    def test_2014(self):
        input = '''Class _:_{}Class _Z21{Constructor (_,_:Array [Array [Array [Array [Array [Boolean ,060],7],0XB],060],0b1011011];_:_6){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2014))

    def test_2015(self):
        input = '''Class _:_{}Class _b{Var $__,$_,$x,G6,$_Y:Array [Array [Array [Boolean ,5_2],8],0B1011110];}Class _D{Var x,s_a:Array [Array [Boolean ,0XF],0b111110];}Class h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2015))

    def test_2016(self):
        input = '''Class _{Var $4b:_;Var $5_:String ;Val c_9kd0:Boolean ;}Class _4Q{Var W1,$P:Array [Array [Int ,7_735_7_3],0B1001111];_87937____(_1:j5){} }Class Dy__x:_82__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2016))

    def test_2017(self):
        input = '''Class Vg_To:_{Val $_:Array [Float ,0B1_0110];$_(m__,U,__N:String ;__:Float ;UU,_:_;S30,__T:_;V:Array [Array [Array [Array [String ,07_4],0x61],06],0B1000010]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2017))

    def test_2018(self):
        input = '''Class i{Var $r:Array [Array [Array [Array [Array [Array [Array [Array [Int ,056],056],056],0xB],0X7],0b101000],0b1_1],0xA];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2018))

    def test_2019(self):
        input = '''Class l_iB40_:n_{Val _7:Array [Array [Array [String ,0B1_1],0b1010001],5_1];}Class m_{Constructor (){}Val Cq:Array [Int ,0b1010001];Var G_r:Array [Float ,0x34];}Class _:T{Var _,Y1_,$lF,$5:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2019))

    def test_2020(self):
        input = '''Class _:O{}Class _{Val $_:Array [Array [Array [String ,70],0b1110],0x49];Var _10:Array [Int ,0X4];Val N_v_86:_N_4;Val $4:Int ;}Class __:w_6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2020))

    def test_2021(self):
        input = '''Class pdB:v{Constructor (_:Boolean ){} }Class _3:_0{}Class l4:_F3{Constructor (o,p,r,Oy,_,b0z,M:Array [Boolean ,65]){}Val _35_0_1:_;}Class _:_6{_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2021))

    def test_2022(self):
        input = '''Class K{}Class TC_7{$3(vq:_1){} }Class g{Var $_,$P9_,c,M_,ug:Array [Array [Array [String ,9],0b110],0X64];}Class _qn{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2022))

    def test_2023(self):
        input = '''Class bC:vp7w{$_(a:Array [Boolean ,53];Q:Array [Array [Boolean ,4],5]){ {Continue ;}{}Break ;}Constructor (){} }Class vZ{Var X:Array [Array [String ,0XF],53];}Class _:_{Var $_Cy_,$38C:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2023))

    def test_2024(self):
        input = '''Class ___:r{$e(bu:Array [Array [Array [Array [Array [Array [Int ,2_0],0B100],0X73E3A],0B1],0B100],9_5328]){Var n,K:fE;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2024))

    def test_2025(self):
        input = '''Class _{K_4_07(S:__;_:_;q_,H,opb,rQ4,d2_063:Boolean ;_,_,Wqx5,_4,Y:Array [Int ,05_5];a:Array [Array [Int ,74369_1],03];_____Q:Array [Array [Int ,0140],0140];w,_,_,QYx:Array [Array [String ,0xB],0b10101]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2025))

    def test_2026(self):
        input = '''Class A{Destructor (){Var sq:Array [Array [Array [Array [Float ,01],01],01],01];} }Class R{}Class _i:_2{}Class x:__{Val _,_G2,$83_9:Int ;}Class _{Val eHy,_6,_3h:_61;Destructor (){Var _r:Boolean ;} }Class T3A{Constructor (t,_,_7D8_0,U:String ;_3_d4:Int ;_,_w5_K3,_y:Array [Array [Array [Array [Array [Array [Array [Array [String ,01],1],05],01],01],0B1000111],0B1000111],5]){}Constructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2026))

    def test_2027(self):
        input = '''Class __2:Co6{Constructor (_,__:Float ;A,Hg:Array [Float ,03];O_,_,__,m_v_,_d,si5,T:Float ;d4:Array [Float ,0X6_90F];Td:O){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2027))

    def test_2028(self):
        input = '''Class _:_{}Class _{Val $i:C56S;}Class P{}Class y{}Class _{Destructor (){}Var o,_,B,_0__:Array [Array [Boolean ,0B1_1_00],0XA_5];Constructor (YR2Z,b2,_,_0,WB,o,__,e:Array [String ,0XE]){}Destructor (){}Var a8j:Array [Boolean ,64];}Class r6:O8_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2028))

    def test_2029(self):
        input = '''Class _:U_{_(_:Array [Array [Int ,0143],0b10];_,A:Array [Boolean ,0X2A];c,_:Boolean ;x,i,_,_8_98:Array [Boolean ,04]){} }Class b{_(X,_,b____,_:_;__:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2029))

    def test_2030(self):
        input = '''Class _49{Var $_:D;}Class _:l{}Class n{}Class jT_:_{Constructor (){}Destructor (){}Destructor (){ {} }Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2030))

    def test_2031(self):
        input = '''Class M:EBE_{}Class _1{Constructor (G4_7__,P05_:P_;_5,_492,d:Int ;h,X,_:E;g_:Boolean ;g_:Float ;y_:Array [Array [Array [Float ,56],0140],0x1_1];_b49,_69:Array [Int ,5]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2031))

    def test_2032(self):
        input = '''Class _T{}Class N{$d4Q3(QI__0_,_,_,u_,_49,B:String ;I:Float ;_d,_6,p,G:R;h3,Jb_JDL_1:Array [Array [Array [Array [Array [Array [Array [String ,24],0b1],0B111000],0xD_6],0b11],0b1100000],016];C,a3,_:_){} }Class ____{Val $_:Array [Int ,0b1100000];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2032))

    def test_2033(self):
        input = '''Class _5{Val d,$_:Boolean ;}Class bC396F9{Val $_,$7_F88d5,$Y,$__E9,$_,__46L_:Array [Array [String ,03_44],047];}Class G:k_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2033))

    def test_2034(self):
        input = '''Class _{}Class b{Val _:Array [Array [Array [Array [Array [Boolean ,022_0],07_41_2],0124],7],0X2];Val $Y___:Float ;$8l(x_3,_:Float ;U8cU,__0_8_B:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2034))

    def test_2035(self):
        input = '''Class ___{Var _,_U:_9oBs;}Class p{Var Nr,$7__7:__;}Class A{Destructor (){}Var y9L,j:Array [String ,0x3];Val $_u:BX;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2035))

    def test_2036(self):
        input = '''Class P0{Val Gp:_o_HS;Constructor (E_,kbGZ,R,_:Array [Array [Array [Array [String ,9],0XC],0B1],7];n_n,H__,A,_,n,_3x,Y,H,_S,_f,k,_o,_,_:Array [Array [Float ,0b1],0X1_1_8E]){} }Class _x:X_LY{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2036))

    def test_2037(self):
        input = '''Class i_GU{}Class _{Destructor (){}Destructor (){ {} }}Class Q_:_{Var $_,$8,$_S:Array [Int ,76];_62u(o,Gd:R_hVN;O,cU5:Array [Array [Float ,0X30],2]){}_(){Break ;} }Class _{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2037))

    def test_2038(self):
        input = '''Class Z:e{}Class _:a___{Constructor (_:Float ;_7,Gb_S:__;r:Array [Float ,3_8_9];_,P1:Q;_,_,Y:Array [String ,0XD]){}Constructor (){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2038))

    def test_2039(self):
        input = '''Class H_8___{}Class __M:_8{Var $_:String ;}Class _:p{}Class oT6{$_5_1Q(){Continue ;}Val _9_,$oYG5,$949x8:N1;__(){}Val F:Array [Array [Boolean ,022],8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2039))

    def test_2040(self):
        input = '''Class __hY4_{Val F,$1:Array [Array [Array [Array [Array [Boolean ,0xD],3_09],1_0],1_1_9_6],046];Val $g,__:Float ;Constructor (){}$F(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2040))

    def test_2041(self):
        input = '''Class _b:_2{_32_U_(_y6_:Array [String ,0b1100];_8_,Ui7_,_,__2,_,_,VO:Boolean ;u_,m_:Array [Array [Array [Array [String ,06_33],32],6],0x4A];p:Boolean ;_:Array [Array [Int ,32],0B1];_:__){Continue ;} }Class _{}Class L6{}Class _8:z2_{}Class _9_o_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2041))

    def test_2042(self):
        input = '''Class _Q6{Constructor (__:__yIBp0e;_7Y:Array [Array [Float ,9_8],9_8];__QfC,___6v:m_){Break ;f_::$6X();{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2042))

    def test_2043(self):
        input = '''Class _{_2(_:Array [Array [Array [Array [Array [Float ,0B110001],0b1],0b101000],022_1_01_1],0x3_F5];K40d____000H__G,v_,_:_B;D:y7;_,u:String ;__z,_,_:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2043))

    def test_2044(self):
        input = '''Class __3{Var M3:K;Val $__K,f,$nI__:Array [String ,0b10_0_00];Constructor (T:Boolean ){Continue ;{Break ;} }}Class cWH{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2044))

    def test_2045(self):
        input = '''Class _g:o{Constructor (S_9_G:Float ){}Val $t_gO6_,$2:Array [Array [Array [Float ,0B1010111],04],0XD];}Class z7{Var _,$O_7,D,FSQ__7O:Xv;}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2045))

    def test_2046(self):
        input = '''Class Z:Xr_s_6{}Class x:m{Destructor (){}Val C:e;Constructor (){}Destructor (){} }Class _{Val _7_,$_c,f:D;Constructor (h,_:n;_:Array [Array [Array [Int ,0xE_B],0x17],0120]){}Var $1:Array [Array [Boolean ,39],0XA];}Class wB{Destructor (){Break ;{}{}Continue ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2046))

    def test_2047(self):
        input = '''Class _58p:Cc{}Class _:v{}Class _X{Var $_3C_,$X00T:b;Constructor (l032:String ;h:Array [Boolean ,0x8_8E_6];__1,E:Array [Array [Array [String ,0x31],0X44],0x31];e:Array [Float ,0x31];S,O0_KT,K_:Float ){_::$h();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2047))

    def test_2048(self):
        input = '''Class _:_{_(){}_(__p:c_6){}$05(){}Constructor (){ {} }$5Z(S,K_309D8:Boolean ;_6_:Array [Array [Array [Array [Float ,0B11010],80],0X64],056];F,_:RY){} }Class A{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2048))

    def test_2049(self):
        input = '''Class _:_{Val U:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0X183_4],4_0650_4],0b100110],0B1100],0B1_0],0B1],0x8],02];}Class z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2049))

    def test_2050(self):
        input = '''Class _6:_R{}Class _:_6_{Destructor (){}jzv2k78kq(){} }Class __5_b{$7v965(){Break ;}e4_w_d(k8:Array [String ,88];_3_:Vv_vVJ;_:Array [Array [Float ,0b111],0X7_1];Y:Array [Boolean ,06];b7_q:Array [Boolean ,0b111];__,_j:String ){Return ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2050))

    def test_2051(self):
        input = '''Class _{Constructor (){Break ;}$3h_V_(Byg ,Xc3a1:_s_;h88,wI1,B,w:Int ;I:_S;Q:_;D,__4:Boolean ;I1_P_,M8n:Boolean ;_N,W:Array [String ,024_62]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2051))

    def test_2052(self):
        input = '''Class e:_{Destructor (){Break ;}____(r,_:Array [Array [Int ,0B1],9];X14:Boolean ;h:Array [Array [String ,074],4_8];y,n:Float ){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2052))

    def test_2053(self):
        input = '''Class _:q{__(_8,vP,_,_:x_n4uG;k,G__S_3,D:u_1Z;_:_1_x_){} }Class E90{Constructor (xOq,T7:s;y:Array [Float ,0X9]){} }Class _6:_{}Class __:w__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2053))

    def test_2054(self):
        input = '''Class S6_t{$__(){}Constructor (){Continue ;} }Class H_{Constructor (O_:Boolean ;_73,D,_3w:Boolean ){Return ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2054))

    def test_2055(self):
        input = '''Class k{Var F:g0_;Var $_YMv:Boolean ;Var m_,$_1,o7z1__FAQBD,e_:S;Constructor (v:R_;_G1,D,_1:Int ;k,_K:Int ){} }Class b03__{Var $63_U:Array [Array [String ,0x3E],73];}Class _:u{Val $5:n2;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2055))

    def test_2056(self):
        input = '''Class m_{Constructor (_v8:Boolean ;M_g:__ThQCfi02w;m,_,D,i__6:Array [Array [Int ,2_7_29],7]){}_Rk86B_(_:Array [Array [Float ,0xD7_FC],02_0];__7_S,y_:_;_,o:_;Q33,g:Float ;q:N){}Val _D5:String ;Var _2y,b,$3_,$2,b9_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2056))

    def test_2057(self):
        input = '''Class N7{}Class _{Var $y_:l5b42z;Constructor (){}Var L8:_;$96(__,N61_,_:Array [Float ,040];_:Array [String ,0x3];_8k:Array [Array [Array [Boolean ,0x20],0b110101],0x3];Xr:Array [Array [Int ,0X37],07]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2057))

    def test_2058(self):
        input = '''Class _{Var op:Array [Array [Array [String ,55],071],071];}Class _{}Class _:G{Var $1J,_,$_t_v:Array [Boolean ,84];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2058))

    def test_2059(self):
        input = '''Class V:___3{}Class _bM_7:F{Constructor (_,M,J:Array [Array [Array [Array [Array [Array [Float ,0X7_4_D],0X1],030_5],47_6],0X2],0B101000]){} }Class s{}Class __:k4{Var M2,$_,__6__5:Array [Array [Array [Array [Array [Boolean ,0b1001001],0B1_011_0],0112],6],07];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2059))

    def test_2060(self):
        input = '''Class __:v8{Val Q2,$jQ:Array [Array [Array [Array [Array [Array [String ,0x21],02],0122],0122],0X8],0122];Constructor (){Val _4___,H5,_,d,D4,tH,_,_:b;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2060))

    def test_2061(self):
        input = '''Class I:jN{}Class __{Constructor (b,_,_73,n9523_B7,c:_X_k;k:_;_:Array [Array [Array [Int ,7],96],0x25]){Var Q7,_,__49x:_;{} }Val o:Array [Array [Int ,96],41];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2061))

    def test_2062(self):
        input = '''Class Z1:h{Var $I,_,fD:Array [Array [Array [Boolean ,03],0B1],2_4];Var $0,_,q,$_,$n__9,$__,$_,TK_9____,_9:__;}Class y{}Class L__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2062))

    def test_2063(self):
        input = '''Class yU:_o{Var _,$_:Array [Array [Array [Array [Array [Array [Boolean ,11],0b1_010],0b11],0B1],0X63],0x4];Val K,$7:_;}Class H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2063))

    def test_2064(self):
        input = '''Class HY__{Constructor (_,__:Array [Array [String ,0X5_8_2],62];Ev,Rm,_,_:Array [Int ,01]){Var _:_;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2064))

    def test_2065(self):
        input = '''Class __{_(_9H20:Array [Float ,5]){Continue ;}Val $8_,$8P,$1_:Int ;}Class _:__{Val $_,_ZW,$2j,_,$4_t,R,$K2,g__Gu,v:Int ;Val $_h_I,$7_h_,_p:__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2065))

    def test_2066(self):
        input = '''Class gP:_{Val _a,__8:Array [Boolean ,0133];$_(){}Val $B7:B=!---WT2A::$5;}Class L{Constructor (L_,o:Boolean ;__,NT8,_6:g;Q,D:Array [Array [String ,05],0b110101]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2066))

    def test_2067(self):
        input = '''Class UO_{}Class _{Val z,_R:nA3_;Var _,$_0,$74uCj_,$9___:Array [Array [String ,0x3B],055];}Class g{Var id4__,$0:C;$_o(__G6d,___:__0;__:V){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2067))

    def test_2068(self):
        input = '''Class r_{Var V:Array [Int ,044];Constructor (_:Array [Float ,0b1]){Continue ;} }Class __v04:n_{n__(_,_,G9,_:Z2R5;_J,_o_1,Z5,m,_2_,_:l;I,__o:Array [Array [Array [String ,02],33],0X50]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2068))

    def test_2069(self):
        input = '''Class __{Val $_bI,$S,$qvi9:Array [String ,01];Var _:Boolean ;}Class CL7:__{Val $_0,$_1,c_P7,q,_,$ZAN9_,$TY:Array [Int ,74];Destructor (){Var Q__:Array [Array [String ,0b1000000],74];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2069))

    def test_2070(self):
        input = '''Class _{Constructor (z2,__:String ;mB:Float ;__:Array [Array [Array [Boolean ,0B1_0],0103],0b1]){}Destructor (){ {Continue ;} }}Class _:_{Destructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2070))

    def test_2071(self):
        input = '''Class TM9_:_j9L{}Class p_:_{Var $9,$t__J27,K:Int ;Val _:Array [Array [Array [Array [Array [String ,0x33],0x8],0102],07],0102];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2071))

    def test_2072(self):
        input = '''Class _S9{$_j_go1(_h:Array [Float ,02]){ {Continue ;} }}Class X8_:l_{}Class _{Var $2f,P,_:_;Var $2_5:Array [Array [Array [Int ,26],0B100010],0XC];Var P:Array [Float ,05];Constructor (_,_,_:Array [Array [Array [Array [Array [Int ,0x4],37],0B1],0B100010],024]){Var _:String ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2072))

    def test_2073(self):
        input = '''Class _:c{Var H_:Int ;Val _:Array [Array [Float ,3],6];Val $S6B,$__3,__W_9:Array [Array [Array [Array [Float ,0XA],0B1_0_0],03],6_7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2073))

    def test_2074(self):
        input = '''Class _:zx{Var $6_,T_,$_,__,$b6:Array [Array [Array [Array [Array [Array [String ,0115],0X2],044],0XD_4_2_6],20],0B10];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2074))

    def test_2075(self):
        input = '''Class I{}Class _{Constructor (__,_s8,__,_:Int ;_:String ){Continue ;}__(_,Q_,_S6:Array [Float ,0135];R:v){} }Class I:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2075))

    def test_2076(self):
        input = '''Class M{}Class _v:R{Var ___W7,$4,_,$y:Array [Array [Array [Boolean ,0x62],033],0XF_1];_(_,g:Int ;Z_9,BF:Float ){} }Class oI:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2076))

    def test_2077(self):
        input = '''Class _4{Var $d5:Array [Boolean ,0x13];Var _,$7,$6,_,$_,_50_0:Array [Array [Array [Boolean ,0X41],0b1],0xA];Var $_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2077))

    def test_2078(self):
        input = '''Class k:_9{$0(P:Array [Boolean ,0B110000];_9:Boolean ;vh:h;_i_:Array [Array [Array [Int ,0x52],3],0b1011000];_:_1;_,U79U0Q8_K_:Array [Array [Boolean ,0X9],3]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2078))

    def test_2079(self):
        input = '''Class _:rS{}Class p:_03{_(V_,_:uYV;w,P_N5,__,Y_,_,_:__8;h:Array [Array [Array [Array [Array [Boolean ,47],063],76],7_39_7],76]){}Constructor (_p,Ok:Float ;t:_;t_4,B_:Boolean ;_:Int ;oE_:Array [Array [Int ,0X5],0x7]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2079))

    def test_2080(self):
        input = '''Class H1{_(_S:Array [Array [Array [Array [Boolean ,100],01],0xA],0b1101];o,_,W,T7_,W,l:Boolean ;C,R,_81B:_5_;_e:Array [Array [Boolean ,100],0x5B];K2,w:Array [Array [Array [Int ,0b1101],0x5B],0X39];___D,W_:_K_;G,_:nkq){}Constructor (_6IK2_:_Y_;o,Z_N:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2080))

    def test_2081(self):
        input = '''Class __R:_{Var $5W_:Array [String ,0B1000101];}Class LF2__5_{}Class _{}Class G:F5{Val _:Array [Array [Float ,0x5],0x7];}Class AtH:f{}Class _:_5V{Val _0,K,J:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2081))

    def test_2082(self):
        input = '''Class _:_2{Constructor (__,lh:Boolean ;c7,__Y:String ;_,_U,za,m:String ;m,y:Array [Array [String ,9],0b101]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2082))

    def test_2083(self):
        input = '''Class q:G{Val $AXZ,$_z:Array [Float ,0xF];$r(_,__,q6T:Array [Int ,0xF];__:Array [Array [Array [Array [Array [Boolean ,0xF],0b10001],067],04],0X1C];V5:Array [Array [Array [Boolean ,793_4],0X1C],0b10001]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2083))

    def test_2084(self):
        input = '''Class E:_{Constructor (V,__,_:Boolean ;v:Array [Array [Array [Array [Array [Float ,0x62],30],042],0B1],02];_,r4:_){}Var $_:Int ;Constructor (Hg7,kL7:Array [Int ,0xA]){} }Class v2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2084))

    def test_2085(self):
        input = '''Class __t_:q{$4C4v8(){ {} }}Class __6_f5{Var I:Array [String ,0b1];Var m__,$0:s;Var $_TV_Q3_T9,h,$9:Array [Boolean ,020];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2085))

    def test_2086(self):
        input = '''Class oj_:s{}Class a:_7{Constructor (_:H;_:nX_;O,_D_,_,_,R:Int ;f_6_:String ;_:Array [String ,2]){}Val _,_1,$_:Int ;}Class _9:n_{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2086))

    def test_2087(self):
        input = '''Class _{Val $2_,R9,$_,__4,$__:_;Constructor (){}Constructor (){}$_(){}Var $_:Array [Array [Array [Int ,789_8_7],07],11];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2087))

    def test_2088(self):
        input = '''Class _h_5V_1:RK_93{Destructor (){Break ;Continue ;}Constructor (__7,b9:_;C,aa,E:Int ;_D,E698:Int ;_,_,_i_8:Array [Array [Array [Array [Boolean ,3_35],9_35],0b1],5]){}Constructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2088))

    def test_2089(self):
        input = '''Class _G0S4{}Class _{}Class __:b___Xm{Var $_:Array [String ,0b1];Destructor (){} }Class M1__:rB_ah{}Class n8l4_:_9{Val $08WZ9,$_,_,r:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2089))

    def test_2090(self):
        input = '''Class G:C8{Val $_,__,EB9Ipl_u142,$_:Boolean ;_(){Val E,n_1_297,B,_J:Array [Float ,4];}$__c(_,_:Boolean ;o7_5,N__s8,Xg_:g;_1:String ;S:Int ;h,hz:Array [Array [Array [Array [Array [Array [Int ,47],0B1_10],0B1_1],47],054],0B111000]){Val A:Array [Boolean ,0b1_1_01_0_00];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2090))

    def test_2091(self):
        input = '''Class czn{}Class _{Constructor (_:Array [Boolean ,0126];h:Boolean ;tM:Array [Array [Float ,0b110111],0B11101];q,U_,_3a_,XW:gn;F:Array [Int ,47]){ {Val s1W:String ;{} }Continue ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2091))

    def test_2092(self):
        input = '''Class _:R{Constructor (I,__,p:Array [Float ,02]){} }Class _g:_{}Class _{Constructor (){Break ;} }Class _p__78{Constructor (J_7RD_1:S4;_:String ;r:String ){} }Class _R{Var $3:Float ;Constructor (E:Array [Array [Int ,04],06_1]){}Val _:Nx;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2092))

    def test_2093(self):
        input = '''Class _:k{Val S:Array [Array [Array [Array [Array [String ,054_0_2_4_622],0X3],2_6],0b1000111],28];Val D,_,$_:Float ;Var $_:Array [Boolean ,0B1_0];}Class x{Destructor (){} }Class G7{$_Z_(){}_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2093))

    def test_2094(self):
        input = '''Class __:_{Constructor (){}Var $__7:U_;Var c:Array [Array [Array [Array [Float ,0B1000011],07],0X3A],7_5_2];Var g,kn:Array [Int ,054];u_(A:_nZrJ;Y,J_0,Z:String ;LW,Y,q:hD__GP___){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2094))

    def test_2095(self):
        input = '''Class f1{Constructor (L_:Array [Array [Array [Array [Array [String ,0x31],0B1_011],06],0x5_9_A_6],0b1];_q___:__P_X;r_L,_C:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2095))

    def test_2096(self):
        input = '''Class BgK{Destructor (){}Var T,_:__d;}Class _:__9{}Class _w_Q:LcI5{_bY_Q(_41,_:Array [String ,04]){}Val _:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2096))

    def test_2097(self):
        input = '''Class _{}Class Q3:_58_{Var __,_:Array [Boolean ,0b1];}Class p4:X7{}Class T_:_{Constructor (x62:String ;_U__,_se_,_M2_1,_a:uG;k:o;W,PB,Q_:String ){} }Class _{}Class rz:FG{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2097))

    def test_2098(self):
        input = '''Class o_:l{Var $__,$2_:_E;Val $9__,_A167____Z,K9:Int ;}Class _:M59{y(E7,_:Array [Array [Int ,0114],0b1010011];__6,_:_zs;_,j_o_60:_3_){}$3(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2098))

    def test_2099(self):
        input = '''Class _:_{}Class t:_{Constructor (B:Array [Int ,0b1000011];_,__:Array [Boolean ,0x8_8C4];_3_:_;_:Array [Array [Array [Int ,69],0x3B],02_0_5];_:B){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2099))

    def test_2100(self):
        input = '''Class _{}Class _J:K_{Destructor (){} }Class _:_{}Class t4__{}Class _:Z{}Class UC{Val o:Array [Array [Array [String ,0B11],5],0X10];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2100))

    def test_2101(self):
        input = '''Class Y{Val x7_:Boolean ;Var P5,$_2,R,_:_y6H8;Constructor (){}Val f9,qY,$d:Array [Boolean ,0113];}Class aDK{Var _,p__:Array [Array [Int ,0x5E],0b1];Constructor (_:Float ;_:_n){}_io(d:Boolean ;N:Array [Array [Float ,0B1000001],0113];__:x_;NL,f4C,g,k_,L:_Bz4__;__:_y){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2101))

    def test_2102(self):
        input = '''Class D3_:_{Destructor (){}Constructor (s:_;_,_Ju_:Array [Array [Array [Array [Array [Array [Array [Int ,7_7],0x10],0B1],0XB],4],03_4],01];q:String ){} }Class j:r0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2102))

    def test_2103(self):
        input = '''Class e_{}Class _:M{}Class k:___{}Class B6:_Re{Destructor (){}_(_,__8,W,_,_8d,_:Array [String ,0b110]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2103))

    def test_2104(self):
        input = '''Class M{}Class u:_{Wv7mI(){} }Class W{Destructor (){Continue ;Break ;}Destructor (){Continue ;} }Class D:o_{}Class _M{Var $H,$__E_86__,$5,_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2104))

    def test_2105(self):
        input = '''Class __tn:w{Destructor (){}Val _hu_:Boolean ;}Class _:_LgV9{Destructor (){Break ;} }Class Pu{Constructor (D:Array [Float ,5_1];u:Array [Float ,0B11];h:Array [Array [Array [Boolean ,020],0X1_2_E_A],032];__9_,Ns_:r){ {} }$3U(_,H,Fh_,r,T_,_:Float ;I:Array [String ,0B1]){Break ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2105))

    def test_2106(self):
        input = '''Class V7l1_:_4{}Class bq:j{Var $A,__7__:Array [Array [Array [Array [Array [Array [Array [Int ,06],0xE_6_A],9],0100],0100],0x20],0100];}Class j3K_:_8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2106))

    def test_2107(self):
        input = '''Class _:__A{}Class _:mV__{$_(_,_s,A:Array [Float ,0X9];__,j33,_,_sX:Boolean ;_,z__3,o37:Array [Boolean ,035]){ {} }Constructor (n2,_l,zP_,_5,_,g4:Array [String ,82]){ {_::$d6g();} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2107))

    def test_2108(self):
        input = '''Class R_{Var y,G:Array [Array [Array [Array [Boolean ,3],0XDF_4],03],0xA_8];Constructor (_E:Array [Array [Array [Float ,0X38],052],07];_0,_,w:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2108))

    def test_2109(self):
        input = '''Class a{}Class gwr:Vg{}Class mz3kSy:ac_m{Val $_2:Boolean ;}Class P{Val m_,$o:e9;Constructor (){} }Class v25{}Class _{}Class G_{Var o3:__;Val $_N____,$337:_6_;Val p_,_,$_p:Float ;}Class M2{Val __,$h0_:h;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2109))

    def test_2110(self):
        input = '''Class _{}Class e:_{Val S:Array [String ,0x17];}Class _:n{Val $h2b:Array [Array [Array [Int ,0x17],03_7_0],9];}Class V{}Class H{}Class H_0V:F{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2110))

    def test_2111(self):
        input = '''Class t_{Constructor (){} }Class Y:W{Var $_:Float ;J(qj:Array [Float ,0B11];S:Array [Int ,0b1];w3Z,N25Ik,r,s_1_:Int ){} }Class A{Destructor (){} }Class ct:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2111))

    def test_2112(self):
        input = '''Class gFU:W{Destructor (){}$5K(G:Array [Array [Array [Array [Array [Array [Array [Boolean ,8],0B1_1],0543_5_6_6],8_8],1_81_4_3],0x7],8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2112))

    def test_2113(self):
        input = '''Class U{Val _2,_4T:Boolean ;Val __:Array [Array [Int ,046],0xAE1];Constructor (_,_,_K:H;x:K;_f,_:Array [Int ,0B1010000]){m::$R();Continue ;} }Class _{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2113))

    def test_2114(self):
        input = '''Class _:_{Constructor (_:Array [Float ,0B100]){}$I(m,_:Array [Array [Int ,0x1A],0X2FD]){}Constructor (_,G,m2:e){Break ;{} }Var $3:wqY;Val $_:Int ;Var _:Boolean ;}Class _4:Y_{}Class _K{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2114))

    def test_2115(self):
        input = '''Class ___:_{Constructor (x:s14e_5;FR,d0hGs__ju,r829:Array [Array [Array [Array [Array [Boolean ,7_502],06_1_1],15],0b11111],0X23];w6:Int ;N:Array [String ,057];H:Array [Array [Int ,01],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2115))

    def test_2116(self):
        input = '''Class _Q{Var $r:Array [Array [Array [Array [Boolean ,0117],32],32],74];}Class Q{}Class _{Destructor (){} }Class a{}Class _:_d_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2116))

    def test_2117(self):
        input = '''Class _:h2{Constructor (g:Array [Array [String ,0b1],026];_:Array [Array [Array [Array [Int ,0b1111],0b1111],0B1011010],0x96]){}Val $7Z:_09U4__;}Class _:kD{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2117))

    def test_2118(self):
        input = '''Class X_{Var H,_:Array [Array [Array [Array [Array [Boolean ,0X27EA_1_1C],0X8_C],2],0X9F],0b1010000];Val $3:Array [Array [Array [Array [Boolean ,0B1_0],4],0B110111],06];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2118))

    def test_2119(self):
        input = '''Class jU_:__4w_{Destructor (){}Constructor (_:_I98;_,_z:Array [Array [Int ,0B1000011],0x483]){Val V:Int ;} }Class p_Z:N4_{Var $1,$C_N0:Array [Array [Boolean ,5],0x8_E];Val _:Float ;_(){} }Class s_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2119))

    def test_2120(self):
        input = '''Class _3{jz_0(){}Val _T,$_:String ;Val _,$87:Boolean ;}Class S{}Class Y:p{Val $__,$___:Array [Float ,7500];}Class _:UU{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2120))

    def test_2121(self):
        input = '''Class l{Constructor (k,__:Array [Boolean ,8]){Break ;}Constructor (_,gj,g:Array [Array [String ,82],6_6]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2121))

    def test_2122(self):
        input = '''Class x:L_{Destructor (){}Var $1,$876v,__:Array [Array [Array [Array [Int ,0130],3],0X2],0b101];Val $_d:S;Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2122))

    def test_2123(self):
        input = '''Class _7e:r{_(){}$8(m7k,_pC_:Array [Float ,065];G1TH,y_:Float ;K:Array [Array [Boolean ,065],065];q7:F;l6,D,_:_){} }Class __{Var _,g,_:Array [Int ,0b1];Var $b,$_,$1,$z,i_v6D:Int ;Var g_V,__:Boolean ;}Class b{$2ev(){}Constructor (_:String ){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2123))

    def test_2124(self):
        input = '''Class Lo:_{Constructor (){}__(W,_,F__5_:Array [Array [Array [String ,02],41],050]){}Var $FK1,_3:Int ;}Class _09:_{Var _:b__Y;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2124))

    def test_2125(self):
        input = '''Class _{Var _:p3;}Class __:V{Val $ZJ1:Array [Array [Float ,0x45],0X29];Var $_6,$Q,$4429,n,$__2:m;Var $69,$5_:yu_;$4_(){} }Class Q_J:_Rc_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2125))

    def test_2126(self):
        input = '''Class _:_{e_21(_:_7;_1,S8,L:D_3j;_v14,_47,_2,_EE_U9_:Boolean ;___:String ;o71_9,_5_:_;_:Array [Boolean ,97]){Val _:_;}$__3c(_:Array [Float ,016]){}Val $x,_,$0:Array [Float ,0xC];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2126))

    def test_2127(self):
        input = '''Class y:H_{}Class U:_{$57(_:Array [Array [Boolean ,032],07_6_1];n___4i,Q:Array [Array [Array [Float ,3_4_0_80292],0X2B],0x45]){} }Class r4G_3_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2127))

    def test_2128(self):
        input = '''Class l{$6(_,E_f:d;r__,t,_o_,_o_:Array [String ,0xB];_65,_,_5QG_:Boolean ;T,B,C:Array [Int ,0xB]){} }Class X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2128))

    def test_2129(self):
        input = '''Class OB2j:_{Var $_85,$72_,j:_;Constructor (_,wG:Array [Array [Array [Array [Boolean ,0x15],28],6],7];_I0:Int ){Continue ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2129))

    def test_2130(self):
        input = '''Class d85{Destructor (){}Var h__y:String =!!!!!-False .H_()||!e::$e_7._._();vI(T2,_,e:Float ){}Constructor (V_C,sPUL:Array [Array [Array [Array [Int ,0X39],0B1],7],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2130))

    def test_2131(self):
        input = '''Class v{z(_:Array [Array [Int ,0X6],0x8]){}Destructor (){Return -X::$4();Continue ;} }Class b__3LIM3:C463{Val $p1:_9;}Class _:bju3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2131))

    def test_2132(self):
        input = '''Class e{Destructor (){Break ;} }Class X_{Var _:j81;Constructor (){} }Class _:_O_{$lf1_l(_,_:_f){Var Y,X,_,M,v__:Array [Array [Float ,0X7],0X14];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2132))

    def test_2133(self):
        input = '''Class C:_{Constructor (x,V1_lvP88:S;I,DH5_o_:bb_7_;_,___4,S:Array [String ,0B1100010];w:Array [Array [String ,6568_51],48]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2133))

    def test_2134(self):
        input = '''Class m:o{Var $__d_3_:G_;Constructor (f_1,P4,_:__9g_;UB,_1_,__B_,_:O;_o_,T:Array [Boolean ,0x2];e8:Array [Array [Boolean ,23],23];_:Float ;_,___:Array [Int ,2_54_9]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2134))

    def test_2135(self):
        input = '''Class s:_{}Class _p0:___{Constructor (_Y,z_,a,_3,_:Float ;__6h_,__m4,__8K_3,w_x:S){Break ;Continue ;}Var $_,$1_,___:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2135))

    def test_2136(self):
        input = '''Class __:_{$8_155_(){Break ;} }Class _:NC8{Destructor (){} }Class _38:_{Val _:Array [Float ,07];Var $E_:Array [Float ,07_6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2136))

    def test_2137(self):
        input = '''Class _:_{q(__,_2ir7:d;v72,o_:_1;_C,_,_,Q,_,_F4:_){Break ;}Var od:Ma;}Class _:H{Var $2:Array [String ,026];Val M9:String ;Var $nx,$4i:_1;}Class y:_H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2137))

    def test_2138(self):
        input = '''Class _LJ47{$D_(___Np_:String ;R,gr,__,_0,_C,AnW:Array [Float ,0X22]){ {} }Constructor (__Z:Array [Array [String ,0x46],9]){} }Class __6rd__{}Class _{Var $8,$v,$F,z_:Boolean ;D(L305_9,w2,_h,R,P:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2138))

    def test_2139(self):
        input = '''Class _u{Constructor (){} }Class __2_:H{}Class __{$_(){} }Class __:__6{Constructor (){}Val $_:n=n::$7Z().I._*-_::$_();}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2139))

    def test_2140(self):
        input = '''Class v:_{Destructor (){Continue ;}Constructor (I_N__:d;p:b;G_:Array [Int ,0XD];o,yQ,_,V,uj9,_2_oF_:S7i;_7:Array [Array [Array [String ,0X4],0B1_1],0b1_0]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2140))

    def test_2141(self):
        input = '''Class __{}Class _8:_{Val $P09,$_,$_,_,yY:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,95_2_5],07_4],0x40],0117],0x40],04],37],0117],0117];}Class g{}Class _New {}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2141))

    def test_2142(self):
        input = '''Class N88{Val $yQE_J:t;Var __,$g_36E3,T,$U9_,$g5:Array [Array [Float ,0111],0X8];}Class D{}Class tq:_{}Class F{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2142))

    def test_2143(self):
        input = '''Class _:_{$R(){Continue ;}$_(_S,I:String ;_0:Boolean ;v54X1,__,_Q:Array [Array [String ,071],071]){Continue ;_::$6();} }Class n:_{}Class z_:_{Var $_:String ;}Class __b{}Class h:_0v{Var $tL_:Array [String ,0b1010010];}Class _D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2143))

    def test_2144(self):
        input = '''Class hu___:Q{Val $q,J2:s;$_(){}Val _,$_:Array [Array [Array [Int ,044],2],85];}Class _7__1{Var Di80,$B,x:Array [Array [String ,044],041];Constructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2144))

    def test_2145(self):
        input = '''Class y:o8{_N9(_36:Array [Array [Float ,0b1],0B1010110];P__0:_){}Constructor (h_MB,__:Array [Float ,0X1D];rR9_,_,_,_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2145))

    def test_2146(self):
        input = '''Class e:Z{}Class _Re_:g{Destructor (){Break ;} }Class _{Constructor (q_9:Array [Array [Float ,0X23],074];R,Cx,__,__F:_;FWl:Array [Float ,0B1]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2146))

    def test_2147(self):
        input = '''Class xx5:S{Constructor (){} }Class _9{Var _,$_n,Er,L,$5___,$F,$y,_Q_V_,$F,$_K:Boolean ;}Class M{}Class _:p_h{Val F:_Ui;Val $n0:p;Destructor (){Continue ;} }Class _Hl4:___{Destructor (){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2147))

    def test_2148(self):
        input = '''Class _:h__{}Class _Y_{Constructor (l,D:Array [Boolean ,2_6];Yml:Array [Array [Int ,0b100000],26];_,f,K:Float ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2148))

    def test_2149(self):
        input = '''Class dU{}Class C_:i_U_{$Jd(_A_5:Array [Array [Array [Int ,0XD],70],70];__:Array [Int ,0x40]){} }Class S{}Class l:__{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2149))

    def test_2150(self):
        input = '''Class D{Var $_:Array [Boolean ,0xE_1];}Class F_:_A{__(AZz1,_,_TD,_7_W6Hb,u,__Y_,tV:String ;_a_:_;_,f1:Array [Float ,06]){Var g,d7,__:_;_::$9();} }Class g64:I_L{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2150))

    def test_2151(self):
        input = '''Class _L:w__{}Class O_V{Constructor (_46,o,m7,_,_,_,x,__0,_20y,P:Array [Boolean ,04]){}Destructor (){} }Class V{}Class n{}Class _{}Class _{$Me21_(__,_:Array [Array [Int ,035],0X63];__5G:Float ;_:Array [Array [Array [Int ,06],0b1],07];hIxk:String ){Return ;} }Class _:V{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2151))

    def test_2152(self):
        input = '''Class h:_4p_{Destructor (){}$4_(e6,_,_:I_9IG;_i:Array [String ,5_6_3]){}__e(__:Int ;Ey,u_g,_y7:Float ;_,_:P4e_18){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2152))

    def test_2153(self):
        input = '''Class X{__(_:Boolean ;_:fV;_,P:Array [Array [Array [Array [Array [Int ,0b1001111],53],0X532],53],1]){}_(__1:Array [Array [Array [Boolean ,9],53],0X3C];_,Z,lU,a,y__:P){} }Class ___:o_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2153))

    def test_2154(self):
        input = '''Class KQ_{Var _:Array [Int ,9];Var $6:_4_;}Class _830_:_{}Class I{$3_FK(_9:String ;sX_4,ekd,Z,_,_I:Array [Array [String ,0b1010111],02];K0:gm_q;j,__,__:_){Val eU,_q:i;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2154))

    def test_2155(self):
        input = '''Class Z_55:_{}Class W:L08{_I(__,_,j2:_C){}$_(_:Boolean ;m,L__:_;o:_J){ {} }Ql(U,K:o__;_9b,_h,SS:String ;T:Array [Array [Float ,3_9],0x4B_1_8_80];fb:_1){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2155))

    def test_2156(self):
        input = '''Class _{q_(N,_8,yf__,t64,__6,_6,_,_09,q0__qC1T_,K:Array [Array [Array [Array [Array [Boolean ,5],01],010],58],0x1_C];__x:Array [Boolean ,07];_1U:Array [Array [Boolean ,010],0b100011];d,Q,L__J_,_3:String ;h,_:Array [Int ,0x4F];_,W_a:_O){}$d17(_5____G:w){}Constructor (){ {}Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2156))

    def test_2157(self):
        input = '''Class __:DN{}Class _{Constructor (z_,__Lv_,X_SPe:Array [Array [Boolean ,0b1001],23];_:Q_;N1:String ;Q93:_j0;_R_,_4h:Array [Float ,0b1001];_:Float ;p:T){}Val Q__3h1:Array [Array [Array [Array [String ,0B1_1_0],024],0x3C],0b10];Destructor (){ {Break ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2157))

    def test_2158(self):
        input = '''Class _N35:_{}Class _{}Class L{Constructor (Tm_:Array [Array [Array [Array [Array [Int ,0X53],07740],0B1_110],11],022]){jz::$_h66_();f::$7();}$_(){} }Class __a_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2158))

    def test_2159(self):
        input = '''Class _:R{}Class J__r:__{}Class h:It{Constructor (_0_9:String ){ {} }}Class m:r{}Class a_gn__:_z{Constructor (z,_V:Array [Array [String ,0B1001110],0X17]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2159))

    def test_2160(self):
        input = '''Class Q0:L{_(_u8,__,wD:_81;B,T,_,p,g_,_:Array [Array [Boolean ,0b1010101],0XEE_2];x2__,Z7,_,_,n6:Array [Boolean ,0B110011];_l:String ;p,_:_){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2160))

    def test_2161(self):
        input = '''Class _:_{_R(_,_g,_:l){Var W_:Array [Array [Array [Array [Array [Array [Int ,02],38],0b1110],07],03_3],07];}Constructor (_O__:Boolean ;E4_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2161))

    def test_2162(self):
        input = '''Class __{x(l,_c_:Array [Array [Array [Array [Boolean ,044],0b1],43],0x43];_,j,_:Int ){} }Class _{}Class X21F1_0__:z{}Class _919{}Class t{Val _,$8_:E6_;$_j_(){} }Class w{}Class _:h{}Class K_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2162))

    def test_2163(self):
        input = '''Class H{Var $e:Boolean ;Val $y,$2,__,H:Array [Boolean ,35];}Class _N{}Class _:_{Val $s,$_:Array [Array [Float ,051],0X1];$k(){} }Class y_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2163))

    def test_2164(self):
        input = '''Class e_{}Class s:_2u{$_(____,t,Yh7j:Array [Array [Array [Array [Array [Array [Int ,6_6],71],0X3],042],71],0b1000011];S:String ){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2164))

    def test_2165(self):
        input = '''Class w{Destructor (){}Var _,$3,_a3,$_:Array [Array [Array [Array [Array [Array [Array [Int ,0B11_0],0574],92],040],0X8],92],040];}Class u_:Y_Eg{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2165))

    def test_2166(self):
        input = '''Class E{Val _:Boolean ;Val $A:Array [Array [Array [Int ,02_0],0X44],0b1_10];$_(K,o2,JN__l_l,Wq5_K:Boolean ;J18,_,A_R:Array [Float ,0B1]){Break ;_H8iZ_pP3_::$i();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2166))

    def test_2167(self):
        input = '''Class _:_{$h(_:Array [String ,0B100010];_9,_rY_W2,_b_0,L:Array [Array [Boolean ,2],0X34];__1,s:Array [String ,0X6]){Return ;Val __:Array [Array [Array [Array [Array [Array [Array [Int ,4],0B10_1],0x4D],0x4D],47],07_7_5],05];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2167))

    def test_2168(self):
        input = '''Class _{}Class _6{$_(_Qh:_;_:Float ;BB,H,T_1,_,_4z__,x,_0D:Array [Array [Boolean ,630_3],0X31];o:_Y;m0J,_3,__,_:Array [Boolean ,0b1001111];_:x_3;L:Array [Int ,0b1]){}Destructor (){}Val $_d:Array [Int ,0x28];}Class d_T:z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2168))

    def test_2169(self):
        input = '''Class M{_(_,A5:Boolean ;_:Array [Array [Array [Array [Boolean ,0b10],04],0B1],0b11_1_0];O34,_4:Int ;d__68i,Zr:s_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2169))

    def test_2170(self):
        input = '''Class _{$4(H8,k3_:Float ;R,xe,i:____b_W4;_,x,r1,J_9,_,_,n_3,_:Int ){ {}Continue ;}Constructor (){}Destructor (){ {} }Constructor (S__,J3,A__,_:v__48;_4_:String ){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2170))

    def test_2171(self):
        input = '''Class J{}Class ___:P{}Class _t_{}Class C{Constructor (){Zkt_::$cy.DE.u_.G().y()._();Continue ;Var a__8N1:Array [Array [Int ,0x5B],13];}_2(){} }Class g{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2171))

    def test_2172(self):
        input = '''Class U{Constructor (e:Float ;Es,__,S:Array [Array [Array [Array [String ,044],0B110101],0B1_0],053_0_66];_,_x,SO:String ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2172))

    def test_2173(self):
        input = '''Class N_{Destructor (){ {} }Val $22,$_j,AL:Array [String ,92];Destructor (){Continue ;} }Class y23:IZ{}Class B:_{$_5r_(M4:p__;_:s31;_,_,o,M:Boolean ){Continue ;}Destructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2173))

    def test_2174(self):
        input = '''Class _{}Class _7O98:q4{Var _:_Fk7;}Class _68{Constructor (){} }Class O{Destructor (){}_(k:Array [Array [Array [Array [Array [Int ,0X42],0b11],0B1],061],4]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2174))

    def test_2175(self):
        input = '''Class _7:_H{Constructor (__:Array [Array [String ,0553],75_1_19_4];_,_p4:Float ){Break ;}Var _:_;Val _:Array [Array [Array [String ,0111],7],0xD];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2175))

    def test_2176(self):
        input = '''Class L:Y{Var J__1C_,_:Array [Float ,0B10000];$y2H(L,_:Int ;z:Array [Array [Array [Array [Array [Array [Float ,05],05],05],0B10000],0X9B],5];__,_b_,x:Float ;z3,L,K,_,_,_1hs,_,_,___l:Float ){} }Class _46_9p:v814{}Class s{Var h,$1,$8:Array [Int ,73];$9(qW:Float ;e,NmxH_:Boolean ){} }Class _:o_7Z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2176))

    def test_2177(self):
        input = '''Class y__Kj4{c(_:Array [Array [Array [String ,066],0b1101],4_8_8]){} }Class Z{Val _,_q:_;Destructor (){Break ;} }Class Y6h1:l{_ym1(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2177))

    def test_2178(self):
        input = '''Class kS{Var $4Irr,_o,_:_;$__(x_,F_:Array [String ,0135];u__,M,_:Ux;N_,_,J:String ){}Var $96_q1,$3_,_8,$_,$38m:Zs;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2178))

    def test_2179(self):
        input = '''Class y:a{Var _,$___X__20,$B_9q_U6:_2b;Constructor (_:Int ;f:Int ;oN,_a,P_R3:Array [String ,0b1];q:_Z_;T,_1,t:H;g:Boolean ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2179))

    def test_2180(self):
        input = '''Class _1:_{Val $8F,_,_:_;}Class __0L:_N{$_(){}Constructor (____:Array [Array [Array [Array [Boolean ,0B100],066],04],9];_,h,l:Array [Array [Array [Array [Array [Float ,05],0B10111],066],0B1_0_11],06_443];C:Array [Array [Array [Array [Array [Array [String ,066],0XE6],0b111011],34],0b1],01]){ {} }}Class mO_:H0{}Class __R:Y{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2180))

    def test_2181(self):
        input = '''Class c:_{_(_,ufG,_,_Wq1:Array [Array [Array [Array [Array [String ,065],0X55],0B1],0B1],0B11100];L:_;c:String ){}Val $Z,_3_C:_;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2181))

    def test_2182(self):
        input = '''Class _:_{Var hCy3,O,MM3k,$___1:_h;}Class _:_{ZR(BL_:Array [Int ,04]){}$9(o,C4o_:String ;_n,_:Int ;_,_4K__,E:Array [Array [Array [Array [Float ,0b111100],0b111100],0X42],0X42]){}$_(_,w,_,b_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2182))

    def test_2183(self):
        input = '''Class U6:_{$80(){Val Y:Array [Array [String ,02],38];}Constructor (_f:Boolean ;Q_,Y1,B:Array [Boolean ,066];_,R:String ;__:Boolean ;__:Int ){ {{} }}Destructor (){ {}Var gAd,_2:Array [Int ,0b1];}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2183))

    def test_2184(self):
        input = '''Class _3_:_{P12(){}Var $_:Int ;$_(__,F,_,_HS:Array [Array [Int ,9],99]){_Z::$t();}Val $Hr4,_r,$42,$h8,_,$8,$_,o2,$0,__:Array [Array [String ,0b100010],0X52];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2184))

    def test_2185(self):
        input = '''Class JG_:Zj{Var __:Array [Array [Array [Array [Boolean ,0b10_1_0],0b1],0X62],0X4];}Class __{Var $6:String ;}Class ON:AJ_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2185))

    def test_2186(self):
        input = '''Class _:_{Constructor (_d,_,B,hJ__z,h,_1,F1_D:Array [String ,0b1_0_01];_X:U5;__,B094:Boolean ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2186))

    def test_2187(self):
        input = '''Class __92:_4B{}Class _:_4{Destructor (){}_t9t(__,_:Array [Array [Array [Int ,04_4],054_6],05_3];q_,_,_15,m873,g:Array [Int ,0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2187))

    def test_2188(self):
        input = '''Class _6_:_{Constructor (o:B;_c,z,w:Array [Array [String ,63],011];_:Boolean ;zo__,_,L:Array [Array [Float ,0X6_B],23]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2188))

    def test_2189(self):
        input = '''Class X6:u{$5(j47_:Array [Array [Array [Array [Boolean ,032],0B1_0],4_6],034];__et:Boolean ){} }Class Nf{Constructor (X,zR3,_,r__:_;_:Array [Array [Array [Int ,032],032],2_47];G0,U6,K,_:Array [String ,0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2189))

    def test_2190(self):
        input = '''Class _{}Class _W3p:_k{_(){}Destructor (){Break ;}IM(k0,p:Array [Float ,0XE_A6]){}Destructor (){} }Class h:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2190))

    def test_2191(self):
        input = '''Class _:_{$G1_(_1Z3_,_3,R,__3:Array [Array [Array [Boolean ,6],82],0142];r,l,_3M,B,_:_j_5__;_ZT__14_,_,__7_:Array [Array [Float ,0b110101],0X64]){Val L35,_:String ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2191))

    def test_2192(self):
        input = '''Class s{_(_0,_8:Array [Array [Array [Array [Float ,0x6],06],0x60],0x7];I_g,_,_:Array [Array [Boolean ,95],0XA];Cr:String ;S:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0x60],0B1_0_10],0B1],0x60],0124],02_36],0x3],0x60],95],3_90]){ {} }P4(I:Array [Array [Float ,95],0B1_1]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2192))

    def test_2193(self):
        input = '''Class __{}Class _:k7B{Destructor (){}Val _:_;Val $2,$_D6,$_,$0,x,_:Float ;Destructor (){Continue ;} }Class h5__{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2193))

    def test_2194(self):
        input = '''Class _A{}Class _:_83__{Var $O8_,_2,$B14,k,s_N,$_51_,W,__92_:Array [Array [String ,06],1_1151_0];}Class _{Destructor (){}$5_4484_5_t5(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2194))

    def test_2195(self):
        input = '''Class _:__{Constructor (Fp,_,_4_cgUM:Boolean ){} }Class w_3FR:m{}Class zk{}Class _C25{$96(){} }Class T{}Class u2:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2195))

    def test_2196(self):
        input = '''Class _:_{Destructor (){ {Break ;} }}Class ___PO:_{}Class R:ZT{}Class _E{}Class K_g:_{}Class _{Constructor (_:_){Continue ;} }Class ___B:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2196))

    def test_2197(self):
        input = '''Class sz:T7Ty{Val $_:Array [String ,0X1F];Val _,c:Array [Array [Array [Array [Array [Float ,0x1],9],11],0b10],0X1D];}Class Sk__:_{}Class W6_wM{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2197))

    def test_2198(self):
        input = '''Class w_5:_{}Class b{Destructor (){Return ;} }Class __{Val $7,$__,$_:String ;Constructor (_znRX,Ng_G,_v:Array [Array [Boolean ,0XF],0B1001110]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2198))

    def test_2199(self):
        input = '''Class _{__L(B:Array [Array [Int ,0X23],05_11];u0_4,FB,q_:y___){} }Class __{}Class _t{Var $1,$J,___:Float ;Var _6__:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2199))

    def test_2200(self):
        input = '''Class F{}Class w{hn0bY(p,_,k,Q__,_,v_:f){Continue ;} }Class _n3:R_1AF{Destructor (){}Var $_:Array [Boolean ,0X50];Val t,$_:Zz;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2200))

    def test_2201(self):
        input = '''Class T{}Class _{Var _l_,_Y,$0Q:_;}Class j_:_{Var $_:Int ;}Class T{Val c:Array [Array [Array [Array [Array [Array [Array [Boolean ,0x11],0B1],07],0X8],07],0B10],06770];}Class Z_2iK8{}Class _J5p:OUp_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2201))

    def test_2202(self):
        input = '''Class B0:f{Constructor (b,v_I_,_,_7,_8,m:Array [Array [Array [Array [String ,7],0B1_0_1],0X57],0x36];o_E_,_:Array [Array [Int ,0B1],0142]){}Val $u:Boolean ;Destructor (){} }Class b{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2202))

    def test_2203(self):
        input = '''Class Z:___y{Constructor (){Continue ;}zz(__:U;t:I__6;C:Array [Array [String ,0b10001],0xE3_6];s:Array [Array [Float ,03],0b10001];U361,_,__pURK67_4688:Array [String ,0X24]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2203))

    def test_2204(self):
        input = '''Class Y_:O{}Class n{Constructor (_,J0,e0:O;s8Cd__:j){}Destructor (){} }Class kJr{}Class Q{Destructor (){Break ;H::$6();}Var P__J5U,$g_B_:Array [String ,6];}Class _0S_HX_34:_{Val $__W,$2:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2204))

    def test_2205(self):
        input = '''Class _6:_{Constructor (_942,_:Array [String ,17];_,r,H_,_N,g:Array [Boolean ,0b1]){}$99(xb:Array [Array [Boolean ,5_530],0xE]){} }Class o_{Destructor (){}Destructor (){Break ;}Constructor (_,_734:Array [Float ,17]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2205))

    def test_2206(self):
        input = '''Class _4l{}Class _:_M{Constructor (){}S(_n,E7,_,_,_:Array [Array [Array [Boolean ,043],0X27],0XA3]){} }Class R{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2206))

    def test_2207(self):
        input = '''Class _{Constructor (xj,_,hN,pL,p__01:Array [Array [Int ,0X64],0xE];u,cR,h9,r:Array [Array [Boolean ,0X64],0B10100]){} }Class o3{Destructor (){} }Class __73:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2207))

    def test_2208(self):
        input = '''Class _{}Class _{Constructor (G52,_:Int ;__n,S,B9:Int ;A:_;b,o,_ul,_,_q_,YA_:_;_,tE,__,V:String ){} }Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2208))

    def test_2209(self):
        input = '''Class __p:NG{$16__m8(_,yN1:_;VL,Z,hj,_:Array [Array [Array [Array [Array [Array [Boolean ,05],0b11],0X39],041],07_10],0b1001110]){Return ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2209))

    def test_2210(self):
        input = '''Class _h_E1{$w(){}_(fm:Array [String ,054];p:Array [Array [String ,0XF4],93];jeF,L,_,_7t,_,__y_q3rx:Array [Array [String ,9_511_3],0X9]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2210))

    def test_2211(self):
        input = '''Class o5:_5_{Constructor (b,S_:String ;D,_5g,r,va_1:Array [Array [Float ,065],0101];W,_,hA_:Int ;d:Array [Int ,012]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2211))

    def test_2212(self):
        input = '''Class _D_4{Destructor (){Continue ;}Val O_:_;Val $Q__:_;}Class _:_{}Class _{Destructor (){}_X(){}Destructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2212))

    def test_2213(self):
        input = '''Class n{}Class _:L_{Destructor (){}Destructor (){}$_(G0_,_:Boolean ;_,gE,_:F){Val _5,E:Array [Array [Int ,024],03];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2213))

    def test_2214(self):
        input = '''Class __{Destructor (){} }Class K{Val _:Array [Float ,032];Constructor (){Break ;Break ;{Return ;{}Val c_60_17:Float ;} }}Class l92:Zq{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2214))

    def test_2215(self):
        input = '''Class j:_c{Constructor (p,nx,_7M:Array [Array [Array [Array [Array [Array [String ,96],0B1],0B1010011],0x49],96],031];_9:Boolean ;_,J9D_C,M,_fo:String ){}Destructor (){} }Class w:_7e{}Class f:_u4{Val $3,$U,$_r__,__,I_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2215))

    def test_2216(self):
        input = '''Class _Y3i62G7{}Class p56:t{Constructor (E,_2a_,_:Array [Array [Array [Int ,0B10_1_1],0x6_A],0b111]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2216))

    def test_2217(self):
        input = '''Class Fr4:_{}Class lP_{Constructor (){}Constructor (_,S_e_3,_:_;v,_Yr:Array [Array [Array [Array [Array [String ,0xF],0b11_11],02_7],0b1001101],0b11];__,T:Int ){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2217))

    def test_2218(self):
        input = '''Class _{Var uR,_hL,u:Array [Boolean ,0B111011];Var Y:_435;N(___F,h,_6:Array [Array [Float ,0b1110],0B1];E:Array [Int ,2_6_6]){}Var DZ_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2218))

    def test_2219(self):
        input = '''Class _:S4_9W{Destructor (){} }Class _:_7{Var Z,$H:Array [Array [Array [String ,9],0x8],0B1];}Class vX:_G2{Val _:g;}Class _{Constructor (__o_qx8:String ){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2219))

    def test_2220(self):
        input = '''Class _{Constructor (){Var _Y:_;} }Class o{Constructor (){_::$pg1_8.b6g._.t16_();}Var _f6:Array [Array [Float ,0100],06];$_(){}Destructor (){} }Class w{}Class __{_(sd:Array [Int ,9]){} }Class _j9:i2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2220))

    def test_2221(self):
        input = '''Class y_W4:u{_(m__,F___,K,_56,_3T,__f,_9:dAJ5){} }Class BUO:_7{Constructor (t_,W:Float ;__D_52:Array [Array [Float ,06],032]){}Var $Nv:Float ;}Class H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2221))

    def test_2222(self):
        input = '''Class ___3DK4Z33OoMy_86{Val $9Wo8W,b_:Array [Array [Array [Array [Array [Float ,18],0B1],0b1_0],0b1],06];__(_,G,_:B_;__,_1___,_,w_:Int ;__:Array [Int ,0X2A]){Continue ;}Val _3tL:Float ;Var _GN,__4:__j;Var $5,$__13__:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2222))

    def test_2223(self):
        input = '''Class i{$5(_,P,_:Boolean ;Z_72T,i:String ;_:Float ;ZG:Array [Array [String ,0X3],0XE];_,u_4,_:Float ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2223))

    def test_2224(self):
        input = '''Class l86__48:c4_{}Class _:k4a{Constructor (B_:Int ;___A:_;Y,_904m:Array [Int ,02];C,h:Array [Array [Float ,0X46],0b111001];_:Boolean ){} }Class Y_E3{Var g:Array [Int ,0X46];Constructor (f:b2_5){ {Break ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2224))

    def test_2225(self):
        input = '''Class y:_B8{Constructor (_1:_4z){} }Class FA:y38__{Destructor (){ {} }}Class _:L{Var $Y:Array [Array [Boolean ,05_0],0B111100];}Class _{Constructor (B:Array [Float ,11];I_20,g5,afQZ:Array [String ,06_3]){}Val __l:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2225))

    def test_2226(self):
        input = '''Class _E:M{}Class _J6{$_X2_6(){} }Class _:_{}Class P53J_7:z4_{Val _,_,en,__N:Array [Array [Boolean ,0b100000],0XD];}Class G_:q_8_{}Class V:_Od0{Var p,Y:c;}Class QS:y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2226))

    def test_2227(self):
        input = '''Class __:i{Destructor (){}Var _:_F;_2(){} }Class Nc:___{}Class g3_{Val u,$S:Array [Array [Boolean ,0xFC_5C_F],0b100001];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2227))

    def test_2228(self):
        input = '''Class c{Constructor (i3:Array [Array [Array [Array [Int ,043],37],37],0X8];O9_,_:___9){} }Class V1ye:_F{}Class _:_6_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2228))

    def test_2229(self):
        input = '''Class be:E{}Class _{Destructor (){}Var $4,$_,$07:Array [Array [Array [Array [Array [Array [Float ,0x41],25],0x3_C],027],027],05];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2229))

    def test_2230(self):
        input = '''Class _{Val d_X3:Array [Array [Int ,0X53],0b1001101];Constructor (){Continue ;}Val X_6,$M,$U,$_:Float ;}Class z{}Class J4U_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2230))

    def test_2231(self):
        input = '''Class _G:_{}Class _:_{$82(__:Array [Array [Array [String ,0b1001],0B1],3];_2,K:Int ){ {} }Constructor (_,m1G:String ){ {} }Val $8,$5,R0__,__b:Array [Array [Array [Float ,070],0x1D],7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2231))

    def test_2232(self):
        input = '''Class _:r__{Constructor (){}U(_6:Array [Array [Array [Array [Float ,52],072],04],0B11001]){}$_p0(Q_:Array [Float ,0x46]){}_(_,R95:Array [String ,0X44];J,_9V6:Array [Int ,06]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2232))

    def test_2233(self):
        input = '''Class qF{}Class __p{_129m_(_a3,_,__:String ;H,_,__:o_;_,_,_J,e:String ;S_:Array [Boolean ,03]){}R_(_3:cw;c,_:Array [Array [Array [Array [String ,0b10000],015],3],0x27]){} }Class Wh5:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2233))

    def test_2234(self):
        input = '''Class f_:_{}Class _:kg_{Destructor (){} }Class _C{Constructor (iA_F1___:K){Continue ;} }Class s_:c{Var __,$_:String ;}Class J:n{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2234))

    def test_2235(self):
        input = '''Class o:Q{Val k7:__;}Class E_mP_{$4Wr(){}xxY(h,p:Boolean ;x:s;__,_,_:Int ;_G,q,M,_,D_,t:_I){Break ;} }Class T:Xf{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2235))

    def test_2236(self):
        input = '''Class o8r:_{$_0_6O(v:Array [Array [Array [Array [Array [Boolean ,6],0x2E],4],02],022]){Break ;} }Class Bp:d_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2236))

    def test_2237(self):
        input = '''Class _3_{}Class T{}Class r_{}Class o:_{$2(_d_:Array [Array [String ,0X47],072]){Continue ;Continue ;Break ;Continue ;l::$_();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2237))

    def test_2238(self):
        input = '''Class _{Val p8F_:Array [Array [Array [Array [Array [Array [Array [String ,78],0B1100001],0X37],78],0X37],2],0b11001];}Class _M6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2238))

    def test_2239(self):
        input = '''Class o{}Class cx:__{N(){}Constructor (_,P8v:Int ;_s9,_:Int ){} }Class A:V{Constructor (_:String ;t_,__6,s,C_:Float ;_0:Array [Array [Int ,38],0x4]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2239))

    def test_2240(self):
        input = '''Class w_{}Class __7__wY{Var _3,_J_,F,__:Int ;Var $P:Array [Array [Array [Int ,0B1],062],0XFF];Val _:__a;}Class _{}Class en{}Class _v{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2240))

    def test_2241(self):
        input = '''Class t{$_(_,S9,_,_,x,__,E,c,E1m__98:Array [String ,05]){}Constructor (){}Constructor (K3,_e,_3_,HE:Int ;n,IHr:Float ;_:Array [Array [Int ,0x17],0x17];E:pW2;t:String ;_,_0:String ){Break ;}Var _:Array [Float ,0x5];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2241))

    def test_2242(self):
        input = '''Class Q:__{Constructor (__0:Array [Int ,040];r:_MGd9){} }Class w:m{Constructor (_,G:Array [Int ,06]){Break ;} }Class q_:_T{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2242))

    def test_2243(self):
        input = '''Class _m{tC(__,_v:Boolean ){}_(_,_,d,_:Boolean ;n,__s:String ;___,_,Q,T2:Float ;O:Boolean ;__l5,_19,_:Boolean ){Break ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2243))

    def test_2244(self):
        input = '''Class _{Constructor (C:Float ;S0:P;y4_:_){Continue ;} }Class _{}Class _5{_(){}Val $2,__,_R_n:Array [Float ,20];Val $6,$Lm_,$4_,F:Array [Array [Array [Array [Float ,0B1_001],20],10_80],02];Destructor (){} }Class W:_44t{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2244))

    def test_2245(self):
        input = '''Class _:_{}Class _05{Var $7m1,_,$_,W:Array [Float ,0XD];}Class W{Val _,$u:Array [Array [Array [String ,034],0b1],0b1];_(_,_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2245))

    def test_2246(self):
        input = '''Class M___:_F{Val $1,_7i,N:__;Val r:Array [Float ,0100];Var U61:Array [Array [Array [Array [Float ,01],0X4],06],25];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2246))

    def test_2247(self):
        input = '''Class Y:_4mH{Destructor (){}Val $_:_n_3;_aw2(_y:Array [Array [Int ,050_2_1],0x23]){}Val lE_:Array [Array [Boolean ,0xA],01_5];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2247))

    def test_2248(self):
        input = '''Class __20{Var $K6:Float ;$__7(t,_6:_Y;_:_){Var n,__:Array [Array [Float ,020],02];} }Class d_{Val _,_9:Array [Array [Boolean ,0b11000],0XD];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2248))

    def test_2249(self):
        input = '''Class _:_8B{Constructor (){} }Class _Z{}Class _:A{Destructor (){}Var $R,$p4,$E,$q:Array [Array [Float ,24],0x51];Constructor (){}Val $P:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2249))

    def test_2250(self):
        input = '''Class _:_{}Class _{Constructor (me,_,_s,c,_SA9:Array [Float ,051]){} }Class __4:_{}Class _:_2T__{Var $0C__:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2250))

    def test_2251(self):
        input = '''Class _{Val M0a,$0:_;}Class _:_4b{}Class m{Var $_9,RY,_:_I;$x(_:Boolean ){}Val $N:__;Constructor (){Continue ;}Var $J:Array [Array [String ,0124],0B100000];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2251))

    def test_2252(self):
        input = '''Class Q{Var $0e,$_v,_,_858AEI_:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,81],0b10_11],1],89],0123],0XE2],81],0x2F];Val v,$__:String ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2252))

    def test_2253(self):
        input = '''Class n:_N{Constructor (__,_,I,__,d:Array [Array [String ,0b1],0B1_1];yM71_,_4,Q3:Array [Boolean ,06];_2:Array [Boolean ,0B1110];_q:_;___:String ){ {Break ;} }Var $Z:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2253))

    def test_2254(self):
        input = '''Class _v:_H{Var _p:Float ;Val $V_:Array [Array [Int ,043],0126];$K(){Continue ;}Val $E2:o;Var $18,___8_:Array [Array [Array [Array [Float ,0126],0126],04],03];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2254))

    def test_2255(self):
        input = '''Class _7{}Class V:_{K(w:String ;vkr,_a_C,v:__Yp_;_,j,R3,k,K:R_;_:X_6;E,_:_;__,X9:i9B__7tP;k,__,T:Array [Array [Array [Array [Array [Float ,01_26_64],0b11],03],03],14]){}Constructor (){}Destructor (){}Val M:String ;}Class I5N_{Var $_m:Int ;}Class _:a{}Class _5:_6k{Destructor (){}Var _I,$__:Array [String ,0x3C];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2255))

    def test_2256(self):
        input = '''Class DO_{$_(){} }Class _C8__21{}Class F:_{}Class _a10_{Constructor (_:Array [String ,8];_:Array [Int ,0B101010]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2256))

    def test_2257(self):
        input = '''Class A{}Class V:___{}Class __{Constructor (r61:Array [Array [Array [Array [Boolean ,8],06],0X668],0b1];l:_){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2257))

    def test_2258(self):
        input = '''Class bk_2:T{Var $F_,_95F,_I_:Array [Boolean ,0x50];Val $_3__x5_:oR7;Constructor (_,vge_P,B8_T_:Boolean ;p,z,e,A1x:Boolean ;P_:Array [Boolean ,0B1_0_11_0]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2258))

    def test_2259(self):
        input = '''Class _:M{Constructor (_,_,_z:Array [Array [Float ,0xB_A_0_1],0X3];_X_:Array [Array [Array [Boolean ,0B11],0323],0xAD47]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2259))

    def test_2260(self):
        input = '''Class tP:B_{Constructor (){}Var $_W__,$l,E_:Float ;Destructor (){ {} }Var _:_;_(){ {} }}Class T{Var E__eL_:Float ;Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2260))

    def test_2261(self):
        input = '''Class _0{Val _6v,$q205:Array [Array [Array [Array [Array [Boolean ,0B1],58],0X32],0104],0104];}Class B{}Class _4_1:__{}Class _:_C{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2261))

    def test_2262(self):
        input = '''Class _:G{Constructor (){}$_(b_x,__5_0_:Array [Array [Array [Boolean ,0B111100],06],0B111100];_:Int ;X,e8,_2:Array [Array [Boolean ,0B111100],042];K75:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2262))

    def test_2263(self):
        input = '''Class ug:IC7_0_8{Constructor (H:U;i_Q:Array [Array [Float ,79],0b10];K:Array [Array [Float ,0X7],7_8_84_5];_,I8,_,_:Int ){} }Class U7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2263))

    def test_2264(self):
        input = '''Class _:H_{Destructor (){Break ;Continue ;}Destructor (){} }Class _W:F7{}Class x{Var $7_K,$5:Array [Array [String ,02_5],0B1000111];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2264))

    def test_2265(self):
        input = '''Class oa:_5_{Val r_:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,02_6],6],44],82],0106],0XC5A_C],0x17],0xCAA],4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2265))

    def test_2266(self):
        input = '''Class x{}Class Q___:__{$s(X,yB,_,_,P82Q,iH7,_:bE_2){}Constructor (b:Array [Array [String ,0b10001],8]){Break ;Return ;Var r___9_W0,_O:Int ;} }Class o5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2266))

    def test_2267(self):
        input = '''Class __:M{}Class _{Var $w,_:Array [Int ,03];Val $_5J_:Array [Array [Array [Array [Boolean ,844],0X1],15],0133];}Class _{}Class _6_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2267))

    def test_2268(self):
        input = '''Class __s__g{}Class __{}Class _v_:e0{}Class __{$F(_,_:Float ){Return ;Return ;} }Class d__v:G{}Class B0y_:_4O{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2268))

    def test_2269(self):
        input = '''Class _:f{}Class _q_4E:_{}Class _6_o:_3O65{Destructor (){ {Return ;}Break ;} }Class _{}Class _zEj{Var $_,O,$_5,_29,R:Int ;}Class V5_{$_(Zs:C7_){} }Class _9:_x{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2269))

    def test_2270(self):
        input = '''Class _{}Class o:J_7r_871{Val $_1T:Array [Array [Float ,0B101111],0x7];}Class __7:_{Var $87:Array [Array [Int ,5],0130];_(x:String ){}Val $_4,$3,$_:String ;$_2_(){} }Class v_29{}Class _:q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2270))

    def test_2271(self):
        input = '''Class V_T:_Y9{Constructor (r,_,wr_:Int ;_,fC:Int ){Var _:_;}Constructor (_c,P:String ;J,R:g;y:Int ;_,___,_:O;e,_9,I_6:r_9){}Var $j_,$M_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2271))

    def test_2272(self):
        input = '''Class _8{Constructor (g_,_:Array [Array [Array [Array [Array [Array [String ,0b1011100],5],0x14],0X63],0B1_1_0_1],0B1];m,_:_){} }Class __:__{}Class _5:c7{}Class W{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2272))

    def test_2273(self):
        input = '''Class _{Destructor (){}Constructor (_2_0:Array [Array [Array [Array [Array [Boolean ,05],0B1011001],0604],35],02]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2273))

    def test_2274(self):
        input = '''Class _:_{$_(Z,_D_,Q_:Array [Array [Int ,20],06_7];r_,_:Array [Array [Boolean ,92],0X61];lbj,I_:Int ){} }Class _{}Class _:Op{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2274))

    def test_2275(self):
        input = '''Class _61:h_{}Class m5H8w{Destructor (){} }Class A7{Constructor (Fl:Array [Array [Array [Boolean ,2],0b100111],0b100111];zR,_t,_S,e91,s,t:Array [String ,0b110];_P_l:Array [Array [Array [Array [Array [Float ,7_9],6],0x13],0b1],01];r_:Boolean ){} }Class I{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2275))

    def test_2276(self):
        input = '''Class VC_Go1y{Var _:Array [Array [Float ,0x38],0x38];Constructor (e:__2d;__n1,_u:_){0X2_1._().k_0h49.bc_().N64();} }Class W_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2276))

    def test_2277(self):
        input = '''Class _:M{}Class G:_6__e{Val qD__,$_5tEv:Array [Array [Array [Array [Array [String ,76],01_03_10],76],76],026];Destructor (){Continue ;} }Class _:U__0{Val $ss8:ME;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2277))

    def test_2278(self):
        input = '''Class D:_{Val $03Se:Array [Float ,30];Constructor (){}Var $_l,G_t0,$_1:Array [Int ,071];_Y(j,_:Int ;T,_:k6){Continue ;{} }Var s:Int ;Constructor (_n:String ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2278))

    def test_2279(self):
        input = '''Class _k2{$_3(x_2_3,K,_1_,E:Array [Float ,0b11_1];_,a_,_,_,_,cl7V_K:Array [Int ,78_8];_39:Y){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2279))

    def test_2280(self):
        input = '''Class _{$0_0g__a(h,A2,j,__,_,_n:Boolean ;_:Array [Array [Array [Array [Array [Float ,92],0xE],0XA_96],0B101000],044]){}Constructor (){} }Class __{Var s_:D;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2280))

    def test_2281(self):
        input = '''Class _A8w_:_{}Class _:_U_{Constructor (h,_:Array [Array [Array [Array [Array [Array [Array [Boolean ,0X32],0B1010001],6_0],0B1_01],0b1011011],025],5]){} }Class _2g{}Class _:X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2281))

    def test_2282(self):
        input = '''Class s_:__oX{}Class _5:_{Destructor (){} }Class q:_{}Class _:_{Constructor (){}Val $_6P,t1sf2_0c8:Int ;}Class _:__y_8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2282))

    def test_2283(self):
        input = '''Class X_:_{}Class j{$___(_6S,_,_,__b0YJ_:Array [Array [Boolean ,0XD],0b1];E,Ls4:____r){} }Class ec:Y{$W(_u_1,_z_K:Array [Array [Array [Int ,2_98_0552],30],01]){} }Class Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2283))

    def test_2284(self):
        input = '''Class _:_{Val _Z:Int ;}Class __S:_S{}Class g:J{Val _:Array [Array [Array [Array [Array [Array [Array [Array [Int ,34],01],0x6A_D],02],0B1],0b11010],01],0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2284))

    def test_2285(self):
        input = '''Class b{Var $_:Array [String ,32];Constructor (){Continue ;Break ;}Var b_q787:Array [Boolean ,0XFC_F];}Class d8{}Class _t{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2285))

    def test_2286(self):
        input = '''Class s{$O(oI,_q_:Array [String ,0x63];_X_:Array [Array [Boolean ,0131],0X3];_3:Float ){} }Class hR{}Class _01{Val $Y:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2286))

    def test_2287(self):
        input = '''Class _g{}Class ___E:_t{Destructor (){}Destructor (){}Val $DQ,$w,$z,$L__48Z1,$_:Array [Array [String ,0b1],01];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2287))

    def test_2288(self):
        input = '''Class T{Destructor (){Continue ;} }Class a:_{Destructor (){Return ;Continue ;}Val L_:Array [Array [Array [Array [Array [Float ,0b1001010],0X5_C],0B1],0B1_01],0X7F_2_B8_D_0_CE7];Var $__:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2288))

    def test_2289(self):
        input = '''Class Y{}Class _:mF4{D_(OPi_7,_4__:Array [Array [Array [Int ,016],0X15],0b1_1]){}Var $0,$C:Array [Array [Array [Boolean ,0xE],0B11],3];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2289))

    def test_2290(self):
        input = '''Class Cv92:_r6Q{Constructor (_,A_,_a,Q,__:Float ;__A:Array [Array [Boolean ,0X4A],0117];M,f,_,_:Float ;_D,Pdq__c,_4_0:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2290))

    def test_2291(self):
        input = '''Class __:_4__{Constructor (w6,_:Array [Array [String ,0x22],0X61];Sp,_,b9ET_05,D1_b,_:Float ;J,B_,__:_){} }Class M18w:P{}Class G{}Class _{}Class _:gkd__4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2291))

    def test_2292(self):
        input = '''Class _3{Var $9,_,V__,___,$u,dx__:__;Val _,$_6_fT___,$_K:M;s(){}Var $_1,$GQ,w__:Boolean ;}Class _{Destructor (){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2292))

    def test_2293(self):
        input = '''Class _:_hb{$XL(N0:String ;_:Array [Array [Array [String ,0b110100],0x28],1]){}F3(){Return ;}Val $_3_,$j,$0:Int ;}Class V{}Class E{$_l(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2293))

    def test_2294(self):
        input = '''Class _{Constructor (p,vS:Array [Array [String ,0XA],07];_C:Array [Boolean ,0XF_C]){Continue ;Continue ;Val __N,s,_a0,_:J_;Var _,__,_2x_,_:_49;GG::$_()._().TQ.__();Continue ;}Var $_,DF5:P;}Class W:_{}Class M:E91{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2294))

    def test_2295(self):
        input = '''Class M:_{$y(__:Boolean ){}Constructor (r,_:i;c,lU:u;K:_8;_:String ){}Var ___:_;}Class B:X{}Class _{Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2295))

    def test_2296(self):
        input = '''Class d:z0{Constructor (_,_6_tg:Array [Array [Array [Float ,0143],0b1010010],0B1]){} }Class d{}Class __{Var _:Int ;}Class _:_{}Class ___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2296))

    def test_2297(self):
        input = '''Class v:V4__{}Class _:_{Constructor (){}_h(I,_:Array [String ,0xFE_7];___:Array [String ,06];A:Array [Float ,0B111]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2297))

    def test_2298(self):
        input = '''Class _5_2mp55{Val _:b;}Class E_:_{}Class T_2{Destructor (){} }Class M__:h{}Class s:_{Val _C:_;Val _ip,$_,_,$_h,a2_:Float ;}Class O__{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2298))

    def test_2299(self):
        input = '''Class _{$8(_d,E,_U:Array [Boolean ,0x5];_,_:Array [Array [Array [Array [Int ,0X9],4],0x9E3],057];_:Array [Array [Int ,0B1],057];B_:Array [Float ,04_650];u95,r:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2299))

    def test_2300(self):
        input = '''Class _{$_(){Continue ;YT::$C2D_65();Val sy,yi,_5D3:Array [Array [Array [Array [Boolean ,95],076],66],076];} }Class Y:r{Val B40,__7_K9,v_,_3_u_____,$3_2,$d:Array [Float ,0b1011010];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2300))

    def test_2301(self):
        input = '''Class _5{}Class h_9346:_{}Class z:W{}Class sh:__n{Var Y_pn54,r:Array [Array [Int ,93],036];Constructor (){ {}Continue ;Val F:W;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2301))

    def test_2302(self):
        input = '''Class X3:_Y{Val D:_8V6_;}Class _P:__T9_1{Constructor (){}Var $U:_C;}Class x{Destructor (){}Val _9X,M,$_,$1RZ_,$8xT,J,W,_,_y,_8_,E2:Array [Boolean ,0x8_F];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2302))

    def test_2303(self):
        input = '''Class pe{Val _:Array [Int ,0B1100000];q2W9j(_H_:Array [Array [Float ,07_7],0b1];__,d_EQ:Float ;_:VW){} }Class _:_qV37{}Class _5y_{Var _:Array [Array [Float ,18],0XA];}Class j:__o1{Constructor (__y_,__,_,h,_6:Float ;_Z:Int ;_:Int ;C_PF,_:Array [Boolean ,0x5];PV3_,S,_Uy:Array [Int ,0765];Y:_q00U){}$39(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2303))

    def test_2304(self):
        input = '''Class p:k0E{$2(W_,__,_:X5;_lK,__35,_w,Q_,vs_:Array [Array [Array [Array [Array [Float ,0x2D],0b1000001],0B10101],0b1000001],0b1000001];_6,__K0Q:_S2umq){} }Class v{Destructor (){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2304))

    def test_2305(self):
        input = '''Class XE{}Class n_7H{Var $p8:Array [Array [Array [Int ,0136],0B1],0136];Var $C__,$cVc,$1,__,_6:Float ;}Class s4__:f{Var $g:Boolean ;}Class _:z{_8__N(s,d2t_:Boolean ;s,v,_,K:Hz_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2305))

    def test_2306(self):
        input = '''Class _{}Class __{Fg(fvQb2W:Float ){ {} }Constructor (__,u:_y;v,MK:Array [Array [String ,012_6_7],83]){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2306))

    def test_2307(self):
        input = '''Class Q{bb9(_,_:Array [Int ,0104];k6_r_1:Array [Array [Int ,0X2F],0b1];Nm6:Float ;_,f52,z,f,_,u,_:_){} }Class _j:kc_0{}Class _6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2307))

    def test_2308(self):
        input = '''Class __Gp0{Constructor (){p_::$6._._141();Continue ;}Constructor (_,P:Array [Boolean ,074]){}Val $__,$_Y,_m3d,_,$B4,$__:C__E;}Class __8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2308))

    def test_2309(self):
        input = '''Class _:I{}Class S:_{}Class _:i{Val $90:Array [Array [Array [Array [Array [Int ,0X9],5],034],022],7_3_0];}Class _:K{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2309))

    def test_2310(self):
        input = '''Class _:_b{Constructor (_:Int ;_:__v;M_29,_,QJ:v){Continue ;Vw2::$_();} }Class r:_V_{Constructor (_:Array [Float ,01];_:b){}Var L:String ;}Class _:H{}Class __J7:K8e{$_(z2j:Array [Array [Int ,0x7],0X39];_98_,_m_,__U_1_:_6){Continue ;}$F(_wDv_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2310))

    def test_2311(self):
        input = '''Class _{}Class _:bI_{}Class a_c:_{$ns(T_,W,__6:_d;_6q,WuZ91_N:Y){Break ;Continue ;Var m0,La,s,CA_5u:Array [Array [Array [Array [Array [Boolean ,03_4],0XB],0b110001],0XF],0b110001];{Break ;Break ;} }}Class CV:e{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2311))

    def test_2312(self):
        input = '''Class h:_{Constructor (){}_5G0(){} }Class c0:F{}Class i4_HVR0{Val _:Boolean ;Var $_:String ;Val $__:Array [Float ,0117];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2312))

    def test_2313(self):
        input = '''Class _m{}Class _7_:d{}Class _{_(_:Array [Float ,07]){}Constructor (_:Int ;jh_,_,f__I:Float ){n_::$0S6().K();}Val $4,_:_2;Val BYt:Int ;$7(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2313))

    def test_2314(self):
        input = '''Class A:_3{}Class __1{Var $_:Array [Array [Array [Boolean ,0B100010],0115],0X1E];$_(J7,__,_:Array [Boolean ,012];_,_N8190j4_u,d,S__:E;_,S7L1:Array [String ,0xD]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2314))

    def test_2315(self):
        input = '''Class _{_4J(j,__,U7_,e,h,x:_38;X0:String ;_1,__949,_:Array [Array [Array [Boolean ,0x5D],0XA],063_5573];e1_,V:Array [Int ,0b10011];_6:Array [Boolean ,6]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2315))

    def test_2316(self):
        input = '''Class _6{}Class ___CW_{}Class I:_{Var $d:Array [Array [Array [Int ,05],0x3E],0x3E];}Class _0{Val _,__,$V2___0__,$_5:H;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2316))

    def test_2317(self):
        input = '''Class _3{Constructor (__8:Float ;_1,_:_1;r,_:Boolean ;_8_5:Float ;_qz__,_,V:Boolean ;_6,_W,__:_;_:Array [Array [Int ,064],01]){} }Class o:r9b{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2317))

    def test_2318(self):
        input = '''Class x_{}Class nx8{Constructor (_,u_9,z:z_){} }Class N:r{Constructor (){Return ;}Destructor (){} }Class j{Destructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2318))

    def test_2319(self):
        input = '''Class j81:__{}Class _:_{}Class _:K{}Class __6:_{}Class D:_{__(){} }Class i{Destructor (){} }Class __e:_{Val $43,$h3,$2__B,G6,_:Array [Int ,0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2319))

    def test_2320(self):
        input = '''Class _{}Class _T__5{Var g,$_,_k_:Array [Array [Array [Array [Array [Array [Boolean ,0X5F],041],0X8],041],0x3A],2_4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2320))

    def test_2321(self):
        input = '''Class I_o_:e{Constructor (k7,w:_;_,_:Array [Float ,033];_j4:KH;__,_is,M,_A33,_:_){Return ;Var y2A:Array [Array [Array [Int ,7],9_4],0b1010110];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2321))

    def test_2322(self):
        input = '''Class _{Var _40x7,$w1a,$x_,G4:String ;$6_(){Continue ;}$_(_:Boolean ;l_:Int ;v7_,_,_:Array [Int ,0X3F]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2322))

    def test_2323(self):
        input = '''Class _v:k{u(f:s;c_8:Boolean ){}Constructor (_:T__41__;K_4,_x,Q88,Q___:Array [Array [Array [Array [String ,0b110101],0b110101],06],0B1001000];__7cP:Array [Float ,0xC_21]){}g(_of,U:Array [Array [Boolean ,0x2_1],0X20]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2323))

    def test_2324(self):
        input = '''Class a2{Var _,$_G,$_:Boolean ;Constructor (){}Var $U823_:Boolean ;}Class _tvo:x{}Class u{}Class _:Z_{}Class jh:_v___{Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2324))

    def test_2325(self):
        input = '''Class __{}Class _{Constructor (_0:b;rc:Float ){}Constructor (l_,__,T,_,_4:Boolean ;_18:Boolean ){} }Class QS_:_{Val _,M_K:String ;Var e_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2325))

    def test_2326(self):
        input = '''Class q:mh{Destructor (){}Constructor (K,BM,k,_:_2;d:__){ {} }Constructor (){KziL::$2();}Var _,_2O:Float ;Var $o48V,_a,L:String ;}Class I{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2326))

    def test_2327(self):
        input = '''Class BW{p(bU3:Boolean ;_:Array [Float ,7_38];_1,_,T:Float ;_8y,_6:Array [Array [Float ,0x36],0111];__s:_u;_3:Array [Array [Array [Array [Array [String ,0x8],0x1],0xAE],71],0b1101]){} }Class S{}Class A_82_B{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2327))

    def test_2328(self):
        input = '''Class iS_3V:_9{Constructor (j,A_:Array [Float ,68];_,x,_:Array [Float ,0b1];q:Int ;_:Boolean ;__:Boolean ){}Constructor (){}Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2328))

    def test_2329(self):
        input = '''Class Sj:_{}Class __w:R3_0v7{$35(_I8,_x_L,_5FU___P,n,d_,P,p:Array [Array [Array [String ,02],0B1],0b1];_:C){} }Class u8:___1{}Class t{Destructor (){}Var $_:h;Var __:Array [Float ,86];Val $67:Array [Array [Boolean ,11],0x3E];Var f:W_;}Class _:a{Val _V8U:Pte;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2329))

    def test_2330(self):
        input = '''Class _E44_{Constructor (_,Y,Z:Array [Boolean ,0B1100010];Kk__:_){} }Class A7{}Class _:__{}Class _{Var aq1:Float ;}Class t{}Class o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2330))

    def test_2331(self):
        input = '''Class n:____{Constructor (_f,y,_z:_;Fi__:Array [Array [Array [Array [Array [Array [Float ,7],04_473_2],261],0x4D],49],0b110010]){}$0(_6_,a:String ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2331))

    def test_2332(self):
        input = '''Class _:a{s(_r:_;_,A2,_:Int ;B,F,_,_,Y_U_:Array [Array [Array [String ,0XB],0X7],9];___:Array [Float ,53];f___:String ;x,T,__E,h,e3A4H_:WM__W;q:_9){Continue ;Break ;} }Class ___3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2332))

    def test_2333(self):
        input = '''Class f{}Class _:P{}Class _289:C6{$9L9_j(v5:Boolean ;o:Float ){}V2(_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0114],23_6_1],0b1101],05_2],0XD3A],0x9],0114],0b1],63],63],0B111000],5],0B1],07_32],63];Z,U1p:Array [String ,0x41];m,_:Array [Int ,63];L:Array [String ,63];___38:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2333))

    def test_2334(self):
        input = '''Class Lq:_a{}Class k__l_4{$PG(){}Val $_ja,___U:Array [Array [Array [Array [Boolean ,95],02_3],0B101_1],95];}Class L{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2334))

    def test_2335(self):
        input = '''Class _{Constructor (AL,H:N__M_;_,__A,sR,N,G,A:Int ){} }Class _g:_{}Class _L:_{Var Gkn:Array [String ,40_6_8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2335))

    def test_2336(self):
        input = '''Class _eU:_{Sr(W:Array [Array [Array [Array [Boolean ,0104],0x1],0XA],01];_:_;_,b_,_,N_:Array [Float ,0x12];U,_z:L){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2336))

    def test_2337(self):
        input = '''Class _r{Var b4NR,_C:Array [Float ,781373_42];}Class zl_{}Class F_{Val z6_4,_,$i5e07:Array [Array [Int ,0272_2_0_0_26],0b110];}Class _88{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2337))

    def test_2338(self):
        input = '''Class U2h:_y{Destructor (){} }Class _6:_x{}Class V{Constructor (){} }Class q_:_{}Class ____:YZY{}Class K:Z{}Class x85__:_7B3huTAZ_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2338))

    def test_2339(self):
        input = '''Class _id{Constructor (){}Destructor (){} }Class _{}Class _:C{Constructor (_U_:TL;_,B:N;_g,_,e:Array [Array [Array [Array [String ,06706],0B1_10],64],15]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2339))

    def test_2340(self):
        input = '''Class _:_8_{}Class CJ_:p8{}Class _h{}Class _{$2q(z:Int ;dY,o,S__:String ;Q__2:Float ){} }Class _6:__{Constructor (){}Var $5:Array [Array [Int ,05],28];}Class M{Destructor (){}Constructor (_Ml,_:Int ;t2,_:E;k42B:String ;Y:_;_:Array [Array [Float ,2],0117]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2340))

    def test_2341(self):
        input = '''Class n:_u{Val J_,_,_7f:Float ;Constructor (h:Array [Float ,0XFC28A0]){}Destructor (){}_3(){} }Class _:_{Var $7,$g32_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2341))

    def test_2342(self):
        input = '''Class _:_{__o1_(K_zVV:Array [Array [String ,0B1000100],76];i,__N,i,_04,o_c,Y6:String ;yN_:Array [Array [Array [Array [String ,0X8_3_4],0XA_32],76],04]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2342))

    def test_2343(self):
        input = '''Class S:_L{Constructor (Jm:Int ;_:Array [Int ,071_23];_,_,a37CTd_9,_6,_v:_9X9;L3:Float ){}Var $g:Boolean ;}Class _{}Class _:k_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2343))

    def test_2344(self):
        input = '''Class h1_4_N_:_6{Constructor (Z,n16:J133V;G,t_:Array [Float ,0x6B];q_,_:Array [Array [Array [Int ,0b1010101],07],045];b_,_3_,_,E:_Z4){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2344))

    def test_2345(self):
        input = '''Class ___{}Class __{}Class Qy61{Val $_,_D,_:Array [Int ,43];Constructor (a,_,y:C;f6:String ;_:Array [String ,0b10]){}_(_3,_,_:Fe;I,r1,_:Array [Array [String ,43],014]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2345))

    def test_2346(self):
        input = '''Class v:_n9nLR{Constructor (_____,E,F,_88_9,__:Array [Array [Array [Float ,0x53],0XC],48]){} }Class Q{}Class s5:__N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2346))

    def test_2347(self):
        input = '''Class _:PH{Val $W:f_;$_(F3,h:__){}Destructor (){}$8(_5,ar8,_7:YJ3R;_,xMH:_;_,_,q,_20038:String ;H,_39:W2_){}Var C_R:Array [Array [String ,0b1],47];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2347))

    def test_2348(self):
        input = '''Class _3{Constructor (G:String ){Continue ;Continue ;Return ;}Var $A2,$_,$5,_97:_K;$_(_Z_,_7m32:Array [Array [Array [Array [Boolean ,0b1_0],0B1_11],0X52],0b11_10];w6,j:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2348))

    def test_2349(self):
        input = '''Class __{Var w,Q_33:Int ;Val $_N__4_:Array [Array [Array [Array [Array [Int ,39],07],0X11],0b111100],036];Val v4:Array [Int ,39];Val M6:H1_I;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2349))

    def test_2350(self):
        input = '''Class _n_{}Class _0_W_:u{Val t,_Q,$uxkt,_,$8:Boolean ;$zcg(b,F_,tdN_:Boolean ){}Var e,$s,S,_:Float ;}Class G:R0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2350))

    def test_2351(self):
        input = '''Class r__:_0{_(){}Constructor (h,_:_0;_V5,a,_:Array [Boolean ,0x6_3_8_3];_:R___){}Var _,$_9,$_,$Z_7T98wg:_;}Class G:iB{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2351))

    def test_2352(self):
        input = '''Class _C:_{}Class z:_{}Class __{Var X:Array [String ,0B1_0];}Class _2Y{}Class c{Var _,UG_,_7:Array [Array [String ,0B1],0B1_1_00_010_0];}Class _Q:_12{Destructor (){} }Class f__:t{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2352))

    def test_2353(self):
        input = '''Class P:_____{Constructor (){ {}Break ;}$_(D9,_,d:Array [Array [Array [Array [Array [Int ,0b11000],56],042_5],0106],56]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2353))

    def test_2354(self):
        input = '''Class _7{Var _:String ;Var t_3,$y3,$a,v,$_:S;}Class y:j_En7{}Class F3_:l{Var $_,M:String ;}Class _j__e_{}Class _i{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2354))

    def test_2355(self):
        input = '''Class H___8{Val $8,$5g_M:N1_;Var $_,$4,$kp,$iC:Array [Int ,0XC5_4];}Class _:h{}Class _E:atu{Val $s,$U:String ;Val $__,$j,$X,l5,P,$y,_,$XIw,_0Lnn,_:y;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2355))

    def test_2356(self):
        input = '''Class _5:_{Constructor (_:Array [String ,02]){}_(kX4Or,_15,I0:Array [Array [Array [Array [Int ,0X27],047],047],0b10010]){} }Class TuE:_B{}Class a{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2356))

    def test_2357(self):
        input = '''Class _1{}Class __:__x{}Class i{$5G_iX(__,_A:Array [Boolean ,0xE_4_C2_D];wS__,_,p:Array [Float ,0XE_3_6E]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2357))

    def test_2358(self):
        input = '''Class B:_{Val $9__:String ;Val R,k,_,$_8I_,$_9:String ;}Class S:_{}Class _9{}Class q____{}Class _:_{Val $_:Array [Int ,0xB98];Val $_3,$__7_4:Array [Float ,77];Var _:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2358))

    def test_2359(self):
        input = '''Class n_:_{$0_(_,P_1__,_J,_,_:Array [Boolean ,0X36];H1:_){Continue ;}Var _:Array [Array [Array [Int ,81],0B1],0b1_0_001];Val $W_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2359))

    def test_2360(self):
        input = '''Class s{$3(u,w1___G3my9_:Array [Array [Float ,0135],4_9];__3:Array [Float ,033_5_7_3]){}Destructor (){_::$S();} }Class __20:_5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2360))

    def test_2361(self):
        input = '''Class S0Q:tM__B8l{Constructor (C:_;___:Array [Array [Array [Array [Boolean ,0X19],14],026],3];_z_2_,_90,C9:i;X:Array [String ,075]){} }Class s{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2361))

    def test_2362(self):
        input = '''Class YEe_e{Var L,rDx_:Float ;}Class y2n:_{Val $Zt,_6:Array [String ,0X48];}Class _:__{Var $Y,_,$_4:F;Val _4_:Array [Float ,0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2362))

    def test_2363(self):
        input = '''Class C{}Class _U5_{}Class _:E{}Class _{Var b,y6_,_:b2_;Var $42O,Y:Array [Array [Array [Int ,0b11_0],0x34],0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2363))

    def test_2364(self):
        input = '''Class __:__{}Class K{}Class W_:_N{Constructor (M:Array [String ,0XB];__,V7e,e0m,_,f,Do,d:Array [Array [Float ,0B1],02_3]){}Var $S_:Q;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2364))

    def test_2365(self):
        input = '''Class Q_:_{Constructor (_,J,__:Array [Array [Int ,0b1],045];OU_E_9:Array [Boolean ,055]){} }Class d6:_{Constructor (){}Var $_,$01:String ;}Class __X:_555{Var $_:Array [Array [String ,0xB],0B1];}Class _9_84:__{Val _,f,$4,on:Array [Int ,055];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2365))

    def test_2366(self):
        input = '''Class M7{Destructor (){} }Class _{Constructor (_A:_w4;je:Float ;Ol,I_,_7Vn_:String ){}Destructor (){}Constructor (){Return ;Q9b370C_::$6_();} }Class _:_{Constructor (G_:Array [Array [Int ,0x45],054];D:Int ){}Constructor (E,_9Us,_,_7,_,W0,__1,y_34:_vX){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2366))

    def test_2367(self):
        input = '''Class drLD_{_7ua(d,z,U,i,I,RD6V_,w,F5,u,_:ETq___;_:Array [Array [Array [Array [Float ,067],42],01_0],0b10_1]){} }Class _:T{Var E:_;}Class C8_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2367))

    def test_2368(self):
        input = '''Class _:_{Val __:_;Var _kS,N__K2,$_q:Float ;Var W:Array [Float ,33];Constructor (_f,_3__,_Z,_3_,_z2,g_v5Z:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2368))

    def test_2369(self):
        input = '''Class n{Var _r,_:Array [Array [Int ,81],80];Val $G,$_19_:Array [Array [String ,0B1],01];}Class __:_n7{}Class bU2l0{Var $_h:Array [Int ,0143];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2369))

    def test_2370(self):
        input = '''Class v8{Var __,$___a_,__,_,L,__,$_,_,D,NE____K,m6_:Array [Array [Array [Boolean ,0X44],0b10110],0b1];}Class _M:_{}Class _:eP{}Class _1:_L_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2370))

    def test_2371(self):
        input = '''Class X:g__{$n(___,_r_:Array [Array [Array [Boolean ,0x5_A_0_B9],045],94];o_,K:Array [Array [Boolean ,94],01]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2371))

    def test_2372(self):
        input = '''Class _:c{Destructor (){} }Class _{}Class B:_{}Class _{Val $__,G:Array [Array [Array [Array [Boolean ,043],043],1],05];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2372))

    def test_2373(self):
        input = '''Class qlH:_{Yp(q_0,KV__,P42:Array [Float ,0B11]){}Destructor (){}$4(w:w_2;M,q75_:_14_){Var Z_,W8_:HuXiVh0;Continue ;Continue ;} }Class ___:D{Var w_,K6f,R:Array [Array [Array [Boolean ,0662],017],0b1001010];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2373))

    def test_2374(self):
        input = '''Class _45tvJ:wG{_(){} }Class _{Val _:String ;}Class qw:_{$_(_t4,_:Array [Array [Array [Float ,01_4],077],077]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2374))

    def test_2375(self):
        input = '''Class F:Uhm88{}Class __:T9{}Class c:x_{Constructor (g_9:Array [Array [Array [String ,0b1],3],7]){}Destructor (){Val _,_:Q;Continue ;} }Class _7:_{$4(){_g_::$4.Kh8.z();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2375))

    def test_2376(self):
        input = '''Class S:__{}Class _:_{}Class _X0:_{Constructor (b8,_,uI_,_,f__:Array [Int ,0b1011];H:Array [Boolean ,0b1_1_1];_:Float ){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2376))

    def test_2377(self):
        input = '''Class _7:__25{Constructor (_0950:Array [Array [Array [Array [Array [Boolean ,07],0XA_8],0X62],1],04_1_0_71]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2377))

    def test_2378(self):
        input = '''Class Hd3_:_b_PM4{$v(_:N){}_v_TQ_A(){} }Class ___N_31:_{Val $9:Int ;_(){}Val $_:Array [String ,4];Destructor (){}Val $_3:AC=!!!!-_kX_9::$__9a5();Constructor (t,_,o_,v_2_:Int ){}Constructor (Okr,z,_,_:Array [String ,0B11101]){Continue ;}Var $7U,x:_4P_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2378))

    def test_2379(self):
        input = '''Class G{}Class R{$v(){}$X(){}X(){}$84_(m:Boolean ){} }Class b{}Class _0{Val G,x,z:String ;Var G_tR,$_:Array [Array [Array [Array [Boolean ,0b1_0_1_11],0X30],0x22],0XA];Var $4:Array [Array [Float ,0b1000010],0X30];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2379))

    def test_2380(self):
        input = '''Class _{Constructor (_s_E:Array [Array [Array [Array [Array [Int ,0B10],0x2E],0b101],3],02];u9:Array [Array [Array [String ,3],0X535_A],0b101]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2380))

    def test_2381(self):
        input = '''Class _:_I_{Val $69_3:Array [Array [Array [Array [Array [Array [String ,27],0117],07_0],4_2],0B1_10],0x2];$i(P,__:Array [Array [Array [String ,072],0117],0117];X5N3C2,___,y_,__1C:_;_,_:Array [Array [Boolean ,0b1011110],30]){__::$_18();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2381))

    def test_2382(self):
        input = '''Class Y:M{}Class w{Val $5,_,$5:Array [Int ,02_0];N(N5,k:r;__:_;_:Array [Array [Boolean ,23],0b1000011];_u,q_,_:Array [Array [Array [Float ,0X7_1D55],0x39],0B1_1]){Return ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2382))

    def test_2383(self):
        input = '''Class _{Constructor (_:Array [Array [Int ,0XA6],23];_:Array [String ,03]){}Val _:Array [Float ,03]=_::$0;}Class l{}Class qb4:_{Destructor (){} }Class _3_4_2Q32{Val _:Array [Int ,0X21];Val $_,$05_3:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2383))

    def test_2384(self):
        input = '''Class _{Val _:_;}Class p_:_{}Class _S__{Constructor (){}$22_(y,r38,_0,_,Z:Boolean ){} }Class _:__{}Class _3:K{$__(_,U:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2384))

    def test_2385(self):
        input = '''Class v2:_E{}Class _{Constructor (S,A:__){} }Class W:f{Val C___:Array [Float ,22];J(_,w,tU:Int ){}$98Ei(gI,_F:Array [Int ,0B1_0];X:Array [Array [Array [Int ,22],0b1_10],0X5];____7F9_,__,l,_:_){} }Class _:W{}Class g1u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2385))

    def test_2386(self):
        input = '''Class O_ZD:_7{Val $6:_F;Constructor (_5d:Array [Array [Array [Array [Array [Float ,0XB],0x5C],77],0b10110],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2386))

    def test_2387(self):
        input = '''Class _:_5{}Class _392:_{$3(_:Int ;b:Array [Array [Boolean ,0x3],052];_6,_:Array [Boolean ,2];_9_3_:_;m:Array [String ,0b11000];_5:Im__;R,ALN:c7;_A:_;n,z481_,_,A,_5:_){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2387))

    def test_2388(self):
        input = '''Class _:_{}Class Zl7:_{Constructor (){} }Class _9_:O__{}Class n:_{_(_,_:Array [Array [Array [Boolean ,0XC],0B1],22];_,EU_:v){Val _22:__;} }Class j_{}Class rD{}Class _N{}Class _AX{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2388))

    def test_2389(self):
        input = '''Class x:_O{}Class _:_{Constructor (Y:Float ){Break ;Break ;}Var $_Z,t:Float ;}Class E{$Q(){}Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2389))

    def test_2390(self):
        input = '''Class _{L_(){}$I(q_:Array [Array [Boolean ,22],22]){}Constructor (lrFz6k:Float ){} }Class b_{Var $1_,$K:Array [Array [Int ,4_6],02];Val Z,_,$7,_:Array [Array [String ,04],07];Var __:_P_5;Val b8,$_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2390))

    def test_2391(self):
        input = '''Class __Yy{Constructor (i:Array [Array [Boolean ,99],4_39];_6:_44;__9,V:Array [Array [Array [String ,0106],0XCF_4],0b1];_:_;_,_:Boolean ;g,K,u9y_P4,_,_,_9G,U:String ;__A:String ;gn1,_Y,_,_:Boolean ){Break ;Continue ;}__1(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2391))

    def test_2392(self):
        input = '''Class _I:Y{Destructor (){}Var $z:Array [Array [String ,0X43],0xBB];Var $__,Z_:Float ;}Class Ur:_84{Constructor (_,_4l,_:Array [Array [Array [Array [Int ,91],0X43],0x4E],9]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2392))

    def test_2393(self):
        input = '''Class a:_{Var $__3_,$A,v:Array [Array [Array [Array [Array [Array [Array [Boolean ,0X19],044],024],0B1],0xA],0X19],0b1101];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2393))

    def test_2394(self):
        input = '''Class _:U3__4{DE(_:Array [String ,0b101010];W,_,_,__,c:Array [Array [Array [Array [Array [Int ,0xC_0_E0],0b11_0],057],0b1_1],6_4]){Continue ;Break ;} }Class _{$_(j:p_1b;x:Array [Int ,0x3B];yd_,a:dUw){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2394))

    def test_2395(self):
        input = '''Class I{Destructor (){} }Class _{$_(_:Array [Float ,0b1];H_,_62:Float ;_4_JPM,d__9l_,r,O:Array [Boolean ,8_7]){} }Class _2_{}Class _W_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2395))

    def test_2396(self):
        input = '''Class _7:_{Destructor (){}Constructor (q9____:Array [Boolean ,06];_7_2,___q,_:_;_l:Float ;DM,_,_,_Gs_,_3mC:Float ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2396))

    def test_2397(self):
        input = '''Class _:Q{Var _T9,$_,d,_,$C,d_633_5,$G:__;Constructor (){}Constructor (W,__2v:Array [Array [Boolean ,7],0B110010];J:_i;R_:_6){} }Class _k_:_5_1{Val $__l_1w:h4;}Class _:_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2397))

    def test_2398(self):
        input = '''Class __{Constructor (_7_1_,_D_,y_:Array [Array [Array [Array [Array [Boolean ,4],7],05],100],0x4_F_3];m7:Float ;T__:Array [Boolean ,07];_:I5){} }Class S{}Class _m3_4Iy7_:__{Var $_X:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2398))

    def test_2399(self):
        input = '''Class _{Var $5_:Array [String ,0x9];Constructor (__:__){}Val a,_:String ;G(rvoN,_lp:___d){} }Class I{}Class _66{}Class P:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2399))

    def test_2400(self):
        input = '''Class _{u(){}$7(){Break ;}Var $5_:Array [Array [Array [Array [Array [Int ,065],05_7],065],0X2],0x40];}Class _:I{}Class B:_{$94(r,N,D:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2400))

    def test_2401(self):
        input = '''Class itB:_{Constructor (){}_(t:String ;N:String ;uAo:Array [Array [Float ,0b10111],04_7_46_2];_:Array [String ,0xCA];V_6X9_9:f){} }Class S0_78:_rI__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2401))

    def test_2402(self):
        input = '''Class Z_:_M_0g{}Class Z4{w(_,b4:Array [Array [String ,01_03_6_0],3];_,_:String ;h,D,__:String ;_,_,_h,Z_9T:Sr_;y1h:Array [Array [Int ,02],03];A,_v_5:Int ;t,OG:_l){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2402))

    def test_2403(self):
        input = '''Class U{Destructor (){ {}Continue ;}Val V_5W:Array [Array [Float ,0b110001],063];g(){}Constructor (_2__:Boolean ){Var Mn:_;}Constructor (){} }Class q3:K{Destructor (){} }Class J:_8_{Var w,_,LzO,yo,_5cnI,$2,_,M:Array [Array [Array [Boolean ,67],93_5],063];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2403))

    def test_2404(self):
        input = '''Class d:_c{Constructor (d:Array [Int ,0B1001];_u9Si:Array [Boolean ,0b1_1];_,w7,L,_F:Float ;f1d,G_:_;_R:_){}Destructor (){ {}Var G,pk,g1_,F2_b:Int ;} }Class f5:h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2404))

    def test_2405(self):
        input = '''Class _T:nJc__6__{}Class v:I{Constructor (){ {{Break ;} }}Destructor (){} }Class J8:y8{}Class i{Constructor (Z46L5,_,Tr_4,v:Array [Array [String ,04],42]){} }Class u7L630{Destructor (){ {} }}Class _:_{Var d7,$Q_7:Array [Array [Array [Int ,1_97_5],0X2_A_C],0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2405))

    def test_2406(self):
        input = '''Class __Os{}Class s5{}Class ____7D:ku{}Class MP{Var __,$2i,Y,$_,z:Array [Array [Array [Array [Array [String ,0B111100],04],33],0b1],04];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2406))

    def test_2407(self):
        input = '''Class _:d{Constructor (P51,D:Array [Boolean ,4]){}Val $6,_,i:g;Var $__,_,$5,_,S3,_,__5448,n:String ;}Class d:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2407))

    def test_2408(self):
        input = '''Class Q{Var $_,__7,B,$8,_,$_25,Gs:Array [Array [Array [Array [Array [String ,0107],0X20],0B101100],81],0xD];_(){} }Class Y:_99{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2408))

    def test_2409(self):
        input = '''Class r:__p_{}Class _{Val __5:_H_;Constructor (){__5::$q();Continue ;}Constructor (w8:Array [Int ,0x3A]){}Val g,_b,$m_,w:EJ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2409))

    def test_2410(self):
        input = '''Class _{$__(_1,_:Array [Array [Boolean ,0B1_0],0x2E];_4:String ;_:String ;_:Boolean ;Y:Is;_,_k6:E_;TtR,E,c5,L_,g_,__8_0,P:_S_){}Um_0(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2410))

    def test_2411(self):
        input = '''Class m{}Class _k:D{$__R5(Q1:Array [Boolean ,5]){Return ;} }Class _:H_{}Class o_8{}Class p3{Var y,$749w,N:__;}Class _N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2411))

    def test_2412(self):
        input = '''Class _:_{}Class O:_9_{Constructor (Y_:N;a_G_:Array [Array [Float ,0b1],0B1]){}$5(Jk:Array [Array [Boolean ,036],0B1001000];_8_,O4:__;_:IlL2){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2412))

    def test_2413(self):
        input = '''Class I___J{Constructor (y70,_7,Uq,A:_rq;D:Array [Array [Array [String ,0x13],78],78];_,__,k_t,g2,K,C_E:Array [Array [Array [String ,017],0b10],04_76_6];_Eh,_,XE_,j_OIa,_:Array [Float ,0b1_0_00];_2,_,B,_,M:Z;U:K5_;_N:Array [String ,0x13]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2413))

    def test_2414(self):
        input = '''Class n709__:_90_b{}Class U74{}Class L:_{Var _VO,o,__h,_7:_;Var e:Cw;_(_2,Y9,_n:Float ){}____25W(){_0u::$Y()._();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2414))

    def test_2415(self):
        input = '''Class U:__{Constructor (){}Val $_:Array [Int ,0X2];Val $_2_:Float ;Var tt,$3,$U:Array [String ,063];Constructor (hW_:Array [Array [Array [Array [Array [Array [Array [String ,22],0x54],0b111],0XDA1_8],0b110010],0B100100],0b110010];_:Boolean ){}$2(_:Cc5_){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2415))

    def test_2416(self):
        input = '''Class _{Var $_,$Q_:Array [Array [Array [Float ,0B1010010],0X56],7];Constructor (EQ57:Array [Boolean ,0B1010010]){}Val $n_S,$_:Array [Array [Int ,0B1],45_4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2416))

    def test_2417(self):
        input = '''Class _1G{Var Ky0g_,X3545:Boolean ;Var _0,lS_,C:String ;}Class _ox{Var x,$0_J2_u5:Boolean ;Var $_,$3_,_,$k9,$6,_9_,$3,$7d:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2417))

    def test_2418(self):
        input = '''Class _j:_{Constructor (){} }Class _{$__(o,_d,_,G_:Array [Int ,013]){} }Class _{Constructor (){} }Class _{Destructor (){}Var f,$_:__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2418))

    def test_2419(self):
        input = '''Class I_{}Class _:_{Val $_0_:Boolean ;Destructor (){}Constructor (){Continue ;}_(_4_:Array [Array [Array [Boolean ,12],12],063]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2419))

    def test_2420(self):
        input = '''Class _{Val $6,$o,_T_,y_6:Float ;Destructor (){}Constructor (_YSh:Float ){}Val $_:String ;}Class ___:t9{IyV(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2420))

    def test_2421(self):
        input = '''Class d9_:t{Val W,b:___;Var $95,$39,$_1_:_;}Class i_0_uz{Constructor (_,e,__,t,_:_l1J;_:Array [Array [Array [Array [Array [Array [String ,0x56],0B1_0],6],0b1000010],0b1000010],0b1011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2421))

    def test_2422(self):
        input = '''Class _6_{i3(s,_5:Array [Array [Array [Array [Array [Array [String ,0b1],0X53],37],0B1],37],0b11]){Break ;}Val $J,$rB:Array [Array [String ,0b1],37];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2422))

    def test_2423(self):
        input = '''Class L5J_V:_M{}Class _:_{Val $2,D_kSf,_,f,$7:__;Var _J_w,$_N:Array [Array [Array [Array [Array [Array [Boolean ,0B100111],55],0x41],02],025],02];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2423))

    def test_2424(self):
        input = '''Class _l:_{$_(){} }Class Q{}Class _{Var x_6,B:String ;Var $7:Array [Array [Array [Array [Array [Array [Array [Boolean ,0X4],014],0XA8],0x49],014],014],014];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2424))

    def test_2425(self):
        input = '''Class r1_{}Class _{}Class y234:_{}Class _{}Class G:v0_{_(_2_5:Int ){} }Class J1:_ry_{Var $94,$i9,$2:c3__;}Class qo:R{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2425))

    def test_2426(self):
        input = '''Class __:s6{}Class m{Constructor (p3,_giI:_;r,U_:Array [Array [Array [Float ,62],04_2],62];_:P0;_:C_){}Val $4,$c13,_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2426))

    def test_2427(self):
        input = '''Class d2qD:_{}Class n_{}Class d{}Class g{}Class N:X{Var $Y0,_:Int ;Constructor (GD_:Array [Float ,84];R,q,R4,G8__,S:Array [Int ,0xD];_j,X:Array [Int ,0B1_01_0];__,t_,C,_c,_Fc___p:__t;_9,I,r,R,_:Array [Float ,84]){Continue ;}Var $Sv:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2427))

    def test_2428(self):
        input = '''Class q6_{Val $Dm,$o,mr,DN:Array [Array [Array [Boolean ,0x40],0B1011],0140];Destructor (){Continue ;} }Class _{}Class _o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2428))

    def test_2429(self):
        input = '''Class _4e:__p_{}Class U{Constructor (){}Val $_H__0_5,$3eNB,$9,_,$C_:Array [Array [String ,0367],0X1F];Destructor (){_::$9();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2429))

    def test_2430(self):
        input = '''Class o{}Class _5:_Q3{Constructor (K:Array [Boolean ,020]){}Destructor (){}Constructor (_T_5D,_qb:__;_:l){}Var E:__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2430))

    def test_2431(self):
        input = '''Class _h:c{Var $E8c_:_;}Class _654{Constructor (__2_:Array [Int ,0b10_1_0];_:String ;_,v_g:__5Q){ {} }}Class w_:o{}Class I__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2431))

    def test_2432(self):
        input = '''Class H{}Class _{Constructor (___6:Array [String ,0B10];_I:Array [Array [String ,03_2],4_2];M,ph5_,_:Boolean ){}Val H_4_8:Array [Int ,015];}Class _:_km{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2432))

    def test_2433(self):
        input = '''Class _1n{Constructor (){Var d,N:Array [Float ,0b111];Break ;_::$E();}Constructor (nz,__,_:GP1_;_1X,jW,n:_m){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2433))

    def test_2434(self):
        input = '''Class O96_u_1_5k_:_51_{Val _:_;Val $I586,_:Array [Int ,0b1];$_(_,C,y7_:String ){} }Class u{}Class z{Val s_,_6A:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2434))

    def test_2435(self):
        input = '''Class _D{H(V7_:_;__8,F0B:Q;_5:aDX;e6A,_,c:Array [Float ,0b1_0];I0__:Pb;_,X:f_;_Gj__:String ){} }Class fL{}Class _9d:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2435))

    def test_2436(self):
        input = '''Class w:_{Destructor (){} }Class _{Val W_:Array [Int ,4];}Class _:____{}Class h:Xf_1{}Class i:gK{}Class __{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2436))

    def test_2437(self):
        input = '''Class i8:__36_{}Class _{Constructor (){}Constructor (_,_T_5:Array [String ,0137];P2,___,Kl_,ZO,_:o1;_t2o5:Boolean ;P,_:_){} }Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2437))

    def test_2438(self):
        input = '''Class c:__{$__(X:Array [String ,0B101110];_,j:Array [Array [Array [Array [Array [String ,0X56],0b1],0x8],97],0B101110]){ {Continue ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2438))

    def test_2439(self):
        input = '''Class _G:_k{Val $41_:Array [Array [Array [Array [Float ,024],0X8],0B100011],06_4_77];Var _:Array [Float ,0x3C_7_B];}Class T{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2439))

    def test_2440(self):
        input = '''Class G2{Constructor (J9:Array [Array [Float ,0b110001],0x1428];e:Array [Int ,72];_a_:Float ;_948,_,a,B,S6:Array [Array [Boolean ,72],0X2E];k,_5:String ){Continue ;yg::$Z9._._();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2440))

    def test_2441(self):
        input = '''Class _:N_q_M{$__(R:X;_5:AMx;_d:Array [Array [Array [Array [Boolean ,065],8],0XF],0x9];_:Array [Array [Array [Boolean ,54],0x13],0B111];_QWZ:Array [Float ,0B1100011];K,C0:o){_::$2o();}Val $_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2441))

    def test_2442(self):
        input = '''Class r:_{}Class c0_:_{Val $H,$2w_:Array [Array [Array [Array [Float ,807],0X8],0x8],0xB];}Class r_:_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2442))

    def test_2443(self):
        input = '''Class _{Var C0,RZ:_8;}Class _:__{Var b,$__:Boolean ;Var $H,$9Yq:Boolean ;}Class s_I{J_(){}Var $_:_;Var $_:Array [Array [Float ,0136],0136];}Class u{Constructor (Q,e,k9,SM__9,L_O,_k_,e:vp_){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2443))

    def test_2444(self):
        input = '''Class Q3U:p0{Constructor (){} }Class md{Constructor (A:lpq__){}Constructor (k5C_,F,_,M_:Float ){} }Class __{Val _:_;}Class _67x:g{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2444))

    def test_2445(self):
        input = '''Class Q{Constructor (_,_,P_:_;_,n_4:_7yFn;c_,K9_:_8__;_,C:Array [Boolean ,51];_:Array [Array [Int ,03],0X40];_5_,w,i,W2f_3,__81_i_Y:j;n_A,__3:Array [Array [String ,04],0B111111]){}Destructor (){Val T_,_,n2:k34aVId_0V;} }Class _Y{}Class _:k{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2445))

    def test_2446(self):
        input = '''Class _j:_{Destructor (){}Constructor (AA,_1w,z7:Boolean ){}__(_L_,_:Int ;_692Fj,_r:Float ){ {}b::$__97l5();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2446))

    def test_2447(self):
        input = '''Class __16_Q{}Class j0s3{Destructor (){} }Class U{_1(U,v,_8,AS,r3:String ;C,_4:Array [Int ,030]){}Val $2,qx,$0,_b_:Array [Array [Boolean ,77],04];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2447))

    def test_2448(self):
        input = '''Class C{Constructor (__L:String ;J_,SX6:_u_1_;_,b94,_,_:Array [Array [Float ,01_2],0B1000110]){}Destructor (){} }Class ZB{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2448))

    def test_2449(self):
        input = '''Class __{Val $l,H3:Array [String ,0B101101];}Class K6_1:_{Destructor (){}Destructor (){} }Class Lw:gn_{}Class ET_e:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2449))

    def test_2450(self):
        input = '''Class H_JC6___:_{Destructor (){Continue ;Continue ;} }Class V{}Class _:W4{}Class _:X_t{Var $Xt___:Array [Array [Array [String ,86],0x10],86];}Class C_1:o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2450))

    def test_2451(self):
        input = '''Class _5_2{Constructor (_:Boolean ;Q6,_T,_1lW:Array [Array [Array [Boolean ,026],4],1_2]){} }Class _CB:_9a{}Class W_{Val $ex,_Pg:Float ;_(){ {}Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2451))

    def test_2452(self):
        input = '''Class _Kr{R(_G:Array [Array [Array [Boolean ,0B1001111],97],0X5D]){} }Class _t4{Val $1,$Q:String ;Var $_C5:k57_;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2452))

    def test_2453(self):
        input = '''Class _G{}Class _:_Awg2{}Class _8{}Class fY:y7{Constructor (_:_9;Ag:Array [Array [Boolean ,0b1_00_0],4_1_3_5_9];vQK5:Array [Int ,3]){}Val $_,$__,$B_2,w:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2453))

    def test_2454(self):
        input = '''Class gR6h9_y{Destructor (){} }Class l{Constructor (f_,_:Float ;_V,__,w,_,_7,__:I;_m:_){}Destructor (){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2454))

    def test_2455(self):
        input = '''Class _{}Class _5{Val H5_G_,F8,_0jM_S0_,$v,$_c,$_:Q;U4_2(_q:Array [Array [Array [Array [Float ,0102],0x5B],02_37],06_3_3];_4I6,V,__8_y:String ;__7:O;_:Array [Float ,0x5B];r:Array [Array [Array [Boolean ,0xC_B_E8_0],0102],487];_:Array [Array [Float ,74],03_4]){Var N9Z:ce__7;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2455))

    def test_2456(self):
        input = '''Class CP:_{}Class _:_2{Constructor (){_::$__2Nl.V();}Constructor (_9__:Array [Boolean ,0b1]){} }Class __7___sL{}Class _:Ap{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2456))

    def test_2457(self):
        input = '''Class p:W9_{Var $w7B,__:Array [Array [Array [Array [Int ,067_5_3],0X6],03_2],3_354];Destructor (){}Var $5_,$H:Array [Array [Array [Float ,02_00],0B11],042];}Class wk{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2457))

    def test_2458(self):
        input = '''Class O:_5__{}Class R_:W{Var $P:_QoW_;Constructor (_,c1:r5;_,_Q,Y8:Array [String ,075];T:S95;e,_,_:Array [Array [Array [Array [Array [String ,0B1],075],0X2D],7],0456_10]){} }Class _{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2458))

    def test_2459(self):
        input = '''Class _6__0:_{}Class KH:H{}Class c2:s_{}Class kc{Constructor (_:Float ;Nv_:_;L:String ){} }Class _{}Class _7:y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2459))

    def test_2460(self):
        input = '''Class x{}Class _{}Class __:Gr_{$__0d4(FnA5,j:Float ;_0,t:Int ;_I:Array [Array [Int ,06],0b11101];z_,SDkb,xRH,I,t:Float ;i_,m5:Array [Boolean ,21];_R,_:Float ;y:Boolean ;e_MM4__,_X,_,ne_86:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2460))

    def test_2461(self):
        input = '''Class v_{Destructor (){Continue ;}$4_(__:Array [Float ,0B111101];C:_Fi_;_9j,e_w:Array [Array [Array [Array [Boolean ,93],0xE9],060],93];V_,_:Array [Float ,4_7];m:Boolean ;pe7_,_:Array [Int ,93];_8iDL,_:Array [Array [Array [Boolean ,0b11001],0107],93]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2461))

    def test_2462(self):
        input = '''Class z:_{Destructor (){}Constructor (_i:Array [Array [Array [Array [Array [Int ,2],0b1],0B11100],0X8ED],29]){Return ;Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2462))

    def test_2463(self):
        input = '''Class _4__9:__0{u(_,_,BC_:I_r_kTe){ {}Val G,c:String ;Return ;}Val V1,$T:String ;n(){} }Class rB2_X:_d{}Class _82:X_1U{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2463))

    def test_2464(self):
        input = '''Class cS{T(_,i:Array [Array [Int ,0X9],0X8];H_Yr,_,Z_,_,_o,U,F,v__:Boolean ;__7:Array [Int ,050];_79_3_9u,_NW,T:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2464))

    def test_2465(self):
        input = '''Class T_:__M{_(_P,U,b:Array [Int ,0X7_5_0F];_,_Y,h,_1____6_7,E,k,G,_:l;v:Array [Array [Array [Float ,0120],44],01];w:___;w,_4:String ;I:Array [Array [Array [Array [Array [Array [String ,02],0b100011],0b1],44],44],0B1_00_000]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2465))

    def test_2466(self):
        input = '''Class _{}Class _{}Class _8:_C_1{Var $k_,$HP:X;}Class M:Yj582{}Class _:DR{Val $2,nM_e,K,_:String ;}Class e_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2466))

    def test_2467(self):
        input = '''Class _:A{Constructor (__,y0u_3,l_,S:_6;zv9__d,wt_:Array [String ,0B10_11_0]){}Var g_:Array [Boolean ,0x59];t__(R_,_F:_8){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2467))

    def test_2468(self):
        input = '''Class wo:y{Destructor (){_vW::$4c();Var _:Array [Array [Float ,0b1111],0x3F];}Constructor (){}_o1(_5027:XO;s:Array [String ,0x3F];sP:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2468))

    def test_2469(self):
        input = '''Class y:h{}Class _:_{}Class _{}Class ZN:_S{n8(_,_,u,r,_Sj:__){} }Class z:ds{Destructor (){} }Class _:_{}Class __:_K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2469))

    def test_2470(self):
        input = '''Class _____e:_571{}Class c{Val $Q,t,v_:Array [Float ,025];Var $5_1Y7W1:Array [String ,34]=---k::$__()._H._4()._().M()._6_;Var $2,$_h_:Array [Array [Boolean ,025],0X4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2470))

    def test_2471(self):
        input = '''Class _:c{Constructor (e_:Array [Array [Array [Boolean ,26],26],2];G:ks;M722Ow5:Array [String ,022]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2471))

    def test_2472(self):
        input = '''Class _:F{}Class K{Constructor (_,__,_,_:Array [Array [String ,4],5];_,X3:F;G,_,w:_4__;_Ji,_,V:L;Xj_4_,F_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2472))

    def test_2473(self):
        input = '''Class _J_55{}Class P{Constructor (_:Array [Array [Array [String ,0B10],0X12],0XF_F];_,_1W:Array [Boolean ,9];_K0,_3,Y__v_7,D,oU_725:_;k:Int ;_:_4;_:_E3r;__59_98O:Array [Array [Array [String ,6],6],0B1]){} }Class a_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2473))

    def test_2474(self):
        input = '''Class _:O{Val v,$f3,$__,$TMC,$n,_,_p,$_,Q41099o,b:s;}Class s{}Class _:N_{Constructor (o__,R_,n__,_,_94,b_2:String ){ {{_h::$_();} }} }Class ____{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2474))

    def test_2475(self):
        input = '''Class _h{Destructor (){}Destructor (){Continue ;Continue ;}Constructor (){Break ;Continue ;} }Class L_{}Class _:t{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2475))

    def test_2476(self):
        input = '''Class Y47_:A{Val $m_,n:Int ;h(){Break ;}Destructor (){Return ;}Constructor (Zc_:Array [Int ,9];b3,d_,_0,_,_,_,_y75:y;_60:Array [Boolean ,0b111]){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2476))

    def test_2477(self):
        input = '''Class d{}Class _{}Class w:__{Constructor (m7,_,k,l386,J__8,u,Ku,lrP,m:String ;_:Array [Array [Array [Array [Array [String ,01],0X4A0_C_1],0b10],01],5]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2477))

    def test_2478(self):
        input = '''Class _{Constructor (i,_,__,_2,cc:Array [Array [Array [Array [Boolean ,0b1010010],0B10111],02_5_3],766_99]){}Var $__0F_P:Array [Array [Float ,5],5];}Class j_:t3{}Class _:_{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2478))

    def test_2479(self):
        input = '''Class _8_:G{}Class U4:_9{}Class O:m_{Constructor (__:Int ;T_1__:P){}Destructor (){} }Class _E{}Class G{Destructor (){}Val k:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2479))

    def test_2480(self):
        input = '''Class h{}Class __{Val $_9:Array [Array [Array [Array [Array [Array [Boolean ,0b1],0b1_1],0103],0b1011110],0B110010],0b1011110];}Class __:_8T_84{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2480))

    def test_2481(self):
        input = '''Class _{Constructor (X_1:String ;_:Array [Boolean ,0x58];G_KE,rq_w,D__1z:Int ;__:Array [Int ,0B1_00]){} }Class N3s_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2481))

    def test_2482(self):
        input = '''Class F8A{Constructor (_3,R:Int ){}$6(){Break ;}Val $0,$R,$1iY,$_:_v;}Class _4:_{_(p,_m63,_,_,hPK,_,_T:_){}$h___c5I(){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2482))

    def test_2483(self):
        input = '''Class k{Var $3:x;Constructor (_6,G:Boolean ;_4_,_,_:Z4;d_S:Int ;_,_,__,S_c:z;D:Array [Array [Array [Array [String ,3],0b1_1_111],05_6],0B101110]){}Val $9___,_:Array [Int ,0B1];}Class _1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2483))

    def test_2484(self):
        input = '''Class P{Constructor (){ {}Var i:Array [Array [Boolean ,050],0b10];} }Class E_{Var Y,$ML:Array [Float ,0624_7];}Class X:xh{}Class _37:_z{$_(I,_,X_:N2____){Return ;} }Class S:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2484))

    def test_2485(self):
        input = '''Class k:v8D{Constructor (){Continue ;Break ;}Constructor (){}X(_,lYGHe___5vef:Array [String ,78];_7:Boolean ){} }Class Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2485))

    def test_2486(self):
        input = '''Class _:N{g3(_Dy,_,_:Array [String ,06]){Break ;}Var _,__1:Array [Array [Array [Array [String ,76],0b1010010],76],0b1_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2486))

    def test_2487(self):
        input = '''Class __:_{Destructor (){Break ;Break ;} }Class _{H(_:Array [Array [Array [Array [String ,05],4],0xCB0],0X45];_:__8;_14_,_:Float ;_,E_Bk:Array [Array [Array [Array [Float ,0B1],0X9],0x26],92];_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2487))

    def test_2488(self):
        input = '''Class H_:_{}Class _W:_{Var X,$x,_:String ;F_(c,_____:Array [Float ,0x43];A,L1,Q_:Float ;d,_27,F_:Array [Array [Array [String ,0XB],07_71],0110];o:Array [Array [Array [Boolean ,65_2_7],040_46],97]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2488))

    def test_2489(self):
        input = '''Class Q5{Constructor (){Continue ;} }Class _H{Val $_,$_,Si:Array [Array [Array [Array [Float ,06],0xE_F7_A6C_6],0X59],0X59];d(_:Float ){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2489))

    def test_2490(self):
        input = '''Class _{Constructor (___,_:_h7;_,_:Array [Int ,335];_NgH,QK,x,R_:Boolean ;p:Array [Array [Array [Array [Array [Array [Array [Int ,0XC2E],12],12],9_9],011],45917_277_9_0],0X14]){}Constructor (_81:Array [Float ,0B1_1]){} }Class Ir{Var _9,m:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2490))

    def test_2491(self):
        input = '''Class cS8ik7{}Class DE_:_{}Class b:_{Constructor (){Val m:Array [Array [Array [Array [Array [String ,0X7],0B11100],80],0101],80];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2491))

    def test_2492(self):
        input = '''Class ___:_v{}Class _2e:K{Destructor (){Var _f,____:String ;}Val F,$e,_,$1H:Array [Boolean ,0X6];}Class _{}Class sd{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2492))

    def test_2493(self):
        input = '''Class d:_{Constructor (_2_:String ;_k1_,l:x5r;__:Array [Array [Int ,1_5],84];_,_:Array [Boolean ,056]){}Var T_3_,r:Array [Array [Float ,84],0X3D];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2493))

    def test_2494(self):
        input = '''Class _1_{Destructor (){}Val $8,q0buh1,_:Array [Array [Array [Float ,0X9],022],0110];Val $X81z8M__1c,_:Int ;}Class __A:Jh{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2494))

    def test_2495(self):
        input = '''Class _{Destructor (){}Constructor (_8R:Array [Array [Float ,0XF],0b1_0];_V:Array [Boolean ,0121];_,_F,v07f8:Array [Int ,0121];x:String ;_:Array [Array [Boolean ,802],0b1_1_00];sex2z:_){Break ;} }Class _z__:x{Z(){} }Class _7_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2495))

    def test_2496(self):
        input = '''Class _{}Class _:_{Val h8:String ;$_Qei(B:m_){Val _:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0x7],0XA3],01],0x20],04],04],0B10],0x20],0X4_32_4];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2496))

    def test_2497(self):
        input = '''Class l_M{}Class _:jt7C{UP4G1(QZq:String ){Break ;}$p(){}Destructor (){Break ;Var V,_n__:__;Break ;}Var $_:Int ;}Class e__:D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2497))

    def test_2498(self):
        input = '''Class h5A{Constructor (U_,Y_,_,J_M,_FR_0,__:Array [Array [Array [String ,0B1],0B1],0B1_1_0_0]){Var O:_s_;Break ;{} }}Class _{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2498))

    def test_2499(self):
        input = '''Class _2{Destructor (){Continue ;}Constructor (){}__m_(){} }Class _{Val $1,$TVw,_:Float ;}Class _{Val _6_,W58_9G,s,__1,$_i:p__;}Class w_:_{}Class B_5:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2499))

    def test_2500(self):
        input = '''Class _:N_{Destructor (){}Var _,$_se0_T,_qW5,$8,q_y,_78:d;Val $6,$__,$_232:Array [Array [Array [Array [Array [Array [Array [String ,0b10],53],0x11],30_6],53],0B11111],53];Constructor (M:Array [Array [String ,0x11],7];j__E6:L33__;_n_:String ;Y,Sj_3:String ;a_e:Array [Float ,0X15]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2500))

    def test_2501(self):
        input = '''Class L3{W(){} }Class U:VzFM{Val N:Boolean ;}Class T{Constructor (_6g7,t4g:Array [Array [Array [String ,050],3],0B1_0];Z,SI:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2501))

    def test_2502(self):
        input = '''Class c1{$V4(M_2P:S00_;_1g,_0__:Array [Float ,0b1_0]){}Val $c__5,_,__:Boolean ;}Class N5{$_1f_(_:Array [Array [String ,043],0112];ueZj__:Array [Array [Array [Array [Array [Array [Array [Array [String ,60],0b1001000],07],0B1],0XD91_2],0b1001000],7],02];__L:Array [Array [Int ,07_4],0X3B];_:__){}Constructor (__,a,__,__,c,_4,XH,w28,B29:I;Jd,_2,_,_:i_5;_:Array [Array [Array [Array [Array [Array [Boolean ,0b1],0112],0b1],59],0b1001000],0x8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2502))

    def test_2503(self):
        input = '''Class _V:__{$E(_:_j7_;R,_,_9HC5_:F4;_,N,_,_,M,_4l:_;UO_1,m,lR:Array [Array [Array [Boolean ,16],041],041];b5Z4,j:Boolean ){}Destructor (){} }Class _S0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2503))

    def test_2504(self):
        input = '''Class _:UJ_{Constructor (g_,j,o1_,wJ:_;Xs,_U,D:I82;_on,_:Array [Boolean ,024_61]){} }Class R{}Class l:__{Constructor (_L,a4:Array [Int ,0X14];_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2504))

    def test_2505(self):
        input = '''Class _s_{Val x,_0:Array [Array [Float ,067],42];Val $J,$0u,$6T_,$_:_0;}Class l9jL9{$_9(){} }Class l2{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2505))

    def test_2506(self):
        input = '''Class i3:_{Var $g_5,$44j:Array [Array [Array [Float ,0b1_1_10],0107],065];}Class __{Constructor (_Q7,Z8:Array [Array [Int ,0107],0B101001];_:String ;_3_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2506))

    def test_2507(self):
        input = '''Class _4_{Val $0:String ;}Class _:_{$c(){} }Class X:_Y_24_5{}Class _:__{Destructor (){Break ;Continue ;}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2507))

    def test_2508(self):
        input = '''Class _{Var $e_A3:String ;Val _:V;}Class y_B43__0{Destructor (){ {Break ;} }Ta3(_O:t;__M5:Array [Array [Float ,035],035]){}Destructor (){}Val _:f_;Val _,_,$_,f2_7P:_V;}Class V6C5{}Class _GfX_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2508))

    def test_2509(self):
        input = '''Class k{Y(m:Z;_OR:Boolean ;_s_5,Q,_7:Array [Array [Array [Array [String ,0x55],027],0X40],1]){} }Class z_1:q{G_6___(){Break ;}Constructor (){Continue ;Return ;}Destructor (){Break ;}Var $R__8__3,A_:Array [Int ,93];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2509))

    def test_2510(self):
        input = '''Class _:_28_{}Class _:_{}Class s0__:t{Var M,_,$_,_:Array [Array [Array [Float ,0X11],0X11],0b1];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2510))

    def test_2511(self):
        input = '''Class _:ZM{Var $E:Array [Int ,041];$_7_(){}Val q:String ;$44(h9:Array [String ,0x7];C_:Array [Array [Array [String ,0XF],11_9],0B11_0];_3fr_,_:Array [Array [Array [Float ,0X34],0B1],0657]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2511))

    def test_2512(self):
        input = '''Class Jk:___o_1N{$CD(R:bJ;_,y:Int ;O,k,_,_EV_,H:_;___n,d,m7b4y,_,w_SJv:Boolean ;__P,T_:_;_6,_H_2,O8:Int ;__F:Boolean ){Return ;}Var J,_,IO69_,P_f:__;}Class a_{Constructor (_,_b:_8;z_,C_,_L,_5G,x,l6,_,M_,_M,e_,_:d1;T__SV:_V_51){Continue ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2512))

    def test_2513(self):
        input = '''Class l_15:p{}Class ___m:_{Constructor (_,cfgM:Array [Int ,0X7A_7D_0];_,W,ov_7:_){Var l7_,O1,f0D,C,_69:k;{} }Var $e2_,$q,$dm,$1:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2513))

    def test_2514(self):
        input = '''Class e_o:l{}Class nu{}Class _:_N{}Class Z:_22{Val NW_,$_:Array [Boolean ,18];Destructor (){}Constructor (){} }Class z{Var _1kF_2x,_:Int ;}Class k_{Destructor (){}Q_K(){} }Class r__:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2514))

    def test_2515(self):
        input = '''Class O{}Class __:_c{Constructor (_g:Array [Array [Array [Array [Array [Array [Array [Boolean ,0x10],0XEE],0b10_1],14_57_6_2_6],01],0X3E],02_3]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2515))

    def test_2516(self):
        input = '''Class _8{$_D(_n,_3:_;_:Array [Array [Boolean ,0b1],0B1];__:Int ;j__0:Boolean ){}Var $r2V:String ;}Class _v:o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2516))

    def test_2517(self):
        input = '''Class _:_{Constructor (r0,s,E73U:_lC__){}Constructor (){}Var $6,__0_8s:String ;}Class _q_7:_{Val $_,$72_:R_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2517))

    def test_2518(self):
        input = '''Class _n:p{}Class L4_{Destructor (){ {} }Destructor (){}Val A9:Array [Array [Array [Array [Float ,0X1],1_4_5_6_2_7],03_4_1],0xF_6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2518))

    def test_2519(self):
        input = '''Class o7P{Constructor (_:Array [Array [Array [Array [Array [Array [String ,05],1839],0b1000],0xD],0X47],5]){Return ;{Var O:Int ;}Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2519))

    def test_2520(self):
        input = '''Class v{}Class k:i{Val $gm,_,_:Array [String ,1238_1173];Val $9_927,$V:d5;Val $Qj8_:Boolean ;Var $_,$8w2:Array [String ,0x2A];Var $6_d:Int ;}Class e{Destructor (){} }Class E2:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2520))

    def test_2521(self):
        input = '''Class mND_v_:W{Val $_:Boolean ;$0(D:Array [String ,0xD];T_,j:Array [Array [Boolean ,04],97];D_:Array [Array [Int ,0b1100001],014];_M:Int ;c,W9,_,N_:Float ){Break ;}$8(){Return ;}$_5OR4(lO_:Array [Float ,0xEF_62530];u:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2521))

    def test_2522(self):
        input = '''Class D_{x(_,_,_:Array [Array [Array [Boolean ,0b1_1],0x3A],0b1_0_1_0];A_:String ;__2,__15,d__,_781:Float ){ {}{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2522))

    def test_2523(self):
        input = '''Class q_{}Class _{Constructor (_:Array [Boolean ,05];_nE:Array [String ,2];P4,_:Array [Float ,6];_6_,_i:Array [Array [Array [Boolean ,01],1_618_79],01];_L:Array [Array [Array [Array [Boolean ,0x89C],06],87],7_8_8_1];d:Array [String ,6_2];__2:L;_:Q;_,j348,_:Array [Int ,1];_,_:N;__2546_,v,M8,T4,q0b:Int ;_2,_,_,_:Array [Array [Array [Array [Array [Float ,0X4749_2],0x53_0],024],0X1A],50_27]){} }Class _5{}Class _W_{}Class j54JjX:__{}Class _:_B_P0{}Class g:_4{Val $9k_0X:Array [Array [Int ,0B100101],023];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2523))

    def test_2524(self):
        input = '''Class _0335_i:_{Var e,$_,tQ,E,n_4f,$Ak,$_,$_l,$L,$s9:Array [Array [Float ,0B1_0],0b1001];Constructor (){}$1(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2524))

    def test_2525(self):
        input = '''Class BN:Ci{$P(){}Destructor (){}Constructor (n,_A,_,F:Int ;lP81,_9_H:Float ){}Val FP,$_,$_,$z,$sH6L49j__:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2525))

    def test_2526(self):
        input = '''Class g:_6{Var $_:Array [Array [Array [Array [Boolean ,9],0xD1],011],0x4F];Var _,$_l,gS7,$E:o_T;Val $5:Q;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2526))

    def test_2527(self):
        input = '''Class _:N{$302_(k_5,_,r:Array [Int ,0b1010011];L_:Boolean ;_:o_b;y1:Array [String ,05];v,_,_,_:Boolean ;_2:Array [Boolean ,0x24];_D__5_Y:Int ;_,_,j,t,M:Z_74;lc:Array [Array [Float ,8_3],014]){}Val $_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2527))

    def test_2528(self):
        input = '''Class _:A_{}Class j__{Var v__:Array [Int ,0X12];}Class _k:_{Destructor (){Continue ;Continue ;}_r_(_K1:__){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2528))

    def test_2529(self):
        input = '''Class U4:v{_1(V,_:Array [Array [Boolean ,06],06_5]){}Var _,$__2,_,_A:Array [Array [Array [Int ,0xB],0xB],0B1];Val v,___,_4:Array [Array [Array [Array [Array [Float ,6],01_11],0xD5],25],044];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2529))

    def test_2530(self):
        input = '''Class _{}Class S:n{}Class _{Constructor (z,_LU,_:Array [Array [Int ,05_4],81];k,h7l:Array [Int ,0B1001000];__,K:Array [String ,0x8]){}Val _:Array [Array [String ,0B111],0B1_0];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2530))

    def test_2531(self):
        input = '''Class _:_{Constructor (d,B:Float ;_:_){}Constructor (Rj_:v;t:Array [Float ,0X2D];_:Array [Array [Int ,78],023];_,C,b:Array [String ,043];_99_:Array [Array [Array [Boolean ,0B11101],043],0X2D];_u_:Float ;_:i48__7){P::$_G_();}$x(DO:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2531))

    def test_2532(self):
        input = '''Class _E{$z(D,p:M;C_:_;___:Array [Array [Array [Array [Array [Array [Array [Array [Float ,72],0X9],077],0B101],077],36],36],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2532))

    def test_2533(self):
        input = '''Class Qk9:_{Constructor (){} }Class _:_{Val $7:Array [Array [Boolean ,26_9],0b1];Var $4,$_,$75:_;Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2533))

    def test_2534(self):
        input = '''Class _J4:__{Constructor (){} }Class J:t_m{Constructor (__:T;I:Array [Int ,92]){Break ;} }Class _36:Y{Val $2D:Array [Boolean ,0134];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2534))

    def test_2535(self):
        input = '''Class _{$b_(c,_,t0_0:Array [Array [Array [Array [Array [Array [Boolean ,02_4],0b1],85],0x9E_F],85],0x19];_9_,_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2535))

    def test_2536(self):
        input = '''Class _:w{$cpwA(_,m,__1:Float ;j85_:Array [String ,0507_6];_,_:Array [Int ,021];wu,_5I,R4_,m:_){Continue ;}Var _3b1735:Array [Array [Int ,021],0b1_11_110];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2536))

    def test_2537(self):
        input = '''Class _{Val $9,_s_37:n13_;}Class _E{}Class _R_5{}Class _7w:F{}Class _{Val k,$_:Array [Int ,0B111];Var $D_:Array [Float ,67];Val B1,_:Int ;Val __:String ;$V(){} }Class j:FQ4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2537))

    def test_2538(self):
        input = '''Class _:_5_{zQ_(_3,m:Array [Array [Array [Int ,0x62],8_4],0b1];_,_:Array [Int ,01];g_,H11l,F:String ;m_,vzw,f_,T:mV;S0u:Array [String ,0X46];_Am:_;kUf6,_d:Array [String ,0X5];D__2,K:R_x){Continue ;}Constructor (_,t:Float ;__6:Boolean ;_:Array [Array [Array [Array [Boolean ,015],0x62],91],0xD_5]){}Var $z,$_,$_:Array [Array [Array [Array [String ,04],0X46],0B1011],0b1111];}Class t_8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2538))

    def test_2539(self):
        input = '''Class g:_{Constructor (){}Destructor (){}Destructor (){Continue ;} }Class _:U{}Class W0_:g{Destructor (){Continue ;Val _mp7:_;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2539))

    def test_2540(self):
        input = '''Class w534sC:_0v_{$H(t,Q__:Int ;_R,zr,R,A,R,G__16,_6:Array [Array [Float ,0B1],0105]){} }Class O17R__{Constructor (Q,_:Array [String ,0105]){}Val $_:Array [Array [Array [Array [Int ,0x63],071],07_22_3],0B1011100];}Class b{}Class __{Constructor (Q8,CQ9_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2540))

    def test_2541(self):
        input = '''Class b{Val Ds_VP,c_mm__:Array [Array [Float ,03_6],0xB];Var $4_2c3,n,$__:Float ;}Class m_{I_(e,_,T9:Array [Float ,01]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2541))

    def test_2542(self):
        input = '''Class N0:w3_{_(_,__9Y48:Array [Array [Boolean ,24],3];S:Boolean ;_82:Boolean ;_,_xx:Array [Float ,0B101]){Val Il,W284_:Int ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2542))

    def test_2543(self):
        input = '''Class _:J{Constructor (){}Constructor (){Break ;}Var $8_,$_:Array [Array [Array [Array [Array [String ,14],14],0B1],0x9],14];_j_5(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2543))

    def test_2544(self):
        input = '''Class _{Val $50:_;Destructor (){} }Class r_:t_6{}Class _:_{$03(_pW:Float ;_:Array [Array [Boolean ,0664],0b10110];_:Array [Float ,073]){} }Class _j56_:O_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2544))

    def test_2545(self):
        input = '''Class __:qk436{}Class M_9:_{Constructor (_0AX,_L,__,_:String ;_:Array [Array [Array [Array [Array [Array [Float ,04],0x35],04_17_7],07],04],0B111]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2545))

    def test_2546(self):
        input = '''Class r:a{Val $9:Array [Array [Array [Array [String ,44],0144],0b1010],0144];Constructor (__,j,__7,_,_6,__,R:Pm;I,O,Nz,_:Boolean ;_,G_,f4_:__3U){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2546))

    def test_2547(self):
        input = '''Class _:z{Val $f,r_U_,$0_:Array [Array [Array [Array [Array [Array [Array [Int ,0b1_1_1],0X2],0124],63],0X5],06_1_6],0X3CD];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2547))

    def test_2548(self):
        input = '''Class _s:I{Constructor (_,D_7,__,u4,_8,T:Array [Array [Int ,65],040];_M8_:String ;U_:Array [Array [Array [Array [Boolean ,0B11],65],0B100],0B1_0];S0_,I:Int ;m___Lw_24_:Int ){} }Class Q__:__{Destructor (){}Destructor (){} }Class _:f{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2548))

    def test_2549(self):
        input = '''Class _{}Class g3{}Class K:_{Constructor (r,_:_){} }Class a:_5{Var _:Float ;_(J___G:Float ;G:Array [Float ,02]){} }Class x5{$34(p,__,_p:_){}Val _,_7w:Float ;Destructor (){} }Class i:_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2549))

    def test_2550(self):
        input = '''Class ___PZ{Constructor (b:Array [Array [Float ,0X5],0xB]){Continue ;Break ;}Var $_b_1:Array [Array [Array [Array [Int ,0B1010111],075],0xC],0b101001];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2550))

    def test_2551(self):
        input = '''Class _9:_{Constructor (p_:_QD_H){}Constructor (){}Var $Ed,_:E;Destructor (){} }Class _B:xl{}Class Kz:_d{}Class __{Constructor (h,RX,n_E,_iG_1j_0_g:String ;V4_O:Int ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2551))

    def test_2552(self):
        input = '''Class __0n__h:_{Constructor (R3,_,_,_5:Boolean ;we22:String ){Continue ;Break ;} }Class Ik:__A4{Val $_:Array [Array [Array [Array [Array [Int ,0b1_10],0X13],42],0121],0X13];Val $2,v9_,$m,$1:Float ;Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2552))

    def test_2553(self):
        input = '''Class X7y__x8{}Class _0:lw{Constructor (iJm,_:Array [Array [Array [Int ,01_56],063],0x32]){ {} }Val _10L,_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2553))

    def test_2554(self):
        input = '''Class qN_:_4D{}Class _1_6{}Class h:g{}Class N__:_9_{}Class _3{Val L,g:Float ;Constructor (__,g:_){Continue ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2554))

    def test_2555(self):
        input = '''Class _1{Destructor (){Continue ;} }Class _F{Constructor (L:Array [String ,53];_,T,ou:Array [Boolean ,0B11];nF:Float ;_,L,_fZ,_0__,b:Array [Int ,0x4B];N_:We;_6P:pWK_g;_:Boolean ){}Destructor (){Continue ;}Var _2YL_j,$_f:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2555))

    def test_2556(self):
        input = '''Class Ue{}Class Z6:_{}Class _{Var $kT,_,$_0_:Int ;Val __,$3,_:_e_657;Constructor (_:String ;E,h9:Boolean ;_2__:Array [Array [String ,0b11],80];_,_:Array [String ,0X3]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2556))

    def test_2557(self):
        input = '''Class _{Val __,$c_,_8,M,$1_1:__1;}Class _:O{Val $_:String ;Var m_:Int ;}Class _:_g8{}Class _:__{Constructor (z_:Boolean ){Return ;}Var $90:Array [Float ,0X5_1];Val $_ZO9:xLdJ_;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2557))

    def test_2558(self):
        input = '''Class z_lU9:_{Constructor (){Continue ;}$63x(N6Q_52:Boolean ;r2_:Float ;_:Array [String ,0b1]){}$_p(v_,C_:l){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2558))

    def test_2559(self):
        input = '''Class cf{Constructor (r:Array [Array [Boolean ,0xB],0X2];vl,yK,_,_09N7_4_,W,_,e:Array [Array [Array [Array [Array [Boolean ,0X18],0B1100],0X6],0B1],0X18];M_:String ){} }Class X3c:_{Destructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2559))

    def test_2560(self):
        input = '''Class __c_:__{Destructor (){} }Class c{Var _5,g,_,$K,k:Int ;Var $_:Float ;}Class _:FA__q{Var Z:Int ;Var $3:Float ;}Class N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2560))

    def test_2561(self):
        input = '''Class _{}Class u2_{}Class g:_7{}Class j:_y{Var $_:String ;}Class _{Val H:Array [Array [Float ,0x27],0x27];}Class _9_36:_2{Constructor (){}Constructor (_:w9_sy;__m:Array [Array [Array [Boolean ,5],0X2E],29];bQ:Array [String ,29]){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2561))

    def test_2562(self):
        input = '''Class _EeH__:i16{Constructor (){} }Class _:a{$_(_2__:Boolean ;__k06m:Array [Array [Array [Boolean ,0b1010110],02],07_4_3];_E:Int ;_,d:Array [Array [Array [Array [Array [Float ,0X32],0x3E],0X32],0X32],96]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2562))

    def test_2563(self):
        input = '''Class m_{Var Cdx,KP:Int ;Var W,_,ti:Array [Array [Boolean ,015],05_7_54];Constructor (uP,_h,_:Array [Boolean ,0B1001100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2563))

    def test_2564(self):
        input = '''Class _:u{Constructor (_2,_6,_:Array [Array [Array [Float ,0X28],0b1000101],0X2];_c,_:Array [Boolean ,9]){Val L917:Array [Array [Array [Int ,0144],0B1_0_11],0XB];}$n(i0:Array [Array [Array [Array [Array [Boolean ,27],0XC5],04_3],0B1],0b1000101]){ {{ {}Continue ;}{} }Return ;}Val _,$X,_216E:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2564))

    def test_2565(self):
        input = '''Class t{}Class i{Constructor (_,_4:Float ){}Val e:Array [Array [Array [Array [Int ,86_9],4],0B1],23];Var $M_:Array [Array [Int ,0136],595_8_20];Destructor (){}Destructor (){Var wu1:Array [Boolean ,0B1_1_1];Continue ;}_(_z_m_:Array [Array [Array [Float ,053],02],01];_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2565))

    def test_2566(self):
        input = '''Class _9{W09__(Qy_Q,F,_:Array [Array [Array [Array [Array [Array [Array [Int ,0X58],1],0x47],0b1100010],022_2_6],0B10_1],0b1100010];d__,__,p,F:Array [Array [Array [Float ,01],60],0XF6D_5D];__e:_){} }Class J{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2566))

    def test_2567(self):
        input = '''Class _2{_(__,D5ag,_:Array [Array [Array [Array [Array [String ,0X55],0120],4],0B100000],4]){}Val $Kq_:Float ;}Class a___5{Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2567))

    def test_2568(self):
        input = '''Class S:o_{Val $7,$_,$8,a0p9,Y:Boolean ;}Class _{Var $K,d:Array [Int ,0X31];Destructor (){}_(){} }Class _:P_{K(_,x,M3,f:String ;_:Float ;_2_:String ;_6:_0f){Var b16_,v,s,u,a,_F8_,_,_:Float ;} }Class e5:e{}Class Q:R{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2568))

    def test_2569(self):
        input = '''Class G_:_{}Class f_29D0:x{Constructor (_55,t:n;Q:Array [String ,0b1100100];Q_,__,__,e,_:R;R:Array [String ,0xB];_1A,v,C:Array [Boolean ,95]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2569))

    def test_2570(self):
        input = '''Class _D:V{$h_(D_,C___i:xd;W:Int ;___R:Array [Array [Float ,0b10000],4];F:Float ;__:Float ;___f__2O,_:Array [Boolean ,6_419_6]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2570))

    def test_2571(self):
        input = '''Class _:_{$kx(x,W,_:Array [String ,0b1000100];O:Boolean ;_:String ;_,K:_M){}Destructor (){}Var _jP:Array [Array [Int ,074],5_4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2571))

    def test_2572(self):
        input = '''Class _:B9{$3(_fI_1,Ue_:Array [String ,0X3C]){}Constructor (j,m:J){}o4(o,S:__;z,T:Boolean ){Continue ;} }Class _:_V{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2572))

    def test_2573(self):
        input = '''Class yY54:__73{S__(){}Destructor (){}Var __,$9v__H:_;$7(_,_,pz35:Array [String ,0b1];_45,R,_,_,__:h9){} }Class auW{}Class Xc{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2573))

    def test_2574(self):
        input = '''Class g0W{}Class _:_{}Class _{Constructor (_:_0v0){}Var _t6,s:Array [Boolean ,45];Constructor (Z__8,__:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2574))

    def test_2575(self):
        input = '''Class _:f{Destructor (){ {Continue ;} }}Class _9:D{}Class V0kT{Constructor (b,av94o,d,o:Int ;ai9:Array [Array [Array [Float ,0xA],89],89];__iN,__:Array [Array [Array [Array [Boolean ,0x21],0b1000110],0b1000110],0xB_C21];U9,o:Float ;_5_,_B4_:Float ;_JG_:String ;__:_;__a6:Float ;_,c:Boolean ){Val j___W:Array [String ,017];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2575))

    def test_2576(self):
        input = '''Class r_29{_(_3,_:Array [Array [Int ,0135],0X47];f_175:Boolean ;_,_6:Array [Float ,71];_uZ,_0__05,W_3:String ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2576))

    def test_2577(self):
        input = '''Class _{Destructor (){} }Class l:_e_g{}Class v_{Constructor (_H_,_A,J,y,j5:Boolean ;__a,G:_3;_,A,R3:Array [Array [Boolean ,0B11110],0x6_9E];_76:Int ;_:Float ){}Destructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2577))

    def test_2578(self):
        input = '''Class R{Constructor (_,_:Array [Array [String ,1_1_8],03];e:Jg7_;Hl:String ;___0_4,_8_0,s6_7__Ft,sv,n:Boolean ;_Rf:__9_){} }Class d6_z:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2578))

    def test_2579(self):
        input = '''Class _p{Val $_:Array [Array [Array [Array [Boolean ,29],29],53],0140];Constructor (){ {{} }Var x4,S,G_,S:Array [Array [Array [Array [Int ,0x13],9],0X3],0140];Return !--_::$5q.ab_%!i.__2o();}Val __8:c0;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2579))

    def test_2580(self):
        input = '''Class y07E_:_{}Class _23:_{Var $E,$_K,z_t:Boolean ;Var $9c:__4=-_::$W57.RI.k.b3-_::$sI_.x_.g._5;Destructor (){} }Class p{}Class CG963E{Val g,_,$P:Int ;}Class _:i{}Class _:_Jc{}Class A1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2580))

    def test_2581(self):
        input = '''Class _{}Class _:_05_nh88W{Val S_,$_:Array [Array [Array [String ,0x5F],0B1_1],0X97];Constructor (_:__;_2I:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2581))

    def test_2582(self):
        input = '''Class _WS{Val gp_:o_0;}Class _14:W{}Class _{}Class _8{Var _,U_:Array [Int ,0X39];}Class tp:y{Var $G2R:_88;}Class _{Val _,$Y1:_4;Constructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2582))

    def test_2583(self):
        input = '''Class Q_{Val c,e,_6a:Array [String ,47];Var P,$__r,$M,$V6,$U,Z1r,$4_:Array [Array [Array [Array [Float ,05_0],0B1_0],2],065];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2583))

    def test_2584(self):
        input = '''Class __{__(){Break ;Break ;} }Class p:_{XFdz(_,_,E_:_;_0,r4E_B9_5,x:Boolean ){}$2(){Re7::$Y9E()._S();} }Class UP{}Class l:_0{}Class C_uD_C:zv_e7{Destructor (){Var ___:r7;}Var $_64,m9:_;Var $p,BQ_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2584))

    def test_2585(self):
        input = '''Class v:_{}Class X_:__{}Class _2a79:_nu3{Var k:Array [Array [Int ,71],627_2];}Class x:_t_Q{Var g71B:Array [Array [Array [Boolean ,0b11100],04733],01_2];Val $_g,_,$_4_:_;}Class _:p63_{Destructor (){} }Class u:E{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2585))

    def test_2586(self):
        input = '''Class z6NI:K_5{Var $5,_3:Array [Array [Array [Array [Array [Array [String ,0b1000100],8],0B1100000],06_050],0b1000100],0B1100000];Constructor (_:Boolean ;_:Array [Boolean ,01];p_,b6,X8e_0_,V1,pv:Boolean ;_,D:p;__:_F){} }Class _5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2586))

    def test_2587(self):
        input = '''Class R__{Val _NXd,$r_7_0j,__,$F0,$7_:B;V_(_1:String ;_Y:Array [Int ,0x11];S___:Array [Array [Array [String ,0X1E],66],03]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2587))

    def test_2588(self):
        input = '''Class _M_{}Class r{Constructor (_e:Float ;_,t___:Array [Array [Array [Float ,0x2E],043],043];_:Array [Int ,0xD_E_B];__:String ){ {} }Constructor (r_:Boolean ){} }Class J5{}Class m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2588))

    def test_2589(self):
        input = '''Class _P:_9{Destructor (){}Destructor (){}Var $5,$7_,$_,Z_8:Array [Array [Array [Float ,0B1001110],0xB2_D],9];}Class __:e{Var _,$5_p:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2589))

    def test_2590(self):
        input = '''Class m3{$0(){Break ;} }Class e_:_{Destructor (){} }Class o{Var C:String ;Destructor (){}Val _5,__,$3:Float ;}Class _{Val $H:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2590))

    def test_2591(self):
        input = '''Class a5{Val L,$Cz,$4,$AE,$N:G;$I_(_4:Array [Boolean ,0b1010100];t_,R1,_,_,_R2,E5n,_:K){}Val $_55,m:Array [Int ,43];}Class B:__17_{}Class A:_5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2591))

    def test_2592(self):
        input = '''Class _s{}Class _3_A5{Val $Y:Array [Float ,46]=!!!_::$7E.p.m110.__.k.G._N_().F*_Q::$00_().__().__();N_(M79:Array [Boolean ,0XD]){Break ;} }Class __1:_{Destructor (){}$_89(oS_,E:_;_,y:Array [String ,0b111010]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2592))

    def test_2593(self):
        input = '''Class Y_:_{}Class _Z9H{Val S_7,$Y_,__,_5,$_59:Boolean ;}Class u{Destructor (){} }Class N_4_{Val $g:Array [Array [Array [Array [Int ,0X29],2],56],0b1000000];}Class _:d{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2593))

    def test_2594(self):
        input = '''Class m{}Class W:_{Var $7__N_7,__:Array [Array [Array [Array [Array [Int ,100],100],0X249_6],0x3],0x10];}Class _:eI{}Class _8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2594))

    def test_2595(self):
        input = '''Class _9_{d_(Hh,A:String ;o_el:Boolean ){} }Class _p:_{$13G(){}Destructor (){Break ;}Val $_b,$_h:Int ;Constructor (B,Uz,kWMCc:G_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2595))

    def test_2596(self):
        input = '''Class T2{$_aO9(V:__;___G:v6__3){}Var $Ns0_1,$U9C:Array [Array [Array [Boolean ,0B1001111],1],0B1001111];Val _1,$1_g:Array [Array [Array [Boolean ,041],26_9],0B1];Val $6:_7;}Class _{}Class _35g{}Class Z_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2596))

    def test_2597(self):
        input = '''Class t_:_{Destructor (){}Var j:Array [String ,05];Var _,Y7,$67:Boolean ;}Class e:W{Var $_:Array [Array [Array [Float ,0b1],0B1100],05];}Class bS{}Class iIL3:Ip6_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2597))

    def test_2598(self):
        input = '''Class L:_{Destructor (){}$s__(MI:Array [String ,0x34]){}_(F8,_7_,A:_5;_,K02n,_:V;_i:Array [Int ,06]){} }Class iZ6F1{Var $7,$_v,Pb:b;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2598))

    def test_2599(self):
        input = '''Class L:_s_{Constructor (z,I:Array [Array [Array [Array [Array [Array [Array [String ,20],0x2D],20],0b1],8],0B10],0b11001];S_70_,m__,F:M){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2599))

    def test_2600(self):
        input = '''Class _{}Class _:L__29{Destructor (){}Destructor (){}Constructor (Sl,_,be37:Array [Int ,0xB9];t,__2Om,_K_,_C,__:r3__){} }Class M{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2600))

    def test_2601(self):
        input = '''Class N{Constructor (_:String ){}Var $5y_:Array [Array [String ,0665_0_5],02];Constructor (P:Array [Float ,0x6_6]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2601))

    def test_2602(self):
        input = '''Class _D{Constructor (O_:Array [Array [Array [Int ,0X2E],55],0B100100];_,_T,n:Q_;x:__){}_d0(_,_P316,__20,_S,_,wMejJ_,_623,_e,_:Array [Array [Array [Array [Int ,55],0B110_00],026],0x2E];sBT4:Array [String ,7_5_28];_:Array [Array [Array [Array [String ,55],026],0XA],0b1];dx_,_n0,___3_A4,_0,_5:Float ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2602))

    def test_2603(self):
        input = '''Class I:a9_{Var h:Array [Float ,07];}Class ST:__{Constructor (kE,_2,_n,p3:Boolean ;_9:Array [Float ,0XB];_:String ;_,W,M_:Array [Array [Array [Array [Boolean ,6],0b110_1_00],0122],93]){} }Class zK:_{Var T:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2603))

    def test_2604(self):
        input = '''Class Z:Ws{}Class _:o__92{Val $8,Td,__,__,Ar:Int ;$4_(){}Val $_e,$_,$a_e8h,Mx,$397__,$8D_,_e6_,$u,_w,$3:Array [Array [Boolean ,022],7];Var SS01:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2604))

    def test_2605(self):
        input = '''Class _j:_2{}Class _512_0:_{Constructor (_J_:_e5;Bch:Array [Array [Array [Array [String ,0X5_D],0XE],0B1_1_0_0_0],73];_,_,YN,K:Int ;Zxy:Array [Array [Array [Array [Array [Array [Boolean ,06],0xD],4_8],033],0b10_0],0x63];R1__e,C_z,_,Xg,d_O_,_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2605))

    def test_2606(self):
        input = '''Class _8{}Class _{Var nO4,__z:Array [String ,0b100];Val __RF:Array [String ,18];}Class Z2{Destructor (){ {} }}Class _Q{Var s,V,_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2606))

    def test_2607(self):
        input = '''Class d:c{}Class u:w6{$_(k__3,_Q_:Float ;M,_8__fQ9:Array [String ,056]){Var _:Array [Float ,056];}Val $6:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2607))

    def test_2608(self):
        input = '''Class __5:t{B1(_,N6,_H,_:String ;_:Array [Array [String ,01_6],02];A,__:Boolean ;t_:String ){Continue ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2608))

    def test_2609(self):
        input = '''Class _:__{}Class __:L_{}Class _:_{Constructor (_2_1,_Q:Float ;__n:Boolean ;b,P_:Array [Array [Boolean ,07_5],0B1];_,_8E1,_4,p,L,_,_B_2:H0){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2609))

    def test_2610(self):
        input = '''Class n_:_r{Destructor (){} }Class Q_45{}Class ___6:__{Val I:Array [Array [String ,1],072];}Class _4_5:_12NF0{Constructor (_0No9_,AA_:Int ){} }Class _:V{}Class l_:a{}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2610))

    def test_2611(self):
        input = '''Class _9_9:P{Val _6:_;Constructor (_,wv6,_:Array [Array [Array [Array [Boolean ,0B111011],076],02_53],076];n:String ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2611))

    def test_2612(self):
        input = '''Class __{Val $p,$z4___:String ;Constructor (){} }Class Xn{Destructor (){Break ;}Constructor (){}$9(m4_:Float ){} }Class O:Y{}Class i{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2612))

    def test_2613(self):
        input = '''Class E3__7_Vn{}Class __{Val _7:j;Constructor (_,c,P5:__48__;Y,__,Q:Array [Boolean ,0b1]){} }Class _:SQ{Var _L:__7h_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2613))

    def test_2614(self):
        input = '''Class s:_{}Class _:q367L17{Var LN:Array [Float ,0X14];Destructor (){Continue ;} }Class _:t{Val py,$_,$e:t;hs_6(){}Var $_1:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2614))

    def test_2615(self):
        input = '''Class _9F:_{Destructor (){ {Val f:c;Break ;Continue ;_56::$naY();} }Val $_:Array [Array [String ,0b1],0650_52];}Class _:Qj{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2615))

    def test_2616(self):
        input = '''Class z{}Class f{}Class l:J{}Class _:O_970o{$_(_:Float ){Continue ;} }Class w:b_6ad_U{}Class _i_{}Class y:_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2616))

    def test_2617(self):
        input = '''Class Mv:I{Val _,$_c,$m,$9_7W:Float ;Val d8_,_28,$3,$x26,_:Array [Array [Array [Array [Array [Array [String ,06_05_1],0x7_F],7],0XB],46],72_8_0];Destructor (){} }Class W{}Class G2:o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2617))

    def test_2618(self):
        input = '''Class D{Val $6_:SVG_5;}Class zky{g3(B_69:_){Continue ;}Val _:U;}Class _{Var _8,_,ED:Int ;}Class G_{Destructor (){}Val j7,$_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2618))

    def test_2619(self):
        input = '''Class _h:_{}Class _:l{}Class P:q{Var $76,$I_:_YS;Var I,_,$_7_805:_;Constructor (N,p2:Array [Array [String ,0113],0113]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2619))

    def test_2620(self):
        input = '''Class __:F{Val _:Boolean ;}Class g{}Class h{__5f_(){}Val _I,$hv,$_L,$3RN:Int ;Destructor (){Break ;}__(_,_,_28,_:Array [Array [Array [Float ,016],01],05]){} }Class _0F:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2620))

    def test_2621(self):
        input = '''Class _:_{_(Y5:f){Break ;} }Class P{}Class _4{Destructor (){}$g(){Continue ;{} }}Class _{}Class _7__{}Class _g{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2621))

    def test_2622(self):
        input = '''Class vm:_7{Val x_,$949:Int ;I(_:Boolean ;f9_0Z:Array [Array [Array [Array [String ,0120],0B11101],0x3E],58];_,b__D:Boolean ){Break ;}Var U10T:String ;Val _1DC:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2622))

    def test_2623(self):
        input = '''Class _K{}Class V{Var _,_,_:Array [Array [Float ,11_0],0b1_11_1_1_0_01];Constructor (_,__:Array [Int ,0x7]){Break ;}Val p:Array [Array [Array [Array [Float ,0b1_0],0B1],0XB],0XB];}Class H{Constructor (l:Array [Array [Float ,0B1],06]){Val _:Array [Array [Array [Array [Array [Array [Array [Int ,0XB],0x7],0XB],0b1],05],0B1],11];Val ___,O_,_,_,_:Array [Array [Array [Array [String ,0104],11],0B1],02];} }Class _:Ag{}Class __:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2623))

    def test_2624(self):
        input = '''Class UX:v91{}Class _48:___{wH(_,E,x:Float ;_,a_:y_){} }Class _:_n3{Constructor (){Val b:Array [Array [Float ,6],0X22];} }Class f:z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2624))

    def test_2625(self):
        input = '''Class _vG{}Class _8{}Class T__:z{Constructor (){}Constructor (uE__,O,_3_x_k,g1_,_2,w,Y:Float ){ {Continue ;}Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2625))

    def test_2626(self):
        input = '''Class _SW:L3{Val T,$0_:_;Constructor (){}_(t,_90C,RK,U_,b__:Boolean ;_:Array [Array [Array [Array [Array [Array [Array [Boolean ,0b10_11],0X3F],0X8],0X3F],0B1_1],0X3F],1];___,_,_,w8,__a:Array [Array [Int ,0x5C],0B1];_:String ){Break ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2626))

    def test_2627(self):
        input = '''Class v{}Class _{$dLgV(){}Var y_:t_;Val $LD:Int ;Destructor (){} }Class _:f_6_{}Class u{}Class Z_{Var $_n:Array [Array [Boolean ,0XC],063];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2627))

    def test_2628(self):
        input = '''Class k36:z3_p_3T{}Class Ux{Constructor (cV:Boolean ){} }Class _8:_V{$_C(){} }Class m{}Class ag:_ZY{Var $8,_T:Float ;Var _W,$Q,Sp:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2628))

    def test_2629(self):
        input = '''Class __2tG6I{}Class _9:c{_(){}Var $32l:_;Constructor (){}Val $7:Array [Array [Array [Array [String ,02],02],02],0B10];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2629))

    def test_2630(self):
        input = '''Class k__56L:_{Var o,E8:Array [String ,0x62];Destructor (){Break ;Break ;Val j_,N5,V74m6,H_,Mc,_,_8_,_,_9Js_:_8;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2630))

    def test_2631(self):
        input = '''Class _{$_(_g,I,YN_,_:Array [Int ,65];M1_,uV_,MZ_0,_t_1:Ef){}$4___y(s,_J:Array [Int ,0b1_0_0]){}Val _:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2631))

    def test_2632(self):
        input = '''Class AA{}Class sm:o0{$Wt_(_:String ){} }Class _{Constructor (A_wrV,V84,g7,__V5P,Xe:Array [Array [Array [Array [Array [Array [Array [Int ,0b10110],0b10_1],94_014],0b11],19],0B1_0],0B100011];_z_6F_,K3,J:Int ;_o:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2632))

    def test_2633(self):
        input = '''Class V:t{}Class G:n_{}Class W_:R__{}Class __0{Val y:Array [Array [String ,03_5],0X5C]=w::$_;$S_(lh7_,t:K){} }Class p:R5_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2633))

    def test_2634(self):
        input = '''Class _1{}Class _:_{Constructor (){}Val _0_:String ;}Class J:H{w(___v7,_,M2,J,sa:Int ;i:Array [Array [Array [Array [Array [String ,22],042],0xA_D],0X9],042];G:V;jppO,_R,c:Array [String ,0b10];u0:Boolean ;y_29:Boolean ;_:_m){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2634))

    def test_2635(self):
        input = '''Class aI:_{}Class _b6:_{Val $_:cNR;Var Q3,$8_:Float ;Constructor (Z,B,__,ja4_s:Array [Int ,0X9];Y,l:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2635))

    def test_2636(self):
        input = '''Class F:_{Constructor (j_:Array [Array [Array [Int ,0X1F],0X1F],0x1E];__:Float ){} }Class HJ:_xX{Constructor (){Break ;Var _6:Float ;} }Class _3{}Class _{Destructor (){} }Class Bl:U{Var $4j_T7,$_yZ,_7o9___1__,$7,z:Array [Array [Float ,0X2],053];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2636))

    def test_2637(self):
        input = '''Class S{$_(__,y,__,D:Array [Float ,057]){Break ;}Var $3_9:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,82],82],0b1010011],0x4A],0B1_0],0x7_86_D_B],0X34],0X4],0B1_0_0_000];Var $j1l,F__:Array [Boolean ,82];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2637))

    def test_2638(self):
        input = '''Class i:_{Var I,_i:Y1_;}Class _{$k(){}Var $_E01g28,$_,f:Array [Array [Array [Array [Array [Array [Float ,0x4_0_9_CB],04],0B11_0],0x3D],04],71];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2638))

    def test_2639(self):
        input = '''Class _{}Class e_:_{Var $T:Array [Array [Array [Array [Array [String ,0B1],0B110010],0B110010],0xB_7],3_3_95];Destructor (){Break ;Val _3o_5:String ;} }Class _{}Class v{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2639))

    def test_2640(self):
        input = '''Class _PI:JZ32{Val $_,p:Int ;}Class I34:O4cL_{}Class _:y{}Class G:v7iY{Constructor (u_,R:Array [Boolean ,0122];r,b_EF_:Boolean ;_:Float ;_:Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1],0122],0122],0122],03_765],0122],0122];_7N:String ){} }Class A{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2640))

    def test_2641(self):
        input = '''Class __:_d2f{}Class __:j{}Class _{}Class q:_c{Constructor (){Var e,_o0,__O,g:Array [Array [Array [Array [Array [Int ,0b101011],0b1],024],0B11],0XB];{ {} }} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2641))

    def test_2642(self):
        input = '''Class hu{Var $_G,$_:Array [Array [Array [Int ,0b1],0X7],0x42];Var qO:Array [Array [Array [Array [Int ,54],0X4],04_05],0B11];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2642))

    def test_2643(self):
        input = '''Class aY5M:a6{Val $0Y,A:Boolean ;Val $M,$_,$g:Array [Array [Array [Array [Int ,076],0B1_0_1_1],51],0B1];Val $_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2643))

    def test_2644(self):
        input = '''Class xj{Destructor (){} }Class X8:__{}Class l{}Class H7{Var A,$d,__4:String ;}Class _{}Class j{_(_9z:Boolean ){}Constructor (B,L_n,uJ_L:_){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2644))

    def test_2645(self):
        input = '''Class Si___3{Constructor (_,_,y,_,_,_,FLb8,X1lSZ,x2,NeI0Q:Array [Array [Array [Array [Boolean ,0b10110],0B1],03],67]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2645))

    def test_2646(self):
        input = '''Class f2A:p2{$_(F_,_:Array [Boolean ,0b1_01];U:Array [Boolean ,04];g_,e700_3,_:Array [Array [Array [Array [String ,0121],0X4B],0B101110],0X4B]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2646))

    def test_2647(self):
        input = '''Class _{}Class _V_d4_{Constructor (){_9::$zw90();}Var $8,_n,aD0,_7:Array [Array [String ,0B110000],0x61];}Class _{Val $s:Array [Boolean ,0x61];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2647))

    def test_2648(self):
        input = '''Class Xc_{S(_,l99,o:Array [Array [Array [Float ,0xF8],9],7_6_7];QPu,_,o00:Array [Array [Float ,013],0B10];Jn:String ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2648))

    def test_2649(self):
        input = '''Class _S3D1:U{Var n_:Array [Array [Array [Array [Array [Array [String ,8_91],012],0267],064],0x38],6_689_3];}Class __{Q1v7__8_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2649))

    def test_2650(self):
        input = '''Class _{Var $_25,TA,$x_02,_:Array [Array [Array [Boolean ,03],0xC],0X32];$_Y_w0(_76_,__,S:Array [Array [Array [Array [Array [Float ,0X1],0132],0132],0b110010],86]){lH::$4_();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2650))

    def test_2651(self):
        input = '''Class _{$_SV1(_:Array [String ,0B10010];_:H;_P:Array [Array [Array [Boolean ,3],55],55];_:s){Break ;}Destructor (){} }Class L:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2651))

    def test_2652(self):
        input = '''Class ___{}Class P_i_80:_{Constructor (){} }Class _O{}Class _I{Destructor (){}___(T7D:Array [Array [Array [Boolean ,036_6],0x3E],0X1E];k:Array [Float ,7_8];B:Int ){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2652))

    def test_2653(self):
        input = '''Class eH:_{Constructor (br:Array [Float ,0X29];_2K:Array [Array [Float ,6_7],0X29];___,_o__8,TK_t1,_3,y:_2;_:Boolean ){Break ;{}Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2653))

    def test_2654(self):
        input = '''Class p_U:S{Var i,$_,$itP,$_,$9:Array [Array [Array [Int ,0B10],0X3E],0B1];}Class R:Yv__2{Constructor (q,O:Int ){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2654))

    def test_2655(self):
        input = '''Class D:_7_9{}Class _{Constructor (v_,J__:Boolean ;_,_3_:Array [Boolean ,0xC];n_,S:PG;Fv,gu:Float ){}Constructor (){} }Class _c_:M{Constructor (O,_xG:Array [Array [Float ,0b1_0],0B1110];_,_,__:Array [Array [Array [Array [Array [Boolean ,0x33],0x51],69],0141],0x51]){} }Class o4_7:n{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2655))

    def test_2656(self):
        input = '''Class o:_{}Class _{Constructor (_,N:_8;_g_V,_S:Array [Array [Array [Array [Array [Array [Float ,60],042],60],0xD_F],60],042];_:Array [Array [Array [String ,042],0X7C],03];_:wX15p;Z9,z0c,_,j,o,_:Array [Int ,0B1_10];P:Float ;E,p:Boolean ;U_:_){r::$Z();}Constructor (UK8,j_,_v,A0:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2656))

    def test_2657(self):
        input = '''Class ___:jU{Constructor (){}Destructor (){}Constructor (_,_9__2:Array [String ,034];_4,__:Array [Array [Boolean ,01],98];X,pP_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2657))

    def test_2658(self):
        input = '''Class P{Var a:s63w_7Zt8_;Val $_D_6:Array [Array [Array [Boolean ,2],0X17],57];Val _F,_46:Float ;}Class s{Constructor (){}Val _3,$1C,y:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2658))

    def test_2659(self):
        input = '''Class _jisW:Z{Constructor (){Return ;}$o____2(_9,Hg_,X4__X2_,G:_J;_b,Z7m:Boolean ;APB,d:Boolean ){} }Class _:V_6{}Class Glj:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2659))

    def test_2660(self):
        input = '''Class __:_2Y87_{Var JD,$B_9,_,$_:String ;Val $c7_Y,$AS,$M5:Array [String ,0x75_7D];Val u7_F:Array [Array [Float ,47],47];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2660))

    def test_2661(self):
        input = '''Class __{Var $6_,$_,$_rz:Array [Array [Array [Array [Array [Array [Array [Int ,014],0B110111],0B110111],01],0B110111],5_3],014];}Class I{Constructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2661))

    def test_2662(self):
        input = '''Class K{}Class R:Fb7_0{$_(_1:Int ;T,B,_,_k_p:Array [Boolean ,0137]){Return ;} }Class _vp_:E{Destructor (){}S(){}Var $x:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2662))

    def test_2663(self):
        input = '''Class _l{}Class s{$__J_A_h_(_0,z:gI;_,v_9:Z_;L:__;PeP_:Array [Array [Array [Boolean ,8_3_5_8],0X2],0x11];o_,_31,I:oq_IK){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2663))

    def test_2664(self):
        input = '''Class _:_{}Class _:_{}Class d{}Class K{Var _y__,$1,_uQV,$9:Array [Array [Boolean ,0104],87];}Class __V{Destructor (){}_2_0(_S:Float ){Continue ;}Var _:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2664))

    def test_2665(self):
        input = '''Class o:j2_{}Class oy:___8{}Class C:_n_{}Class _1:J_W_7{Var $83J,O,$5,_1:Array [Array [Int ,0B110110],87];}Class v{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2665))

    def test_2666(self):
        input = '''Class _{Destructor (){}Var das:M;}Class _{__(J,_:Boolean ){ {}W_::$w._().r15.Pe();} }Class y_:__p{}Class _:_{}Class M6:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2666))

    def test_2667(self):
        input = '''Class W{}Class _{Constructor (_,c:_;T1,k_:Array [Array [Array [Array [Boolean ,42],42],0x20],0b11];F1A:X){}Val __,$_J,$73F_t:Array [Array [Array [Array [Array [Int ,03],0x6_CAE_4],0x20],2],01_7_30_4];Constructor (_6l:j){}Val __2_:Float ;Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2667))

    def test_2668(self):
        input = '''Class U_Qm{}Class _:_3__{Val h71,_,$3_:Array [Float ,0b111001];Destructor (){}r(H6_26__:Int ){} }Class f{}Class _1:_6l{}Class E{Var $4:Array [Int ,0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2668))

    def test_2669(self):
        input = '''Class S{_(P,C,_,D556,_,_3_0R7,uh,_0,B2:Array [Array [Float ,0X47],0xAF_4];S_W,U:Array [Array [Array [Boolean ,0X47],0126],9];___:Boolean ;_:_){} }Class T:q{}Class _A:_{Destructor (){} }Class ID{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2669))

    def test_2670(self):
        input = '''Class t_k6{Constructor (_:_;_:_;F,_,b:Array [Int ,2];c:Array [Int ,914];N__:String ;_5,_8:S){Return ;} }Class j9:h_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2670))

    def test_2671(self):
        input = '''Class G7:l__{Destructor (){}Val $u6:f;Constructor (_e:Array [Array [Array [Float ,0x30],0102],0102];K,x__2,_:Int ;e:Boolean ;f8:K_;p:Int ){}Var $I3,$Q__,__,$_3g_4_,$_4_6Y_:Float ;Var e2,$_87:Array [Array [Array [Float ,0xC],01],0x1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2671))

    def test_2672(self):
        input = '''Class _:MBg6{e(){}Val _,$_:_4l;Var $_,$9:DT__2h;$__(z7_,J:Array [Boolean ,0B1]){}Var $3_x3l__,$Z9:String ;}Class _L:g{}Class w_75_3_{Var _n,$7:Array [Array [Int ,0b1000010],0xE];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2672))

    def test_2673(self):
        input = '''Class _{Val $o7,$6,$_,$tO:Array [Float ,57];Var $_15L:Int ;}Class s:O{$5R628(_,_5i9,U:Array [Int ,0xB]){} }Class _{}Class z:S7_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2673))

    def test_2674(self):
        input = '''Class __:v{Constructor (_,_,t:Array [Array [Array [Array [String ,0b111101],0xA],0b1_1_1],7_5];_0:Array [Float ,3]){} }Class I95{}Class b:t{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2674))

    def test_2675(self):
        input = '''Class _{$A_(){}Constructor (_0,_p_p40,_:String ;p_d,Sz:Int ;_:Array [Array [Array [Float ,0b11],0X1_8],0B1001001];_,x05Bs_3:_){} }Class J1:__{Constructor (){} }Class N_00{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2675))

    def test_2676(self):
        input = '''Class _{Var _,X__,_5:Float ;Constructor (){}Constructor (_6__:String ;_:Array [String ,074];_q7_6,_0__,__,Y,A:String ){} }Class r:I_u_{}Class T70:g_w8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2676))

    def test_2677(self):
        input = '''Class _{Val $__1O7:Array [Array [Array [String ,0b1],0b100001],0X31];Destructor (){_x5O::$98g__();}Constructor (___138:j1e;_3Z:Int ;_,UN:Boolean ;w:Array [Int ,1];_:Array [Array [Array [Array [Array [Int ,0b100001],0xC],0b100001],9],64]){z::$__BT0();}Constructor (){} }Class _{Constructor (){ {{Continue ;}Return ;K__::$za__V();}Return ;Continue ;} }Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2677))

    def test_2678(self):
        input = '''Class f{$9_C(_6k:G9;ZZ___,n:_7;v__,z1,z:Int ;A5ci_:F1_;_,e,h,k0__z2,ib8:Array [Array [Array [Array [Int ,0X3],02],0b1],75]){}Var o,_:Array [Float ,02];}Class ___t_0:_9{}Class U_su:m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2678))

    def test_2679(self):
        input = '''Class _:_{}Class m:_{Constructor (_:String ;_i0,Z:b){}Constructor (Ig:Array [Array [Boolean ,7],0XC];_,q:Float ;_:o__;C,_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2679))

    def test_2680(self):
        input = '''Class r8o{Constructor (_,y:Float ;_4_,Ohsp8,w7,_t,_:_){Break ;}__(v:Array [Int ,93];iN3,__8__,n_:String ){Break ;}Var $K0_5:Array [String ,0b11];}Class Gf:___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2680))

    def test_2681(self):
        input = '''Class _1:_q{Destructor (){Continue ;}n_(_Q:Float ){}Constructor (){} }Class S{}Class M{}Class _:_x6{Destructor (){}Val _:_1;Var $6,$o__:_;Val $T__G:Array [Array [Array [Array [Float ,59],0B1],59],0X3];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2681))

    def test_2682(self):
        input = '''Class b:_O{Val $5:Array [Boolean ,054];Val $9e,_,$_,$B:Array [Boolean ,0B1];Var _:String ;_(g__G:Array [Array [Array [Array [Boolean ,0X57],8_0],06],0X57]){}$7Zi(_2C,g:Int ;p_J:Array [String ,0x3]){}Var $_8L__9_:W;}Class Wz:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2682))

    def test_2683(self):
        input = '''Class __A:_89{Val $A_,$_7:_1;$__K(_h2_I_,U:String ;q,_7_,WF,_:Array [Array [String ,0B1000],054];M_,e,_,_4O,h00_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2683))

    def test_2684(self):
        input = '''Class _1{Val $Y:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0B101],0B1001000],8],10],10],0B1001000],0x9_0FD846],070];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2684))

    def test_2685(self):
        input = '''Class P_{Val $5,_22V6H9:Array [Array [Array [Array [Boolean ,0B1010110],05_3_3],0x6],57];Val $_h:Array [Boolean ,0X9];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2685))

    def test_2686(self):
        input = '''Class o{}Class _eW_{Val Xq,$_TL09,I,$0,$T_,_:String ;Constructor (){} }Class _s{}Class _44A{}Class Y:_{}Class lg{}Class _6_:_M5s{}Class t{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2686))

    def test_2687(self):
        input = '''Class L{__(K:String ;c9d:Boolean ;u3_4:Array [Array [Array [Array [Array [Float ,061],0b1001110],0b1001110],1],061]){Break ;Continue ;}_(_:Array [Array [Float ,0B1],41];b,z6,_:Array [Array [String ,0b1001110],0B1011001]){}Val _:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2687))

    def test_2688(self):
        input = '''Class _{Destructor (){}Constructor (kx:Array [Array [Array [Int ,043],0x6],0B111000];_Y0__f0:Int ){} }Class _:_{Constructor (){}Var _aTXb:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2688))

    def test_2689(self):
        input = '''Class m:N{}Class Y3p4:l{j0(_Q2,___:Array [Array [Array [String ,0x36],0X19],076];_7G_T:Array [Float ,076]){} }Class _X3:y_2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2689))

    def test_2690(self):
        input = '''Class _:_{h(){}Constructor (tm,C:Array [String ,07];_s,_:Boolean ;_:_;V:Array [Int ,07];__:j;F:Float ){}Var $_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2690))

    def test_2691(self):
        input = '''Class _:_{Val _81:Array [Array [Float ,0b11_010],0X4];Constructor (__,Jk,_70,_k,_:String ;q,N6,Q:Array [Boolean ,0b1111]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2691))

    def test_2692(self):
        input = '''Class _2_:_{Destructor (){ {} }}Class _8_6J:_72{}Class G3_2:_{Destructor (){Break ;} }Class VI:_p{}Class d__o{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2692))

    def test_2693(self):
        input = '''Class D:_{Var k:Float ;}Class _D_6Gm72:_{Constructor (_6_:__l__;_f_43_,c:String ){Return ;Break ;}Constructor (v:Float ;_:gk;_X:Int ){}Val $_84:Array [Array [Boolean ,032_5],07];Val $_:Int ;Var $53,_K5,$_:_;}Class N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2693))

    def test_2694(self):
        input = '''Class N{Destructor (){} }Class _{}Class __:M{Var $w,$3j:Array [Boolean ,0X6];}Class _i{}Class E{$__(_y:Array [String ,0B111011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2694))

    def test_2695(self):
        input = '''Class r{}Class _:z_{}Class _pi_:_6{}Class _{Var $fZ:Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1010001],0x7],06_2],56],0123],0x7],0x4]=!New _N()._().L6__V.j0.I();}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2695))

    def test_2696(self):
        input = '''Class Rr{}Class x:__{_(bx,_3F:Array [Array [Float ,0B1_0],0b10001];wI_G,_:Array [Array [Int ,27],0B1]){Return ;} }Class so{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2696))

    def test_2697(self):
        input = '''Class _k{}Class E:_q_04{}Class _{Val _,$6,Oyx,_,$_,uE:Array [Array [Array [Float ,0b1_0],0X7_A],0b101111];Var aI_:String ;Constructor (){} }Class _5_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2697))

    def test_2698(self):
        input = '''Class _C{Destructor (){}__(){ {} }_(){Return ;Continue ;Val __,_,Y:Array [Array [Int ,0b1],0b1];New R_().GC._();Return ;}Constructor (gR_i,_,_1fC,_V:Array [Array [String ,1],98]){} }Class _{}Class v_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2698))

    def test_2699(self):
        input = '''Class _:_{Val $74:Array [Array [String ,0X2E],0x5C_C];}Class __{$8_3u(){}Constructor (_:String ;_Z_a:_O;_2,_u:Array [Array [Array [Array [Array [Array [Int ,5],73],0B100010],0x4_9],02_4],04]){} }Class _:_Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2699))

    def test_2700(self):
        input = '''Class w8:__{}Class _{Var $3e_,c:Array [Array [Boolean ,0b10],0b1_0_11_110_0_0];Constructor (){}Val $1:Array [Int ,06];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2700))

    def test_2701(self):
        input = '''Class hYh02{f(e:Array [Boolean ,0X2C];v,c6,__bAW2p_,_F,z,J,D_,X:Boolean ;_:String ;C6tK,_g,_224e:_){}Constructor (_:_B){} }Class i:q_053{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2701))

    def test_2702(self):
        input = '''Class _:s4{}Class VqJ2{Destructor (){} }Class Sn:_{}Class V:y{}Class H{}Class _{}Class w{p(u_:Array [Int ,0x2]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2702))

    def test_2703(self):
        input = '''Class S__{J_28(_,S,_:Array [Array [Boolean ,02],07_0];_2,h:Array [Boolean ,077];K:Int ;__90,v:String ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2703))

    def test_2704(self):
        input = '''Class _:_{$_(d8OX:Array [Array [Array [Array [Array [String ,8],024],0b11110],0b1],8];I,_:px;_,_L_,_:_3m7Jya1R;_1:Boolean ;v1,Z:String ;_,_,W8:_T){} }Class u{Val $_:Array [Array [Array [String ,0B1010100],0xF],0XB];Var _9_,$b3:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2704))

    def test_2705(self):
        input = '''Class Y_8{$0__(C:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0x479],100],02_25_7],0b100110],0B11000],100],0B1_11],0xB_8],06_2_5],13]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2705))

    def test_2706(self):
        input = '''Class o:v{_(){} }Class _{Var Q2,_3_,$5,$__0,_,$_,$r:Array [Array [Array [Int ,0X17],12],7_9_08];Var U:i_;$s60(_,_:w_5;w63__:_;QIv,z,_6_L_f:__;_:Array [Array [Int ,0b1],43];_:Boolean ;__Ln4,h__:Float ){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2706))

    def test_2707(self):
        input = '''Class _:_{}Class U:D{Constructor (J,JN_:Array [Array [String ,030],07_17]){}Constructor (_q:Float ){}Val $51:Boolean ;}Class F_:z{b4(){}Var $k:v0;$R(_,C_7_z9,r:Array [String ,0x9_DC];_3pc:Array [String ,8_5]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2707))

    def test_2708(self):
        input = '''Class SZ_:_{Var $C3:Array [Float ,0X36];Var $_,$4XL:_2c;}Class N:___{Var R9,_,$10I8:_;Constructor (C_o:Float ;_96,O_:Boolean ){} }Class _Z:_{$0_H(){}Destructor (){}Var _Zh_:_;}Class __{Constructor (){}_(_7:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2708))

    def test_2709(self):
        input = '''Class _o:_8{}Class h:l{B(){} }Class _{Destructor (){}Constructor (_r__9_,G_P:Array [Array [Boolean ,077],022]){} }Class _00_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2709))

    def test_2710(self):
        input = '''Class P{Val $1,$_5,_j:String ;Destructor (){} }Class tN:_{}Class N{Constructor (){Var _,__:Boolean ;} }Class a__:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2710))

    def test_2711(self):
        input = '''Class X8_1_Ta_:T{Constructor (D:Array [Array [Array [Array [Array [Array [Array [Array [String ,0XD2],0B1011100],0X6],02],0b111000],50],0b1],50]){Q_::$_9T5();}Val M_LJ,$_9,$_t__,$0_98_:Array [Array [Array [Array [Array [Int ,0B1],0xEF],0X2],050],0xDC97_BC2];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2711))

    def test_2712(self):
        input = '''Class a0{Constructor (b_:i;f,zu,T6,y:o;Q_u:Array [Array [Array [Boolean ,0x36],0x36],76]){}Var _,$_,$_,_1,$0h__,G4:P0Is;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2712))

    def test_2713(self):
        input = '''Class __:ZT_{}Class w___U3:z{}Class ST:t_{$I(_2:_6Z_w;_:String ;CW,i,p6_,_,t,_:Boolean ;_,W6X,_2_:Float ;_H_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2713))

    def test_2714(self):
        input = '''Class _{}Class q:_wk{}Class _{}Class _s_{Destructor (){Break ;} }Class _{$__9(j_:Array [Array [Array [String ,0B1],3],0B1100011];F9j:Float ){}$8(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2714))

    def test_2715(self):
        input = '''Class _{}Class __32L_8{Constructor (___,Ek___:J;L,n:Int ;D:Array [Boolean ,0x27]){}Constructor (){} }Class W:r{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2715))

    def test_2716(self):
        input = '''Class N{JH3(A,AMLd_:Array [Float ,0B111101];_:___){} }Class __:K{$_(){Return ;}Val Dcb,$m:Array [Array [Array [Array [Boolean ,06],01],01_4],0x6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2716))

    def test_2717(self):
        input = '''Class _{Val $m:String ;}Class _:W1{Val $_2:Array [Array [Array [Array [Array [Float ,0X9],0B1],0xE],4],95];}Class _n_:M98{_(cu_:Array [Array [Array [Array [Int ,03_7],95],0B11100],064];__W:Array [String ,8483];s93_5,q72,c:Array [Int ,0x2]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2717))

    def test_2718(self):
        input = '''Class __:WZ{Constructor (__nD_1__,Xw_:Array [Int ,0b101000]){New Sj()._4().Q()._H();} }Class _:_8__{}Class n{Var _:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2718))

    def test_2719(self):
        input = '''Class K:c{Constructor (){} }Class _p_:__{$Xu(K_3_:Array [Array [Float ,0x14],30];K__:Array [Array [Array [Array [Array [Array [Array [Boolean ,0XA_7E_20],07],7],74],0b1000010],0b1],0B101000];_:Array [Array [Array [Array [Float ,30],05],072],0B1];s_,vA:F){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2719))

    def test_2720(self):
        input = '''Class _7_{$1(y_:Float ){} }Class _:_{$_(){} }Class IS{}Class _:_{}Class _{Val $Yp,$X5s_,N367_:Int ;}Class _LT_L7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2720))

    def test_2721(self):
        input = '''Class _:___v_0{Constructor (_7c_:Array [Array [Boolean ,0b1000],0x887_0];w_qw,_t0,p1V,_:Array [Array [Array [Array [Int ,41],03],41],01];_8__0,_,_13:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2721))

    def test_2722(self):
        input = '''Class F__:w7_{Destructor (){} }Class _4{$__(D,_68:Boolean ;_0,_,_:i_Q){Continue ;}Var __:Array [Float ,6];Destructor (){Return ;{Break ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2722))

    def test_2723(self):
        input = '''Class _680_:_{Constructor (){}_m(J:Boolean ;_1Sd:String ;_:Float ){}j(___1,_,F,pE2:Int ;v,V:_){ {Continue ;}Return ;} }Class _z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2723))

    def test_2724(self):
        input = '''Class _{p(Z:Array [Array [String ,8],0x4];_s,_,_Fi_W3,Xb7,_,_J:Z;s_lG:Array [Array [Array [Float ,33],0B10101],0XF]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2724))

    def test_2725(self):
        input = '''Class r:j{_07(G__,_,e0,_84l__,_:Array [Array [String ,73],73];m,aWQ:Float ;_3__,__892,_,F8:Array [Boolean ,1_10]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2725))

    def test_2726(self):
        input = '''Class Qkv__{Destructor (){}m(_:Array [Array [Array [Array [Array [Array [Int ,5_566_9],0XF_7],0X17],4_2_522_24],04415_5],0xA_9];_8:Float ;_:Boolean ;_1k:Array [String ,64];__,GP3,x_:Array [Array [Array [Array [Array [String ,02],0XFB_F],06_4],0x39],0135]){}$6(L:Float ){}$x3(){} }Class ____:_{}Class _{Var $2,$qm:__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2726))

    def test_2727(self):
        input = '''Class _:O{$_0Q_(_X:String ;_4:__9;_,_:Int ;g:__;O:_){ {} }}Class D{}Class C{Destructor (){_::$p44_();}Constructor (){}B(){}$I0(_:Int ;Nu7R:Int ;____5,_,_N,Z735:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2727))

    def test_2728(self):
        input = '''Class __T:_{Constructor (_2,_x_E,D82,_:Array [Int ,87]){}Constructor (__LJ:String ;_j:__i6){}Constructor (Z,Z,_:Array [String ,0X44];i:String ){Val h:Float ;}Destructor (){} }Class _m5_8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2728))

    def test_2729(self):
        input = '''Class _8{Constructor (V_:Array [Array [Array [Array [Array [String ,67],9_38],0B1],0B1011111],0133];_:q8Mk){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2729))

    def test_2730(self):
        input = '''Class _y79:_iO_{Destructor (){} }Class Ax2:b{Val $_:Array [Array [Array [Array [Array [Array [Array [Int ,23],23],0b1],03],0B1_0],01],6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2730))

    def test_2731(self):
        input = '''Class P:_{Constructor (){}Destructor (){} }Class pR:M{}Class C{}Class b0:S{}Class _0{Val $_o,k,_,a586:Array [Array [Boolean ,0xC],63];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2731))

    def test_2732(self):
        input = '''Class _{Val s:_6B;}Class F_9{}Class x:X28_{Val $q,_,$52,$D:Float ;o37(_:p;a_0_5:Int ;y6:_;J,_,_,E,W__,_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2732))

    def test_2733(self):
        input = '''Class _:u{}Class D_L8__:_2F{Destructor (){ {}{}{}Break ;}Var $7,$n:Array [Array [Array [Array [Array [Int ,0x5],05702],0b1010101],0X63],015];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2733))

    def test_2734(self):
        input = '''Class yh8_:z{Constructor (){} }Class _:_7_F{}Class _:z{Destructor (){Break ;Break ;} }Class _:Y94P7x{}Class _4:w_{Val _:Array [Float ,0xE];Var $6_Q,o6_:Boolean ;Var $_,__x_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2734))

    def test_2735(self):
        input = '''Class R:mL4A{Var $3f:B;}Class _:_{Var _84:Array [Array [Int ,36],36];}Class _:__{}Class A:I9{Constructor (W1c:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2735))

    def test_2736(self):
        input = '''Class __5rZ_:_6{v3(_3_,_9__O:Boolean ;_41:Array [Float ,0X6];P_4_5:_4){} }Class _f:q{Val $Di,$_z:Array [Int ,0b101];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2736))

    def test_2737(self):
        input = '''Class vR__{Destructor (){} }Class ____v_{}Class _{Var r_:Array [String ,84];$5(__:Boolean ){}_(w,Q773V_,y,_,__O:String ){ {} }}Class _:_N{Constructor (jw,_:Boolean ;y:OFN){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2737))

    def test_2738(self):
        input = '''Class P_:_{$_2(){Val __09,rer:Float ;}Var $b_,V2,$3_,$_7_:D;}Class J_:L__5{}Class _:_{}Class K{}Class l19:_3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2738))

    def test_2739(self):
        input = '''Class J_{Var ru:Int =--_3._()._7.F;Var _4,$_:GB_;}Class w9T{}Class N7:h{Val $_qc:_;Constructor (){}Var _7:_;Var $_H:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2739))

    def test_2740(self):
        input = '''Class gR3:Q{Var $_6_:Array [Array [Array [String ,4],055],0X3];Constructor (s:Array [Array [Float ,80],0B1_0];_:b1){} }Class _:X{}Class C57{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2740))

    def test_2741(self):
        input = '''Class _Q:o{Var eE,$_T,e,S:NJ_;YQ(){} }Class J{Destructor (){}Destructor (){} }Class __v{Destructor (){Var _:_;{} }}Class V:i{Constructor (_:Array [Boolean ,9]){}Val _,b:_O;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2741))

    def test_2742(self):
        input = '''Class _9z{Val $Q:Array [Array [Float ,18_8],9];Constructor (){} }Class _{Constructor (_:__2__4){}Val $qt1,$5,_c,$t,$_:Array [Int ,05];Destructor (){} }Class x___B03f4G__{Destructor (){} }Class ___:_J__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2742))

    def test_2743(self):
        input = '''Class __{_(_1W_0_J:Array [Array [Boolean ,0x5F],0x2];y_:Array [Array [Boolean ,53332],8];_9,C0_,_:Float ;__,W:_;_,pU,__g,Y,_7q_,n,_,u_,_D,_b__M___970,xY_,_,_5J:Array [Array [Boolean ,0x1_8],0X6]){0.651._().dc_()._().M0V().L();_::$o8();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2743))

    def test_2744(self):
        input = '''Class __{Constructor (){} }Class _:A{$_(_:A;a:_4;iy_,_:Int ;p__1,X:Array [Array [Array [String ,0XDB],0b1],0b1];__3:l_h25_kl){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2744))

    def test_2745(self):
        input = '''Class __86a{Constructor (__,_,_IhI:Array [Boolean ,02_5_5]){Continue ;}_(S_,_1985:_;_3:Boolean ;_,_93:c7;TW:Array [String ,06];B1,d:_;q8,_0:Boolean ;_c,_:Array [Float ,0b100011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2745))

    def test_2746(self):
        input = '''Class C{Constructor (_t:Int ;_:_;ge3,q7_N_7_,__6,_G:RW;__,NL_:N){}Destructor (){} }Class S{Val $e,B2V_:Array [Array [Array [Array [Array [String ,61],61],0X8],0120],4];$_(D:String ){}$184D3(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2746))

    def test_2747(self):
        input = '''Class _:d_9{}Class a:_7{Destructor (){} }Class _2:__Q4_79{}Class U__d{Var $_:Array [Array [Boolean ,03_4],022];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2747))

    def test_2748(self):
        input = '''Class gO7_:B{Var $9__,S,$9,p,$_W:Array [Array [Array [Int ,0X73],32],02_2_0];F(_,Y,_7,b3,_i_7:Array [Array [String ,0xE],0b1]){}Var $_8:C;}Class _95{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2748))

    def test_2749(self):
        input = '''Class D:_6{}Class Y:ar{}Class __Y5dl_{Val FXZ,F5,q,_1,_:_;Var __:Float ;$_(_:Array [Boolean ,0b1100011];bI6y,__:Array [Array [Int ,0X37],0XCBD_8];_:Array [Array [String ,0B1_01],0b1_0];_:Float ){}Val v2,$_,_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2749))

    def test_2750(self):
        input = '''Class i_{}Class V{}Class _lD{Var $_:Array [Array [Array [Array [Float ,0XA_2],0b1],0B1],0b1011010];Constructor (){}Constructor (k,V:B;_,x:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2750))

    def test_2751(self):
        input = '''Class _{Var $12,__:Float ;Var $k,H:Array [String ,0B1_0];}Class a7f55{}Class _:_H{}Class p:_PY{Destructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2751))

    def test_2752(self):
        input = '''Class W_J_:v_{Constructor (_3_A,mjF57_61_,__C3sx:Array [Array [Array [Array [Array [String ,47],6_003_6],0B1000100],4_9],0121];hj_,H_:M){Break ;{Return ;Break ;} }Constructor (C2_9_,_H,_:Array [Array [Array [Array [Array [String ,0b11],0B1000100],0XA],47],0XC];B_R,g:l_M){Break ;} }Class Z_{}Class _:_{Val $7:Y;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2752))

    def test_2753(self):
        input = '''Class _{Val _,E,$_:X;}Class z{Constructor (m:Array [Array [String ,3],06_0]){} }Class r5Y:_5{}Class _{}Class q6_3{}Class _6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2753))

    def test_2754(self):
        input = '''Class _37:f{Constructor (M,r7,p_:Float ;Y9,xc_2,__:s;T,d:A;_7s,m2:Array [Array [Boolean ,64],0X22]){} }Class r:fN{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2754))

    def test_2755(self):
        input = '''Class f2_:i{z(c,__:Array [Array [Array [Array [Boolean ,47],0134],0XD_2_9_6],0B11_1];T:w;m3s,R:___2_8nZ){} }Class O{Var $_800:Array [Boolean ,47];}Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2755))

    def test_2756(self):
        input = '''Class _0:__3_{Destructor (){} }Class _V:X{Destructor (){} }Class __:yQ{$_(_:Array [String ,0b1_1_0];_8NO2_,_,N:Boolean ){Return ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2756))

    def test_2757(self):
        input = '''Class Y{}Class o{}Class J:U{Val m,$0x_1_,_K:Array [Array [Array [Array [Int ,0b100000],073],0b1_0],0x4];Destructor (){}Constructor (){}_(){} }Class _4:t{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2757))

    def test_2758(self):
        input = '''Class u8:O{}Class __{}Class S_{Val _:_y;o(){Return ;Var _:Float ;}Constructor (){}H(l,ac:Array [String ,0B1_1];o____,_,E:_36X9_){Return ;} }Class T_6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2758))

    def test_2759(self):
        input = '''Class N5:U{}Class __Z9:_S{Val g,$33,$_:Boolean ;Val $0_,B_l,$X:Array [Array [Array [Boolean ,4_37_3_4],2],014];_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2759))

    def test_2760(self):
        input = '''Class _J:_7__{$4(_,_3:z9__3;p:Array [Boolean ,0XF_59];_:_;_:z;V:Array [Array [String ,9],0b111010];sd:Array [Array [String ,0X28],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2760))

    def test_2761(self):
        input = '''Class Q8{Var $__3OUH_,_,$_7:Boolean ;}Class _:Af{}Class F:B{Constructor (){Continue ;}$2(_6SW:Boolean ){} }Class _{Val $_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2761))

    def test_2762(self):
        input = '''Class _{}Class _{}Class _{_A(){}Var $GM9:Array [String ,0X57];Constructor (_c,_:N3;d,t:Int ){}Gl(_:k){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2762))

    def test_2763(self):
        input = '''Class _M:__287_{}Class _{}Class _2:_{Constructor (){Continue ;}Var E,_A_W:Array [Array [Array [Int ,937],021],01_1];Constructor (){Continue ;Break ;} }Class _i:_{Constructor (rx_t:Array [String ,7];f:gI){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2763))

    def test_2764(self):
        input = '''Class m:Xg_{}Class _9EIY9:_{}Class _{Constructor (){Return ;Val i:Array [Array [Array [Boolean ,02_0],0xB],021_7];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2764))

    def test_2765(self):
        input = '''Class _g_H{Constructor (){}Constructor (){}Var $E2_:Boolean ;Constructor (){} }Class q{Destructor (){} }Class X:eW6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2765))

    def test_2766(self):
        input = '''Class _{$J4(t:X9C;_gu:Boolean ;B,v:Float ){}Destructor (){}Val $_,$D:Array [String ,0X2D];}Class E1_{}Class _x_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2766))

    def test_2767(self):
        input = '''Class _048:t{}Class _{Constructor (q2:Boolean ;u62_:Array [Array [Array [Boolean ,91_0],0X17],2]){}Destructor (){}Var $62:_;Val $_,_3,$_14,j0_:q_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2767))

    def test_2768(self):
        input = '''Class n:D_W{Val m:Int ;}Class _y:_{C(P,Af,__,_:A;HE,_,_:Array [Boolean ,0113];_t:_6;U,u4_,_:Boolean ;_1zew,O_7:Array [Float ,0X42];GoQO:r;f_:_8){}$7(){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2768))

    def test_2769(self):
        input = '''Class _X_:a{Destructor (){}$_(M:Array [Float ,0B101110]){}$UN_(){}$_(J__:Float ;g:_;__6,___,N,s6:Array [String ,48]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2769))

    def test_2770(self):
        input = '''Class _:Gp_{Var d_8__j_:Boolean ;Q(){}Destructor (){Continue ;}Destructor (){Val _:Array [Array [Int ,0X4],5];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2770))

    def test_2771(self):
        input = '''Class _____{Constructor (_d0,s_b:Array [Array [Int ,0x2],3]){} }Class XR4{}Class __{Constructor (Z:Float ){__::$V_b9_();} }Class zi:_{}Class _:_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2771))

    def test_2772(self):
        input = '''Class q9:_{Constructor (_:Array [Array [Boolean ,0b11],03_0];hz_,__,_fh:Array [Array [Array [Array [Int ,0B1],0B1_1],0x2E],0X4B]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2772))

    def test_2773(self):
        input = '''Class s:_W{}Class _:Rj_{Constructor (s_,_,N,g:Array [Boolean ,0b101000]){} }Class j_:gq{$6f4_(){}x(T_,__5,__:w__mi;u6_a2:Array [Array [Array [Array [Float ,36],02],0B1001101],0x8];j1q0:String ;_,__,_,_Z,_,_:Array [Boolean ,0B1001101];c:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2773))

    def test_2774(self):
        input = '''Class w___6:w{Val $m,s8I2p___,_X3_,$p__:_O;}Class _5:_L_{e(_6,J_9_:Array [String ,0B10];_,_:Array [Array [Array [Boolean ,0xEE],041],0x17];_,A:Array [Boolean ,0B1];__,O:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2774))

    def test_2775(self):
        input = '''Class p:__l{Constructor (_z,A,D3:Array [Array [Array [Array [Array [Array [String ,0xB],0131],0b11_0],0XC_2],335],035];A:u;x:A44){}Var $5e,s7,__rKo:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2775))

    def test_2776(self):
        input = '''Class _:_4404E{Val _,$_1,_,U4K,_C,_6__,C,$__:Int ;Constructor (_,N:Array [Array [String ,0X9],95]){}Constructor (){Break ;} }Class _:_0_Q{Destructor (){}Val il0,_4_V4:_0;Var k9:Float ;Var $5:Int ;}Class s{}Class O{Destructor (){_b_u::$U75X7iL_();} }Class ok58X{}Class _:B{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2776))

    def test_2777(self):
        input = '''Class _U:c_{Destructor (){}Constructor (){} }Class _w{}Class S2:r{}Class b:_{Val _,$_o6__4,_k:Array [Array [Array [Float ,0B1010010],021],0B1010010];}Class _:i_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2777))

    def test_2778(self):
        input = '''Class o_:_D{Constructor (_,O:fql_;_:Array [Array [Array [Boolean ,30],0x5C],0XA_56];fc,_,K:Array [Int ,1]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2778))

    def test_2779(self):
        input = '''Class _:_k_{}Class _f:v_56e2XXQ_{Val $6:Array [Array [Int ,0xE_C],71];Val $_Q_61:Array [Array [String ,0XE],0x62];}Class _:_{Constructor (_0,_,L4,_:Array [Array [Array [Array [Boolean ,0X3E],0X3E],0B1_0],0141]){}Constructor (){}Destructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2779))

    def test_2780(self):
        input = '''Class _W2{Constructor (m,_t_,_,_62t:Array [Float ,0xD];I6Tn7x1_m:E3U___;_:Boolean ;__6,V,_8:Array [Array [Array [Float ,05],24_60],0x1]){Break ;}_(W_9:Array [Array [Array [String ,81],0XC50],05];m:String ){Break ;Val __:Boolean ;} }Class _7___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2780))

    def test_2781(self):
        input = '''Class _1:_Y{Val $__,$8,$ss,$_82:Array [Array [Array [Array [Array [Array [Array [Float ,077],0x5A],0x5A],0B1],4],3],0B1];}Class U40{Destructor (){} }Class R_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2781))

    def test_2782(self):
        input = '''Class Z7{Constructor (_:Array [Array [Array [Int ,0b111011],0X5E],0117];eu:Array [Int ,07];_2,_6_:d;N3:Boolean ){Return ;} }Class r:_{Var _j:_5_r;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2782))

    def test_2783(self):
        input = '''Class d{Destructor (){} }Class _{Destructor (){}Val $M:Array [String ,04_6];Destructor (){ {} }}Class U:_7{}Class I:_{Var i,_:Boolean ;Var t,$T:Array [Array [Array [Int ,06],01],5];Val $y,wv:Array [Array [Boolean ,0B1],0xE];}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2783))

    def test_2784(self):
        input = '''Class _89{}Class _7:_8{Destructor (){} }Class _{Var $wG8:String ;Val P3:Array [Boolean ,0b1001];Constructor (f3:Array [Array [Array [Float ,4],0b1],0X4E]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2784))

    def test_2785(self):
        input = '''Class _{Constructor (_63_,__9,b:String ;w_5,f,_S1,_T:Boolean ;gZ___:_M){}Var $_,_:Array [Array [Array [Array [Array [Array [String ,0B111000],0x28],01],04],0B111000],7];}Class Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2785))

    def test_2786(self):
        input = '''Class _{}Class _:_k_{}Class T:x{}Class O{}Class _:_0_{Destructor (){Break ;}Var F,_X:YA;Destructor (){} }Class sXv7_:h7_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2786))

    def test_2787(self):
        input = '''Class _{Val _2_,$8:Array [Array [Int ,0X11],0XE_A_A];Constructor (u,b_:Array [Float ,03];_e,G7,__K:Boolean ;J9v_,_,_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2787))

    def test_2788(self):
        input = '''Class __{}Class s{}Class _:r__{Val $I__,$6_nN,_c_,j,$_:_;Val $2,$u:Int ;Var $9h_:Array [Array [Int ,0x1E],564_3_8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2788))

    def test_2789(self):
        input = '''Class H:_{}Class L_{}Class _{Constructor (u4,b:Array [Array [Float ,0X2],20];_____R,n:_T4){}Var _69:Array [String ,82];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2789))

    def test_2790(self):
        input = '''Class _6_7:a_7{}Class _{Val B2IY,$_Wn:Bj;$E(){} }Class z{}Class q{Var Zw:Array [Array [String ,0b1_1],7];}Class I_:_2{}Class _{Val __Hq:_63;}Class w__:iiga{Constructor (_:String ;_:Array [Int ,68];_,_3,M6:en;l,n,z,_,_:Float ){} }Class S:_A{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2790))

    def test_2791(self):
        input = '''Class e_g{Val $k,_o,_52,J:_7;Val _W_:Boolean ;}Class _e_t:_{}Class _{Constructor (u,E0:GxE;i,B9__,_83_m62_,t,_:Int ){} }Class __N{}Class o:b_5_{}Class _i:__{Destructor (){}Val _t66_5_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2791))

    def test_2792(self):
        input = '''Class D:_{Destructor (){}Val $_0,_5:Array [Array [Array [Float ,0b1001010],0116],0X38];}Class U{Val $a_:Boolean ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2792))

    def test_2793(self):
        input = '''Class v_F:_{Val kjc,NeS:_;Val FmS:Array [Float ,3];Constructor (s2I,___:_;Ml,____:_U){}Destructor (){} }Class _0_{$_R2k(q:__){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2793))

    def test_2794(self):
        input = '''Class Z_7{Destructor (){} }Class _:_{Destructor (){ {{K__54_6_::$M_();}Null ._._n00._();Continue ;} }Destructor (){Continue ;Continue ;} }Class n{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2794))

    def test_2795(self):
        input = '''Class _:_kM_q{Constructor (q1:String ;_,_:Array [Int ,65];__,_,_,v:__R7;g,_:Array [Array [Float ,0B1110],0b1_0_1_1]){}Var $2L1b:Array [Array [Boolean ,0X3F],0XC_E];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2795))

    def test_2796(self):
        input = '''Class z{Val $r_,k:String ;Destructor (){New _().Fa();} }Class U:b_{Var x_:Int ;}Class _:F{Destructor (){ {} }Var q:Array [Array [Int ,0B1001100],013];Constructor (K:Array [Array [String ,40],0B1001100];_0_,_,_,w,_,j:Array [Boolean ,0XC];_V0:Array [Array [Float ,0B1],40]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2796))

    def test_2797(self):
        input = '''Class q_:i{$_(x:Array [Array [Array [Float ,9],0XDD],03];_F,__,_,H,_i:f;_,n5g2:_13){}Var $9,___,_,_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2797))

    def test_2798(self):
        input = '''Class __:_2{Constructor (_43:Array [Float ,0B1];U5_,H95,_:Int ;__3,M1,N,q:U;__g:Float ){}Val R:Array [Int ,0b1_1_10_0];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2798))

    def test_2799(self):
        input = '''Class _{}Class _{Constructor (){}Constructor (S:P_H){Break ;}Constructor (o:__KN;_0:H){} }Class _{}Class __:J727{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2799))

    def test_2800(self):
        input = '''Class _{Destructor (){}$_(o,_:Array [Array [Boolean ,0X2F],0x8];__30,_,t,_c_,c_,_:Float ){}Var $AD,$__v,$0,$_2M,$_,z:O;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2800))

    def test_2801(self):
        input = '''Class Z:M1x{}Class Il{}Class j_K2:X_{}Class k83:_{}Class _:X{}Class zg0_91:_r{Val L,T_:Int ;}Class JN:b{}Class __I_:_{Constructor (){} }Class _{Var $5cq,$__:RZ_;Var _:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2801))

    def test_2802(self):
        input = '''Class u{}Class _:U{Val b_i:String ;Destructor (){} }Class z7:P{Constructor (_x:_T_;Hr:Array [Array [Array [Array [Boolean ,12],015],0X36],02];_:Array [String ,12]){Break ;}Val $__s:_H;Constructor (){} }Class R:r{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2802))

    def test_2803(self):
        input = '''Class _34_:_{Constructor (_:Array [Array [Array [Float ,2_7_8_7],86],0B1];d:Array [Array [Boolean ,0b1_11],0X7_9];P7_0k6:K_;o,_:Array [Array [Array [Array [Int ,0b10_0],023],0XF8],0xB];___:H){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2803))

    def test_2804(self):
        input = '''Class _{Val Q7L,_57_,s55__:_2U_;Constructor (vR_:Boolean ;_:f;C,_,_:Array [Boolean ,2];w:Array [Int ,06];_,_5,_:Boolean ;G_,_z:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2804))

    def test_2805(self):
        input = '''Class _{Destructor (){} }Class _{}Class k{}Class _:t{}Class Y{Var $8:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0b10011],0b10011],0457],075],0B1],83],0B1000110],83];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2805))

    def test_2806(self):
        input = '''Class G:w_{Var $_:Array [Array [Array [Array [Int ,8],0XD_6],55],0B111_11_0];}Class N:_{}Class _{Var _,C,$_:Array [Int ,0x19];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2806))

    def test_2807(self):
        input = '''Class q:_{}Class _Oyl9_X8:_V5{Destructor (){}Constructor (_,_:_;f,_:Array [Array [Boolean ,0x566],0B1000100]){}Var _:Array [Float ,0x8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2807))

    def test_2808(self):
        input = '''Class w{Val _1E_:Float ;i(_11i,__,j,__N7I,W__:Int ;_,D,_:g;FI:v;_:String ;b,m_O4_:Array [Float ,0b1]){}Var n:q;}Class r:W{}Class _d__{Val _,$E1Fz_5_3,$c5:_;}Class f_{}Class wD:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2808))

    def test_2809(self):
        input = '''Class X7{$_(_:Float ;F:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,2],0B100011],060],0X54],07_7_3],819],035],0X3_3],0x15],34],035],1],97];_:Array [Int ,97]){} }Class Q{}Class r4:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2809))

    def test_2810(self):
        input = '''Class _{Constructor (Y,fW_,_:String ;etX24Y_:Array [Array [Array [Array [Array [Array [Array [Float ,0X49],71],07],0x18],0B11],71],0B1011111]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2810))

    def test_2811(self):
        input = '''Class W_6q3{}Class _{Constructor (_z6:String ;e5,d9_,c986:Wv;a_:Array [Array [Array [Array [String ,17],024],1_834],0B1]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2811))

    def test_2812(self):
        input = '''Class aV:_{Constructor (){Break ;}Var $5j:Float ;}Class _:o{Var I,ut:a;}Class _X____x:J{}Class ___:_JO_t{Var $E_:Array [Array [Array [Boolean ,0141],0141],0141];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2812))

    def test_2813(self):
        input = '''Class U:s{Destructor (){} }Class D:_9{}Class ckx:_{}Class A_:a{}Class C:_d_{}Class g0{}Class j_O{}Class s_1L_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2813))

    def test_2814(self):
        input = '''Class w__{Constructor (_XA:Array [Float ,0b1100]){Var _:Array [Array [Array [Boolean ,8],022],5_551_6];Return ;} }Class _{}Class _6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2814))

    def test_2815(self):
        input = '''Class C6__:YB{Val $_9_:Float ;$_(){}Constructor (_,MK1,E7:_29_;_,_,E__3,i2_:h441){Var _m,wp1A:_;{}Continue ;} }Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2815))

    def test_2816(self):
        input = '''Class HR:_{Constructor (_d82,X,U:J6;g9t_:Array [Array [Array [Array [Array [Boolean ,0X60],02],1],0xE],0b10111];_,GIlb,_,_C4x__U:Float ){} }Class w{}Class g{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2816))

    def test_2817(self):
        input = '''Class M81:__653_{$_z_(_6VF,OVl2:Array [Array [Array [Float ,04_7],06],64];SD:String ;__:Array [Boolean ,0xF_7]){}Var _5,$j,_,$8,$mq:Float ;}Class _:_7B9{Var $1:Float ;$A(h,m2_7Dia:_m;_:Array [Float ,4]){}Val $8_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2817))

    def test_2818(self):
        input = '''Class g38:i{Destructor (){}Val _,$U3:Int ;}Class s{}Class A:_{}Class _:__{}Class _k:n{}Class _:_{Destructor (){} }Class sM_e:E__HZ_t{}Class I_2H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2818))

    def test_2819(self):
        input = '''Class _v:_qN{Constructor (_29:Array [Array [Int ,02],0B10_0];if,__8_3_,ou_:Boolean ;T,_2_g:s;__,__,oy_:Array [String ,0b111100];W6,_b:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2819))

    def test_2820(self):
        input = '''Class _l{Destructor (){}Val $_,l_7L,$N,$_z,$_MD6tk,$_0504,AD_,$_,$z,_5:Array [Array [Array [Array [Boolean ,3],47],0B11101],0367];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2820))

    def test_2821(self):
        input = '''Class e:V_{}Class EK0{Destructor (){Break ;} }Class ___:_3{$t(_,T9:Array [Array [Array [Boolean ,46],1_4],46];Ie,_4S__:Float ;__mx_:_u){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2821))

    def test_2822(self):
        input = '''Class W:_{}Class W7c0pQ{}Class f:w4{Destructor (){}Var $1:Array [Array [Array [Int ,8],0B1000001],0b111011];$_9V6(_:Int ;Bl_,_00sZ_b,g,N:String ;B:v;_a8,t6__:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2822))

    def test_2823(self):
        input = '''Class K_{}Class C{Destructor (){} }Class _1:Y{}Class u{_(_:String ;zSo:_){}$5(i,e2:Array [Int ,0100];E,T_189:Array [Float ,0XF_4]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2823))

    def test_2824(self):
        input = '''Class _:mO{Constructor (R,q,_:Array [Float ,0B1011010]){} }Class _{Constructor (m_:Array [String ,01];_,_,Tm_0:Array [Array [Array [Float ,9],0X5B],0X5B];__,LG:Int ){}Var $O:d;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2824))

    def test_2825(self):
        input = '''Class Y:_{Destructor (){} }Class _{Var _:__;}Class _{Var _M:y;Constructor (_0_,E:Array [Array [Int ,75],0X38];Bx,_a,q8:h_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2825))

    def test_2826(self):
        input = '''Class i_5__{Val $_4,_:Array [Array [Array [Array [Array [Array [Array [Float ,0X61],0b111110],030],0X61],0x55],992_129_958],01];}Class d{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2826))

    def test_2827(self):
        input = '''Class _8:_{}Class V1:_{}Class _:_{Val __2c,_:Array [Array [Boolean ,0X43],0b10_0];Constructor (I:String ){Break ;} }Class q9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2827))

    def test_2828(self):
        input = '''Class _{Constructor (_,u:___;j,J:Float ){}Constructor (){Var A:Array [Array [Boolean ,0X3_0_6_10_1],02];}Val _,$6___:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2828))

    def test_2829(self):
        input = '''Class b3:___{Constructor (__2g:Array [Array [String ,0b1011100],0b10_1]){}Var A,$_:Float ;Destructor (){}Val b_6:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2829))

    def test_2830(self):
        input = '''Class _T:_{Constructor (_L:Array [Array [Boolean ,051],051]){}$__(){_4::$_();} }Class ___U860wt50{Var $___M:Array [Array [Boolean ,06],0X57];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2830))

    def test_2831(self):
        input = '''Class u{Val $_8LY882,_,k:Array [Array [Array [Array [String ,0B1_0_0],0b10100],7_8_45],0b1];Destructor (){_0::$K();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2831))

    def test_2832(self):
        input = '''Class _:_{}Class _r:M{Destructor (){Var __4,o_:Array [Array [Array [String ,0133],0X1],050_1_0];x8::$5Z();}Var b,B:Array [Array [Boolean ,0133],67];}Class d5o:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2832))

    def test_2833(self):
        input = '''Class m__s{}Class G4{}Class z:tw_{}Class C_:U{}Class p__{Var n:Boolean ;_S(JB,___,W,w,__:Boolean ){}Constructor (){}Constructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2833))

    def test_2834(self):
        input = '''Class P52:_{}Class PE9:_{Var _,$3:T;_(){ {Var __:_;Continue ;} }Constructor (){ {} }}Class HtZm{}Class _2{}Class _:I{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2834))

    def test_2835(self):
        input = '''Class Cn{}Class _{Constructor (v3,O_:_;Q:Qy){Continue ;{}Break ;}Val $ll:Array [Array [Boolean ,04_6],0B1];Destructor (){}$0(){} }Class Y:F_S7j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2835))

    def test_2836(self):
        input = '''Class _{}Class t{}Class __{Constructor (){} }Class _{}Class _{}Class a2:g{$_19W_7_(_,a7:Int ;__,j31,H:Boolean ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2836))

    def test_2837(self):
        input = '''Class x__5ym__7_{_(){}$____q_s(__:Array [Array [Float ,0124],13];_V:String ;_,_g,D,_,_,_p:I__S;p,__,r9:k;_:Float ){} }Class B:N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2837))

    def test_2838(self):
        input = '''Class K{$C3_(_:Array [Boolean ,064]){Continue ;}nl4(_4_y_:_M;_G,k__,__,al__,wz:Array [Array [Array [Int ,1],0x3A],0B1100]){} }Class w24H_{}Class u:J{Val qGRr,$2,_,$8_,_R,MES,$7,d:_0;_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2838))

    def test_2839(self):
        input = '''Class a{}Class _V:wq{Destructor (){} }Class _:__{Constructor (zR,M,_:Boolean ){Continue ;} }Class t{Constructor (xo:_92___){ {Return ;} }Destructor (){} }Class _8{}Class _2h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2839))

    def test_2840(self):
        input = '''Class z__{}Class _:_{}Class _{Val _7_,eO_,$G:Float ;}Class Wo:_{Val _,_:Array [Int ,0b110011];Val $_:X5_;}Class P_:j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2840))

    def test_2841(self):
        input = '''Class k_Z_:v{Val $___xy1_o8:Array [Array [Array [Array [Array [Array [Int ,0B1],07_3_0],0b111010],02221],14_6_7_74_1],0X31];Destructor (){} }Class v54:_u59{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2841))

    def test_2842(self):
        input = '''Class ti:_{Destructor (){Return ;Break ;} }Class L__{Val Av:Array [Array [Array [Array [Boolean ,0X1B],0X8],7],0xB];$p__(_:Int ){} }Class r3E293{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2842))

    def test_2843(self):
        input = '''Class O{Val $9C__:Array [Int ,9];Constructor (_:a;i_F,_u:Array [Boolean ,0xF];_p_:Array [Int ,02]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2843))

    def test_2844(self):
        input = '''Class K_:Jv_{}Class i1:__i_V{Constructor (_,_s_:Array [Array [String ,022],0X4A];x:U;__a:Boolean ;u,n,___:Array [String ,0xCA]){Break ;Break ;}Val _:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2844))

    def test_2845(self):
        input = '''Class S_{}Class I{Destructor (){Continue ;} }Class _6_{X(_:v_i;_:_;__5,Tl,P,_,lAO_,n0wdD8_6__:String ;m__7,_W:Array [Int ,022]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2845))

    def test_2846(self):
        input = '''Class M_W_O7:k{Val $_l,$r:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0b1100],0x8],0XE],074],0X7],0x8],0B111111],0XA],0B111111],074],27],4_7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2846))

    def test_2847(self):
        input = '''Class __D:R{Var _463,$_:Array [Array [String ,0x37],0535];}Class _52:_{Constructor (G,_:Array [Float ,0X1];_:Array [Int ,0b10011]){}_(){}Constructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2847))

    def test_2848(self):
        input = '''Class Q:_4R{Val _:Boolean ;}Class _{}Class _{_(r4_:Array [Array [Array [Int ,27],02],0b11011];o,E_:_;l_2:Array [String ,7_9]){}Val $H:Array [Boolean ,054];}Class Go_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2848))

    def test_2849(self):
        input = '''Class _7__{Constructor (N__:Array [Float ,0x61]){}L(){Continue ;Break ;}Val __Q1_:Array [Array [Array [Array [String ,7],0122],77],77];}Class __{___(I_:String ;O_f4L1:_){}$_k0(){}$S_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2849))

    def test_2850(self):
        input = '''Class r:__2__{z_G23(_:Float ;f,x,_:OX_;_9,_G,w:Array [Float ,0x4E]){}Val __NG_:Array [Boolean ,0B1010010];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2850))

    def test_2851(self):
        input = '''Class ___b:_{Val $4,$k4,_q_c_:Array [Float ,0b1];_(bU_3:String ){}Var $p4,$_:Array [Array [Array [String ,064],024],29];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2851))

    def test_2852(self):
        input = '''Class k2:D{}Class __:__R_{Val $3_,$_,X:Array [Array [Int ,0X2],053];Val _:Array [Float ,02_3];}Class _70{Constructor (_,A:Array [String ,28];_,__z,_:Array [Array [Boolean ,04_5],0x45];_M__2,S,e7_1,A2_8:Array [Boolean ,0X4D]){}Val a,$WAB4,$5_8:Array [Array [Int ,28],0B111];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2852))

    def test_2853(self):
        input = '''Class _{v(R:Array [Array [Array [String ,0xE],0b11111],0B110010];_,__:Int ;Z:Int ;_:Array [Array [Array [Array [Array [Int ,0b11111],36],0xE],0b11111],0B1];z,c5,j:Int ){}Var $79,$__,$_:Float ;Val ___V9W5_:Array [Int ,34];Val d3QN0F_,__,c6:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2853))

    def test_2854(self):
        input = '''Class __{}Class __w:__{Var B8c:Array [Array [Array [String ,0141],0141],1_6];Var fS:Array [Array [Array [Array [Array [String ,85],87],0b101110],0x5D],01];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2854))

    def test_2855(self):
        input = '''Class _0d:_Svc{Var $0r,$t_6,c_,$7,s:Array [Array [Array [String ,7],0X56],0X88_0_B];Val _:Array [Boolean ,60_8_9];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2855))

    def test_2856(self):
        input = '''Class ow_{a_(K,_,_W:_;y_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,07],0x6],061],061],0X7],0B11_110],0B1],061],5_5];G,R__:_3_){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2856))

    def test_2857(self):
        input = '''Class U_:_C{Var _6__3_:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,47],013],0XC],013],0x9],0X6],0X5D],5_8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2857))

    def test_2858(self):
        input = '''Class _4{}Class ___2_:K{}Class T5:E_Nx5_{}Class I49:Hm_{Y9L_(_:_20){} }Class b{Var $1,__Z2_6:Boolean ;Constructor (){Break ;}Val q:e;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2858))

    def test_2859(self):
        input = '''Class A{Var $9B8,$N0:Array [String ,046];Var $7k,c:wN_;}Class Z_90:o1{Var __,_:__j__;$r_(i_z:Array [Array [Float ,0b1000100],0xC]){_::$8();Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2859))

    def test_2860(self):
        input = '''Class _:K{Var _,NN_:Int ;}Class _{Val _9:Array [Array [Float ,0b11],074];}Class Z_2a__{}Class _:TH{i(S_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2860))

    def test_2861(self):
        input = '''Class _{}Class n3{}Class __{}Class _7L__O_lI{Var _:__q;Constructor (e_35,_,_2_,_:Array [Int ,0B1000_0_1];_,R:Array [String ,0x54];_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2861))

    def test_2862(self):
        input = '''Class _{Destructor (){}Constructor (_,_:Boolean ;_:Array [Array [Array [Float ,02],0B1100],0136];a,n:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0136],3],5],5],5],0X62_B_B6_3E],0B1],0136];x,_:String ){}Constructor (){} }Class BM{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2862))

    def test_2863(self):
        input = '''Class D7:_1a{LF(_:Float ;h_:Array [Array [Array [Float ,0B1_00_1],0B1],0X1E];_,__:Array [Float ,9];_j,_:Array [Int ,01];x:String ){ {}Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2863))

    def test_2864(self):
        input = '''Class _:_R{Val N:Int ;c77__12(){}T_(){}Constructor (){} }Class _{}Class j_{}Class l4{Var wL:Array [Array [String ,35],0XC_B_A_0A];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2864))

    def test_2865(self):
        input = '''Class Z_4Oj_:_L3{Destructor (){}Destructor (){ {Continue ;_::$d();} }Constructor (f:z;I:Float ;__gJ:Array [Array [Boolean ,0X10],0b1_0_0_1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2865))

    def test_2866(self):
        input = '''Class T:vN{Var $8,$Y7_,$l:Array [Int ,0b1100000];Constructor (yA,_,_0,_:String ;Ww,_0_0,T:String ;z_:Array [Float ,0x3_4]){Continue ;}$oa(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2866))

    def test_2867(self):
        input = '''Class b_:Q{Constructor (__0,_:_){Return ;Val T2:String ;}Val $_R3s:rfd;Val V_18_,S,$b:Array [Float ,05];}Class zT{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2867))

    def test_2868(self):
        input = '''Class _38m{Var X_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0b10_1_0],0x64],0B1100001],0143],1],6],0143],0143];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2868))

    def test_2869(self):
        input = '''Class _1KD0_6{}Class _{}Class _{}Class _7o{Val N:Array [Array [String ,0b101101],0X4D_5_E];$_(){}Destructor (){}Constructor (Q,p:Array [Boolean ,0B1000010];F2_S,yq:String ){}Var $_0:Float ;Var $0_,_C_,$_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2869))

    def test_2870(self):
        input = '''Class Ch:_E{Destructor (){Return ;} }Class B{Var $O:Array [Array [Array [Array [Array [Array [Boolean ,06_2],0b10],0X1F],0B1101],07_4_7],0X1F];Val _b_05m1,$V4x___8_:Array [Int ,02];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2870))

    def test_2871(self):
        input = '''Class ___N:_{}Class v:m81{Val $8z_,$L,_,$9:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0xB8],0X9],02_1_14],0X6],0b1010111],0XC_F1_FD],10],0B111010];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2871))

    def test_2872(self):
        input = '''Class t1G{Constructor (_:Array [Array [Array [Array [Float ,074],074],07],49];m,O:Array [Array [Float ,0X3B_A],0X9C_7C2]){} }Class _J{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2872))

    def test_2873(self):
        input = '''Class OC:_{AH_P(){ {}Continue ;}$1(){}$468(){} }Class _{A_n487(____:Array [String ,0x31]){} }Class _{}Class _5:_{}Class _{}Class uT0:OV_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2873))

    def test_2874(self):
        input = '''Class _:Y6_{Constructor (_2v9,O0:Array [Array [Array [Boolean ,0X29],0b1],0x58];L7_,t,n:Boolean ;W,Bn8J2:Array [Array [String ,047_45],0x58];LD:Boolean ;__,Z_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2874))

    def test_2875(self):
        input = '''Class B2{}Class _{Var M:k2;Var $6_k_,_:Array [Float ,07];Val _,$a,$D:Float ;Constructor (Il:String ;_4m9_y:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2875))

    def test_2876(self):
        input = '''Class _Z_{c(D:Int ){} }Class ___g4_6:_{}Class __{Destructor (){}$4(__w_,I:_;_,_Z:_;_,_:String ;_B4:Boolean ){Val _,_1_:Array [Array [Int ,0b110111],0X54];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2876))

    def test_2877(self):
        input = '''Class _{}Class _:_{Var _:Array [String ,0xA];Constructor (){Var W:Boolean ;} }Class HS8:K{}Class _E:_4s{Destructor (){} }Class _x:aT{}Class _mZ:_A{}Class _J:_9{_0(_flk5_:G){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2877))

    def test_2878(self):
        input = '''Class __0:_J{_4(){}Constructor (_:C2;_:Int ){} }Class i3:CU_{Constructor (D,_,_:Boolean ;_:A;__:Boolean ){Return ;}Destructor (){}m(Z:Boolean ;N_,CS,R:Array [Boolean ,8];_34:z2;_:Array [Float ,0112];_:Boolean ;w:Array [Float ,8]){} }Class _4_:_{}Class d:d_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2878))

    def test_2879(self):
        input = '''Class _{_o(){ {Continue ;Var _:Boolean ;Continue ;} }Destructor (){m::$B3();Var _:B;} }Class _f:_{}Class N8_:t{}Class X{}Class __{Var $SV92,$7:cU;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2879))

    def test_2880(self):
        input = '''Class _h:U{}Class N_{Val $9,E_6,_,KY_G,U,$S,_M7:Array [Array [String ,0x44],42];Constructor (_vb_B:Array [Array [Array [String ,06_5],051],051];__OJ,_,V:Int ;_7_Vf8K4_:String ){}$__(){Return ;W::$_();} }Class q{Constructor (){ {{} }}__(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2880))

    def test_2881(self):
        input = '''Class __6:_7_{Constructor (_,_z8:Boolean ;_:Array [Array [Array [String ,0XF],0X6],0X5_1]){e::$_R._464();Break ;{} }k(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2881))

    def test_2882(self):
        input = '''Class _:__{}Class _l_W2{}Class v:_9{}Class _:_{Destructor (){ {Var _,g6_:_3Z4__;Return ;Break ;} }}Class G59{}Class __j4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2882))

    def test_2883(self):
        input = '''Class _:_z_{Constructor (_,n,_v,_y,I,K,_1:Array [Array [Array [Array [Float ,74],0B1100010],74],053_1];_:Array [Array [Int ,0XC],04]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2883))

    def test_2884(self):
        input = '''Class _{_(_m4:String ;_L9:Array [Array [Array [Array [Array [Float ,77],0102],0x2],7],0b10110];_:Array [Array [String ,0x631A_9],0X48];__j61:N0;a,_,b,J,_:Array [Array [Array [Boolean ,0X48],0B101011],0x2]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2884))

    def test_2885(self):
        input = '''Class x{Constructor (_:_;k:Int ;_8D,R,_9_,d,_2:C_;P,__7:Int ;W8:String ;Y:Array [Int ,4_1]){} }Class _{}Class q8:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2885))

    def test_2886(self):
        input = '''Class nF5:B_{Var _2,$_5ud,B99:__;Constructor (__,_a,U,t,_5,q,p:Array [Array [Int ,0x3],0B101011];c:Array [Int ,0b10111]){Break ;}Val E,_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2886))

    def test_2887(self):
        input = '''Class h{}Class p{Constructor (_:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0141],04],0B1011011],0b10_01],6],0X2E],0x43],87];_p,_:_;_p,j:Array [Int ,0141];__:_){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2887))

    def test_2888(self):
        input = '''Class _A_{__g8(I4r:u6;s4,g,_TU20a,_oT:_){Val j:Int ;}_fj5_(J:Array [Array [Float ,0B101_1],65];_i:_;_:Int ;_,_2,t8_PH,_:Array [Int ,0X5]){}Var $__:Array [Boolean ,0B1_1_11_0];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2888))

    def test_2889(self):
        input = '''Class _{_(y60_D02k,_694:i;_,_:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1000011],9],0B11_0_1],0x48],0b10101],041],041];EXh,_b:Array [Float ,0x48];_:String ){}Destructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2889))

    def test_2890(self):
        input = '''Class _:d_{Z63_(R1:Z;K1v5,W0,F_R3_,ZOq,__:Array [Array [Float ,0X2C],7];V,F,_,_b,U__:_;N0t,_,_:Array [Int ,0x20];_,_7,U:Boolean ;_,__:Float ;__9ig__p:Float ;f_tQ:Array [Array [Float ,23],024];R,___:Int ){}M5f___9s_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2890))

    def test_2891(self):
        input = '''Class EE{}Class O:un7{}Class __2_{$Q(p_:ti;_,gs,q_2a_:Array [Array [Array [Array [Array [Boolean ,0x7_A],5],43],43],4_7];_:String ;_:m){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2891))

    def test_2892(self):
        input = '''Class __B{Constructor (){ {Var _,Z__EZ:Array [Array [Array [Int ,0X7_A_6],0b1011001],0b1011001];} }}Class M:__{Constructor (){} }Class w{Val _,_0,$_:Array [Array [Boolean ,0b1011001],0x4E];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2892))

    def test_2893(self):
        input = '''Class _{Constructor (_r_3H__:String ){} }Class _{Destructor (){Return ;}Var O_,_,X5_9d:Array [Float ,0x8_7_3];$76(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2893))

    def test_2894(self):
        input = '''Class z_{Val $C,$_1J:Array [String ,030];_23m2(T,_y_,yI__sl_5_J_:Array [Array [Array [Array [Array [String ,03_2],40],0XF],0x45],4]){Break ;}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2894))

    def test_2895(self):
        input = '''Class _:__81fRe{Constructor (pM:Array [Array [Array [Array [Array [Array [Int ,0102],18],0102],0B1],0102],0b11_1]){} }Class E3_:vc{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2895))

    def test_2896(self):
        input = '''Class _2:L1H{Var $j4:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0X11],02],034],0B11000],97],4],0X4],7];Destructor (){} }Class __:___{Val $j,x:K;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2896))

    def test_2897(self):
        input = '''Class L{Constructor (l6n__,_x:Array [Int ,05]){}Destructor (){Val __,w3,V,_,_L:__1_;_e::$_();} }Class cB:_m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2897))

    def test_2898(self):
        input = '''Class _{}Class _{Var $c,F:_;}Class __:G{Destructor (){}Val __z,F,$Q,$59__,$__:Array [Array [Array [Array [String ,0x14],0b1010111],9],9505_5_9_3_6];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2898))

    def test_2899(self):
        input = '''Class _:_{Destructor (){}Var $_,_8:Array [Array [Boolean ,0X28_FE],0561];Val R9:Array [Boolean ,0B1];}Class _v:D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2899))

    def test_2900(self):
        input = '''Class _:_3G{}Class _:x{$_h0(m7,z,_8:Array [Int ,0X53];b,P8,Z,_:_;_U_:Array [String ,25];__,__P,q:Array [Int ,0b1]){_::$_();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2900))

    def test_2901(self):
        input = '''Class _8:_{}Class C:_lx_7__{Constructor (_R,x__b,r,_:Array [Array [Array [Array [Float ,0x5],0B1101],0x8],0110]){Val __J_G_,_,x5,u14,x,CC,__6,_a:Array [String ,051_62];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2901))

    def test_2902(self):
        input = '''Class _2{E(){Continue ;Var T:Array [Array [Boolean ,0b100010],0B1];}Destructor (){Return ;}Q9(__S,a65,_,b,U,__:Int ;y,_v:Array [Float ,0X52];y4_:Array [Array [Float ,05],41];_6_,_,HR,_:Boolean ){}Constructor (d:Array [Array [Boolean ,0XA],0b1110];Y,T_,_,y:Array [Array [String ,41],024]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2902))

    def test_2903(self):
        input = '''Class _4{$_(){} }Class g4_8_N2{}Class _15{}Class mEZ7{Constructor (){}Var $__zT,_:Array [Array [Array [String ,0X2F],05],0XE7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2903))

    def test_2904(self):
        input = '''Class S:G{Constructor (_F__0E:Array [Array [Float ,053],0B110110]){}Destructor (){}Val $o:Array [String ,0b1_1_1_0_0_1];}Class __:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2904))

    def test_2905(self):
        input = '''Class _:K{Destructor (){} }Class vL{Constructor (_v,f:Boolean ){}Var $_,__o_,$_hN,$aO:String ;}Class _o1:M{$__(){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2905))

    def test_2906(self):
        input = '''Class S:_8_{$_(w,_:Array [String ,0B10010];SU:_){Var t_T:Array [Array [Boolean ,0x4D],0XB];Var _,u4,H,n_6,pl:k_;{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2906))

    def test_2907(self):
        input = '''Class _7:VK{}Class _:_{$95(){Continue ;}$2(ln78R2:_;K,x,___4_:String ){}Destructor (){Break ;C::$858();} }Class _b:_{}Class _4o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2907))

    def test_2908(self):
        input = '''Class u94{}Class R{c(___,_,_:Array [String ,0X59];s5_:Int ;f,_f,A__:Array [Array [Array [Float ,027],9],0X9]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2908))

    def test_2909(self):
        input = '''Class z2_:_{}Class _:___{}Class _3{$8_(_:_;u:Array [Array [Float ,060],9_824763];_:Array [Array [Int ,9_2],29]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2909))

    def test_2910(self):
        input = '''Class _9{Q(__z_d,_2_,__,Qw,_8,_:Int ){} }Class w6:O{Constructor (_,N_:Array [Array [Array [Array [String ,7_8_9_819],59],077],06]){}Destructor (){} }Class rT0:I_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2910))

    def test_2911(self):
        input = '''Class h:_123{Destructor (){} }Class p5:k{}Class _{$d_k_F_F(){} }Class c{Destructor (){}Var _,$r,_:__N_;Var $J,_:fU_4_4;Val Z_Q2:Array [Array [Array [Array [Array [Boolean ,39],06],014_1],03],051_321];}Class v_K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2911))

    def test_2912(self):
        input = '''Class _:___4{}Class _68N_:_o_{Constructor (){} }Class n_{Constructor (_,J:_B9_){} }Class _7_:_{}Class _{Constructor (GW_,Bh,J_d:Int ;P3m,v,c,n8E:Array [Array [Float ,0b100],3_94]){}Var $5:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2912))

    def test_2913(self):
        input = '''Class F_:__{}Class _{}Class ec3:__{A_(__030j_d2,_:Array [Array [Array [Array [Int ,1],0x26],1],4];_,_:Int ;__:Array [Float ,0b1_10_1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2913))

    def test_2914(self):
        input = '''Class ___{Constructor (_Q__:Array [Array [Array [Float ,0x37],87],0x37];U,_,P,__d,___,_:f){}Val _jR_:ZR;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2914))

    def test_2915(self):
        input = '''Class __{Val __:Array [Array [Array [Int ,0B1],0x2D],0126];}Class _:t_{S(H:_;_,a41,_i2:Array [Array [Boolean ,0X35],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2915))

    def test_2916(self):
        input = '''Class _:Z_{}Class z_:_7{Constructor (O84_:b;_48:Array [Int ,0xE];_,_,_:Array [String ,0b10];_R,T,_4,_7_,h9Jh,I,T,_c,T,_G:String ){}$_(_0_1_:Array [String ,91]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2916))

    def test_2917(self):
        input = '''Class s{$2(m:Array [String ,04_2];H_4:__){} }Class _V9:_{Val _,k:Float ;Var $3U,$2,_,__:String ;$_m_t(){}Val $0:String ;}Class _{Constructor (gs__:Array [Float ,0b110100]){Continue ;} }Class _2:k_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2917))

    def test_2918(self):
        input = '''Class t6Ro_39__v:_{Constructor (t58,_:Array [Array [String ,05_45_31],06_3];_____,_,J_,H,_:String ){Break ;}Constructor (_J_,_:Int ){Continue ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2918))

    def test_2919(self):
        input = '''Class g6{}Class Pq_a{Var $2_H,H:Array [Boolean ,9];Destructor (){Return ;} }Class o{}Class _9{}Class F:M{}Class z:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2919))

    def test_2920(self):
        input = '''Class _:V{Constructor (_:Array [Array [Array [Array [Boolean ,0b1],0xB],0x4D],2_29];ir:Array [Array [Array [Array [Array [Float ,0XCF_A],0X3D],0102],0102],90]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2920))

    def test_2921(self):
        input = '''Class l:u{$394(X,Z_V,o,y0,_:_;__,_9,__:Array [Array [Array [Float ,077],077],0x7];___,bu:Array [Float ,0x50];n:Array [Int ,077]){Return ;Continue ;} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2921))

    def test_2922(self):
        input = '''Class _6{Constructor (_9,z:Float ;_i2,_0,__4,_uy,_,_506:E){}Constructor (){Continue ;} }Class _3{Constructor (bgWV_,_6N,_,J:Array [Array [Array [Float ,0b1011],0106],04_6]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2922))

    def test_2923(self):
        input = '''Class ___:l0W66{ZQ(__,O,J9,_,_,E:Boolean ;xxI,_,_:Boolean ;k2,Qaj__:Array [Array [Float ,11],0B1001101];__,_v,_,A:String ;I_2,_,g:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2923))

    def test_2924(self):
        input = '''Class _:_1{Destructor (){}Val $_xI:Array [Array [Boolean ,0140],28];Destructor (){_K9::$5_5();} }Class __{Var _7,R_69:R;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2924))

    def test_2925(self):
        input = '''Class _{Val _,_O_:Array [Array [Int ,0X1],04_0_61];}Class Z:c{}Class F:_{Constructor (__e:h_){Break ;}Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2925))

    def test_2926(self):
        input = '''Class n:_X{$_X(m,__,_:String ;B,S:Array [String ,0B1101];_7r8:Array [Array [Array [Int ,55],0b10101],04]){Continue ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2926))

    def test_2927(self):
        input = '''Class _{Constructor (_b_:_){}Constructor (__,_:Float ;_J,_y:Float ;_,S:Array [Float ,75];_,l,__2,_35_,Z:Array [Array [Array [Array [Boolean ,0X61],2],0b10],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2927))

    def test_2928(self):
        input = '''Class aU:O{Constructor (N:Array [Boolean ,0X3C]){}Constructor (__,o:Array [Boolean ,0b10_1_0_0]){ {} }Constructor (){}Destructor (){Continue ;}Var $_V,_,$_l,$Q_8S_:Array [Boolean ,4];Var Tr:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2928))

    def test_2929(self):
        input = '''Class _{$03(a:Boolean ;_,_P_:p;rh_,p_,_Gb:Array [Int ,06]){}Val I:Array [Array [Array [Boolean ,0B1],0B1010111],72];}Class M5_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2929))

    def test_2930(self):
        input = '''Class c4{}Class _gTx7:_I{Val _,I_O,_:Int ;Constructor (Y4,_:Float ;_,_,___,C,_,C,_:Int ;l,l,l7_:_){}Var wwM6_,$h,$6,Wh:Float ;Val A:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2930))

    def test_2931(self):
        input = '''Class N:M{}Class V6{Destructor (){} }Class _:_s4{Var _:_;Val $_:_T;CV6(__0:Float ;___,_nO:Array [String ,0b10111]){_::$5U();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2931))

    def test_2932(self):
        input = '''Class _:_{Constructor (){}Val $_:Float ;Val $_K_,_0,_4U,i_:Array [Int ,0X13];}Class _{Destructor (){}Val WqV01n:Array [Int ,0B10000];Var $_:T;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2932))

    def test_2933(self):
        input = '''Class iJ_:L{Var H:Array [String ,0X79_BC];}Class _t61F{}Class U{$5_9H(){}Constructor (){Break ;_L::$_();} }Class J__:_{Val $C:Array [String ,1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2933))

    def test_2934(self):
        input = '''Class Y{}Class X0d:_{Destructor (){} }Class d{}Class z{K(Y,Pq:Array [Array [Array [Array [String ,0B1],01_4],0X36],0X36]){Continue ;}Var __w2ul:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2934))

    def test_2935(self):
        input = '''Class tR{Constructor (H:Array [Array [Array [Array [Array [Int ,06],88],062_7],0x3F],0X4A];B:Array [Array [Array [Array [String ,0B1000011],0120],05502],0b1_1];J_7_:Int ;_,AI:Array [Float ,060_2]){Return ;Return ;}Var j:Array [Boolean ,0B1_111_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2935))

    def test_2936(self):
        input = '''Class _{Val eP___,PqD5R_36:l3_7;Val _:_9;$58x05jU(_8,_:y){_::$_();Break ;}Constructor (){Continue ;Break ;} }Class N{Destructor (){} }Class _:_Y8{Var $_:Array [Array [Array [String ,0b11000],032],844];Constructor (){}$L_95(_:Float ){Var M:Int ;_::$3();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2936))

    def test_2937(self):
        input = '''Class TKwG{Ej7(s_:Array [Float ,04];k:Array [Array [Array [Int ,40],3],0B1100100];T,_:Array [Array [Boolean ,03],0b1];__L:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2937))

    def test_2938(self):
        input = '''Class _yn:Z{$1_(){}$_36(_,_v78nL:Float ;_K,H:Array [Int ,0X16];_:String ;W5:String ;s,H:__){}Destructor (){Return ;Continue ;}$f1_b(_,t:_ya;_,_:Array [Boolean ,36]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2938))

    def test_2939(self):
        input = '''Class T:_{}Class _5x_2{Destructor (){} }Class JZ{}Class J_Z:AR_{Constructor (A0:_){}Destructor (){}Val $____,$pG,$2CF3:_n;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2939))

    def test_2940(self):
        input = '''Class W7{Var _w0p4,_:Array [Float ,0B1];Constructor (_,_:String ){}$__(f,_,Ir,L_,_:Boolean ;U:Array [Array [Float ,020],23]){}Var _,$K3_,__2:Array [String ,0x2_3_D8_E1_4F];}Class d{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2940))

    def test_2941(self):
        input = '''Class _{}Class _{Var _,$Q:Array [Int ,0b100011];_M_2(_:qG9){} }Class sV__{V(_yz_I,_:String ;_7:Boolean ;A:i;S,_:Int ){}Var _P4M:Boolean ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2941))

    def test_2942(self):
        input = '''Class N_{Destructor (){Break ;} }Class G9{Constructor (_,q:String ;C:Array [Float ,93];_:Array [Array [Float ,4],0B100011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2942))

    def test_2943(self):
        input = '''Class O{Constructor (){} }Class v:N{}Class O1{Val Ub17:_9cX;}Class pz_Z{Val KA_:Array [Array [Array [Array [Boolean ,021_06],0X7_C],0XD_4E],03];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2943))

    def test_2944(self):
        input = '''Class G:_{Constructor (FW21_548,S_:r){Break ;Var k:Array [Float ,0xF];} }Class kwtN_:b{}Class Z:_j0{}Class n:X_{}Class _8:K{Var $__v_,$8_,$_9:Int ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2944))

    def test_2945(self):
        input = '''Class T:_Bb{Constructor (_:Int ;I:Float ;I:Int ;_7d:Array [Array [Array [Boolean ,05_6],0x3],0b1000100]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2945))

    def test_2946(self):
        input = '''Class t{}Class _{Constructor (_,D,u,B6,d,A,_,_:n_){} }Class tJ:c{Val $4:Int ;Val $j,_t,rYB_4,$3,$_,_0xL1_i:i;Val $E__:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2946))

    def test_2947(self):
        input = '''Class _{Constructor (_,_n:Array [Array [Array [Array [Array [Array [Float ,13],055],07],0b10001],0X4_72A_1_3],0X7];_:E;_W6J,_:Array [Array [Array [Array [Boolean ,0X5D_2],0X64],0B1_1],0X8];___:__4M){Break ;}Val J__:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2947))

    def test_2948(self):
        input = '''Class __nzz:V{}Class uk_{_20(s,_,o8,_2:Array [Array [Array [Array [Array [Array [Float ,0B1],0b1100000],5],0xE_A],0x58],3]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2948))

    def test_2949(self):
        input = '''Class _1i:__{Val $t9,_:Array [Boolean ,03_7_2];Constructor (){}Val $M:in;}Class c:gh_j{}Class _:io{Constructor (){}Val $5_y9:Array [Int ,0b1];$hU(){} }Class _{}Class c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2949))

    def test_2950(self):
        input = '''Class x_88_:Io{Val t:Array [Float ,0X33];Val F,_:Boolean ;}Class o9z{}Class _:_{Val _Q:Array [Array [Array [Boolean ,0X3_C],062],04];Destructor (){}Var $56,$65_:Boolean ;}Class __53{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2950))

    def test_2951(self):
        input = '''Class ___gy:_{Var Ma,h:Boolean ;}Class _{}Class _f_f:_{}Class __:_d_U_{}Class H:bel41{}Class ZTH55s:h_{Var o8_:__;Constructor (_:ru;N:Float ;NQ_7_,_,__m,P:Array [Array [Array [Array [String ,0xA],0xD4D],83],0b1001110];w7,f,_:Array [String ,0b1001110];A,_:String ;f:Array [Float ,83];_:Array [Boolean ,0131];__:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2951))

    def test_2952(self):
        input = '''Class _{Constructor (){Continue ;}Destructor (){} }Class _5:_{}Class _n_K{Val $_Q:Array [Float ,0142];Var $8:String ;H_i(n,_h__KX56_4_:u;_5:Boolean ;Y,B:Float ){} }Class _:_{}Class n_0:_{}Class _ZMg4r:a88{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2952))

    def test_2953(self):
        input = '''Class _:__{Var s5,_,$_,$3:Array [Array [Array [Boolean ,0116],5_2],0XA_F];Constructor (_,i:q8){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2953))

    def test_2954(self):
        input = '''Class Q:_r{Destructor (){Var e,_M,j,_,___I_,k_5_a,Y,_:Array [Boolean ,0x8];Continue ;} }Class _80{Constructor (_no1,vI,j:_xp;C___,LgRH:Float ;___05_c_60,__Xu:_J_r_){} }Class _:_0s{Destructor (){}Destructor (){} }Class _:_6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2954))

    def test_2955(self):
        input = '''Class _{Constructor (_6_,kp:_){Return ;}Val E:m_2;}Class cO:U_FF{_(_,j_1_:Array [String ,6]){} }Class _76{Val $T,Tg,_:Int ;Val $r0:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2955))

    def test_2956(self):
        input = '''Class E{Var $fj_5joCe,$P2:Array [Boolean ,0X11];}Class Y:c_1_6{Val $n:_;}Class i_:_Kr__{Destructor (){} }Class T_K_{}Class od2m_w:G{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2956))

    def test_2957(self):
        input = '''Class t:__{Destructor (){}Constructor (_4:Array [Array [Int ,0B1000011],8];b_8,G_6_:l269;_:Boolean ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2957))

    def test_2958(self):
        input = '''Class uD{Var H__0I_,$_,t_67,_:_;Val $u_,$2,e__,_:Array [Float ,0XC];Var _,$0_M,E_,$_,$16i:Float ;}Class jGyH15__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2958))

    def test_2959(self):
        input = '''Class _:_e{}Class _x_{Constructor (_,R,W:Array [Array [Float ,0x9],0b1_01_00_1];_:_15;_:Array [Float ,06_2];K,_,v,sv:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2959))

    def test_2960(self):
        input = '''Class _:K{Constructor (_1:Array [Boolean ,0X5]){}Val _:Array [String ,0X40];}Class _:_{}Class _:h_{Var _:h9J_81_g_7_66;Var $2828,$E,$_,_8FA:_;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2960))

    def test_2961(self):
        input = '''Class u:n{Var V,c51,__92:f;}Class f{}Class wB_{F(F:Array [Float ,03];__R,_d:Float ;j,_:ik;_,xW0,m,___s1__,C,s,z__:Array [String ,0b1];MO4:Array [Array [Boolean ,07_4],1];_K:Float ;v_,i:w_;F,qT,_,g,t4:Float ;s_:B8;_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2961))

    def test_2962(self):
        input = '''Class _4{Var G3__:Array [Array [Array [Array [Boolean ,0b101110],0x5],52_0_88_0],96];}Class E_9_P:_Qy{Val $2_:Array [Boolean ,0x4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2962))

    def test_2963(self):
        input = '''Class __2:_Z{$83j8g585(){Var x:_;}Val __i_,$ii_:Array [Array [Boolean ,0X1_1],0xB];Val $H_,_a,$s_,$q0:_;}Class T{}Class _:x6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2963))

    def test_2964(self):
        input = '''Class e_M:_{Val _6:Array [Array [Array [Boolean ,0141],76_92],0b101_10];}Class a:a{Constructor (_:Float ;_7,a,_,z_A0:_){}Var f:Array [Int ,0B10011];}Class R7i{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2964))

    def test_2965(self):
        input = '''Class R7:_4o_{Constructor (){}Var p:_;}Class _{Var $KH:Array [Int ,0B1_1];Var $_H:Int ;}Class _:___3{}Class _L_L:_7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2965))

    def test_2966(self):
        input = '''Class _a8:_0{Val _,P_,$09D_r,$x:Boolean ;Destructor (){Break ;}X2(){}Destructor (){}Constructor (_,____c:Array [Boolean ,0101]){} }Class DB4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2966))

    def test_2967(self):
        input = '''Class X:_{Constructor (_x8,u,_D,Uu__7V,R7u,fO_,k:Array [Int ,02_6_2530];c_:E;___:Float ){C::$10();Break ;}Constructor (g:Array [Array [Int ,04],76];c:l_;t_l,_845,_:B;P:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2967))

    def test_2968(self):
        input = '''Class _:___{Var $4:Float ;}Class _{$1(x:String ;Y:O1;SV_,_5,__:Float ){} }Class ypcj{Constructor (qy3_:Array [Array [Array [Boolean ,0B1001101],85],85];__9,z,__:Array [Float ,0B1001101]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2968))

    def test_2969(self):
        input = '''Class _:__{LN(_v,_:Int ;_5,_:Array [Array [Array [Array [Array [Array [Float ,070],014],0X8B_A4],03],0b1010101],0b1010101]){} }Class __61:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2969))

    def test_2970(self):
        input = '''Class __{Constructor (m_,N,_f,v__,___:__w__0;T_,_39w:String ){}Val $K,$_:jN;b(){}Val _:Array [Array [Array [Array [Boolean ,0b1],0b1],01],0X10];}Class _9{}Class __{}Class __{}Class _hCY_:y{Constructor (){}$t(X_T_d2,_V:l){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2970))

    def test_2971(self):
        input = '''Class m:__{Constructor (G__j,_1,G,_:Array [Boolean ,0x35]){Continue ;Break ;}Constructor (){}Val _,$s,$F:Array [Array [Int ,0X8],0x4_2];Constructor (_7,__k:Int ){} }Class _:_9w{Var M9_c_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2971))

    def test_2972(self):
        input = '''Class qat__:j{Destructor (){} }Class _N:C{Val $3m,_:_0;$nH7(G3,RK:Array [Array [String ,0103],0b1];a:Array [Array [Float ,86],7_0_1_7]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2972))

    def test_2973(self):
        input = '''Class l:Q5z{Constructor (I4:_;d:Array [Boolean ,0b1];X_4,Y:Array [Array [Int ,17_87_9_9],0xC3_6_33];v_:PE;_:_;_:Array [Array [Array [String ,0x55],78],0127]){}Var _,$u_0_,$1876_,_1eN,$_,H:__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2973))

    def test_2974(self):
        input = '''Class _3_v{}Class m{Destructor (){}Constructor (r2:Array [String ,0b1];Y_,z,__:Array [Array [Array [Array [Array [Boolean ,03_3_7_4],0x15],0B1],035],0B1001010];w,E:Boolean ;X2:Int ;_:Int ){}Val $0_:_a;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2974))

    def test_2975(self):
        input = '''Class GY{Constructor (D,_9,_E_:l7;_,_,_U:Array [Boolean ,9];_g9_,_DGS:Int ;EF_989_,s:Array [Array [Array [Int ,0b1],0B1001100],8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2975))

    def test_2976(self):
        input = '''Class __s_{Var $lI,M4_Z9p,__1,$k,$_:n;}Class _4{Constructor (){} }Class w{}Class M:_87{Val M4g_,u,__,Wbd_:_h;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2976))

    def test_2977(self):
        input = '''Class _:Z__K3{Val $Av,$F5,_:Array [Array [String ,0XC],0b1_0];_(_6:Float ;___,Jej,Ik14,_2_1qh5_,U,_:Float ){}Var __:Int ;}Class A:_{}Class G{}Class R_8:C4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2977))

    def test_2978(self):
        input = '''Class x{}Class _7:_5v{_(_,u:Int ;u3:_97yn;bL6__2,_va:Array [Float ,0xB_CD]){}Constructor (){}Var A:Int ;}Class _0_:Pb{}Class o:__{$p(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2978))

    def test_2979(self):
        input = '''Class _b{Constructor (){}_(__:_;V:String ){}$1(izF,S,_e:String ){ {} }}Class __Ll_G0E{Val $O1,_,__:Array [String ,06];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2979))

    def test_2980(self):
        input = '''Class ___t:v{}Class O_:O{Constructor (_Id,N:_){Return ;} }Class _q{}Class h{Val $_:Array [Int ,0X8_E];}Class _9_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2980))

    def test_2981(self):
        input = '''Class _12_8_0:u70_{Destructor (){s68N892::$_p2.m_();}Constructor (R_:Array [Float ,0x6];C,G_:_2_s;wG_,a_6,_,_,n_f_:L7){} }Class _:_1n{}Class __:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2981))

    def test_2982(self):
        input = '''Class _N_:_{Constructor (_8,W,yv,PB,_jE:Array [String ,0b1_100];l__021y7,_R__,_:Array [Boolean ,0157];_:Float ;_7,D,Z:Float ){Continue ;}Val $_7C:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2982))

    def test_2983(self):
        input = '''Class n_14_:_{Constructor (_:Array [Array [Array [Float ,0B1011110],0XEF],0226];_:__;_,_,h,_0:X_){Continue ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2983))

    def test_2984(self):
        input = '''Class _6{}Class __4_{}Class f_:D{Destructor (){}$0(){}Destructor (){} }Class M5we4:_{}Class _32:c{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2984))

    def test_2985(self):
        input = '''Class _27:Q{Var __J:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,03],0B1001010],0X1B],0XC],89],053],0b101],0B1001010],03_3],3];Var g,$_:I4;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2985))

    def test_2986(self):
        input = '''Class v{}Class _t1{}Class I_:J_6_{}Class C:_I_{}Class _:o{$7e_(s52__:Boolean ;_,x,_:Array [Float ,010_0]){} }Class _:vt_{}Class H:_0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2986))

    def test_2987(self):
        input = '''Class _:i_{Destructor (){Return ;}Destructor (){}Val $H:Array [Array [Float ,0X2F],0X2F];Destructor (){ {} }Constructor (_,m,X:Array [Float ,0X2F]){Break ;}Val E_,$_U:Int ;Constructor (w:String ;_:Array [Array [Array [Array [Array [Array [String ,74],74],3],043],03_7_54_1],88];_:___6){} }Class s99:_W{}Class _7_:_1{}Class A{Val _,$2_z:k;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2987))

    def test_2988(self):
        input = '''Class S_C__nQ{$D_g_(Z_6,_B54:p;_,_4:Array [Boolean ,021];__K,e5,D,__:Boolean ;__99:Array [Float ,021];_,O:_4;a,_5,N,_,i:_;___,__,__,C_,_,U,H,_rv0Q,R,_,_:Array [String ,021]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2988))

    def test_2989(self):
        input = '''Class _:__402{Var $_K8:Array [Array [String ,8],076];Destructor (){}$_(uGO:String ){Break ;} }Class _:Y83{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2989))

    def test_2990(self):
        input = '''Class _1:p{}Class _l{Val $__,$__,__:Int ;_(n:Array [Array [Array [Array [Boolean ,0x61],0x9_5],0x61],02];eJb1:wc_GMo;t1,Q54,_,q:Array [Boolean ,02];__:Int ;_2:Array [Array [Boolean ,7],0x61]){}Destructor (){Continue ;} }Class _0{}Class E:a{Var $rDx,$6,n5n:SUHCM;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2990))

    def test_2991(self):
        input = '''Class _:_{}Class _{}Class c{Var m,_5,_:Array [Int ,0B1100];$_(dG_4H,S2,__5:Array [Array [String ,04],25];c:Float ;___8:Array [Array [Int ,0X5],0b10];_7_,_B67,_R4B_B,V7_,q,_,__:d){}$g(){}$_(){} }Class U_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2991))

    def test_2992(self):
        input = '''Class _P_w{}Class v{Destructor (){} }Class R____SG_:p{Var $6,$w,$2:Array [Float ,0x5F];}Class xA:v3{}Class q4:G_v5f{}Class u:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2992))

    def test_2993(self):
        input = '''Class _I:q24_{Destructor (){}Constructor (u,__:Array [Array [Array [Int ,0X14],0x39],9];C_:___;Lia,__0025:m_;E,___:Array [Boolean ,0X14];m,C_:__){Var T:__;}Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2993))

    def test_2994(self):
        input = '''Class P{Var $2_:Array [Array [String ,06_0],5_9];Var _z,$_n,x_m,$0:Array [Array [Boolean ,03],070];Var y:Array [Boolean ,0XD_E_E_27_7];Val Z:Float ;___SN7I178(_h:p101;_,l:_;M:f;_,__9:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2994))

    def test_2995(self):
        input = '''Class I_:xi1{}Class P:FK1{Val C_v3:w;Var W,_,$668L_:A;Constructor (a_,b_,_,_:_;_6,_y:Int ;o:H){Break ;}Constructor (){} }Class IQ8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2995))

    def test_2996(self):
        input = '''Class __:i{Var $28:Array [Array [Array [Array [String ,014],0X2E],4],0X2E];Constructor (_q:Array [String ,0XD];__A,B,x1:Array [Array [Array [Array [Array [Array [Int ,0X49_B],3],3],0b101111],014],017_0]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2996))

    def test_2997(self):
        input = '''Class _ip{Var $C:Array [Boolean ,3];}Class T5_J{Constructor (W,_,__:Array [Array [Array [Boolean ,036_6],064],04];_k2,l,Ml,n,_,c8:_3i21;T,GH,_,_:Array [Boolean ,0B11]){Val a0_,_9_a:Boolean ;}Var $t:_;Val $c67,_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2997))

    def test_2998(self):
        input = '''Class _{}Class _W{}Class _0:b{}Class _y{Constructor (w_u:S_){}Constructor (_,XF,_:d;E:Array [Array [Float ,0b1010110],076]){} }Class _8{Constructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2998))

    def test_2999(self):
        input = '''Class BL_5:_{Val $5,$d,Ns,$_:Array [Array [Array [Array [Array [Array [Float ,7_81],04_2],0X1],5],06],066];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 2999))

    def test_3000(self):
        input = '''Class YkP__:U_{$0(__,_:Array [Array [Float ,38],0X63];s,_:Array [Float ,5_5];_,_:Float ;_8:Boolean ){} }Class _6{Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3000))

    def test_3001(self):
        input = '''Class _67q:_9{Destructor (){Val xS_76,_1:Boolean ;}Constructor (_1:Float ){}Val $_:Array [Array [Array [Float ,0x44],44],026];Var $V_qc,_Pe,J,$bZ:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3001))

    def test_3002(self):
        input = '''Class S:_7{Val _c,_:Array [Array [Array [Boolean ,0X5_0],0b100],0xA];Constructor (P__:Array [Boolean ,7];yD:Int ;_Q:_){} }Class __{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3002))

    def test_3003(self):
        input = '''Class _p{Destructor (){}Destructor (){} }Class h{_(_:Array [Boolean ,04];__5:Int ;_Q_:String ;Gy:Boolean ;_:_;_,_:Array [Int ,2_83];k09,I:_;t,__:Boolean ){}Destructor (){}Constructor (o0,_1_o7:__X;_h26JU:Array [Float ,0x2]){} }Class x:_g_____{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3003))

    def test_3004(self):
        input = '''Class iTe:_{}Class kM_:y_{Var o:Array [Array [Int ,01_72],0x43];Constructor (_5,HO99_:Nd){}Val $_:Array [Boolean ,03];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3004))

    def test_3005(self):
        input = '''Class j{Var $l_0,$Z_o__4,$_,_D,$B:Array [Array [Array [Array [Array [Array [Array [Boolean ,0x39],056],0B101111],0x6],0B111],0x39],0B1_11_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3005))

    def test_3006(self):
        input = '''Class A:_{Val $_,V6,$_2,$v,_,KJ:Array [Array [Boolean ,0B10110],0B1];}Class y{}Class a:Q{}Class _5:q0p{}Class _:_{}Class m__6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3006))

    def test_3007(self):
        input = '''Class __:_I3_{Var $9q_:Int ;Destructor (){Break ;}Var _:_;}Class _:_{}Class q{Constructor (__:Array [Array [Array [Int ,070],0b111010],0X3D]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3007))

    def test_3008(self):
        input = '''Class _X:N{}Class k_{$__(_,_:Array [Array [Array [Array [Array [Boolean ,0xF],0X6_D_23],9_0_9],0B1100000],6];_05,_1:Array [Int ,95_7];_:W_;M0,c,u:K){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3008))

    def test_3009(self):
        input = '''Class w:u_{}Class _{}Class j_{}Class W0{}Class A9_{Val _68_J,Q:Array [Array [Array [Array [Array [String ,0b1],0b1],8_9],5],12];Var $_3_:k;Var H,K3:__;Destructor (){Break ;}Val R,$_,$_m_c69r7j:_C;}Class S:FlR{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3009))

    def test_3010(self):
        input = '''Class _3j{}Class Ji:A0E{}Class H:_{Constructor (){}Constructor (j_6SK,B8,W3m,d:Array [Array [Array [Array [String ,0141],0X44],5_3],0XC]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3010))

    def test_3011(self):
        input = '''Class G:_{Val __:Int ;Constructor (V1:Float ){}Val $4__8,S_TU,$w,_:Array [Array [Boolean ,0X10],0xF];}Class _:f{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3011))

    def test_3012(self):
        input = '''Class Q{Val $3:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1011011],056],0b11],05],0XE],0b1100001],0B1011011];Var d_,$1,$8A8xf,$8_R73:String ;Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3012))

    def test_3013(self):
        input = '''Class _6:g{Constructor (_:Int ){} }Class u:_{Destructor (){}Var $_,_,$e,_3v,__,Z,$_:Array [Array [Array [Array [Boolean ,0B1001000],45],0b1],0115];Val A:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3013))

    def test_3014(self):
        input = '''Class m_D{Var y,$Pt8,L6,$2___6n1R7fe,_,_,_X,xfx:Array [String ,7];}Class _{$_(){}Var Ij:Array [String ,03_4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3014))

    def test_3015(self):
        input = '''Class _{}Class P:_{Constructor (Wl,_:P3;s:Array [Array [Boolean ,67],0141]){Val Idn :Array [String ,0B1];Continue ;}Var $J4,_:Array [Int ,0XE_D];}Class _iY{Var $0,$V:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3015))

    def test_3016(self):
        input = '''Class c5___y:W{$y(_,NY,_5,yq__,zI,L_:Int ;Q_1:_;U9,wfJ_:Float ){ {}Continue ;}Var $V38_,Q:Array [Boolean ,2];Constructor (){}Destructor (){} }Class o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3016))

    def test_3017(self):
        input = '''Class _{Constructor (_:q8;I:Array [Array [Array [Array [Array [Array [Array [String ,5],0XA27_8],0B1],0B1_1],0B1111],0b1011010],0xC];D,_H:Array [Float ,036]){Break ;}Var h,n_:Int ;Val $_82:o_5;Var _Z7,$8,Y,$10,$Hs5J:Array [Boolean ,16];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3017))

    def test_3018(self):
        input = '''Class _5:C2_{}Class _{}Class _:__5{Constructor (){Break ;Var J,_:Int ;}Destructor (){}Destructor (){Return ;}Constructor (P,n,X:S5){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3018))

    def test_3019(self):
        input = '''Class _{_(N:Int ){}Constructor (R6O:Boolean ;WW:Boolean ;z70,d,S7W:String ;K,_d_,__,_,__,fE,_,M:__a_1_;U__1:sN){Var a:Float ;}$_6(){}Val On,$_b,$8c_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3019))

    def test_3020(self):
        input = '''Class _3:R{Val $5,$__IgV2_:Float ;Constructor (U:_7_4){} }Class K:_P{Var $_:Array [Boolean ,0X52];Var $90,$p,$4,$__L:x;Constructor (){Continue ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3020))

    def test_3021(self):
        input = '''Class __{Constructor (){}Destructor (){}vI(_:e){Return ;} }Class r08q:_9{Destructor (){}Constructor (){Continue ;}Var _,___Q,$W:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3021))

    def test_3022(self):
        input = '''Class Q_{}Class _{Val $_1,$4,$5E:_;Constructor (_,E,_br_:Array [String ,044];Q99x063:Array [Int ,13]){}Destructor (){} }Class _44_:_2v{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3022))

    def test_3023(self):
        input = '''Class _3b{}Class Z:_L_{Constructor (_:Int ){}Val D:Array [Array [Boolean ,0B1_10],0X36];a(E:Array [String ,0107];lYx5,k:Array [Array [Boolean ,0b110111],02_7]){} }Class q_0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3023))

    def test_3024(self):
        input = '''Class _{Var $4:Array [Array [Boolean ,0B1001010],071];}Class d_:__w_{}Class __:q{Var m,_:Float ;}Class _4:_{Constructor (_:_;Z:__){}Constructor (__S_,__:Boolean ){}Val $Z_:Array [Array [Array [Array [Array [Array [Float ,0x58],0XC],7_435],50],0b1011001],0B1_0];}Class _f{$_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3024))

    def test_3025(self):
        input = '''Class K_0{Val P:Array [Array [Array [Array [Array [Array [Boolean ,0XE0_6],0116],0b11111],5],0xF],0b1];Destructor (){Break ;} }Class _D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3025))

    def test_3026(self):
        input = '''Class Zz:F{$o1t(E:Y_){}Var _,__,_:__29_;}Class _:bw{}Class _2_{Var $6,$_____K,_Oh,$__,S7T:Int ;Val __,_6_d4:c4_;}Class _4{Val $__:Array [Array [Boolean ,0X8],05_3_2_0];}Class ___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3026))

    def test_3027(self):
        input = '''Class q{Destructor (){}vF(){}Val v_s:Float ;Var G,L,$e:Array [Array [Int ,0X6_3],0B1];}Class _:_l{}Class _:M{}Class _4:_3{}Class g__:v{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3027))

    def test_3028(self):
        input = '''Class _{Val $A:Array [Array [Array [String ,07],060],066];$J(_:Array [Array [Array [Int ,32],4],17];_t:Boolean ;_,_5_7:_;y_,_,_:Array [Array [Boolean ,060],4];_i_5,I,__9h2Bn:Int ;_z_9,_4m3,_,Y:o;_9P:_;M,_:W_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3028))

    def test_3029(self):
        input = '''Class _{}Class _{Val _,_2_2,$z,E1,$M0,$9:Array [Array [Array [Array [Float ,5],0B1],0b1010],0xB];Var fg,$3:Array [Array [Boolean ,1_8],0b1010];}Class ht_{Constructor (){_::$___C();}Var _4_2,__:Array [String ,0X22];}Class x0w_4:_1lUM{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3029))

    def test_3030(self):
        input = '''Class Yb4{Val $b:String ;}Class _:hZ{Destructor (){}Val C_v:Int ;Constructor (Gv15,r,m__,L_:Array [Array [Array [Array [String ,06],51],026],0B100100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3030))

    def test_3031(self):
        input = '''Class __:U04{Val _,$_38:Array [Array [Float ,0B11],17];Constructor (_0:Boolean ;u7n,_:String ;T_P9:Array [Array [Array [Array [Int ,2_2],0357_1_3],17],17];c:Array [Boolean ,0X10]){}Val _T:___;}Class y_:R{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3031))

    def test_3032(self):
        input = '''Class t:V{Var $2,$F65,$_,$5,_:Array [String ,0b111_1];Constructor (n,_:Boolean ;__,L:Float ;_,_:Array [Array [Array [Boolean ,0x4C],0b1001111],66]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3032))

    def test_3033(self):
        input = '''Class JMI{Var $63:Array [Array [Array [Array [Array [String ,52],9],01],2_9],0x9];$_CS(){Continue ;{} }_9(I5,_,_0,U:Array [Int ,020];_:Array [Float ,52]){}Val eA2:Array [Array [Float ,0x4CEB4_5],52];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3033))

    def test_3034(self):
        input = '''Class O14:G{Var __,$4:Array [Array [Array [Array [Array [Array [Array [Float ,050],0xC],0x4],0x4],0B1],0B1],0B1_0_10];}Class z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3034))

    def test_3035(self):
        input = '''Class P:a{Val $_:Float ;}Class _y:e{}Class _5D2J:xp_{}Class _1:_5{}Class E_:_e{Constructor (_,G,___:Float ;wy,__3,_9,D_D,_1:Array [String ,0B100010]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3035))

    def test_3036(self):
        input = '''Class v{Var ZB___,_3:N2;Val S,$08,$0yN7_Y,$n_I30f,$B6_F,$HG_:Array [Array [Array [Array [Int ,0X46],0B1_0],0B111111],0X64];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3036))

    def test_3037(self):
        input = '''Class Y{$_Uq8(){Break ;}Destructor (){} }Class m:a{$6__7f(IX,Rg,J:String ;a_,_,_B,j,_,RK_A:Array [String ,0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3037))

    def test_3038(self):
        input = '''Class _o:w8{Constructor (O_4:Int ;_fR_2F:_8;_wB:Array [Array [Int ,0B1],0B1];_:Array [Array [String ,0x2],3_9]){}Var $1,M,MG_:b;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3038))

    def test_3039(self):
        input = '''Class ___67l{}Class s{}Class RH__:_{}Class _{Val yBt27s_yp:_;Constructor (_:j;_:Array [Array [Array [String ,0x4],0X6],8388];S_,D1b:String ;tii9__,_:Boolean ;Ul:Array [Array [Array [Array [Array [Boolean ,0xE],07_04_1],0X6],0b100001],0b100001]){} }Class s37{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3039))

    def test_3040(self):
        input = '''Class _{Constructor (Q:Boolean ;_,_V:Array [String ,0x1D];K:G_){}Destructor (){}Val $F:Array [Int ,04_71117761];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3040))

    def test_3041(self):
        input = '''Class o:_F7{Val $yc:c;$s2R(){Continue ;Return ;}e_H(BD_,_U7,_9_,_Z:Float ){Continue ;Return ;Break ;} }Class g:x0_9_{Constructor (O___8:V81;E:Int ;T_:Float ){Break ;} }Class h5{}Class M825:K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3041))

    def test_3042(self):
        input = '''Class A7:R{Val $___8:Boolean ;Var _,_D_,$b,$I:Array [Array [Array [Array [Boolean ,01],04_0],0XDF],0B1];}Class _:S_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3042))

    def test_3043(self):
        input = '''Class _{Val A2_:g;}Class o{Val A,$_,$2__92u:Array [Array [String ,39],074];}Class Ez:H_c{Constructor (cb_7b:Array [Boolean ,0b1];N_,__,_,k_6W:Array [Array [String ,074],0X5B]){}Destructor (){Continue ;Break ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3043))

    def test_3044(self):
        input = '''Class __F{dI(_H3z,__a6,_,___:Array [String ,0x35];y,j7x,__qQ:j){}Val __,hl_,__,__:Array [Int ,0141];v(){}Val $_,$L74,_3,Z:__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3044))

    def test_3045(self):
        input = '''Class Rlo_h:_{Val _,L_W,__,_,$___7,J:Boolean ;Constructor (){ {_::$T373()._();Val b0,_E,n:Boolean ;} }Constructor (_,K,H,_:Array [Float ,0b100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3045))

    def test_3046(self):
        input = '''Class __7{}Class P:z{Val _L:Array [Array [String ,9],0b11];}Class o_2__{Var $_2,QpK,$0L:Array [Array [Int ,4_2],01_4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3046))

    def test_3047(self):
        input = '''Class _3_:I_{}Class Z_:t{}Class _0yb{}Class _141{$4_(){Break ;Continue ;}Constructor (__:Array [Array [Boolean ,0B100110],75];_:Array [Array [Array [Boolean ,75],07],1]){Break ;}_22(_,_,V:Boolean ){}_J__(){}Var _,_n_,$_D84w:Int ;$v(V:Array [Array [String ,80],07];S8,h:Jw;o,_ww,c,_Q4_V:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3047))

    def test_3048(self):
        input = '''Class _:__{}Class wD{}Class _O:_TL{Destructor (){} }Class X{}Class B:_{Val $7:Array [Array [Array [Array [Array [Boolean ,0X7],072],0154],042],072];}Class _0{}Class _1:U{}Class t:L4{Destructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3048))

    def test_3049(self):
        input = '''Class N{Val $9,_,Rx,$s3OT,$_:__;Destructor (){}Val w,E7_:String ;Val $v4:Int ;$u1(){}P(){}Constructor (JPJ_:Array [Array [String ,0116],0b110010]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3049))

    def test_3050(self):
        input = '''Class _{Val $_8,_,__1w_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,11],030],7],0XC],046],0B1],030],01_2];Val W,$Y,_,l_,_:String ;}Class _{Constructor (h,_0_:_;Y_,_,_4_32:N;l,w:String ;_n:Array [Array [Float ,0B10],8_5];_9,ltI,P2:Boolean ){Return ;}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3050))

    def test_3051(self):
        input = '''Class _:jX{Destructor (){} }Class Cpf{Var $lP,$5__,$_Y_c,b:__;}Class B_84__l_:v{}Class G{Val $K,_,P_,$__V:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3051))

    def test_3052(self):
        input = '''Class _1:_{Destructor (){}Var $k,$_7:Array [Int ,93];}Class _:_4{}Class _T9H{Val $_6:Array [Array [Array [Boolean ,03],052],052];Constructor (__,_C:_N){Var o,K:_8r_;} }Class N:e{Val _9,_,$_,$_0P8,$3_3:Array [Float ,0X12];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3052))

    def test_3053(self):
        input = '''Class AV__:__1__{}Class _:R{Val __:Boolean ;Val $73:Array [Array [Float ,18],0143];}Class a:__{Val $lt:Array [Boolean ,0B1100100];}Class _n:T{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3053))

    def test_3054(self):
        input = '''Class _{Constructor (_o_,_8:Int ;_:Boolean ;_,_9,__66:__){Var w:Array [Array [Array [String ,024],18],0x9];}Val $_3,$_82_,Y:Float ;Var _9y_6:Array [Array [Array [Int ,0b1_0],22_8_6],07_1];}Class _:_5{V_(S,A:Array [Array [Array [Float ,037],0X52],0b1];g,YB,__,_:Boolean ){}Val _1:Array [Array [Array [String ,04],05_3],0XC];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3054))

    def test_3055(self):
        input = '''Class _:Xe{}Class B{Constructor (_,n,_,_H:Array [Array [Array [Float ,0b1000010],0xF_F],0b1000010];D_,U,R79:_;G,_:_I;_w,E,_1:Array [Float ,7_7]){} }Class c_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3055))

    def test_3056(self):
        input = '''Class r{Destructor (){Return ;}Constructor (Z_7:P){}Val $6:Array [Array [Array [Array [Boolean ,0x18],81],16],48];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3056))

    def test_3057(self):
        input = '''Class J_:aP{Val _,$__3:Array [String ,050];Var _:_;Destructor (){}Val $6:_R;}Class T_{}Class PwS:I_N{}Class d3E{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3057))

    def test_3058(self):
        input = '''Class T__:_{Val _,$0:Array [Array [Array [Array [Array [Boolean ,0x16],0X60],0B110110],0b1011111],5_3];Var p,$uy2des:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3058))

    def test_3059(self):
        input = '''Class X:r{$_(Z_:Int ;__:Array [Array [Array [Array [Boolean ,0b1],19],0b1011101],19];_,_,_n_76m:_;d,_,_,_051,a,_,_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3059))

    def test_3060(self):
        input = '''Class __7{Val L5:Int ;}Class l{Destructor (){} }Class _:F01{Var k,l_3:Array [Int ,0B1100011];Var $_,I,X:Array [Array [Array [Float ,01_5_4_0],0b1001111],0x1E];}Class S8_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3060))

    def test_3061(self):
        input = '''Class p{}Class _{_(W,P,_0,__R,_,_5,_:Float ){Continue ;} }Class p614:_{Constructor (j,X,_08:Boolean ;_6:Int ){} }Class m:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3061))

    def test_3062(self):
        input = '''Class _:_M{$__(_U:Array [Array [Array [Float ,043],0X7F1],0b1_0]){} }Class g:g_P{Constructor (__A,__:Array [Array [Array [Boolean ,0B1],043],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3062))

    def test_3063(self):
        input = '''Class _1{Constructor (Q:Array [Array [String ,31],07];f7,_:Array [Array [Array [Float ,0x92],4],0b10];_,_:Y_7;_,u_:X;___4l,d__,_8__:_;y_,h,_q,_:Int ;__:Int ;_,_7:_o){}$_Nl6(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3063))

    def test_3064(self):
        input = '''Class h:T_5g{Constructor (Hf:Array [Array [Int ,58],05];R,x_,B_K_:_;n:_7Z;_:Int ;k:Int ){}Destructor (){} }Class _:Tk_u1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3064))

    def test_3065(self):
        input = '''Class _{$_3(_7,U5,_8j:Boolean ;_1V5:Array [String ,022];_3,N,V5w1_,_6,k:Array [Boolean ,0b1];xh:i){} }Class Eqd1{Destructor (){} }Class _kg{Val _3_,$2A,$06,$B0S:String ;Constructor (_,f9n:Array [Array [Float ,0x53],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3065))

    def test_3066(self):
        input = '''Class K{Constructor (_:w;__:Int ;l,g:_;_LI,r___:String ){Continue ;Break ;}Val _V_320qg:N;Destructor (){} }Class __{Var $_:Array [Array [Array [Boolean ,94169],0B1001],0X10];Var V,_l5B___,z,P_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3066))

    def test_3067(self):
        input = '''Class V_:_C{Destructor (){Break ;Continue ;}Var _ue_2X:Array [Boolean ,0X17];Val $f:Array [Boolean ,0b1010010];}Class _{$h5(){}Val $3,o_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3067))

    def test_3068(self):
        input = '''Class q0{l(){} }Class __:__{Var __8:Boolean ;}Class _T:x{}Class _:_{}Class _:Y1_{Destructor (){}Val $A4_3:m;Var $X,$x,E:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3068))

    def test_3069(self):
        input = '''Class d:_m{}Class _o:S8_6{Destructor (){}Destructor (){} }Class u{Var $_:Array [Array [Array [Float ,07_2_64],0X40],8689];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3069))

    def test_3070(self):
        input = '''Class s:k{Val ld2_,w,$_,$eh,_w_5:Boolean ;$z(r:Float ){} }Class _7_:_{}Class E:e{Destructor (){ {} }_73_5__(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3070))

    def test_3071(self):
        input = '''Class O{Val M,Q_p7,$11,$w_:Array [Array [Int ,2],0xE];Val _O4_9:Array [Array [Array [Int ,0B111001],39],7_06];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3071))

    def test_3072(self):
        input = '''Class z56{$0(g,_,r:Array [Float ,0b1];M:Array [Int ,0B1011101];_U_,_:Array [Array [Array [Array [Float ,20],0B1011101],20],20];___Ri,__2,y0:dG_){} }Class _I{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3072))

    def test_3073(self):
        input = '''Class Z:_{Destructor (){}Var $___:Boolean ;Constructor (_V9Y,P,_F_23,_VI,P29_:Array [Float ,05_7];_:un_){} }Class _1_0__4:_{}Class WU:d0{}Class m:__5_1__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3073))

    def test_3074(self):
        input = '''Class _:_{Val $2_:Boolean ;}Class __{Val $Z:Array [Int ,0X3];Var $5,v6,$_6,$G,$_p,$_,$4:Array [Array [Boolean ,0X60],034];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3074))

    def test_3075(self):
        input = '''Class YV2__K{}Class W:C7_8{}Class _:_{Destructor (){} }Class _:__0{Destructor (){}Var _:Float ;Var _57:Array [String ,76];}Class _8b__7:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3075))

    def test_3076(self):
        input = '''Class _{Constructor (){}_(){Var o3,_G2_:String ;}Destructor (){}Constructor (r7,Ri_d4m__:String ;iK:T_;__:_){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3076))

    def test_3077(self):
        input = '''Class b:L{Constructor (){} }Class _{Destructor (){Return ;} }Class dK:W{Destructor (){}Constructor (D:I73_Q_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3077))

    def test_3078(self):
        input = '''Class y:_V{__(){}Var $_,el,$_,_03,t,$r:Array [Float ,11];Destructor (){Break ;Break ;Continue ;Continue ;Break ;Break ;} }Class T{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3078))

    def test_3079(self):
        input = '''Class R4{}Class _u5:O{}Class _{Val w,___,D,$8_:Array [Boolean ,27];Constructor (_,__3,_:Array [Int ,0B1]){Var pRz:Array [Array [Float ,0x2_DB7_7_2_7_C_E],06_6];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3079))

    def test_3080(self):
        input = '''Class uL:L{}Class E{}Class El:_G2uc{$0(){}Constructor (){}Val OJ_1:Array [String ,0b101000];}Class _{_(i,_,_:Array [Boolean ,37]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3080))

    def test_3081(self):
        input = '''Class N{Destructor (){}Var _,$4532,$_,y_,$_:String ;}Class E_12__2:rJ{Var q8_O__4:Array [Array [Array [Array [Float ,0107],0107],075],5];B0(e8,_0_,_jHu,_2,_q09,f,c,_:F){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3081))

    def test_3082(self):
        input = '''Class r{Val C:Array [Array [Boolean ,0121],0x3B];}Class _o2Z__{}Class _0{Val _n:Array [Float ,0X63];}Class _:a{}Class JZ9:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3082))

    def test_3083(self):
        input = '''Class _{Constructor (_w:Float ;PZ,_:__){} }Class _ChP46:q{}Class _5:z{Constructor (){Continue ;}Destructor (){}Var t,_,_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3083))

    def test_3084(self):
        input = '''Class H:_e_{$_(__,_:Array [Array [Boolean ,036],0x3C];_,I,_:Float ){}$u(v,f,_a:Array [Array [Boolean ,0B10],6_0]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3084))

    def test_3085(self):
        input = '''Class h:z5{Val _:Float ;Var $z_:Array [Array [Array [Array [Array [Int ,31],015],04_3],31],0X51];Var $e,_fQ:Array [Int ,05];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3085))

    def test_3086(self):
        input = '''Class _x:_{Val $mx:Array [Int ,30];}Class L:V__3__T_3_d{Constructor (hAy8B0_,_,_D_GS9O_7,_,Qg_,_C,_:Float ;z:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3086))

    def test_3087(self):
        input = '''Class yz:_o{_7(){Continue ;Break ;}Destructor (){}Destructor (){}_t(){}Destructor (){}Constructor (_s7o:_v){Break ;Continue ;}$_s_4Q(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3087))

    def test_3088(self):
        input = '''Class _:_{Constructor (_,F_:_u_;MR_,_,G9,T:X){} }Class _:_{}Class _:_R_144{Var __hR,G,_,l6__8:Array [Int ,050];}Class _s_mV:O_{}Class _0g{Val _62_:Array [Float ,050];P2____T_(_3P:Array [Int ,47];Etb_J__:Float ;Y:Array [Int ,0b1]){l_13::$6();}x(_2:Array [Boolean ,0B1_0_0_1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3088))

    def test_3089(self):
        input = '''Class V:BYR{b_20(oM,S:Int ;v8q2,a7_62:Array [Boolean ,93];_,E:Array [Array [Array [Array [Array [Array [Int ,0b1_1_0_0_0],06],2_0],26],042],042];_,H_,L:G){}Var V:_;}Class _:I{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3089))

    def test_3090(self):
        input = '''Class a{}Class Q9{Var __,J:Array [Float ,070];Var _:Array [Array [Float ,0x5_1],0B1];_(){}Val $_:String ;}Class U7P{}Class H_{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3090))

    def test_3091(self):
        input = '''Class X:__{Var P:Boolean ;Var u,$_:Array [Array [Array [Array [Array [Array [Float ,0x72_6],0110],0X5E],0x97],35],07_4];Var $__:Array [String ,9];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3091))

    def test_3092(self):
        input = '''Class b:q06__ss{}Class R_Q{Destructor (){Break ;} }Class Y7E:_{}Class Y:_{}Class L:P{H(S,I:k;___:s;__:Array [Array [String ,4_0],04];V:_;_,_:Array [Int ,0b10_0_00_1];_,_2_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3092))

    def test_3093(self):
        input = '''Class _{$_W(_:Array [Float ,59]){}$6C(_:Boolean ;O:_5x_){ {Continue ;} }Var $607,$_:Array [Array [Boolean ,0b1],0B100001];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3093))

    def test_3094(self):
        input = '''Class _W5:_{Var y,$39__:Array [Float ,0x1_9_A];Constructor (P:Array [Array [Array [Array [Array [Int ,0XE],02_0],021],6_9],0x4E];_:Float ;_:Array [Int ,0b1];hu7V:S4;y,_____:_B;_:_A){}e__e(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3094))

    def test_3095(self):
        input = '''Class __835_9:L5{}Class v:_D{Constructor (_:f;_0u__:Array [Float ,0b111];y:a;A:String ;B:Array [Boolean ,58_84]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3095))

    def test_3096(self):
        input = '''Class _{Var _,U60,$m5_:_;Constructor (_i:i;I7_1:Float ;_Z_8,__3_:Float ;__:Array [Int ,50];__:B__9;l1:Array [Int ,0X34];x,_,kh,__:Array [Int ,0x62]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3096))

    def test_3097(self):
        input = '''Class _P3{Var $__,$3,$V,_,$___,$_4:F;Val I,f,$53:_;r5(_,__,_,_4,_Gh_Qm_,w,__q42_p,__:j;X:Array [Array [Array [Array [Int ,0x5_6F_5],48],0xA_4],0x2]){} }Class Ox7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3097))

    def test_3098(self):
        input = '''Class _14mY:W{Val _a,$91___,$_39:Array [Array [Array [Boolean ,51],0b111001],0X6];Var _,_V_:Array [Array [Array [Array [Array [Boolean ,56_2],0XE],0XE],0b111001],51];}Class _4u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3098))

    def test_3099(self):
        input = '''Class _24Q_:r{}Class o{}Class _{Destructor (){} }Class _:_{}Class D:k_{Destructor (){} }Class d{Val K,y,_:Array [Array [Array [Float ,6],0B10],95];Val d_02:i;}Class _:y{Val Y,$s_9T:Int ;}Class d{}Class _Ca:_{Var t,e,_,$__,$I_2,_,_,$_n:Z_;}Class K_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3099))

    def test_3100(self):
        input = '''Class _4Xi:o_{Var __,___7_:Boolean ;}Class _M:y_{J(c:Array [Array [Int ,0x2A],07];__,__,_,_:Int ){} }Class _:m{}Class f_:_{}Class u:b{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3100))

    def test_3101(self):
        input = '''Class f:m{Val $n_,$4,$4rF49:String ;Val $02_,$6M:_;}Class FY:X_{$w2_(_:Array [Array [Array [Array [Int ,1],63],042],0XEF_2]){Val X,v,a_:Float ;a::$_9();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3101))

    def test_3102(self):
        input = '''Class _0m:__{}Class S8__{Destructor (){} }Class B{Var __8_g,Oo:Z;Var __Go_,zl_:Array [Array [String ,0B10_0],42];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3102))

    def test_3103(self):
        input = '''Class f___jg1:_0jt{}Class _1{Constructor (_,_:Float ;_AS:Array [Array [Array [Array [Array [Array [Int ,0b1_1_0_1_1],0b1111],0B101010],0X37],0B101010],5]){} }Class _{Destructor (){Break ;{} }Destructor (){} }Class c_3_:_7S_{Val $IW:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3103))

    def test_3104(self):
        input = '''Class __V{}Class Y{$p_(K:Array [Array [Array [Float ,0XB9_0EBF15_D],0115],2];u:Array [Array [String ,0115],04163];_0_668_4O_7,_:String ;_sd4,O_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3104))

    def test_3105(self):
        input = '''Class ___:F_2{Val _:String ;Var $RHY__6,_,$B,$r,$w_4,$07_0:Array [Int ,0x8];Destructor (){} }Class _2V_{Destructor (){} }Class v2:_{Val $_:Array [Array [Int ,0x15],590];Var __:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3105))

    def test_3106(self):
        input = '''Class _E{}Class h_x_77:KU1{Destructor (){}Constructor (_:Array [Float ,0X50];_:Array [String ,0b1001001];T9j_N_,_:Int ;N,_h,r_w,d_D_,_:Float ){Val Q6,_:Array [Int ,070];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3106))

    def test_3107(self):
        input = '''Class hF:Y{}Class __{Constructor (ii:Array [Array [Boolean ,0B11010],4];____3_,L:Boolean ;_:T;__,Q_,_:Array [Array [Boolean ,03],03];Ps_92:i1;_:_;_s7_8_2:Array [Array [String ,03],0x34]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3107))

    def test_3108(self):
        input = '''Class i:_{}Class i:_rs{}Class X{}Class B3k9:__01_{}Class _:R{__d(w,_m3m_,_3N:Array [String ,065]){}Var $_,$_,$_,$_,u3_,b:Int ;}Class a{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3108))

    def test_3109(self):
        input = '''Class _:_{vH1(_Al,B,c,_:Int ;__,__,_,_:String ;c,_:Int ;_T__2:Array [Array [Array [Array [Int ,023],0X25],75],023]){Break ;} }Class _{}Class yp:_69{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3109))

    def test_3110(self):
        input = '''Class r__{}Class PB59IZ:_{Constructor (_H,H_B:Array [String ,0x2F];aR_L,_r:Array [Array [Array [Boolean ,02],01],18]){} }Class R:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3110))

    def test_3111(self):
        input = '''Class _v_:__{$_R(U:m8;t_,_7,_:Array [Array [Int ,0b10101_11],07_12_6];C8p,_,r,_:_;G:Array [String ,0b1011100];x_,_,_m:Float ;V:Float ;W:Boolean ;_I:String ){}Constructor (___:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3111))

    def test_3112(self):
        input = '''Class _:nEA_{}Class kA:mP_i337{}Class _z8:m{Var $0,$O,$0,$_,$3_d,$_Ye__,Z,_2:Array [Float ,0x1F6_6_9];Var $v_59,$M_0Z:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3112))

    def test_3113(self):
        input = '''Class M_:_{}Class ZQV{$WAT(){} }Class _{}Class _76:_{Constructor (v:Int ){}q(_:Array [Array [Array [Array [Float ,0B111101],0B111101],0B111101],0x63];_,J:_;_,x,U,O63_:Array [Array [Array [Array [Array [Int ,5],3],0X1],0x63],02]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3113))

    def test_3114(self):
        input = '''Class ceK{Destructor (){Val I:Int ;}Val ke8:Array [Array [Array [Array [Int ,79],031],0B1_1],0B1000000];}Class u{Val Wx4_,_l606_70,$5,$4_:Array [Array [Float ,8],79];Var Y0b_9_,$o,_:Array [Float ,031];Val _,Q,$A:Array [Int ,0B1000000];}Class W4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3114))

    def test_3115(self):
        input = '''Class k:_{}Class __{U_(b:Array [String ,0x6];b:_x){}Val $B:_;}Class d:C{_(E,_,h,_,_1,C:__;_,Ic:Boolean ;_f,_9_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3115))

    def test_3116(self):
        input = '''Class s:x{Var $7:Int ;}Class _:_{Val $9,k,q,_,_8,h,$_8e,_h_m:Y;Destructor (){}Val $q,$m_I:Boolean ;Constructor (_,c:Int ;z_,__,R:C0;_,w__J5,q:Array [Int ,071];t,r9,i_,P487,__4_:Boolean ){Break ;} }Class O6v4Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3116))

    def test_3117(self):
        input = '''Class M{Val _:_;Val _Lm4r,$__O,J,$_59,__,N1,P:__y_;$g(_,_J:String ;_,z,__:Array [Array [Array [Array [Int ,24],03],0B1111],24]){Val D,V87c:X;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3117))

    def test_3118(self):
        input = '''Class H_8:y{}Class _:_9X3_{}Class k_:__U3{}Class _7{}Class _2{Destructor (){}M(){}Destructor (){Continue ;} }Class x3:V9_{}Class H1:I{Val _,c8Fk:__;}Class _:g{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3118))

    def test_3119(self):
        input = '''Class _:g3{Constructor (X:Float ){}Val $_,B,$__,$4_:Array [Array [Array [Boolean ,062],0x47],2];}Class Q5{}Class _i60{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3119))

    def test_3120(self):
        input = '''Class tj_:c_j{Constructor (f,_:z;M9,_cZ_,t7,K,iKW:Array [Array [Array [Int ,6],0X23],0b1011010];__s:String ){Return ;}Destructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3120))

    def test_3121(self):
        input = '''Class G__5{Destructor (){}Val $4__,k,$8:Array [Array [Array [Array [Boolean ,0x57],0X36],48],0x1];}Class C_{}Class w:__2{Val Y7:eQ16;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3121))

    def test_3122(self):
        input = '''Class _:_2{}Class __66:_{$_5(__,A4,_U:Array [Array [Boolean ,71],0B11_0]){Continue ;} }Class _{__(){ {}{}Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3122))

    def test_3123(self):
        input = '''Class _8:ko{Val $a:k;Var $_,_3,$_C8_,$__:Array [Array [Array [Array [Int ,032],03],0b1001],02_7];Var L,r:Int ;Val _,$5:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3123))

    def test_3124(self):
        input = '''Class H{_(_1,z9Q:String ;_i,_,p,i4,d,d,c3,i_7,_,sb2K:Array [Array [Array [Boolean ,0b11],9],6];D5,_L,___,v:Boolean ;m,_:Array [String ,0121]){} }Class DM__Y:W{$2(_3:_1GX){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3124))

    def test_3125(self):
        input = '''Class _{}Class _9:_{Var _:Array [Float ,9_2];}Class N52A6K_:E3{}Class WX:j72_{}Class __:M_{Val G89:Array [Array [Array [Array [Array [Boolean ,0XA],063],0x4E],0X30],0X101];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3125))

    def test_3126(self):
        input = '''Class _2_{d_5_6m_5(___5,L,_Ea1,x:Float ){_::$__._.X73P_();Val zh:Float ;__l::$4();}$_(){Continue ;Continue ;} }Class _f_:X65{Constructor (){} }Class L{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3126))

    def test_3127(self):
        input = '''Class x{Var $44,_,$b,_:n;$_B(r,Y,__n9L_,__,B:i4;c_:Int ){}Constructor (){}Constructor (_,S:Float ;G,_,V,M,_:_;_,O6_,_,__H_:Boolean ;_:Float ;M:Int ){Break ;} }Class __{V9(){Continue ;} }Class _1:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3127))

    def test_3128(self):
        input = '''Class __:rF{Constructor (h,F4,_,P:k;__,_:Array [Array [Array [Array [Array [Boolean ,77],2],77],0X9_A],0b1]){}Var _,g,__,$_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3128))

    def test_3129(self):
        input = '''Class ar:_w{Var s:Array [Array [Boolean ,04],0B1001101];Val p4:Array [Float ,0x7D]=!!!!L::$4M();Destructor (){}Val $2:B;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3129))

    def test_3130(self):
        input = '''Class V{$4(__:_O;B,_,_,_:Array [Array [Int ,0b1],9_13]){}Val $_:g6_;Var _kUx,$f44:Array [Array [Array [Array [Float ,8_3],0X7],69_0_740],0137_4_175];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3130))

    def test_3131(self):
        input = '''Class h__{P(_8lh,_i_v:Array [Array [Float ,0X6],43];lL_1R,_92,C:a__;R5:_Z_;_,_:String ;q:m0;_o,___A53H_,m,X,Ko:String ;_,_:i_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3131))

    def test_3132(self):
        input = '''Class _{$03_N(__:Array [Array [String ,0X50],0b1_0_1_11];y:__9l_p;_:Array [Array [Array [Array [Array [Array [Float ,45],064],0b1],0b1011000],050],0b1011000];_,bP:Int ){Var b__k,Z:Boolean ;}$0(){} }Class d_{Val $_:O_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3132))

    def test_3133(self):
        input = '''Class K_:Y{}Class H77{Constructor (P,B2___,A9,L_:_;_t:Int ;_:C){}gMy(J,_:u){Continue ;Break ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3133))

    def test_3134(self):
        input = '''Class _7:__{}Class p{Val E:Array [Array [Float ,0b1],01];Var _,$88,__:Array [Array [Array [Boolean ,3_7],0XD_3],0B1_10];}Class _7:g{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3134))

    def test_3135(self):
        input = '''Class _{_(dc7r:Int ;GF_:Array [Int ,0x4_7_410];S:String ;TR:Boolean ;v16Bb_B:Boolean ;p67:Array [Array [Int ,0124],0B1_001_00_0]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3135))

    def test_3136(self):
        input = '''Class z_{Constructor (){}Val $9,$z,_8,_,t3_H_,__:Array [Array [Array [Array [Boolean ,0x34],0140],0b11_01],0x34];Val e:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3136))

    def test_3137(self):
        input = '''Class xp4__:X{}Class _{j__Vs_vH(_n:Array [Boolean ,0X9];___,_66,V,_7U_,B:Float ;_,_Y9Yj2l,f:Array [Boolean ,0b11];b:K7j_;P,_:String ;l,A_:O){Continue ;} }Class _{Destructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3137))

    def test_3138(self):
        input = '''Class _9{}Class _:_{}Class k4_:bLq__{Constructor (_0,_3_,_,f37_:dEs5;d,C0:K8;_,_:Boolean ){Break ;_14::$i();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3138))

    def test_3139(self):
        input = '''Class _189:F{}Class _B__D{Var $A_5:Array [Array [Array [Array [Array [String ,37],0B1_1_00],7_8],37],0B1];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3139))

    def test_3140(self):
        input = '''Class T_:K_{Destructor (){}$69_(_,S:Float ){}Destructor (){}$33(){}Var $1,m7:Boolean ;Val _27_,sH,$__,_e_:x2;Var W__0:Array [Array [Int ,01],065];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3140))

    def test_3141(self):
        input = '''Class _{}Class A69:_18{Destructor (){} }Class qWT4_u_:f{Constructor (_:_7){}Constructor (e:Float ;H:Float ;v,_:Int ){Break ;Return ;}$7(_D_J___a:Array [Array [String ,05_1_1],0X4]){Var _1,_,_,W_4,V,_,U,__,__1,_3,n,UP,_8:Int ;}Val n2:AEL7;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3141))

    def test_3142(self):
        input = '''Class m80:_{}Class _R{Constructor (___4,_:Array [Boolean ,0XA]){}$7(Y,_87_,_x:Array [Int ,2_5];M:____r_;_,l:Array [Array [Float ,0B100010],56]){}Constructor (h__:Array [Boolean ,02]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3142))

    def test_3143(self):
        input = '''Class x:I{}Class _{Var $7,$J,$O:String ;$N_q(g,Fd__1,L,i,y,O,_x_0_,k,IR,_x8,_,C40_:Array [Array [String ,0xA_B_CA],0b10_1000_1]){}Var $_61,_,$M:Int ;}Class _43{Var X8:__5K__x1;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3143))

    def test_3144(self):
        input = '''Class w:__d{}Class _OD2{Val z:g;Val $w:_L67___X;$Z__(G,oIza9:Boolean ;o,X,_823:Boolean ){} }Class _:__{Var V:Z;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3144))

    def test_3145(self):
        input = '''Class e:_{Constructor (_6_,_g:Array [Array [Array [String ,0x1],0X4E],02_4402];_:u_50;K,g,k_,A6:_;_:_){}Constructor (){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3145))

    def test_3146(self):
        input = '''Class z{Var $_:Array [Array [Array [Array [String ,0B10001],0b1001010],60],2];Val $_6w,$7G:Array [Boolean ,042_1];}Class _{}Class p:x{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3146))

    def test_3147(self):
        input = '''Class _:IV{}Class A{o(){Break ;}Constructor (G__f,c,R3CF86,_Q,__,_:Array [Float ,0b1];R,_:Array [Boolean ,61]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3147))

    def test_3148(self):
        input = '''Class yy{_6(M:String ;E7:Int ){Break ;}Var $_:Array [Float ,9_52];Var _:Array [Array [Array [Float ,05],66],21];Val $E:_;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3148))

    def test_3149(self):
        input = '''Class _Z___73G{}Class Q{__b(s,_,W:Array [Boolean ,3_8]){}$_O_(j,__,_:_q_v_3;H0p__q:Array [Array [Array [Float ,0x4_57],3_28],04]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3149))

    def test_3150(self):
        input = '''Class _{}Class Y{Destructor (){} }Class _:M_{Constructor (){} }Class o_{Val x,b_:Array [Array [Float ,023],023];Destructor (){Continue ;}Val _,_,$g:_s;}Class ____98{}Class g{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3150))

    def test_3151(self):
        input = '''Class SS:_{Constructor (_8:Wp;l,J:Array [Array [Array [Array [Array [String ,1_43_10],0x6],01],0B1],0x7A8];n,_8_u,_,_,E:Array [Array [Int ,0B1],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3151))

    def test_3152(self):
        input = '''Class _{}Class _7:j_{Val I3_,_6:Array [Array [Array [Boolean ,0x41],2],3];}Class _:_57{Val _,$_:String ;}Class ___:_{Var _1_:_9;Destructor (){}Val q:Array [Boolean ,52];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3152))

    def test_3153(self):
        input = '''Class _:r{Destructor (){}Destructor (){}Val G:Array [Array [Array [Array [Int ,0116],0B110111],01],0x3A];}Class G0{}Class _:Rv_{}Class _{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3153))

    def test_3154(self):
        input = '''Class t{$_(){} }Class p4{Constructor (q,Xc_,_506:String ){} }Class _{}Class _6:F8_5_O{_89e79(__a:Boolean ;Qd_:g_;M:R_;fm:Array [Array [Array [Int ,3],030],030];_,_6__U:h_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3154))

    def test_3155(self):
        input = '''Class G__f3Y:_{}Class _{Constructor (){} }Class p:L{Var $i:Array [Array [Array [Array [Array [Float ,0B1_1],012],0b110101],0B1],55];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3155))

    def test_3156(self):
        input = '''Class _Jsm1_{}Class K{$5(h_qe9,_:Array [Array [Array [Int ,05],0B1],9_64_6]){Continue ;}Var _,s,$_,$_,$1,__:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3156))

    def test_3157(self):
        input = '''Class Z{Constructor (_0,_,obu_,_,_,t,_Pg,H__:d;l,_:Boolean ;_:Array [Float ,7_5];_k__,u4,G10,_2_1:_O3){}Var $42,s1,e,$1:__;}Class _{Var _Y,y:Array [Array [Int ,0b100111],015];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3157))

    def test_3158(self):
        input = '''Class A:_0_{Var v,$11,__,L__:Array [Array [String ,1_0],0b1_0_1];}Class _:_6{Destructor (){} }Class _:b_{Constructor (b,U,T_:Boolean ){} }Class _1_{Constructor (_,__o,r:Array [Array [Boolean ,0X4],52];O,_:V;_u2,_M_:Float ;j,_,_:Int ){}$4(){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3158))

    def test_3159(self):
        input = '''Class p8{Constructor (_____Om:Array [Array [String ,8_69_3_0],0B1];B_,___:Array [Array [Int ,0B111001],100];g:Array [Array [Array [Float ,0XE],0X18],0137]){Break ;} }Class _{Var R,$_:_83;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3159))

    def test_3160(self):
        input = '''Class p:_3{}Class _{}Class _{Constructor (E8_,q_:z;W:Array [Array [Array [Float ,064],061_1_4],7_8];J2c,_8:String ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3160))

    def test_3161(self):
        input = '''Class U{}Class yP__:P__{Val a,$_i:Float ;Constructor (R,w_7e_,u_1_Y,_:Boolean ;n2MY,_0___,t,J,_,K:_o0;_6:JyV0;_h52,D__0,_,_baG2p,w,__:Array [Boolean ,19]){} }Class w36u8_:_Th{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3161))

    def test_3162(self):
        input = '''Class F_H:__{Val $V_3G__e,I7__:Array [Int ,79];$F(){Continue ;}H(Z:_;Z_:Array [Array [Array [Float ,015],0x9],0B1001011];_,_:Boolean ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3162))

    def test_3163(self):
        input = '''Class j_{E(waEk:Array [Array [Boolean ,56],033]){Return ;}Destructor (){}Constructor (){}Var $D:Float ;Val _x,_2,F,R:Array [Array [Float ,033],8];}Class __r:d{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3163))

    def test_3164(self):
        input = '''Class __5:C_{o(KB_y_,n,Q_:Array [Int ,4]){Continue ;}Val X:Float ;}Class Z_D:_{Constructor (s___,B,_:I;A,o,_:Float ){}Val h_,$1,y,__Hi,$7_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3164))

    def test_3165(self):
        input = '''Class X4{Var e,$P,___:Array [Array [String ,4_9_0],0x1_9];}Class __1h8_:f_m{}Class _{Constructor (){Val m,_:Array [Array [Boolean ,41],9_25];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3165))

    def test_3166(self):
        input = '''Class n2_:c{_Z(L_p__,ki:Float ){}Destructor (){}Constructor (O:Array [Array [Array [Array [Array [Array [Float ,0B1010110],0x37],97],0B1010110],0x37],0x9];X_414:G5;A:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3166))

    def test_3167(self):
        input = '''Class E_{Constructor (N_,Oa_X:String ){}Val _,$J,p:Array [Array [Array [String ,0x6_4],59],0B11000];Constructor (){} }Class _E_29p{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3167))

    def test_3168(self):
        input = '''Class __{_(g:T;h:_;_,_,Z:Float ;_:Boolean ;f,d:Float ;z_,_S:Array [Int ,0X36];COd,__5_,E:Array [String ,0B111111]){}Constructor (_,m08_3W:Boolean ){} }Class _{}Class Us7{Constructor (Ny_:Array [Int ,4]){}$D(W6:A;U:Array [Int ,0x21]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3168))

    def test_3169(self):
        input = '''Class _:y{Val $vC_,__,_,$__,_42__:Array [Array [Array [Array [Boolean ,0b1_1],0B1010111],3],3];Val $r_New ,J,__,$3,$_6_,_,_:_;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3169))

    def test_3170(self):
        input = '''Class C033B___:_t{}Class _1:_NX{Val A,_,_,$9:Array [Array [String ,03],4];Constructor (_,E0,l__f:Float ){Break ;}$__(){Return ;}Val S_:Boolean ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3170))

    def test_3171(self):
        input = '''Class _:_{Constructor (){}Destructor (){}Constructor (_:String ;_,_K:Array [Array [Array [Boolean ,0b10_0_0],10],10];A_7:Q){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3171))

    def test_3172(self):
        input = '''Class __S{Destructor (){Break ;Break ;} }Class g{Constructor (){Break ;} }Class _2{Val $9,_,__,__4,_0I:Array [String ,02_2];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3172))

    def test_3173(self):
        input = '''Class _:x__{Constructor (){} }Class _{}Class _8_:Y{$78(_,Q:J){}Val $_:Array [Array [Array [Float ,0B1011],9],27];Var P,$s3:Array [Int ,0x4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3173))

    def test_3174(self):
        input = '''Class _L:_{_(w,s,_4,q,C:Array [Boolean ,32];z:l_b;__4,NX:String ;t__,_,_:___){} }Class _:_{Destructor (){} }Class sO_:_{}Class I{Destructor (){Break ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3174))

    def test_3175(self):
        input = '''Class y{Constructor (_:_;_e_,_,_N:Array [Array [Array [Int ,0b1_1_01_01],2],016];_:_;_:Array [Array [Boolean ,0X95],0x4B]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3175))

    def test_3176(self):
        input = '''Class BEY{}Class __G:o{Constructor (){Continue ;}Destructor (){} }Class _{}Class T_{}Class _{Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3176))

    def test_3177(self):
        input = '''Class _{Constructor (_,U:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0X6_8],030_17],0B1],0B1000110],0B1000110],03],9],0B1000110];_9_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3177))

    def test_3178(self):
        input = '''Class w_0{}Class O:_{}Class _{}Class _{Constructor (_,j,l4_Z2y7,x__,_7_,_5D6d,_j,_,v_,_:Boolean ;__5,_,_,_C,J__D4__I,G__9,_50:String ;u05_,a_:String ;_,j,Y:s7O_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3178))

    def test_3179(self):
        input = '''Class K:k{Constructor (E:Array [Array [Array [Float ,04],0X3A],064];f__,_s65:Array [Int ,30];p,N,_G7f,_,A_:String ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3179))

    def test_3180(self):
        input = '''Class _0C{$_g_uc_(e8x_4_,P_,_8_:d;_C,_3__g,_:Array [Boolean ,0b1010011];_i2,_,F:Float ;HA:Float ;__0:Array [Float ,633];_6,__,__,w,E,_04f_,_77_C7,r,Y,_:String ){} }Class ge7:Mh{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3180))

    def test_3181(self):
        input = '''Class _{}Class r:f{}Class M3_:_{Constructor (){}Val w,___3:P;Val D:String ;Destructor (){}Destructor (){ {} }}Class U{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3181))

    def test_3182(self):
        input = '''Class _:cXb{Destructor (){}Var $612,_,L,a,$8rd6,__1,_:Int ;Destructor (){}Destructor (){}Val $S,gC,$D5:Array [Array [Boolean ,0x40],07];Var $5:Int ;Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3182))

    def test_3183(self):
        input = '''Class _U{Constructor (R:Array [Array [Array [Int ,85],0x13],2];_,U9_:__;fpi67__:_1_;t:_5w_){Continue ;} }Class n:_NW38_{Val $4H,$__d_:Boolean ;Var _44Ge,$7:Array [Boolean ,0B110];Var G7_:y;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3183))

    def test_3184(self):
        input = '''Class _{}Class __{Constructor (Y,Oef,__5_t,CT8,____,H:Q2;h,_7Z,_k_5:B;_,X6pI_,__j2,z_:Array [Array [Array [String ,0xE],0644_456_7],0b111]){}Constructor (XX__,_,w:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3184))

    def test_3185(self):
        input = '''Class __:x_8_2u_4s{_(__:Array [Array [Array [Array [Int ,0b10_1_0],0X6_9],03],037]){}Var $W,f:Array [Float ,8];Val $b_,g:E;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3185))

    def test_3186(self):
        input = '''Class R_W3:S{}Class _{Constructor (S:Array [Int ,0b1010];os,i4,__7:Array [Array [Float ,0124],04]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3186))

    def test_3187(self):
        input = '''Class Y_9__{$___(_9j3I:Array [Array [String ,0x5A],0B110];J8_:Array [String ,0B1];a:Array [Array [Int ,0x5A],0X27];Tzg6,g_:String ){Break ;Val _:Int ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3187))

    def test_3188(self):
        input = '''Class X{Val $Q:_;Constructor (E:Array [Array [Array [Array [Array [Float ,0B1010011],11],7_7_2_6_50_2_11_6],05],0107];_,__:y_9){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3188))

    def test_3189(self):
        input = '''Class t4:J{Var $i,_:Int ;$L_9__Z_Fe__(h_:Array [Array [Array [Int ,04],0X2_4],65_5_673];f_:Array [Int ,0b111010]){} }Class U{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3189))

    def test_3190(self):
        input = '''Class W{Val _9_:Float ;Var R,$_Q,$7,$_3:Array [Array [Array [Boolean ,48],075_5406],0B1];Constructor (IS,hUQ:Int ;X:Int ;__02,____:R;_S0_I:Array [Array [Int ,0102],0X4_3];_S,T,R,_6,__Lp,_,_,m4:_;I:U;W1:Array [Array [Boolean ,0b1_0],1];_1,_7,i:Array [Array [Array [Int ,0XD0],48],0B1]){Jk2::$_4();}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3190))

    def test_3191(self):
        input = '''Class _47:_{Val _4:Boolean ;}Class v:y{$vaH_(){}Constructor (){Continue ;}Val $_9:Array [String ,0X49];$6(bg8,_:_){} }Class S_{}Class _:r{}Class _{}Class _:_{Destructor (){} }Class _:X{Constructor (O8E:Array [Array [Boolean ,0B11_0],0B1];I_,wi_,D_V:Array [Array [Boolean ,0b1],97];_6o,_5,_37_:Boolean ;A:Int ;_0___,_:A){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3191))

    def test_3192(self):
        input = '''Class zV1:G{}Class B:__{Val _125:Float ;Constructor (){Return ;}Constructor (B3,_,u_P_,Z_V,_:C2){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3192))

    def test_3193(self):
        input = '''Class _{}Class o{}Class __:_c9{}Class EO:_{Constructor (){}Val _2y,$_:oB;Var $___S:Array [Array [Boolean ,0x96C_6],57];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3193))

    def test_3194(self):
        input = '''Class P{}Class y_8v{}Class D:R{$54(){}Var _Ig,_,_8FN:Float ;Destructor (){ {}Continue ;} }Class k{Val $_,$x_,U,_a3,__z:Float ;Var $7,$b4c__o_2k_r,N_5t92,v7:Float ;t_(){} }Class l_:_W93_6{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3194))

    def test_3195(self):
        input = '''Class __{$_(x,l:mT;T4_5B,L,__:Boolean ;_,_0:Array [Float ,0b11];J:Array [Array [Array [Array [Float ,2],0B1],0X9_0],0x2]){}Constructor (_,_:Int ;pB:Array [Array [Array [Boolean ,0x60],0x60],0131];_,y:Boolean ;c,w:Array [Float ,2];_0:Array [Boolean ,0b1];d,HR:Array [Float ,0xB];__:Array [Array [Array [Float ,0B1],9],0131]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3195))

    def test_3196(self):
        input = '''Class __6:_{Constructor (j:Array [Boolean ,7];_,e:Array [Array [String ,0xB],7];__1,_,z_:OPF;_1:Array [Array [Array [Array [Array [Array [Array [Array [Float ,03_1],7],0B110000],7],0x1_7],0115],04_2],0B1_0]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3196))

    def test_3197(self):
        input = '''Class a5z:H{Val yN,_:Array [Float ,72];Destructor (){x_._();}Constructor (lC__y,_Y:Array [Int ,9];LN,Xb_:Array [Array [Float ,0x40],0107];_:Array [Array [Array [Float ,0XE],0XE],72];c_:Array [String ,0107]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3197))

    def test_3198(self):
        input = '''Class r{Val $7mv:_R;}Class M{$6K5(_5_:Float ;_j,_7:_;i,h1,ML_J,G,_7:_35;Z,b5__r:___){ {} }$_(){}Val $1:Array [Float ,0101];}Class _6:j{s(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3198))

    def test_3199(self):
        input = '''Class Z{Cc_2(L,_8,v,M,_6_9:Int ;_W,V,__,M2_q_:Float ;T,k,eK:V;_:String ;Ek,N6,_C__jP1i,X_Y:String ;O,_,_,_:Boolean ){}Constructor (__iI:s;_,s:Array [String ,0xB6];Y2,M_719,_3:_;e_:__;B,t,_,gL,_,_hU,_,V,e:Array [Array [Boolean ,71],0xE];rW:k){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3199))

    def test_3200(self):
        input = '''Class o_{Constructor (_21:I__yI;_:Array [String ,02];_,C:Array [Array [Array [Boolean ,0b1],0x4],65];_:Array [Float ,0b1101]){ {} }}Class _I:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3200))

    def test_3201(self):
        input = '''Class _{m(){}Constructor (){}Constructor (i_2,__:String ){ {} }$I1_i(){}Val $__,_,_1O:Array [Array [Int ,0101],0X1_C];Var _4_:String ;}Class t{Val $0,_:Float ;}Class T_3:_{Destructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3201))

    def test_3202(self):
        input = '''Class QY:uh{Constructor (i6_4:F;_d3:_m;C98:Array [Float ,0x25]){Continue ;}Destructor (){} }Class _6:ZS{Var _:_;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3202))

    def test_3203(self):
        input = '''Class _5:_z3{}Class cf{Destructor (){}$8(g:Array [Array [Array [Array [Int ,9],0X8],076_3_3_6],8]){Return ;} }Class a9_{}Class _:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3203))

    def test_3204(self):
        input = '''Class T7E:___k{Var $_:v;Val V3,$1:Boolean ;Val O___,L,C_,$Qo:String ;Destructor (){ {}Var _q:Array [Boolean ,0X4];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3204))

    def test_3205(self):
        input = '''Class __:k_L8B{}Class Y52{Destructor (){Return ;}Val _G,$4:Array [Boolean ,0X2];Var _,$_,_4,P,V97,$_3:G0;}Class v{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3205))

    def test_3206(self):
        input = '''Class j0:_{Var __,$N,$0___:Array [Array [Array [Array [Array [String ,60],0b100],0x63],0x63],0x63];Val _:Array [Array [Array [Array [String ,0X3B_A1B],0xF],1],04_1_0];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3206))

    def test_3207(self):
        input = '''Class _:_{Constructor (_:Array [Array [Array [Float ,053],0XDD_2],0xB5];_,_,_:Array [Array [Int ,053],87_9];x,X,z:j4){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3207))

    def test_3208(self):
        input = '''Class xr9:_U1{Var $v:Array [Boolean ,0471];Var _45_K,$_:Int ;Var $_c8,$V:_3;}Class _M____:f_1X{Val $oK:Array [Boolean ,0B101010];}Class m:C{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3208))

    def test_3209(self):
        input = '''Class __:W{}Class O{$5_B0(s,T,fc3:_;_4,___8:Array [Array [Float ,070],94];C:Array [Array [Array [Array [Int ,0B100001],3_28],0b1_0_1_11_1],0x52];_:Array [Array [Array [Array [Array [Array [Array [Int ,0675_0_0_62],054],0B100001],94],054],1],8];_y__:String ){Break ;}_(l:N){Continue ;{} }}Class _Y{Var b____6:Array [Float ,0XD];Destructor (){} }Class _8I_n{}Class b_CL5_{}Class Z_W8wb:M{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3209))

    def test_3210(self):
        input = '''Class du{}Class gt1:S8{Destructor (){} }Class ____{Var K,$JG_:String ;}Class _V8:b4{Constructor (J,d6,_,_,J6,A,__,_,_:Float ;____:_;_Rc:Array [String ,0X4];sPvJ_,__:q___hJ3){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3210))

    def test_3211(self):
        input = '''Class r30{Constructor (xg_,d3,_,N_,_n_B_3,I0:String ){ {} }}Class _v363{Destructor (){Val i,_4:Array [Array [Array [String ,7_2],0b11101],0x9];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3211))

    def test_3212(self):
        input = '''Class _{}Class ba_0:P{Destructor (){}Constructor (R:Array [Int ,8_9];_,b___1,_,_V,_:X;X_,_,_t,_:Array [Array [Float ,0X4_1],0b1];D:v;_NLe,P_G1,i,_ioa,l:Array [String ,74];d,__,k_,_:n_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3212))

    def test_3213(self):
        input = '''Class _:G{Val $QX:Boolean ;Var $J:R_;Val L,_A,$rD:_6;}Class Q:_i{}Class _Tr:_7{Val $8l3,$9_e,$O:r_;}Class MO_{}Class __3_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3213))

    def test_3214(self):
        input = '''Class __{}Class _:__S41j_7{Destructor (){}Var _:Boolean ;}Class n:_{$iV(){Val _W,z6:_e;Continue ;} }Class JW:A{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3214))

    def test_3215(self):
        input = '''Class ns918{}Class _{Var $M9K,_7:Boolean ;__(){}_2(y6,__Dm_:Array [Array [Float ,017],1]){Break ;} }Class N__0:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3215))

    def test_3216(self):
        input = '''Class _{Vhu(_F2,Y_,_7hRI8,_,Du,M:Array [Array [Int ,05],0b1010010];Tb7,_:Float ){} }Class L{}Class y9____:___{}Class x5_1H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3216))

    def test_3217(self):
        input = '''Class _9{Val $_94_,$Q:Array [Boolean ,0B1];Var _,PbE,$m279,_h_,$g_,o,$B:Float ;Var __,$_,e_5:Array [Array [Float ,0107],70];Constructor (_,r3:Float ;_:String ;T,_k:B9tb6T61;_,wo,__1ICw,_,_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3217))

    def test_3218(self):
        input = '''Class _o4:_H_4s{Var $_:Boolean ;}Class M_:i8{}Class u:_{Var $M,$k:Int ;}Class zUwOK{$72_(B,W:X;N:Array [String ,0x9];__:Array [String ,0134]){} }Class H{}Class F_{}Class _4__:p{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3218))

    def test_3219(self):
        input = '''Class oW:K{$5(){}Constructor (_,z:_){ {{ {} }Continue ;}_::$_().tg().B();}Var $v_:Array [Array [String ,0B1],05];Constructor (_M7__t:String ;S:Array [Array [Int ,4_5_9_5_7_2],02]){Return ;}Destructor (){Continue ;}Constructor (_9___:S_;_,_,d4:_x){}Val _:Int ;}Class zk:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3219))

    def test_3220(self):
        input = '''Class b2__:C1{}Class __s3b9X{}Class T:Y_{}Class _:_{Val z,__,___,b_G,$2,x:Array [Array [String ,0x9_B],0B1100000];}Class E{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3220))

    def test_3221(self):
        input = '''Class _{Var $W7,_,t,$_:j_B_;}Class o__{}Class c_Cu:__q_{Var $__:Array [Array [Array [Float ,0XAB_2],3],06];Destructor (){} }Class AWt_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3221))

    def test_3222(self):
        input = '''Class _{}Class s{}Class _{}Class K_5_R{Var $_X,_s,$__E,_,$6:Float ;Constructor (g:_){} }Class lt3_6{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3222))

    def test_3223(self):
        input = '''Class d_y{}Class _{Constructor (){}Val _,$9:Array [Array [String ,54],0B1_001];$_(){Continue ;} }Class l:w{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3223))

    def test_3224(self):
        input = '''Class p:wD{Val $7Z8,$_:Boolean ;Val $B_,_5___v,$0:Array [Array [Array [Array [Array [Array [Int ,92],0B1_1_1],0X27],0X27],0127],75];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3224))

    def test_3225(self):
        input = '''Class I_{}Class x:___g1h{}Class pZQ3Of4:v{Val __O,$6,$kK_U5k:Array [Int ,4];$t4(NT_:Array [Array [Array [Array [Float ,0X4D],3],0xE],0x4];_,P:__;_:qJn4){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3225))

    def test_3226(self):
        input = '''Class _:c_{}Class X{Constructor (){}Var _1N,$n,$o7,_,$ji:Array [Array [Boolean ,29],01_75_2_6];}Class _:_{}Class __{}Class E{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3226))

    def test_3227(self):
        input = '''Class g{_Y_(b_,W_,p0:Array [Boolean ,3];_:Array [Array [String ,06],0b101]){}Val $v0_:Array [Array [Array [Array [Int ,0X6],043],40],3_17];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3227))

    def test_3228(self):
        input = '''Class _e:_D{Constructor (_2d:Float ;_6,_:Array [Array [Array [Float ,0X6],94_4],0X9];X82__4:Array [String ,89]){xE::$m();} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3228))

    def test_3229(self):
        input = '''Class R_:W_4{Val $_,vP:Array [String ,56];}Class _{$9(){Var D,_:Array [Array [Array [Array [Array [Float ,0B1],0b1],0x47],0x7],041];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3229))

    def test_3230(self):
        input = '''Class _{Val $4:_;t(){Return ;} }Class _5Q5m_:_xh__v_S{Destructor (){Break ;}Val B6t_,$4:_;}Class ltLy5{$__(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3230))

    def test_3231(self):
        input = '''Class _{Constructor (i:Array [Boolean ,0B110010]){}Constructor (_5:Array [String ,01];u8:T;m:Array [Int ,0x37]){Break ;}Var __:Float ;}Class _{}Class X:_16_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3231))

    def test_3232(self):
        input = '''Class q8v7:__{$e_b_(){Break ;}Var M,$___,$7:Array [Array [Array [Array [String ,0b1_00],0X23],0B1_0_0_1],0X9_7_4];}Class x3_G:V{Var $O_:Array [Array [String ,0b1010001],3];Val _:Array [Array [Array [Boolean ,0B1],03],0b1010001];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3232))

    def test_3233(self):
        input = '''Class __2:H{}Class L:o_{}Class k0_{_(_E_,_,__,_8_:_;_:Boolean ;_:Array [String ,0B111000];_:_;_A__:Float ;J,v:Array [Array [Boolean ,0B10_0],0xD]){} }Class ___:_{Val _,j:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3233))

    def test_3234(self):
        input = '''Class _:_e{Destructor (){Return ;}Constructor (){}Destructor (){ {Break ;Continue ;} }}Class _:v_{Val k8,_t_d,z,____51_3_,$4:Int ;$_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3234))

    def test_3235(self):
        input = '''Class X7:e_O_{Destructor (){}Val $xw:Array [String ,0101];Var _,$94:_f;Val Q_316,$9Y_2eo_i,P:Boolean ;}Class _8_{$5_3_y62_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3235))

    def test_3236(self):
        input = '''Class J:_XJv{}Class _3:t{Var _,_,c8qg_8,$_:__;Destructor (){} }Class _:_{}Class C_{}Class _{Constructor (){}Var $Yn83:S8k3_9;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3236))

    def test_3237(self):
        input = '''Class S:c{}Class tM{}Class U:_{}Class w:E{}Class _:qX_{}Class J:__{Var _9:Int ;Constructor (_4:Float ){}Var $o:Array [Int ,0B10];Var _,_:Array [Array [Int ,047],02_3];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3237))

    def test_3238(self):
        input = '''Class bN:_{_(_:Array [Array [Int ,0b11],0b1];C:Array [Array [Int ,0xD],0b11_01];D,_e7,_y:Array [Array [Array [Array [Boolean ,3],0x28],0b110101],178]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3238))

    def test_3239(self):
        input = '''Class _538{Val $___,$_K:Boolean ;}Class P:_{}Class B_{Var _x7_,oL,_S:Array [Array [String ,3],0b1_1];}Class _A_{Destructor (){} }Class O:_{}Class _b:_6{}Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3239))

    def test_3240(self):
        input = '''Class _{$B(_81u__W,_:Array [Float ,0b10];_,a_:Boolean ;m_:Array [String ,71]){}Destructor (){Return ;} }Class ___{Destructor (){Continue ;Continue ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3240))

    def test_3241(self):
        input = '''Class _:T_t{}Class d:_Y{Val $9:_5;Val _:Array [Array [Array [Array [Array [Array [Boolean ,0b10010],0X28],0B1],0XB],07],0XB_C];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3241))

    def test_3242(self):
        input = '''Class V{$_(_Xw_X1:String ;_:__;t,_7,x,_b:Float ;_G,J_,_,E__,x,nO,__i0:Array [Array [Boolean ,0x2],0b10110];K_:H;WC251:L9){} }Class _1:_RoW8{}Class H:o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3242))

    def test_3243(self):
        input = '''Class _9{Constructor (X:i;_:Boolean ){} }Class A:mv809{}Class v{Var _k:Array [Array [Array [String ,80],80],07_6_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3243))

    def test_3244(self):
        input = '''Class _i:_{}Class y{$277_t_2_9(){} }Class _{Val _:Array [Int ,07];Constructor (_Rb,vL7,S:P_H){}Val F:String ;Val $y0,$V4:_8;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3244))

    def test_3245(self):
        input = '''Class T{$_(_:Array [Array [String ,0x22],0b11011];z:Float ;J:Array [Array [Array [Array [String ,0X5],0XE],20],0xCC];_2L_tK83Y,_3:i6){} }Class _X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3245))

    def test_3246(self):
        input = '''Class _{Constructor (){New f3()._().__().X8_().__.W._09u();} }Class R:O0{}Class _:v__u{Constructor (M:udh){} }Class z:_u8{}Class ax5:rV86{Destructor (){Var _7:String ;} }Class _{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3246))

    def test_3247(self):
        input = '''Class m_g:Qm{Constructor (t_:Array [Array [Array [Boolean ,17_0],919],0126];_:Boolean ){} }Class s{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3247))

    def test_3248(self):
        input = '''Class _t{$2(_:Boolean ;_,_ek,_S8C0,r:Array [Array [Array [Boolean ,0b100101],0b1_11_10_1],6];_e,__,H,u,zz,_:_;_i:Float ;h,_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3248))

    def test_3249(self):
        input = '''Class u3A{}Class _h:T{Var $1G,$_:r;Destructor (){ {__T4M::$D_2wl();} }}Class _8t_{}Class __4_2:__{}Class _q3:qv5{Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3249))

    def test_3250(self):
        input = '''Class __1:n2_{}Class k:p{}Class _{}Class W:j_q{}Class i_{Constructor (M,w_3:Boolean ;_,r_:Array [Int ,0B1001]){}Var _6q,_:Array [Boolean ,3_4];}Class G9_:_1z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3250))

    def test_3251(self):
        input = '''Class Ba4_{}Class _{}Class w:v7X{$__(I:Array [Array [Int ,0B1010110],0B1];E,u5s3_G,_39,U,_:Int ;_,_1:Array [Array [Array [Int ,2],070],015];a:Boolean ;___,_:_5Dw;n:Array [Array [Int ,41],2]){ {}Var G__:Array [Float ,0b1000110];{Continue ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3251))

    def test_3252(self):
        input = '''Class _S1:U5A{}Class h:_{}Class Y:_Y_3W1_{}Class __2Z6_vq{Var m,$U_1_,_5,R,C_B7,_:Array [Array [Float ,67],67];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3252))

    def test_3253(self):
        input = '''Class _25U8{Constructor (_S11:Float ){Continue ;}Constructor (BC,RB,_1,G_Q:String ;D,E_,_5,_,_4,___:String ){Break ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3253))

    def test_3254(self):
        input = '''Class _:_{Destructor (){}Var __9:Int ;$3(w,S_:String ;u,_:_;_,_:Array [Array [Boolean ,07],46]){}Constructor (_9:Float ;O:Array [Float ,0123]){} }Class _7:__{$Q(_:Array [Float ,0b1001111];_,_,YDU,xS1L_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3254))

    def test_3255(self):
        input = '''Class N20:M{}Class j{}Class R{}Class Vz{Val vwq,_,__:_;}Class _q___nv:_{Destructor (){}Destructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3255))

    def test_3256(self):
        input = '''Class _{}Class N:_{}Class _28{Val $a:Array [String ,0xD_EA];}Class _5{}Class pa5__:B{Destructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3256))

    def test_3257(self):
        input = '''Class V:y__{B_4ak(_D__:_q2_;n,_:Array [Array [Float ,0X17],0b1_0];k2:Array [Array [Array [Array [Array [Array [Boolean ,046],07_2],0X17],0x29],0X17],0B11];_,s:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3257))

    def test_3258(self):
        input = '''Class _{Destructor (){}Destructor (){}Constructor (){ {Break ;Break ;Var r:Boolean ;}_::$q.__v8.__().E();}Constructor (G9,_D,_6p82ep:___t){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3258))

    def test_3259(self):
        input = '''Class __:_{}Class k:_7{Constructor (f_,__1,_k,_,___7P:Boolean ;V:f;_07:_R6_1;u21__:j){Break ;{}u::$_();}Destructor (){} }Class tT{}Class h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3259))

    def test_3260(self):
        input = '''Class ___76{Destructor (){} }Class _4_2Me_{Constructor (u8u,cp5_R:Array [Array [Int ,0X7],0106]){} }Class _:i9w{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3260))

    def test_3261(self):
        input = '''Class _M{Constructor (_r:_;_c__4,_,G3,_M_7:String ;W_,_:G_D;Y_,z,Z:Array [Array [String ,25],81];_:A){} }Class u82:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3261))

    def test_3262(self):
        input = '''Class _{Var $3:Array [Array [Array [Array [Array [Float ,044],0103],0103],0103],0x2B];Val $3,$yP,$_,r:Array [Array [Int ,0103],05];Val $2:Int ;}Class _U__:L_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3262))

    def test_3263(self):
        input = '''Class d{}Class _6:_{}Class ___{}Class _:c1CE{Constructor (H,y,__,BH_,__:String ){}Destructor (){}Var $_,$P,$_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3263))

    def test_3264(self):
        input = '''Class __:__43{}Class _:C__0_8Rp939{Constructor (i,_Q3,A_S,P0H:Int ;U8_,D_,t1o:Array [Array [Boolean ,0x53],0xD_CA];O1s_:String ;GV:Boolean ;Z_Dum__,f:Float ){}Var $_5:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3264))

    def test_3265(self):
        input = '''Class __z:h{Constructor (Y:__;pH:Array [Array [Array [Array [Array [Array [Int ,0B1011],0X2],0B1],0B1011],90],06];_,_:ps9W_){} }Class R:x{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3265))

    def test_3266(self):
        input = '''Class o{}Class _5_8E8:w_{}Class Tp9{Val $n:Array [Int ,34];}Class YC{$L_(_,m_,x02,N_,_:Array [Int ,34];t__,_,Cy,p:D){Break ;}Val $c_:Array [Array [Array [Int ,071],03_55],0xD3_C];Q(){}_(){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3266))

    def test_3267(self):
        input = '''Class rFG:j{$w_S(p__s:Float ;_:Array [String ,3];_f:Float ;P,_:Array [String ,17]){Var _,T:Int ;}Destructor (){} }Class _{Var i,__6,$f____J_,$n:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3267))

    def test_3268(self):
        input = '''Class d{Constructor (){} }Class t{}Class _{$79S(h102:C__J;_,_:Array [Array [Array [Array [Array [Array [Array [Boolean ,0b101101],0105],0b1],0105],0X9_8],0b1],0X67A];_:Array [Boolean ,4]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3268))

    def test_3269(self):
        input = '''Class _{Var __:Boolean ;Constructor (W,_IA:Array [Array [Array [Int ,3_2],0B100011],0114];_5:Array [Int ,73_4_8]){} }Class jz{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3269))

    def test_3270(self):
        input = '''Class i8__:_9A{Constructor (P:Boolean ;P_50_,O,_4,x5A5,w:R_i;E9:String ;b_P:Array [String ,0X5D];Ht,UV,_,_2,vl_:Float ;__:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3270))

    def test_3271(self):
        input = '''Class d3_:_{Var $_L___6_,$S55QZ,$5_42,_:Array [Int ,05];$9A(L,VH_j,___,_,_:K;U:Array [Array [Array [Array [Float ,0B111],11],72],11];o:Array [Array [Array [Array [Boolean ,11],02],2_3],2]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3271))

    def test_3272(self):
        input = '''Class px:I{x(_q,_,C,oW__w,R_R_:Array [String ,5]){}Destructor (){}P(){} }Class u:A_{}Class _{}Class _:_{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3272))

    def test_3273(self):
        input = '''Class e58_8_:__{}Class _:h{}Class M{s_(NN:_5){} }Class My{}Class _C:AL{Val _,_,__3,xj,$_,g:U;Constructor (){} }Class _{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3273))

    def test_3274(self):
        input = '''Class f8_:UuB{Var $P__,$R3_F,__1:_3;}Class _:_a{Constructor (){}Constructor (x:Float ;_6,_,X:BV;m,g:n;U,WEZ:Int ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3274))

    def test_3275(self):
        input = '''Class W:_{Var $E:Int ;Constructor (W:Array [Array [Array [Array [Boolean ,0X9E54_B],0B1010111],0X6_53],0b1]){Var d_,__:Array [Float ,13];}Constructor (){Val _G:Array [String ,0133];}Var _:Boolean ;F_(){or6::$__();} }Class _TVL{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3275))

    def test_3276(self):
        input = '''Class q:_h6{}Class _41:__{Destructor (){}Destructor (){}Destructor (){}m(){}$1696(_:Boolean ;y:Array [Array [Array [Int ,014],0x22],014];_,i,Z_5t,P5:Array [Int ,061_5];o:Array [String ,0X3A]){}Var _,$2:Array [Array [Array [Array [Int ,70],70],35],04_1];Val R:Array [Array [Array [Array [Array [Boolean ,0X3A],0b1010001],70],70],01];}Class G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3276))

    def test_3277(self):
        input = '''Class t_{Val m8_,s,___:T;Constructor (O_,p,s__,_:Float ;f:Int ;_3_op_,K6ML:Array [Int ,0b1];FI,__,s:Array [Array [Float ,0x38],0x38];d:Array [Array [Float ,0x9],0136];_A6X:Float ;M:_J___k){} }Class lI___:Z{}Class o6u4:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3277))

    def test_3278(self):
        input = '''Class p61_{}Class _{}Class U_{Destructor (){} }Class M_Z{$S_(){} }Class NY8:AT{_(_937,__:Array [Array [Boolean ,843],0130]){}Constructor (){Return ;}Var _,CY:Int ;$__1(){} }Class _O{R6(){}_r(){ {} }}Class i:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3278))

    def test_3279(self):
        input = '''Class w{Val $_,$X,$O,l_IJ6,$765,$_B:Array [String ,0b100110];Val UT,$__3,$8,$_4:_;Val $__1:Float ;}Class K_ufc:U{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3279))

    def test_3280(self):
        input = '''Class _{}Class Jh{Var C_:Float ;_(_,lK03_AH5__,_MJ:p;_:String ;f6:e;_:s;__,G45:_;z:Float ;U8_,S,_,E_9:Array [Boolean ,74]){}Var $_n6_sJ:W;Var $O_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3280))

    def test_3281(self):
        input = '''Class _{Var _,YW__w:Array [Array [Array [String ,0b11111],0xE1],0b1];Val $_:Array [Array [Array [Array [Array [Int ,0B110101],0b100_1],0XA_E],0xA_5],0x7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3281))

    def test_3282(self):
        input = '''Class t:i_{}Class _{Val r:Array [Array [Array [Array [String ,95],51],7],51];Constructor (_40g:String ;V:Float ){}Var $r11,___511,_:Boolean ;Var $K,$_u_,$___,Yj,_:Int ;Var _,C_K:Array [Int ,51];}Class _:__{}Class _:Q4__{Destructor (){Return ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3282))

    def test_3283(self):
        input = '''Class d:_65{Val $H,r7AU6,$F_,$5:__;}Class Wh1h416:I{}Class m{Constructor (_:Array [String ,44]){Return ;Break ;Return ;}$5(_,HW:Array [Array [Array [Int ,44],0b1],0b1];_:Array [String ,44]){}W2(Z_7I2:Array [String ,1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3283))

    def test_3284(self):
        input = '''Class S{Var _,$2Vx0,$v,_,d5:Float ;}Class _5:_{Val R_,$_:Array [Array [Boolean ,0x13],0X1F];}Class J0Z:__e{_86(){} }Class _7:H0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3284))

    def test_3285(self):
        input = '''Class _{Constructor (hm,_a,_ar_,_,_:Array [Array [Array [Array [Array [Array [Int ,2],03],051],6],05],4];_9l:_V9;__,_7_,S2:_8i){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3285))

    def test_3286(self):
        input = '''Class y:_8{}Class ___:Z1_{Destructor (){}Constructor (_,_,K:Array [Array [Array [Array [Int ,0b10110],0b10110],0X52],0X52];Mb,N___,_,b_,_X:_x;W2g,_:Array [Float ,057];l_k_:Array [Boolean ,0X65];hR__,c,_:Array [Array [Float ,04],057];x,j9tS:Array [Boolean ,057]){Break ;Var d,_1,_D:Array [Array [Float ,057],54];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3286))

    def test_3287(self):
        input = '''Class Z:p{}Class _{}Class _467_1t7{Val $8:Array [Array [Array [Float ,0B11],0125],0125];}Class _:O{Var $2,_:i__;Var $_vPTO7R__:y;Val W,$0_A,$5,$_:_;}Class _{Val Dn,$7:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3287))

    def test_3288(self):
        input = '''Class F_:p_qjd{Destructor (){} }Class O:_{Val $__x:_;Var $R,$b,$_4s__5:Array [Boolean ,0x27];}Class _15{Val _9:Array [Array [Array [Array [Int ,07],0x27],0B1],0XC];Val $60,$__S:_;Destructor (){} }Class _{Constructor (m:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3288))

    def test_3289(self):
        input = '''Class __V_:s{}Class Y{}Class j__ZI:x{}Class _h_Q_:vPK4{$_(J:Array [Float ,45];v:String ;_T0,_,Ao:Array [Array [Float ,04_736],047];F,__6Z_,Ig,V_,_y6,J:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3289))

    def test_3290(self):
        input = '''Class _3Y{Destructor (){} }Class L:_kf{Destructor (){}Destructor (){}Var kg_:Array [Array [Array [Int ,63],2],0xA];_(m:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3290))

    def test_3291(self):
        input = '''Class d:p{}Class _:_74{$_8(_,__,M,_:Boolean ;X,VGe,_J_8j:_){Continue ;Z0::$3_();} }Class _4_07:__{Destructor (){Break ;} }Class _8MI_B:_nBR_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3291))

    def test_3292(self):
        input = '''Class K5:____{_(){}Var U,_62,$d,o,Z,_6O:Boolean ;}Class R__t__{}Class _G_3:_1{Val $_,_n,$9,$W26_,_2,$E,b4,$_82__1,om_A:BMe;}Class pI1:v{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3292))

    def test_3293(self):
        input = '''Class bMu66{}Class _:V_{}Class _1m:x{Constructor (_:String ;_g:String ;_4:Array [Float ,052];_,__2_:Array [Float ,0X60];P,_:Boolean ;_N1:Float ){ {Break ;C::$P();{} }} }Class v:_4_{}Class __:s{}Class lV{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3293))

    def test_3294(self):
        input = '''Class _:_{}Class O{Val e2:Float ;}Class _{}Class _{Destructor (){}Constructor (a4:_;d,Ar_6:Boolean ){} }Class I{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3294))

    def test_3295(self):
        input = '''Class J:_{}Class _G0_:j{Destructor (){Continue ;}$d_(x,h:Array [String ,04];_Ty3cS:__){}Constructor (q5:Boolean ;_,v:Array [Int ,0B101]){} }Class fA{s9(){} }Class _{Val $M:Int ;}Class _1G6{Destructor (){}Val $32:Array [Array [String ,0b101001],0xE];Var $_m:wn;}Class ___:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3295))

    def test_3296(self):
        input = '''Class i{}Class z:h{Val $1,$C,_,R:Array [Int ,0b1010010];Constructor (_74,E:String ;_9iz,__c:Array [Array [Array [Array [Array [String ,03_7],0110],06],0X24],87]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3296))

    def test_3297(self):
        input = '''Class _{}Class _:_{Constructor (){ {} }Constructor (f_5:Int ;O,_,_:Array [Array [Int ,0xA_A],0116];_,h,_,_:Array [Float ,0x57];_a3N_6,V,_,j,E,_:Array [Float ,03];d8,e_w_,v:Array [Boolean ,0116]){}Val $1:Array [Array [Boolean ,0XF_1_DC],0X69C];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3297))

    def test_3298(self):
        input = '''Class u5{}Class _:_{Val Z_:Array [Array [Array [Boolean ,0X4F],0x5D],68];}Class l{Constructor (_RY_:u7;_2__,t0SuG:Array [Boolean ,68];G:_97t;L:Array [Array [Array [Float ,0b1001011],0b1001011],0B10]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3298))

    def test_3299(self):
        input = '''Class _{Val $_4:L;Var U,C,$4,$_,_:J;}Class _556{Val $8:Array [Array [Array [Float ,0xFF],0x1],98];}Class __{}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3299))

    def test_3300(self):
        input = '''Class _{_4(_T1,_,_:Array [Array [Array [Array [Array [Boolean ,0b11100],21],0b11100],040],0x8];k1:Int ){} }Class X:_3{}Class _GkK9{Var $EZJj0:Boolean ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3300))

    def test_3301(self):
        input = '''Class r:_q{}Class _B{}Class _6{}Class o{}Class a3S:_{}Class fv:L{Destructor (){}$28(C,__:Array [String ,68]){}$W8(){Val _,__:Float ;}$_Q_(_dy5__:Array [Array [String ,0x46],4_6]){}Var _m:rv;}Class E{}Class sx{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3301))

    def test_3302(self):
        input = '''Class Y{Constructor (RY5:Array [Array [Array [Int ,0x50],051],04];Z:Boolean ;G_:String ;_:Boolean ){}Var $18H_95,$9,$T,__R,$_,$8_,$_699t:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3302))

    def test_3303(self):
        input = '''Class X:bc5F7x_{}Class _:_{}Class WM{$r_(_:Boolean ;_:Array [Boolean ,0b1];_:_;__:String ;R_,_6,q:Array [Boolean ,010]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3303))

    def test_3304(self):
        input = '''Class r:C{Constructor (_:Float ;Q_2:Boolean ;t_c:Array [Array [String ,0X3],5_7_1];QT,_,Cl_,__e8,_:String ){} }Class Y{}Class _m:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3304))

    def test_3305(self):
        input = '''Class _{Val _:String ;Destructor (){}Val $1:Array [String ,0b1_1_1010];Val _,$__,Z_,_,U_:Array [Float ,92];Destructor (){} }Class _2:u6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3305))

    def test_3306(self):
        input = '''Class R:_{Val l,_:Int ;}Class Y:A{Constructor (_9,_:Array [Array [Array [Array [Array [Array [Float ,0x8_4_9],014],0B110000],06],014],38]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3306))

    def test_3307(self):
        input = '''Class o{}Class _:g_{Constructor (_,d:Array [Array [Float ,02_0],60]){}Val E,$6,_,$7,_:Boolean ;}Class zj:_gB_f{Val $_,$8S:Array [Array [Boolean ,2],0B1_00];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3307))

    def test_3308(self):
        input = '''Class _{}Class _6_{Constructor (){}Constructor (x3,su5S_:Boolean ){}$h(){}H4(){}Var $_,$_V,$___:Array [Boolean ,0b1_0];Var l,$c_L_X:e_;}Class O{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3308))

    def test_3309(self):
        input = '''Class ph:S{}Class __:G_0{Constructor (){Continue ;} }Class _{}Class _2hlA_{Var _A:_3;Val $5_:Array [String ,0X51];Val z:Int ;}Class X:R_{$y(P_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3309))

    def test_3310(self):
        input = '''Class f{Constructor (J,_9,v4:Array [Int ,0x47];_z,r_ApA_:Array [Int ,0B10_1];Z,g__,L:Array [Int ,8];_j,__,d3_m_:s07){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3310))

    def test_3311(self):
        input = '''Class W_{}Class _:_{Val z0,_,I:Array [Array [Array [Array [Array [Boolean ,0x44],0xA_5_A],75],057],0XD];}Class g:e7{}Class _:a6_{}Class nO{}Class g:L_1{Val $b9,$Q,$__9:Boolean ;}Class f3:I_{}Class _0S_:SjT{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3311))

    def test_3312(self):
        input = '''Class L:A_6A_{}Class d{Var _,$42,$_1D:Array [Array [String ,032],032];Val $J:Array [Float ,0b1100011];Val ___:Boolean ;}Class I:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3312))

    def test_3313(self):
        input = '''Class p:S{}Class _{Destructor (){}_(_0_4_,f,_8,_,_y,F:Array [Array [Array [Boolean ,6],0140],0XAD_E8]){}Var K:Int ;}Class _{$K(_44,_z,_,_z_r:Array [String ,8_5_8];_1__,__:Boolean ;K:Array [Int ,0b111011]){}Constructor (){}Var $8_,__:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3313))

    def test_3314(self):
        input = '''Class F{Constructor (){} }Class J{Destructor (){Var rc:String ;}Constructor (F1,Spj_:Int ;_H_0:Array [Array [String ,0x4],0x46]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3314))

    def test_3315(self):
        input = '''Class Q{}Class _:q4{Constructor (C:Y){Continue ;}Destructor (){Val da,C:_y;} }Class H___61K:_{Constructor (){}Constructor (){}Constructor (_:Array [Float ,0B1010101];__l8,_:Int ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3315))

    def test_3316(self):
        input = '''Class h:Aam{Val _J:Array [Array [Array [Array [Int ,0X5D],0x63],01],6];Destructor (){} }Class _b_z__U:_gL{Destructor (){Break ;} }Class _X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3316))

    def test_3317(self):
        input = '''Class _{Val _:Array [Array [Boolean ,0b10101],3];}Class s:__{Val $R,$1:r;Constructor (_By ,j2:_;D,y,e744,_:Int ;Z,l,J_U,R___,R,Z_,C:Array [Array [Array [Array [String ,2],42],0137],0B1];c0,_:Int ;qH:Array [Int ,8_7_62_01];___,K:Array [Int ,0137]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3317))

    def test_3318(self):
        input = '''Class __V_5_8:_H{Constructor (_:Boolean ){}Val $I,__,r__K:Array [Boolean ,07];}Class __{Var _:Array [Int ,0XF];Var $_:V__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3318))

    def test_3319(self):
        input = '''Class __{Constructor (){}Constructor (_,_,Q,_:Array [Array [Boolean ,062],64];_:Array [Array [Array [Boolean ,0X24],0b1011110],0x440_F];Om:Float ;x1:Array [String ,07407]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3319))

    def test_3320(self):
        input = '''Class F_{Var _0,wkN,$5V:Array [String ,0x7_8];}Class __72{}Class _:_K___0{icC4(_51_,s,I:Array [Float ,0B11000]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3320))

    def test_3321(self):
        input = '''Class r9____O:g{$_(){}Var $__M6,$f,w9:Array [Array [Array [Int ,1_1],0b1001111],21];}Class h_q_:D{}Class R_:m{Var __,e:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3321))

    def test_3322(self):
        input = '''Class g7{}Class ___:_L{s(C:_;_W_:Array [Array [Array [String ,3_02_5],0X2D],035]){}Var $V:Array [Array [Array [String ,88],88],0XF_6];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3322))

    def test_3323(self):
        input = '''Class _{Val $p0Y6__S1,B:String ;}Class W{Constructor (S__6_J_:_;b:Array [Array [Array [Array [String ,031],031],4],3];__:Array [Boolean ,0B1100001]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3323))

    def test_3324(self):
        input = '''Class __:_c{Var t:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0b1010001],0x1F],0B10],0b1010001],047],0b11],0b10],0b1010001];$8(){Continue ;Continue ;{Break ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3324))

    def test_3325(self):
        input = '''Class K_:h{Var k,$9,CB,Z,$_,F,$_,$_,$_V7o,m__:Array [Array [Array [Array [Float ,0b110011],0X10],02],0B1];}Class mh:UK{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3325))

    def test_3326(self):
        input = '''Class __3_E1{Constructor (_,__P,_,R,vPg,z:Array [Array [Float ,0B1000101],0b1001110];_,_:String ;_o__0,_,_,Z_HM_4S,D3Y:Array [Boolean ,65]){Var X:String ;} }Class j5__{}Class V6:_50{Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3326))

    def test_3327(self):
        input = '''Class __:kM__A{Var _1_Z,_0:Int ;O9(___8l_:_e;V:h3;_N4_36,_,_X,On12:Int ;_P_:Int ){}$2_(P95,_,b,k829,_0d:Array [String ,0x1E];_w_,bL6,k:String ;_e4:Boolean ;Xr2,_axXfM_8:String ;_Iv,hGT_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3327))

    def test_3328(self):
        input = '''Class a{$_(){Return ;Break ;}Var $v,b_:_1;}Class _:_{Var O:Array [Array [Array [Array [Array [String ,0B1_0_0],02],5],020],020];Constructor (_,T:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3328))

    def test_3329(self):
        input = '''Class QV:_0{Val _:__;Val c_72:Array [Array [Array [Array [Float ,92],047],0XC4BEE8],6_8];}Class N:_{Constructor (G,_,h_:Array [String ,0x8];__J:Boolean ;L,p_8_,_4:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3329))

    def test_3330(self):
        input = '''Class _{}Class _R9{__9_(){}Destructor (){ {} }Var $__,$8,_,_S_59w,$e,$_b:Array [String ,0B1];_(_qGz,_:Float ){Val j,u:Boolean ;} }Class H:_0F55_{}Class N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3330))

    def test_3331(self):
        input = '''Class O_:_1{Destructor (){Continue ;} }Class i{_1_Ne7m__(L,_,N,S57eH366,m,r4:Int ;r1_d,_:b_R;_:_;K3:w;C:Array [Array [Float ,0X19],76]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3331))

    def test_3332(self):
        input = '''Class _5_{Constructor (_4:Boolean ){}Var $_,__,__:String ;Val $_,_Y1:Array [Array [Boolean ,7],047];_(){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3332))

    def test_3333(self):
        input = '''Class _:g_{}Class s{Constructor (w:a2){}Val xT_:Int ;Destructor (){}_4(d:String ){}Val l:e;}Class __6{Var $4,_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3333))

    def test_3334(self):
        input = '''Class h__:m{Val $_,_sK,$_,$4_:Array [Float ,03];Constructor (_R,_,_:Array [Array [Float ,0B1001100],1];J,UC_3:Float ;_,_,_:Array [Boolean ,0131]){}Constructor (_X,_,_:u_5_;T:Float ){}Var $L,$_X:_;}Class _{Destructor (){} }Class __{$_(a:Array [Float ,5];L,__c6:_s__T_2_){} }Class _:_CS{$_0(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3334))

    def test_3335(self):
        input = '''Class _{}Class _:l___{Destructor (){}Constructor (_,I,c1:Array [Array [Float ,2_0],04];__,_W_v68,M1:u_H_2;_6_,M,_OF_56:String ){Break ;} }Class L:Vw{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3335))

    def test_3336(self):
        input = '''Class ____{}Class F:_{}Class Tn:z{Destructor (){}Var e,im,$E,JO_b,$bSH7,M8:Array [Array [String ,0b1001010],4];}Class _L7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3336))

    def test_3337(self):
        input = '''Class l{Destructor (){} }Class s:_{Destructor (){}Constructor (d_m9:Array [Array [Array [Int ,03_5],0B1001],7_52];v_:Array [Array [String ,0B10],43]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3337))

    def test_3338(self):
        input = '''Class S4:X{Constructor (W,n:X;t:Array [Float ,0136];vr,l:Float ;cP:Boolean ;_,A:Array [Int ,0136]){} }Class __{Constructor (){} }Class i1:_Q6{}Class r_7{Destructor (){Break ;}Var M:___;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3338))

    def test_3339(self):
        input = '''Class _{Val $Q:Int ;Constructor (__i4:f;Ow_b6:_;S,_T8_495:Float ;Q_:Array [Array [Float ,26],0X9];X,___mB,M4U_,Q:Array [Array [Float ,0B1011101],0xC];q_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3339))

    def test_3340(self):
        input = '''Class _:E{Constructor (_,F:Array [Float ,056];c5:_U;X4p4f:_){}$g05_(){}V(_4b__9CP:Array [String ,0xD];c,aF6,c,_:cD27W;u,_,V:K_;T_:_;_E:Array [Array [Int ,0B1_0],0b110101]){}Constructor (){ {{} }} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3340))

    def test_3341(self):
        input = '''Class _{$_(){Var Z,H:Array [Boolean ,0137];Continue ;} }Class y{$_7z(_,__:U7;_:_){}Destructor (){}Val $Cy_I_:Array [Array [Boolean ,0b110111],0x4];Var Dx_,i_a,$__q7_:Array [Int ,0137];G3(L3,_36:L;v_0:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3341))

    def test_3342(self):
        input = '''Class n:_6_z{G2(_35,_0,_,z_s2_,_2:Array [Array [Array [Float ,0B1],84_3],0B110010];_to:Array [Array [Float ,02],0xF];B0:_;B:b_0;_,_,_,_,_,_v3XU0,B5_5:_;_TtN,j3t6,x_H74,Z0_4:Boolean ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3342))

    def test_3343(self):
        input = '''Class Z2J4:_{}Class a:_0{$M(M__3zA_,k,v,_7:String ;_2_4:Array [Array [Array [Array [Array [Array [String ,0B1_0_0],0B111011],0b101110],66],0X5],0B111011];_,P_W2__54A3,I,i_IAd__,_,_:Array [Int ,0b1_1]){} }Class __9__c4{Val e6,E:Array [Int ,0X5E];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3343))

    def test_3344(self):
        input = '''Class Ok{Var P_1pI,Y,_:Array [Array [Array [Array [Array [Array [Int ,0b1010001],0b1010001],5_1],76],7_4_18_5_5],0B1_0];}Class V7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3344))

    def test_3345(self):
        input = '''Class _{q_2(_:Array [Boolean ,0b1];__,H:String ;_,__x,s_3:Int ;__0,X,_p,s__:_;RJ9:Array [Array [Array [Array [Array [Float ,0x7],37],0X2_4],05],0b1000011];z,l60,_T:Int ){Break ;}Val _,$1,$8,$L5:_D;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3345))

    def test_3346(self):
        input = '''Class _{}Class y0:b{Var $__3,$2:Boolean ;}Class B{$4_X(G,U3m_26:Array [Array [Array [String ,0B1000110],0B1000110],02]){} }Class _D{Val _y:bi;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3346))

    def test_3347(self):
        input = '''Class _{}Class _v3{Constructor (b_q_,G:Int ){}Constructor (O60_5,e,_K:Array [Array [Array [Array [Array [Array [Boolean ,0X9],9],72],0X9],72],3_3];_,_:_;M,_8:_B){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3347))

    def test_3348(self):
        input = '''Class j{Constructor (__2:String ;_d,ZQf:Array [String ,0B10]){}Destructor (){Break ;}Destructor (){} }Class _:C_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3348))

    def test_3349(self):
        input = '''Class _3{Constructor (F__P,Y:Array [Array [Array [Array [Float ,0b1010101],061],0X8],061]){Continue ;}Val A__:S;Val $o,$v_:Array [Array [String ,0b1010101],50];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3349))

    def test_3350(self):
        input = '''Class k{Var _,$d3_V_:Array [String ,21];$d_(){} }Class e6:K{$5(G_6,___t3F_,_:Array [Array [Boolean ,0121],01_2];_,___,D:_;_,p:___9hV){} }Class _2{Val $1,_X0,k,_1:Float ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3350))

    def test_3351(self):
        input = '''Class _{Constructor (w4:String ){ {} }Val $3c:Array [Array [Float ,0b1],0x5_5_A];}Class ___s:qHg{}Class _:_{}Class __V:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3351))

    def test_3352(self):
        input = '''Class _:_b_x{}Class AZ{Destructor (){} }Class J{Val _,V19_D_f:Array [Boolean ,041];$5(_,_GY:Array [Array [Int ,8],0X43]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3352))

    def test_3353(self):
        input = '''Class h:_{Constructor (_a9,_,_:Array [Int ,8];__6:Boolean ;q,_,h,_,_3_:Array [Float ,05_3];_9_,B__8,_1,_:Array [Int ,0b10]){} }Class U:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3353))

    def test_3354(self):
        input = '''Class _D:w{Constructor (y,_,__:P_;Tl,__,v:Array [String ,0x49];l:Boolean ;A_w:__o;A:String ){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3354))

    def test_3355(self):
        input = '''Class __{Val $0,w:_;$5(b_,_6,__0,bv3__,r_,_,__:Int ;____:Int ;_J:Boolean ){}Val m5_J:Array [Array [Float ,0127],0X3D_A];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3355))

    def test_3356(self):
        input = '''Class _5_3{}Class _42{}Class g:W_y{}Class _:_{K_(l,p7,p_:_;__:Array [Array [Float ,0x3F],0b101010];G933_1_2:Array [Array [Boolean ,0X7],041];v_8:Array [Float ,041]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3356))

    def test_3357(self):
        input = '''Class _{}Class d{Var $4,a:Pk76_;_y(B_,a9U4:a;m_8:Float ;eJ3:Boolean ){} }Class _lb6:_{Var $_:Array [Array [Array [Array [Int ,44_0],01_0_6],0XF],0XF1];}Class G:O{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3357))

    def test_3358(self):
        input = '''Class _3:e_7hp{_0(w:Boolean ;_Aa:Array [Array [Int ,0x41],0x41];_28GOB,t,yb:j21t){Break ;Return ;Val _,f,_:v8;} }Class _:A_8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3358))

    def test_3359(self):
        input = '''Class i{}Class q3e_{}Class Ij_R_{Var $_:Array [Array [Array [String ,1],3_1],76_6_4_7];Constructor (KP,q__:Array [Int ,77]){} }Class _:_{X(){}Constructor (hl,V3:Array [Array [Array [Array [String ,0B1],82_2],0X63],77];o:X){}Val $Q,Z5:Array [String ,0xC];}Class __:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3359))

    def test_3360(self):
        input = '''Class _:__{}Class N:JLO{$Ql(_,_:Int ){}Destructor (){} }Class R2_:_{$5(__,d:String ;_:Int ){}Val _9,_:Array [String ,53];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3360))

    def test_3361(self):
        input = '''Class _{_g(t:Int ){ {} }k(_55_,q:Array [Array [Array [Array [Array [Int ,0B1_1],0B1011101],54],54],026]){} }Class _{$ij(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3361))

    def test_3362(self):
        input = '''Class X{}Class __3{}Class w:_9{Val j___:_;Constructor (C:Ygx;_0,_b:Float ;_,_:Array [Float ,8];_:_4;_,u2_:Array [Array [Array [Int ,0B1000011],0B1000011],0b1_11_0]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3362))

    def test_3363(self):
        input = '''Class K:E{}Class w_:j{Val $R:Array [Array [Array [Int ,18_3],9],06];$__(){}Destructor (){} }Class _{Destructor (){} }Class _a__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3363))

    def test_3364(self):
        input = '''Class _7_0_{Constructor (){Continue ;} }Class _c:_{$_(){}_5(){Break ;Return ;}Destructor (){}Constructor (){}Val $7_3E:Array [Float ,48_4];}Class _E_{Val $__2Z_,h,$68,$g,$4:Array [Float ,0XE];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3364))

    def test_3365(self):
        input = '''Class V{$_N7_c(v5:_150){Val _1_1:Array [String ,0B1];}Var j:Int ;$66_(_,_4l,m320:Int ;x__:Float ){sL::$__1_.nL();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3365))

    def test_3366(self):
        input = '''Class __{Constructor (_v,gL4d:Array [Array [Array [Array [Int ,0B1_1101],58],0xC_7],03_2_7];_,L_3:nR__;_3__,O,O_:_4){ {} }Var $_:_d;$Y_(){Break ;}Constructor (_:N__;I:_t){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3366))

    def test_3367(self):
        input = '''Class J30{Var _,$81,_,$6,_:r;Var _o6:_;}Class R{}Class _{Constructor (_,NJ:String ;_og:_){Break ;Continue ;} }Class m:c_p{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3367))

    def test_3368(self):
        input = '''Class _v28:_{Destructor (){} }Class _{$88C_w(){}Constructor (O:_){}Var $xb0_N_17,$_2,_i,$6_,t,$8z,__:Boolean ;Var $4:Array [Array [Int ,72],0115];_(m,_,O,_,_J_,_,g,_:Boolean ;_y,L,_:s){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3368))

    def test_3369(self):
        input = '''Class __{Val $k5,M0_:Boolean ;}Class _{Destructor (){} }Class _0{Var $_,$AY,$X:Float ;}Class _:_8{Constructor (){}Val $i:Array [Array [Boolean ,040],076];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3369))

    def test_3370(self):
        input = '''Class w_{$fp_(J6,_p1,_:Array [Array [Array [Array [String ,0x11],0X21],0x11],10]){}Constructor (__9_:Array [Array [Array [Float ,0b1],0x11],0B100001]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3370))

    def test_3371(self):
        input = '''Class _:_{Constructor (){}_10(){}Var $J_,R0_u3:Boolean ;Destructor (){Break ;Continue ;Val _:_81;Var F,u:Int ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3371))

    def test_3372(self):
        input = '''Class _{CLQ(_,t:Boolean ){Break ;} }Class _{Val $r,_:_;Constructor (){}Constructor (){Continue ;}Val $_:Int ;Destructor (){ {} }}Class _6_7{Destructor (){}$S(){} }Class F2r{}Class _e{}Class _{}Class bM:s{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3372))

    def test_3373(self):
        input = '''Class __fl_p_:nU{Constructor (K8,_,o:Array [Array [Int ,066],014]){}Val _:Array [Array [Array [Int ,0x58],031],0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3373))

    def test_3374(self):
        input = '''Class F6{Constructor (G_1:Float ;at:i;u,Oe30,_9_4,_Q:String ;_5:_;Jq___F:nb;__n75_p___:g){ {}Val y,I:Boolean ;}Val __,Sh:String ;Val $_,$_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3374))

    def test_3375(self):
        input = '''Class _a:_{Destructor (){}_(fv,_,_3:Int ;d,_G_0_2:Array [Array [Array [Int ,59],050_7],013];GC,V4_,_3I:Array [Array [Array [Int ,59],050],7];r_B4c,_z:_lB1I;Q_Q,_S_,_,_:String ){}Constructor (){Break ;}v(m:b){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3375))

    def test_3376(self):
        input = '''Class H6Y4{Destructor (){} }Class _9:_{Constructor (k,_,d2,_:Int ){}Constructor (_:String ;_:String ){}Val ks_:za;}Class _g{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3376))

    def test_3377(self):
        input = '''Class X5DT3{Constructor (O,_8:Array [Array [Float ,0X6E_3],07];E_:u;_:Float ){} }Class N{Val $_,$s:l;}Class F{Constructor (){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3377))

    def test_3378(self):
        input = '''Class __:_{}Class WV_9{eA2(){}Var $_8_:Array [Array [String ,0X4D],0B111110];Var $_:_1l;$2(dpdYF,_,MMZ___:Array [String ,0B111110]){}_(I,_,_A,J_:Array [Int ,06]){}Constructor (){} }Class Q7:_m_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3378))

    def test_3379(self):
        input = '''Class UB3{}Class _4:_{}Class J{Destructor (){} }Class n:p{$7f8(){} }Class k{Destructor (){} }Class T3:__{}Class x{Val $Vn,h:__;}Class J:Cj058_g__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3379))

    def test_3380(self):
        input = '''Class _:f{Constructor (u:_J_;_3:Array [Boolean ,0115];_,B:String ){}Constructor (){}D8(_:Zvq;_,E,__4:Array [Array [Array [String ,100],0X5E],0X5E];j5_:String ;_:Array [Int ,16_93];_:Array [Array [Float ,0B1100001],7];x:String ;__3:Array [Array [Float ,0B1],0115];p303_3_,_:Array [Array [Array [Boolean ,0115],0X7],0B1]){Return ;} }Class Qy_5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3380))

    def test_3381(self):
        input = '''Class O_:_{Val U,_:Boolean ;}Class fI{Val F:Array [Int ,0b1];__(d___5:_;__:Boolean ;W,_86_2c:Array [Float ,010]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3381))

    def test_3382(self):
        input = '''Class _{$s5(_Zo:W;T6:Array [Array [Array [Float ,0x1_3],0B1],96];_,_F_c2,v:Array [Int ,0X63];___,j_:Float ;B:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3382))

    def test_3383(self):
        input = '''Class _:____{Constructor (u7J3A:Array [Array [Int ,01_7_1],20];_,c4__:Boolean ){Continue ;}Val uy,wK,_,$4__v:Q;Constructor (){ {}{} }}Class v{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3383))

    def test_3384(self):
        input = '''Class C{Destructor (){}Destructor (){Continue ;}Var $76_,$5:v__;}Class _{}Class G:_m{Constructor (I5:Array [Boolean ,0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3384))

    def test_3385(self):
        input = '''Class f:w_r{Val $e,$_:Int ;Var $5,$U:___4;Var M,$_,$2,A:String ;Constructor (_,C5_87,_77r:_){} }Class _cC_691_T_C9:_{$s(_,L_,_:Array [Array [Array [Array [Int ,40],0b111110],0B1],0X1D];_j:Int ;_,_:H6){}Val _,H3,T6_,_,c31DM,_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3385))

    def test_3386(self):
        input = '''Class _{Val _,$___:String ;}Class CzP3:_C{}Class _3l:__5_o_k{Constructor (){}Val _:Array [Array [Array [Float ,91],0b110110],0xC];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3386))

    def test_3387(self):
        input = '''Class I_g9{}Class __:__5{Constructor (_,b_P:_0){}Destructor (){} }Class X{Destructor (){} }Class rjV{}Class X8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3387))

    def test_3388(self):
        input = '''Class j:G80R{Constructor (_:fY;o,U_,_1:Array [Array [String ,0b111110],0x9_4]){If (-_4__::$07_3()){} }Val $P8:_50_;Val $_0:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3388))

    def test_3389(self):
        input = '''Class _{r(_Mt2,_,_,_n,__:Array [Boolean ,0b11000];p1_,_ko_u3:Float ;_:Int ){} }Class p_{Val $4787_,$_0,_,$uo,$_,_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3389))

    def test_3390(self):
        input = '''Class y{}Class T2:k{}Class _:_{$6F_(_v_,m,_8:Array [Boolean ,04];_4,a_,K,W5_:_){}$u(Z,_:c){m8_::$_();}Destructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3390))

    def test_3391(self):
        input = '''Class ___h_:NYy_o{Var p:N;$___(){Break ;} }Class m{}Class DO{}Class _{}Class _:_{Constructor (){ {} }Val _0:Int ;}Class x{Destructor (){Return ;}Val $_:W;Var $37_,$vB,L_9:Int ;Destructor (){Break ;Val _:s;} }Class __T{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3391))

    def test_3392(self):
        input = '''Class ___4_{}Class _{$_(L:String ;H_:Array [Array [Array [String ,87],0x6],0x9];__,Q_,W,_,E,m,K,J:Array [Array [Array [Array [Array [Boolean ,0X46],87],0B101000],87],5]){Break ;}V(_3_AG:Array [Int ,0b100101]){Break ;}Var N,$v_,x_4,_rs:_;Var ____,_07:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3392))

    def test_3393(self):
        input = '''Class d{Var __:i5_;Val f:Boolean ;_(z:Array [Int ,8];_6,_6,_f,_,_p,l:Array [String ,0x6];_07,_,R,_I,_,_,_L:Array [Array [Array [Array [Int ,02_6_4_5],01],032],032];E:Boolean ;_q,J:_){} }Class __:___8__{Constructor (__I6_96N:Array [Int ,5]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3393))

    def test_3394(self):
        input = '''Class _{Val C,$8:Array [Float ,0b1100];Destructor (){}$_8_0_(_:Array [Array [Array [Int ,045],01],0b1100];_v____92H:y){} }Class EPg:_{}Class L0:x{}Class _8:_{Destructor (){} }Class _:_{}Class u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3394))

    def test_3395(self):
        input = '''Class Wk:_{}Class z{}Class b{Var _,_:Boolean ;Val xm0:Array [Array [Array [Array [Int ,0b10_0_1_1],0b1_1],0X93],0X5E];Val W3U3:String ;}Class J_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3395))

    def test_3396(self):
        input = '''Class Mjn_{Constructor (Tf:Boolean ;R:J;_,_i_,_,DP_:Int ){}Var i3,D,_,g4:_;Constructor (L:Array [String ,013];_,_:Array [Int ,05]){} }Class u_{}Class _{Val q,$_3__:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3396))

    def test_3397(self):
        input = '''Class p:_{Constructor (O,t,e__:_1;_:_k;_4:B60;N,Z:Array [Array [String ,05],0B100000]){Continue ;}Var g:_;Var __:Array [Float ,0b1_01];}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3397))

    def test_3398(self):
        input = '''Class nc_4A_a{Var AX,_4,$__:String ;}Class __:n_5__{}Class D:o48E{_(_:HX8){}Q7(){Val E:Array [Array [Array [Array [Array [Array [String ,20],0X40],65],02_3_00],0b1],057];}Constructor (_:_){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3398))

    def test_3399(self):
        input = '''Class _89F0:c6{}Class oC424_:___{Var _K:V;}Class _:O{Constructor (_6_,__R:Array [Int ,0B1100011]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3399))

    def test_3400(self):
        input = '''Class D9:_2{Val $T8s,_2:Array [Array [Array [String ,2_5],0143],0B110011];Val s,$K,$03l:Array [Boolean ,0x43];$_S(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3400))

    def test_3401(self):
        input = '''Class M:B{Destructor (){}$_(Y_:String ;_,_,C_:Array [Float ,06_676_0_1];m_,_:Array [Float ,0133];_:P5;_9,T,_3:J9){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3401))

    def test_3402(self):
        input = '''Class N9{}Class _{}Class ___:_{Var $_,$2zG3:Array [Array [Array [Array [Array [Array [Boolean ,0142],0xE],0142],0b1],0142],0B1011111];j(_,A,__:o_1x70){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3402))

    def test_3403(self):
        input = '''Class _4{$1_(){Continue ;} }Class _{Val yy_j,s:Array [Array [Array [Array [Array [Array [Int ,0B1],0XE6],0X45],0B1],0B1],0x8F];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3403))

    def test_3404(self):
        input = '''Class _:b2{}Class _:_{Val _0,_,oH_nE__9w:Array [Array [Array [Array [Array [Float ,0120],6],0120],04],0XDF8];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3404))

    def test_3405(self):
        input = '''Class bzu{}Class _{$_(_,I:Array [Int ,0X5_1];_35_:Int ;_d,F6U9,M_G,_9:Array [Array [Boolean ,0x2],04_2_7]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3405))

    def test_3406(self):
        input = '''Class _5{Constructor (p,q5BD_,_,x2,_,_W9_,t:Array [Boolean ,47];Lj10:Float ){}_(h:Float ;_k1_,A:Array [Array [String ,2_3],0b11]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3406))

    def test_3407(self):
        input = '''Class _w:v_{}Class yu7{Destructor (){Continue ;Break ;Null .o1656j().w();Return ;} }Class g:iM{Destructor (){} }Class o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3407))

    def test_3408(self):
        input = '''Class JUO_{Val _W_:Array [Boolean ,0141];Destructor (){Return ;}Val $0:_4;}Class r4{Val $v820:Boolean ;Var z:Boolean ;_(){Val X_8,__:Float ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3408))

    def test_3409(self):
        input = '''Class v:d{$yH5(_:Array [String ,0B1];c__,__:Array [String ,0b11100]){}$K1(){}Constructor (_,___:Array [String ,0b11100];no:Array [Array [Boolean ,0x47],0b11100]){Break ;E::$X_8();} }Class _x{Var g42_,A,a,_:Int ;}Class z{}Class Sw_:Rn{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3409))

    def test_3410(self):
        input = '''Class C{}Class CI:__h{u(_:Array [Array [Int ,6],0x6D];__9:hS;W,e,_o1_,Si:Array [Int ,31];_5:Array [Array [String ,0B1_0],0B110100]){} }Class f:y3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3410))

    def test_3411(self):
        input = '''Class _45{}Class _a{__(c:_;_58480,_:String ){}Constructor (d:Int ;_,_5:Array [Array [Array [Float ,4],0107],0x3D]){Var J_,qg:Array [Int ,769_4_57];{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3411))

    def test_3412(self):
        input = '''Class _:u{}Class R{Var Y:Boolean ;Val _4:_3;Constructor (ymi:Boolean ){}Var _:X9E;Val $14l,_,$Q,d:Array [Float ,062];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3412))

    def test_3413(self):
        input = '''Class _4{Val __,$F5:Boolean ;}Class _:U{E_A(){} }Class _{Var __:Array [Float ,0b1010101];Constructor (_,P:g5){Continue ;} }Class b:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3413))

    def test_3414(self):
        input = '''Class H3:_{Constructor (_,_4,_:Array [Array [Array [Array [Boolean ,3],0B1],0xF1],0x52]){}Val mop:__;}Class _t6:_K1v{Val $xn_,$fE:U;}Class _:_6{Val _0w1K:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3414))

    def test_3415(self):
        input = '''Class I{$T(_l:Array [String ,0x8];p,A:Float ){} }Class _D:t_{Constructor (_,h:Array [Array [Array [Array [Boolean ,4_2_3829_1_5],0XE63],0b1_0],054];_:Array [Float ,0X4]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3415))

    def test_3416(self):
        input = '''Class M_{Constructor (_:V9k;M,O0:Boolean ;_:Array [Float ,0x2C];__,M:Array [Boolean ,48];H8M,_:N_;_xFp,b,FrN_9:_3V7){} }Class _:_S4_5V{}Class H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3416))

    def test_3417(self):
        input = '''Class D8k{}Class T:SG{Constructor (_,L,E,I_,E,_:I_;a,V:Array [String ,0B1010000];h,_0:Array [String ,0X13E];_rWn,e:Boolean ){}$__(_c2:Array [Array [String ,0X1],0B1]){} }Class l:K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3417))

    def test_3418(self):
        input = '''Class z_{}Class X_:N{Constructor (O_8,_,_5,_:Array [Array [Array [Array [Int ,0103],76],0XE],76]){}Val $1nz:_uiZ_62_;}Class N__{}Class _{}Class K34{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3418))

    def test_3419(self):
        input = '''Class V{Constructor (Z:_;V:S_;_:Array [Int ,02_16];_:g;_b:String ;_,m,m:_;D_,J:Array [String ,0X53]){}Val $_:Array [Boolean ,0x48];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3419))

    def test_3420(self):
        input = '''Class H5{Var $_12,bN,$6:Array [Array [String ,0XAE_9],9];$__(){} }Class __u17_3_{Var _:Array [Array [Array [Boolean ,0103],04],0103];}Class T__:L{}Class F:_{Var $n5J,$M_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3420))

    def test_3421(self):
        input = '''Class _h_:w_{X(U,_,U__:Float ;_:Array [Array [Array [Int ,6_80_8],11],0X59];u042:Int ){}Var $_31,$e92__:_;}Class _{Val $___Rulchh_,$xB3,__:Array [String ,11];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3421))

    def test_3422(self):
        input = '''Class _{Val $6A_L,R,_tH:Array [Array [Int ,0xE5_2_6_25_8_3B],0x5C];Var $_:Array [Array [Int ,0106],27];Var $4,J,d:_2_A;Val $__:Array [String ,0106];}Class Q:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3422))

    def test_3423(self):
        input = '''Class _6B:V{}Class z:___{Destructor (){} }Class _5_{Val __:Int ;}Class e5{}Class Q9G:_{Var $4p__,$2,$__sX_,$c:T1;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3423))

    def test_3424(self):
        input = '''Class h{}Class _T:_{Constructor (V:Int ;k_,h,__5__,_3_8giS,s6:Boolean ;k,_VBy ,z,__,y,y:Array [Array [Array [Array [Float ,5_95],0b1],0b1011000],7]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3424))

    def test_3425(self):
        input = '''Class P_:H{}Class PQ693{$l(_8,_,_,P_:Int ;K__:Array [Array [Array [Array [Float ,0b1],0127],0x7],0127];e,_2:Array [Array [Float ,0XE84],0x798];U0,_,A:String ){}Destructor (){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3425))

    def test_3426(self):
        input = '''Class _{}Class d6:_9_{}Class _3{$_(){Return ;} }Class o:__{}Class __Q_{}Class _F5:SU{Val $9_:td;}Class I08Z:_{}Class _5_1:r{}Class b_{Constructor (){}_(){}Destructor (){ {} }}Class vi_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3426))

    def test_3427(self):
        input = '''Class D:W{Constructor (H_,_:e;e:Array [Int ,0XF5];a_5o,li:Array [Array [Array [Array [Float ,06],064],0b1],8_2_2520];_0,__:m_){}Var z:Array [Array [Array [Array [Array [Array [Boolean ,0B110_0_0_0],03],0x3],01_1],0XF],0b1001000];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3427))

    def test_3428(self):
        input = '''Class _83y_:_{}Class _P{Constructor (){Continue ;}Val $_:Array [Array [Array [String ,0x18],01],0b1]=!!!--"'"".__3;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3428))

    def test_3429(self):
        input = '''Class gx:_{Val _l,$VKN9,_xOI:String ;}Class _:_{Val _0:Y_b;Constructor (__kl,_j1,F:Boolean ;_,p_7:u64){}$_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3429))

    def test_3430(self):
        input = '''Class F2:d0Q{Destructor (){Return ;}Var _,$36_,$a,$1,$___:Array [Float ,0XF];}Class _{Constructor (_:Boolean ;C:Float ){} }Class GX5:j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3430))

    def test_3431(self):
        input = '''Class _2_{}Class _:_{Constructor (k,S:String ;__,N,w_:Array [Array [Array [String ,3],06],0x5B];c,_:i;_P,ON__,_,__0,__9:Boolean ;_:_){} }Class S_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3431))

    def test_3432(self):
        input = '''Class _t_:_{Var L,_4,$4Y:Boolean ;Val $_,$_:Array [Array [Float ,0xCDE_F],0X58];$zB7(_0Z,_,B:Array [String ,0B10010]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3432))

    def test_3433(self):
        input = '''Class K5:E7{Var $9_v,$K:Array [Array [Int ,0x3E],5];Constructor (){}Constructor (_:Float ;z:Array [Float ,0x3_1D8]){} }Class _x8_L_62U:_f{}Class _17:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3433))

    def test_3434(self):
        input = '''Class hTOU{O(_7:Array [Array [Array [Boolean ,0B1000111],6],0XF];z,w,_V,_:String ){} }Class _:e_{Val _B,$3BC,$_:kN4;}Class _{}Class mYi:_CD_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3434))

    def test_3435(self):
        input = '''Class _6_{Destructor (){}Destructor (){}Destructor (){ {} }}Class _:_{}Class _6__:_{}Class _:_{Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3435))

    def test_3436(self):
        input = '''Class _:_{Destructor (){}Val ___,_9,$8,_:Array [Int ,0B11];}Class F42__{}Class P{Val $_:__;Var o,$2__,L,$_6,_,Tj5:Array [Float ,89];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3436))

    def test_3437(self):
        input = '''Class r_R:C__{Var $_,$_,_4,$W,$1,_:Array [String ,0x12];Var $2,_,T:o12;Constructor (_,u9_x,__,_Q,eGU98bb__2,y:Int ){}Constructor (){Return !-G_::$1();Var b_s_:Array [Array [String ,0XCE],75];}_4(_8,__,__:_;_:Int ;_,___v:Array [String ,0B1];_5:y){}Destructor (){}Constructor (b8W97_:Array [Array [Int ,0100],8];e:Array [Boolean ,1];__:String ){} }Class t910E:_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3437))

    def test_3438(self):
        input = '''Class _:I{}Class b__:_s_5{}Class n{$5(I_6_:Array [Array [Float ,02],02];_9,g_9_:_;_5_475,yp_,_A____:Array [String ,0B1_0]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3438))

    def test_3439(self):
        input = '''Class L:_{Destructor (){}Destructor (){Break ;}$7o(_:Array [Array [Array [String ,0X62],0x22],0x22]){} }Class r_3{Var F:Array [Boolean ,67];Var $_pT:_;}Class _:U{}Class _{$_h(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3439))

    def test_3440(self):
        input = '''Class t4g{Constructor (_3:U8;_,W3b:E6l1){Val __D,F,b869:_;} }Class __:Y{Var $E_,$3,$03W38:String ;}Class _3:W{_(B_,_,_d,f:Array [Array [Int ,0B10000],0134];_,__47_aw2GE9T:Array [Array [Float ,1],0b1100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3440))

    def test_3441(self):
        input = '''Class b:v8_{}Class _{}Class ___894:he{Constructor (__,d_,_:qV__9q;__:Array [Array [Array [Float ,0XB],0X52],100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3441))

    def test_3442(self):
        input = '''Class _{_(_2:Array [Boolean ,43]){ {} }}Class _B{u(_,_:Int ;_3vt,_V,_:Array [Int ,43];_:String ;m:_;_9xU_a:_){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3442))

    def test_3443(self):
        input = '''Class E:v5{}Class _a{Constructor (__,__:Array [Array [Int ,06],753];__,_:String ;I:_;W,_1,n:Boolean ;_:X;_B__,K7PU8Z:String ){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3443))

    def test_3444(self):
        input = '''Class __:B{Destructor (){}_(j_2J8,_,_p:uwF;i,T:Int ;_:_;_:Boolean ;__:Array [Array [Array [String ,0x1],0b1],0b1_10_0_1]){Val _:c;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3444))

    def test_3445(self):
        input = '''Class _{}Class g{}Class _q{$6_X7(O,__:Array [Array [Int ,06],0b1];K:Int ;C,l0:Array [Array [Array [Boolean ,025],0X33],07_1]){Break ;}Var $AM:Array [Array [Boolean ,025],0xD];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3445))

    def test_3446(self):
        input = '''Class _x{Constructor (_7__,I,_6:h__;m:_){Continue ;}Constructor (K_d_O93ZG:Array [Array [Array [Boolean ,0X47],0B1001001],0X47]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3446))

    def test_3447(self):
        input = '''Class X:__{Destructor (){} }Class J:_{$_i(X9,_,u_A,O:Array [Boolean ,0141]){}Var U:Array [Array [Array [String ,33],33],33];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3447))

    def test_3448(self):
        input = '''Class _:_{Val _q,X6,_,$4:Array [Int ,0B101111];Val _,$U3:_x;Constructor (___,J4,_4wq,_6:Float ;_,O,_,N,T,__,t:Array [Array [Array [String ,046],29],0x9_3]){} }Class _{Constructor (__74g,f,_:I){} }Class T:P_3a{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3448))

    def test_3449(self):
        input = '''Class _w1:_{}Class j:_6{}Class Q{}Class E_{Var $__,k,_,z,$pS,V,$M9,rs,_e3:_16__;Var $j_,$__:Array [Boolean ,100];}Class H{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3449))

    def test_3450(self):
        input = '''Class __q{}Class N5:Y{Constructor (){Break ;Var _,_:Array [String ,03_0];}Var $8,$__5,$7,$CY__,$2WV_,$_5,$_:Array [String ,0B11000];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3450))

    def test_3451(self):
        input = '''Class _8:J{Destructor (){}$_(){} }Class N:_qq{}Class _{Constructor (___,N:Array [String ,0XF];_,rY:z;x,U9:Ad_U6){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3451))

    def test_3452(self):
        input = '''Class _:A_{Constructor (__:String ;t_,_,Dh646,J6,Hi3,a,_9__,GQ:_J607;e_,DI078:String ){}Destructor (){}Destructor (){p1::$_();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3452))

    def test_3453(self):
        input = '''Class _:gK{}Class _:B{Destructor (){}Var RJY_:__DX3;Var $U:Int ;}Class A3:W{Constructor (K:Array [String ,0X7_F];p_cdI:_9;y_J6:_){Return ;}Constructor (k,v_:Array [Int ,0x2_C]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3453))

    def test_3454(self):
        input = '''Class jt_:_{}Class _{$8(z,_J,D:Float ){}Var $8_9_:Int ;}Class F_{Constructor (_:Array [Array [Array [String ,0x4E],0B1011001],9]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3454))

    def test_3455(self):
        input = '''Class th{Constructor (_,_,T0:Array [Boolean ,02_46];_3Y5,H,Jf,__25:Array [Array [String ,0x30],0x30];q_,a,G:Array [String ,070];U9,C:_i___){}Val s_,C,$0,$m__k:t1;Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3455))

    def test_3456(self):
        input = '''Class k{}Class ePj1{Val b_:_;Var ___0,$4,$_:w;$3p1(){} }Class Y_{}Class P_:_u2U_{Val $___:Float ;}Class m_:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3456))

    def test_3457(self):
        input = '''Class w_W:o_{Destructor (){_::$q();_::$__();Break ;}Destructor (){} }Class _{j(_5:Array [String ,0b1];_ff,_,_,_,o:J____;L:Boolean ;Q7:H){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3457))

    def test_3458(self):
        input = '''Class _{Constructor (y:String ;_,_:Array [Array [String ,07],052];_:Float ;BU:Array [Array [Array [Boolean ,0b111],0X58],0657]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3458))

    def test_3459(self):
        input = '''Class H:_{Constructor (X,I,W,_,_:Array [Boolean ,0B111]){ {Break ;} }Destructor (){}Constructor (_,_,Vm4:Array [Array [Int ,0B111],026];c59:Int ;d4,_7_:String ;_,P_7:Array [Array [Array [Float ,033],0x23],58];D_:__3Q;uk:U_2){} }Class Z07:_7S{}Class _M{}Class G:SD{}Class fa:s_u0__86{}Class Y4_:__{}Class K:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3459))

    def test_3460(self):
        input = '''Class _9q0w:_{Destructor (){ {Return ;Val K:Array [String ,43];Var __jAP:Array [Array [String ,0b1],152_02];} }}Class J{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3460))

    def test_3461(self):
        input = '''Class _{Constructor (w:Array [Array [Boolean ,0b111_0],50]){}Var $v:J;}Class _:B{Val $0:Array [Array [Array [Array [Array [Array [Array [Boolean ,0b100101],0b1_01],064],0b10],0X3F],0B1000],0x2E5_4];}Class _:_{q(Jg__,_,gb:m6GN){} }Class _:_{}Class _:_{Val _7,$_:Array [Array [Float ,0x55],50];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3461))

    def test_3462(self):
        input = '''Class w{}Class f:__{}Class _{}Class _:B_A{Constructor (h,_,_:Array [Array [Boolean ,05],054_7_5];U___f2:String ;_:Float ){Continue ;}$3(__,V_D,_,g,F2S,_1v7v:Array [Float ,0B1_11]){}Val _:Array [Float ,0X19];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3462))

    def test_3463(self):
        input = '''Class H{Var O9_:Array [Array [Array [String ,0B111101],0b1],063];Var $1:Float ;Constructor (){}$5(a_,o,_:String ;gC4_:c4jy;_,_,V_y8:Array [String ,43];__,n,H,Y:Boolean ;r,n:U){}Constructor (_,pF:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3463))

    def test_3464(self):
        input = '''Class f:_8z{}Class __7{Constructor (_,_,o,__,f_:Int ;_,_,_cd:String ;__o:Array [Array [Int ,0b1],0114]){Continue ;}Destructor (){} }Class x{}Class _6:S__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3464))

    def test_3465(self):
        input = '''Class M{}Class _:_621{Val _,$_:Array [Array [Array [Float ,65],0124],0x30];}Class _9:_{Constructor (_,u,g_,_:Array [Float ,65]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3465))

    def test_3466(self):
        input = '''Class A:_{Destructor (){}Constructor (){}Val $_9_,_,x4:Array [Array [Boolean ,0b1],48];Var $Go3dt_0_14,$H,_8Z__2,$cWk,$_,J6EN03,$4D,_,Z6,r,$2,X,Xn,_,r:p4;}Class _14:A__Q{Destructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3466))

    def test_3467(self):
        input = '''Class Y{Destructor (){} }Class _X:_19{_(Z:Array [Array [Array [Boolean ,0B1001111],055],0B11]){} }Class P3_{}Class C{}Class j_T__8:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3467))

    def test_3468(self):
        input = '''Class _{}Class bN4F:j6_3{}Class B__{Var _6__8w,$09,s0_,$4__,$l_,$O:Array [Array [String ,0x5E],0460_63_4_52_3];Constructor (){} }Class _59{}Class Z:_3{$5(){} }Class _m_:_q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3468))

    def test_3469(self):
        input = '''Class _St9{Destructor (){} }Class _:_7N_{$v9(Qe,_,_,_I,G:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0x3],0x4F],3],0B111000],3],0B1],0B1],0x3D_6],0X57]){} }Class A{}Class _:___2{Var $_,n_:j;}Class _:__3{}Class _6f:K33{}Class Z:nL__29Z__{Var _:Array [Array [Array [Array [String ,015],0B111000],0B10_1],1];Val $K3,$U_n7,$0,$_0:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3469))

    def test_3470(self):
        input = '''Class _{Constructor (){}Destructor (){Val _:Array [Array [Int ,0B10],031];}Val __,$08_2R,_:Int ;$98(){}Var _2j:Int ;}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3470))

    def test_3471(self):
        input = '''Class Z8:R_2{$C_(){}Constructor (e:Array [Int ,794]){}Destructor (){} }Class _x{}Class xV{Var $1:_l;}Class __:__9{}Class h{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3471))

    def test_3472(self):
        input = '''Class __u:Eg{}Class zIo8:R{$_5_25_(O,___7U__:Array [Array [String ,0B1],041];Qjg:_u_5;_i_,_,bbG4:Float ){Var Ri:r_a__9;}Var $30_5k,$_3O__:Array [Array [String ,041],05];Constructor (_,Av:Float ){}Val k:Int ;Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3472))

    def test_3473(self):
        input = '''Class P{$0(A,G8V_:_9;d2,___:_;_luX__r:Float ;_:_a3;_:Array [Float ,05];f,i:Array [Array [Array [Array [Array [Boolean ,0b10_1],0b111011],02_3],0B1010111],0b111011]){} }Class ws_eGQ:GX{}Class _2_n431T1:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3473))

    def test_3474(self):
        input = '''Class __5:_{Var _:Array [Boolean ,18];Constructor (_:Array [Array [Array [Array [Array [Array [Float ,6_4],0x47],0B1111],0b1],18],0B1111];m:Array [Array [Array [Array [Float ,071],0b1_11],023],0x47];B,_5909_T8,B_1:String ){ {}q::$_();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3474))

    def test_3475(self):
        input = '''Class g{$b(__,A:String ;y,B5,_t_,_x:Float ){}Var _1Zxm_WG5:_;}Class I:_{q(_:D;dja:Array [String ,07];t5,g,H:Float ){ {} }}Class __W6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3475))

    def test_3476(self):
        input = '''Class C{Val $_1:G__;}Class z{}Class _{}Class _3_{}Class iM3:_{Destructor (){}Constructor (_:__){}Constructor (){}i(d,t,w9_,_,___yx_:Array [Array [Array [Array [Array [Float ,0b111],0b111],0x41],074_5],0x2];J,X9_n4d_87:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3476))

    def test_3477(self):
        input = '''Class _1{O0(_,_31p,_,__,N,A,_7j:Array [Array [Float ,0B10],0b1_0];_:_){}Y(S:_0;_:String ;X:Boolean ){} }Class _48:_m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3477))

    def test_3478(self):
        input = '''Class uG:__B21_7{Var __1m:_;Val _t_y,$_:Int ;}Class _33KI_O_:_{Var I,u,_,$1,aa,g9A:Array [Array [Boolean ,02_20],0X48];}Class x:X{}Class ___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3478))

    def test_3479(self):
        input = '''Class p9:A{Var $_:Boolean ;Destructor (){} }Class c{hu_(){}$x4_(){} }Class x9_:_T_Y{}Class _Y_{Val $5_,_,_v,$FU,_,_,$_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3479))

    def test_3480(self):
        input = '''Class k:vQ2_{oo_(___t_:nN__;_I:Array [Array [Int ,0x18],0b101000]){}__(_,H,N,_8,_K:Array [Array [Array [Array [Array [String ,0b101000],0xDE],06],4],0B1];m:Int ){}Var $8,_8,$_V10,$2:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3480))

    def test_3481(self):
        input = '''Class _1:a{Constructor (Q,I_bSC,b,zR:_){}__(R_:_;j,_,Q1,_9:Array [Array [Boolean ,0b1],0x4];_,_:Array [Float ,0X6_0_46_1];a36,Jw:Boolean ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3481))

    def test_3482(self):
        input = '''Class A{Destructor (){}Var $3x:XA;Constructor (M_v:Boolean ;S6_6:String ){}Destructor (){Continue ;}Var _U,$7:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3482))

    def test_3483(self):
        input = '''Class _2u{Constructor (G0,__:_;_9:E;_,W3:H_7;i:Array [Int ,0b1010111];h:Int ){}Var _:Array [Array [Int ,0b110_1_0_0],8_71];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3483))

    def test_3484(self):
        input = '''Class _31:G_{Constructor (G:Int ;gE,p:Array [Array [Array [Array [Array [Array [Array [String ,1],0b1011111],0B1],075],0B100010],0B10],0x36]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3484))

    def test_3485(self):
        input = '''Class w{Constructor (){}Var S_:Array [Array [Array [Array [String ,015],0x6],0B1011011],015];}Class _Ks_3{Destructor (){}Val _1:String ;}Class m_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3485))

    def test_3486(self):
        input = '''Class _i:_{Destructor (){ {Continue ;Return ;Val __:S;}Break ;} }Class _8{}Class ____{Val R:Array [Array [Boolean ,0B1_1_1],93];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3486))

    def test_3487(self):
        input = '''Class c4a_{Val I:Boolean ;Y(_,_,_6_,_3_:y;_,_9C,D:Array [Array [Array [Boolean ,043],0x3_5_2_1],03_5_62];_:_){ {Return ;}Break ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3487))

    def test_3488(self):
        input = '''Class _q:i_8{Constructor (s:Array [Array [Array [Int ,0x7],0105],0X8_8];V:J;S_:Array [Array [Array [Array [Boolean ,0X2E],0b1111],0x53],02575_1_475]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3488))

    def test_3489(self):
        input = '''Class _o54u:_{Val $2:_b_;}Class _v_:_{Var _1,$__m,b,___nB0,__0,_i__E,$3,_0,Gm_M_Q,$0D5,$5,$_,s,$2,_9,_,$3:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3489))

    def test_3490(self):
        input = '''Class _:g{}Class j:S{Constructor (_:String ;I0:Array [Float ,0124_3];_,_2:ot2;ST,N,_,B1S:Array [String ,0X8];uN9:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3490))

    def test_3491(self):
        input = '''Class _cl{Var $_7,$3:Array [Array [Float ,04],0B1];Var $yJ,t4:Array [Array [Float ,0B100001],0X36];Constructor (){} }Class ti:Np8v{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3491))

    def test_3492(self):
        input = '''Class X{$Z_(_,_,T:Array [Float ,55];X_,K2:H_;_,LN:Boolean ;L,B:Array [Float ,55]){}$__(P:Boolean ;S96,j_4:___2__;__,_:Array [Array [Array [Array [Array [Array [Array [Int ,0B10110],9_8],0B10110],0X6],1_8],0x48],041_04_5];a3,O:Array [Int ,55];_Q,l,Zw9:Array [Array [Array [Array [Boolean ,0x48],0B1],55],9]){Break ;}Val $8Z,SJ:Array [Array [Array [Array [Float ,0B11_0],0b1110],0B1],0X64];}Class _{}Class g{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3492))

    def test_3493(self):
        input = '''Class W{}Class yB:i{}Class _5:_{$H(){}Constructor (){} }Class __:N{}Class DN54:_{Destructor (){}$_(){} }Class _:mz_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3493))

    def test_3494(self):
        input = '''Class pB:n{}Class _75T{Var $Z:_9;}Class ea{Val $_,P,$_Vx4U_,_,F,B,$_,c,F,_,$__aM,$_qe9_,z:Array [Array [Boolean ,02_4],0xA];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3494))

    def test_3495(self):
        input = '''Class d{______(E2_,_d:Int ;A,c,_65_,_:String ;_0__:Int ;_:Float ;T,z,_O5:d;R4:U3){}Var $1__:Boolean ;Destructor (){}Destructor (){Return ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3495))

    def test_3496(self):
        input = '''Class s{}Class zK9{}Class X4:_KS{Constructor (_,_59_h:Array [String ,0b1_0_0_0];__399:Array [String ,0100]){} }Class _:_{}Class _8_b:_H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3496))

    def test_3497(self):
        input = '''Class _:_79_B{Constructor (y:String ;f_:Float ;n:_6;d:Array [Int ,0b1];_:l;q_:_){_w_::$_._k();}_(R:_;_,V:Int ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3497))

    def test_3498(self):
        input = '''Class _{Constructor (_7:Float ;_:Array [String ,0B1010100]){}Var $8,_:Boolean ;Constructor (Q:Array [Array [Array [Boolean ,0b110010],051],74];_M,o,v,_05:Int ){Break ;} }Class k{}Class c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3498))

    def test_3499(self):
        input = '''Class _{}Class _{}Class a__:_{$7(H_,___:Array [Array [Array [Int ,07],0x7941],3]){}Constructor (f,_L,B_2:_4;_:Array [Int ,0X3]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3499))

    def test_3500(self):
        input = '''Class _e3P{$_C_(){Break ;} }Class F{Var IX,_az__:Array [Array [Array [Array [String ,0661],61],0xA],0B111];}Class _E{Destructor (){} }Class c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3500))

    def test_3501(self):
        input = '''Class _:_{Destructor (){} }Class __44{Destructor (){}Val Tr,p_,$6,__:Array [Array [Array [Array [Array [String ,0b1010000],15],9],15],0B1010100];}Class _G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3501))

    def test_3502(self):
        input = '''Class e{Var $09_,m_,g_ty5:Array [String ,20];}Class __2A{$G5_(L:_2y){}Var $15,$_83_:_;}Class _{}Class Yu7:__2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3502))

    def test_3503(self):
        input = '''Class _:_U_2l{Destructor (){} }Class C:_M{}Class K{Var $7X:String ;}Class _5:Q{Constructor (){Break ;} }Class B{Val $_,$o9_,$xv___c50,e6,qy:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3503))

    def test_3504(self):
        input = '''Class _a9:iA{}Class z_7{$1(_,aU,_T,__,Y:Array [Array [Array [Array [Boolean ,06_6],0B1010110],07],0x4];_:_RF;_,_:Array [Array [Array [Array [Array [Float ,30],0B1],05_0],1238],012]){}Destructor (){Break ;Var _:_;} }Class t__:__0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3504))

    def test_3505(self):
        input = '''Class m:_{Constructor (o,_,_,wX9:Array [Array [Array [String ,0x3B],06_6],04]){} }Class z:_{}Class _6:f{}Class __37_5_:__m_01{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3505))

    def test_3506(self):
        input = '''Class __:g{Var J4U,_,gy,$2R,$4R,h:Array [Array [Int ,0b1],06];}Class __{}Class __U:___{Constructor (){Continue ;}$_8(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3506))

    def test_3507(self):
        input = '''Class Mc9:_{}Class XR{_(T,E_:Array [Array [Array [Array [Array [Boolean ,0b110010],06],468],0b1_1],015];R5,F:String ;_:s71LR){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3507))

    def test_3508(self):
        input = '''Class _:a{Var $5,_:Array [Array [Array [String ,28],060],0x4_72];}Class kk3{$V7(){}$p(_:Float ;lf__X:Array [Boolean ,28];_F1,__X:Array [Array [Array [Array [Int ,9],0B1000100],0B1],060];__c,_I_,VO_l04:Int ){Return ;} }Class _3:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3508))

    def test_3509(self):
        input = '''Class __Y{Var $K_,$_V_7__U:__;$88_(_:_L;u,S:Array [Array [Array [Float ,0X4F],0b10001],0B1];_,u_:_){}Destructor (){} }Class h:b{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3509))

    def test_3510(self):
        input = '''Class i{Constructor (L,r,_:Boolean ;L,_,___,d31,E,h_:Float ;_:Boolean ;sb:Array [Float ,0B1]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3510))

    def test_3511(self):
        input = '''Class OhuVvi{Constructor (_:Int ;_1_:Array [Array [String ,02],0133]){}Constructor (_,_,zo:Array [Array [Float ,0B1_0],0x7];Z:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3511))

    def test_3512(self):
        input = '''Class p:w8tc1{$_N_3(G:__;j:Array [Array [String ,21],7_2_2_9]){}Var z9,_:Array [String ,0x8];Destructor (){Break ;Break ;Var _,Q,S:Array [Boolean ,03];_N::$M().c();}Constructor (g_:_;E,_l:Array [Boolean ,0B110001]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3512))

    def test_3513(self):
        input = '''Class x:_f{Constructor (_:Array [Array [Array [Array [Array [Array [Array [Boolean ,33],0b1],0X5],0b111100],0B1],010],21];H,_6_:Array [Int ,33]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3513))

    def test_3514(self):
        input = '''Class _{$_(M_V,C:F_;_N,C0_1V,U:Array [String ,0X1D];_:Array [Array [Array [Array [Array [String ,82],0B111011],0126],82],72_2];__v,_pd:Boolean ){}Constructor (){Break ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3514))

    def test_3515(self):
        input = '''Class Z{}Class i7_h:_{Constructor (FN:Array [Array [Boolean ,31],0130];r1:Array [Array [Float ,0B1_0],1]){}Val $uA_:Array [Int ,0B11_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3515))

    def test_3516(self):
        input = '''Class _:_{Constructor (G8_:Array [Array [Array [Int ,0107],0x3B],0x3B];_M_3D,f:Float ;T_6_4:Int ;S:Array [Array [Array [Int ,5],0B1001000],91]){Continue ;}$_(){} }Class n_S:w3{}Class M:_{Destructor (){}$5(){} }Class o9:_{}Class f:T_{}Class _6XY76z:N{Constructor (){} }Class _6:V{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3516))

    def test_3517(self):
        input = '''Class H_0_{Destructor (){}Val _NM9Qg,$_,U_,$6_v___M,$La:Int ;}Class fXK:_{Val _g:Boolean ;}Class _:p5{}Class Q:B__U5_ts{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3517))

    def test_3518(self):
        input = '''Class h:_{Destructor (){} }Class _{a(W:String ;_3_:e;_I:_6;_,Q81,_:Array [Int ,0X3C];p,o:Array [String ,05]){}$0(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3518))

    def test_3519(self):
        input = '''Class _:__{}Class L2_0{Var $H:_;Var $Kk8_,I_9_:Array [Array [Float ,03],03];Destructor (){Continue ;Var i:Int ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3519))

    def test_3520(self):
        input = '''Class r:S{Constructor (___,o8_,e55,Y:Int ;_:k;q87,z,G:Boolean ;_,_:_;YX:Float ){}Constructor (B_63N_D_:Float ;pc:o7__;_13J:__){Return ;{} }}Class _Q_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3520))

    def test_3521(self):
        input = '''Class _:_{}Class x84x_{Var _,$i6,$7,$Ux,__,kz_2,__:Float ;Val $Y4k,Z_:Float ;Constructor (h0:__61_;_qz,i,rDF:Boolean ){}Val $_z_:R;$_(){} }Class _:_{$0dQS(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3521))

    def test_3522(self):
        input = '''Class Y0h_9:hP__{Constructor (_1:Boolean ;r_:Float ;ve,_,_9X,a:u_;_:Array [Int ,0143]){ {{}Val MO:_;Return ;} }Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3522))

    def test_3523(self):
        input = '''Class j_1t:R{Constructor (__8_1y,_N:Boolean ;j_,_76,b6,_:Array [Array [Array [String ,037],0XF_4_D_8],0B11011];DF,q,V:_K){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3523))

    def test_3524(self):
        input = '''Class __:_{Val f,$_,q_J:Int ;Constructor (JNl_,W,i,qZ:zC;T_Mx1_p:_N){} }Class _2i:V__{}Class C:H_4_{}Class _A{}Class _L{}Class m9_r:CD{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3524))

    def test_3525(self):
        input = '''Class _7:HL5{Var $_a5__Q:Array [Array [Int ,0b110010],6];Val $a:Array [Array [Array [Int ,99],07],0B10001];Constructor (_:Array [Array [Array [Array [Array [Float ,025],7],99],99],04_3]){Val p:Boolean ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3525))

    def test_3526(self):
        input = '''Class j{_(T,__:_8;o0_,__:Array [Array [Array [Array [Array [String ,12],0xAC8_2],0B1_1],5_9],03_3_3]){Break ;Return !!--D::$M8().F;}L_(){Break ;Continue ;Return ;}Val _:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3526))

    def test_3527(self):
        input = '''Class b_:w{$4F(){}Var $8:_8;Constructor (_:Array [Array [String ,0106],0XF_9_0]){Continue ;}Val _,$W,$ic,Su,_,_,$0r0:Array [Array [String ,0106],0106];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3527))

    def test_3528(self):
        input = '''Class O:K{}Class t_8:__4{Constructor (_1Z8:Array [Array [Array [Int ,0B10110],1],0b1110]){}Constructor (){H__::$9o4();}Val O_,I,_02,_9_,v_,e,$_:Array [Boolean ,0b1110];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3528))

    def test_3529(self):
        input = '''Class A_c:_U1{}Class e:B0P{Val $____1:Array [Array [Array [Array [String ,0x48],88],0b1],0x48];Var _5e,g_:_43;__(dJ9,_5__,S:Boolean ;o9:_;n,o:Float ){} }Class umU3{}Class x_Mc:E_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3529))

    def test_3530(self):
        input = '''Class _:A0{Constructor (f:__4y9X;Nr,_d_y,K,_,___:Array [Int ,6];N:Boolean ){Return ;} }Class _4:x_k7{Destructor (){} }Class z8:MM{$3_(h28_,_,__:Float ;_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3530))

    def test_3531(self):
        input = '''Class _:_{Val $__,da:String ;k(_,Z,s,h7,a,_s,_24G:Array [Int ,064];_0S,yy_1__7_:Array [Array [Array [Int ,0106],0106],0X1F]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3531))

    def test_3532(self):
        input = '''Class _:__19_{}Class FO:_{Var $A17,_,_,R_S,_2,J,H,$1,$84:Boolean ;}Class s{$g(T,_4,_,W:y;_,V___,f,_hJ2_:__8o){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3532))

    def test_3533(self):
        input = '''Class B_:l{Val $s:Array [Array [String ,06],0b1010101];}Class M{Constructor (_4,u2,t,W,__:Int ;xP_i89:Boolean ){Continue ;}Val _:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3533))

    def test_3534(self):
        input = '''Class _:Gi{}Class U1:_{Var m,_Rn_8:Array [Array [Float ,0x1C],0B1010111];}Class _5is:S{}Class _{}Class W:_{}Class O{}Class __:_{}Class O{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3534))

    def test_3535(self):
        input = '''Class O14:x__{}Class ___z{Destructor (){}G(){}Val c_:Array [Array [Array [Array [String ,63],076],076],0X88_F_5];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3535))

    def test_3536(self):
        input = '''Class _:u6{Constructor (h0:Array [Array [Array [Array [Boolean ,0B1],0x1_D],06_0_7],0b110111];t,k:cS5_){}Constructor (_6:Boolean ;j4:Int ){}Constructor (){Continue ;Break ;}Constructor (){} }Class J_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3536))

    def test_3537(self):
        input = '''Class e:fj{Var lq26:Array [Array [Array [Array [Array [Array [Array [String ,0B11_0],57],1],253_71_6_1],0xB_BCAC_E],0110],0x28];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3537))

    def test_3538(self):
        input = '''Class n{Var S_:String ;Constructor (__,dy67,_,Q,Z_w,s:Array [Array [Int ,0b1],1];____1C_gew:_){}Var Y68:Array [Boolean ,0X45];__1Z(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3538))

    def test_3539(self):
        input = '''Class N:kh__R2_1_{Var $8,$72,$w56F2,$_,_9:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,01_51],5849_9_8_5],0x50],0121],05_3_3],0X27],07],97],0xB7_BC];}Class _:Q{}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3539))

    def test_3540(self):
        input = '''Class _73P{Val $Q9,IS,_w,$_,m4,$3,$T0gf,$3_,$_l:Array [Array [Array [Int ,0X1],0B110001],22];Var g,$__,yD,$_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3540))

    def test_3541(self):
        input = '''Class o{Constructor (y_5,_,Z_:_R0){} }Class _:_Ey_{}Class __6_9__:d{}Class _{}Class _{_9_2(){Return ;} }Class n{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3541))

    def test_3542(self):
        input = '''Class N_f:_{Constructor (_5,K_:Array [String ,0b101011];_:D_;_,cm_,_03403_:Ems_;_:Array [Array [Float ,0x2],34];_,_,__V_A,a,__:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3542))

    def test_3543(self):
        input = '''Class _:_{Var $_01:Array [Array [Array [Array [Array [Boolean ,0x37],57],06],0X59],0142];Destructor (){Return ;Val _,l:Int ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3543))

    def test_3544(self):
        input = '''Class q{Var $_S29,$k_,$_3:Int ;Constructor (R:Array [Array [Array [Float ,012],0X3E],075]){}Destructor (){}Constructor (F,_:V_A;D:Float ){}Val $A_U_7:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3544))

    def test_3545(self):
        input = '''Class f:_o{}Class u:_{}Class _:o{Var G:Boolean ;K(vcJ,P_:s;_r,tP7:Array [Array [Boolean ,0X4],8_7];_:_G){} }Class MW57:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3545))

    def test_3546(self):
        input = '''Class _r{}Class _z:n2_4{}Class EWT{Constructor (){}Constructor (x:Array [Array [Boolean ,0XF],0x4F];_:_9_6;z:m;_c,_,X,B:Array [Array [Array [Int ,072],0x4F],072]){_::$2_AW7____._Y_.x_();}$_P0(){Continue ;}Val _34,r:S;Destructor (){ {Continue ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3546))

    def test_3547(self):
        input = '''Class j{Var $Bo_:M16_=!!-__7::$1-!!New _Q()._6()/31_8_6970_3.e-81&&!_WeU::$_.C_01X>_1zu9::$lb.r;Var $j0r1_,_V8,$__n,_w:Array [Int ,77];$_1(){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3547))

    def test_3548(self):
        input = '''Class __69{Val R:Array [Float ,0X3_B6_9];}Class _7:__{}Class __K8:p{Constructor (_89:W){} }Class F8F{Destructor (){} }Class _8:VR{}Class _:_U_8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3548))

    def test_3549(self):
        input = '''Class _3:_{Constructor (){} }Class Z:R{Constructor (h6,e,H:Array [Array [Int ,4],0b11101];A:String ;_e30_,S:_){}Val $7,$ZCL,$_:_5F_;}Class M{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3549))

    def test_3550(self):
        input = '''Class jD:i_wq_8__z{Constructor (_,Ael:Array [Array [Array [String ,05_3_40],051603],69]){}Constructor (){} }Class _McbU:Mq1{}Class _J:X{Constructor (G,_4:_;_M:w0){}Constructor (h,H:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3550))

    def test_3551(self):
        input = '''Class E{Constructor (a__,Uy:_;_0Jg,F:Array [Array [Int ,9],0B1]){Continue ;}Constructor (_,_:Array [Array [Array [Int ,0B110000],0114],06_54_3];_4k_f,M,_,_,x,S:Array [Array [Array [Array [Array [Array [Array [Float ,0b1011111],0b1011111],0B1_1],4],025_3],1],0XD_6]){} }Class _:_{Destructor (){Continue ;} }Class u_v_:A_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3551))

    def test_3552(self):
        input = '''Class _fG__Wy__:u4e{Val _:Array [Array [Array [String ,0x53],0B1_0],0B101001];Val B,$9,H_9:String ;Constructor (){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3552))

    def test_3553(self):
        input = '''Class _{Val Z:Array [Array [Array [Array [Array [Array [Float ,03],0B111111],0X5],9_70_89_3],7],80];}Class ___D_07M{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3553))

    def test_3554(self):
        input = '''Class _:q5{}Class _:_2_{}Class ghs:_6{Var $b:Array [Float ,0b1100011];Var $5,$8EV_:Boolean ;Val $_F,M:Array [Boolean ,0b1_00];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3554))

    def test_3555(self):
        input = '''Class q_:_9_{Var _,$f:Array [Array [Array [Array [Array [Array [Array [String ,06],0X5C],074],0b1],0x1_9],0x36],0x4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3555))

    def test_3556(self):
        input = '''Class _{Constructor (_,T6__:Boolean ;_5:Boolean ;_,J:Array [Boolean ,0B11];P28,RC5:Array [Array [Boolean ,0X34],0144];d,q,_,d_:Array [Array [Array [Array [Array [Array [Boolean ,0b1],0B1],0144],0144],0144],9_8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3556))

    def test_3557(self):
        input = '''Class _5{}Class ep{_(Y3,G:mp;Lx_,___,r:Array [Array [String ,0xD],55]){} }Class _:D{Destructor (){} }Class _1_:_{}Class f{$___(){} }Class _:C{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3557))

    def test_3558(self):
        input = '''Class c3{}Class _{}Class A:M9{}Class hK:QB3{$T_2(){} }Class _8E66{}Class h:u_{}Class J_r{}Class ____:C{}Class g_{_7(){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3558))

    def test_3559(self):
        input = '''Class i:_Ws{Constructor (_5z__N_,No,q:__;_7:Array [Int ,05_0];__q,_1Z:Array [Array [Float ,5_5],0b1100]){}Destructor (){}Var v_7,_,_:Array [Array [Boolean ,0B1],0B110001];Constructor (_:Float ;k,_:Array [Float ,57]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3559))

    def test_3560(self):
        input = '''Class _{i(__,E22_78:Array [Boolean ,072];s,_:Int ;_,yE:Int ;__,Z7_,O:y0;O8_:Array [Float ,65]){ {} }}Class Vp1{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3560))

    def test_3561(self):
        input = '''Class ___dX:rK{}Class __2:_O{Val __:Array [Array [Array [Array [String ,0x21],0B101000],0X36],05_4_7_4];Var $N:Array [Array [Float ,0B101000],0xF];}Class _a:e{Val $8,$4:Array [Array [String ,76],0x87_3];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3561))

    def test_3562(self):
        input = '''Class _6{Val $x:Boolean ;Destructor (){Break ;Continue ;}Constructor (_:Array [Boolean ,035];__,_0C:Q;J_:d){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3562))

    def test_3563(self):
        input = '''Class _{Var Sz99:Array [Array [Array [Array [Boolean ,0B101111],0B1_0],056],056];Val _:String ;}Class P:k{}Class _{}Class _{Var _:v2J;}Class _{}Class _:_{}Class i68:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3563))

    def test_3564(self):
        input = '''Class __W9:V0__{Constructor (W_,HD5,w2,k:Array [String ,011];_,X_:Array [Array [Array [Float ,0B1],0x21],0B11]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3564))

    def test_3565(self):
        input = '''Class _{}Class _:o_W{}Class j_{Val $98:Array [Array [Array [Array [Int ,0b11],25],0B10010],063];}Class I{Var $I,$_k:Float ;}Class A9z___:M{Constructor (_,sD44_R8n:String ;_3D,_:Int ;D_U9,_6:Array [Array [Array [String ,80],034],05_36];D,_X43,_:Int ){} }Class _4{Var $K_0F,$03,$3_6_Eh:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3565))

    def test_3566(self):
        input = '''Class _:_{}Class r{Val $e_t_,r:J2;Val $e7:String ;Val k,$82,C,$7:s;}Class _vd3:Y__{Constructor (){}$3(F,_:Array [Int ,0b1];_,n,A,U,_,_:e){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3566))

    def test_3567(self):
        input = '''Class _{Destructor (){Continue ;} }Class _0__{Var __:Boolean ;$2D838_(_,wp:Array [Int ,0xD]){Break ;}Val $6x,f:Boolean ;}Class f:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3567))

    def test_3568(self):
        input = '''Class _E7{Val $1__,$33,_:Array [Array [Array [Array [Array [Array [Int ,043],03_7_17_46],0x1_D5],4],043],0B1011010];Var __e_R2,$_M,$e:Array [Float ,063];}Class z70y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3568))

    def test_3569(self):
        input = '''Class e_{Val _3Zc,n:String ;}Class k:p{}Class _:IC012{Constructor (){Break ;Var BWx,_7:_;}Var _:Bs;Var _9I3:Array [Array [Boolean ,0B1100001],0xD];Val dvU:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3569))

    def test_3570(self):
        input = '''Class RaI:Jq2{Constructor (V1:lb;H:_1wG){}Constructor (k_,__O,cm,rY,_0,_2,o,_,k,_,__1,x4:String ;_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3570))

    def test_3571(self):
        input = '''Class _KH{}Class r_o{}Class _:M__0u{}Class PX:__5{Val F,_,$S:Array [Array [Array [Array [Array [Array [Array [Int ,1],0B1_1],033],0x27],0xA],0b1001110],0x8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3571))

    def test_3572(self):
        input = '''Class Kq_9_zu:QtG{}Class _O{Constructor (w9:D;_g,_l,___y_7,__:s){} }Class Sn:_{_1(){}U(z,C,_,_,r,N,_W3:Q6__8){Var _0k,l__:Float ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3572))

    def test_3573(self):
        input = '''Class _:_{Val s7__,_c:_W_;}Class _{}Class __{Constructor (){}Var _T,$__51:Array [Array [Array [String ,0x2B],0X2D],39];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3573))

    def test_3574(self):
        input = '''Class z7:dx7{Constructor (k_U_,o3,Q_3:__1a_a;C8,AF:Int ;_XK:Float ){}Constructor (){}Val _:Boolean ;Constructor (i4,__:Float ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3574))

    def test_3575(self):
        input = '''Class aw1M:e{Constructor (){}Val $2:Int ;}Class _Bpy_x_:_{Val _,_9_6,RB_,__,_6:Array [Boolean ,96];}Class PcH_:c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3575))

    def test_3576(self):
        input = '''Class _:E{}Class A:N9{Var $4,$_,T,$h:Array [Float ,8];Constructor (){}$6(__,Y,D:Array [String ,014]){} }Class C{Constructor (){}Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3576))

    def test_3577(self):
        input = '''Class _1:_{Destructor (){ {} }Val $09g:Boolean ;Var $2_,_,$R,_H:Array [Array [Int ,8],07];Var d:Array [Boolean ,21];Constructor (X_S,_:_8_){}Var v4,$1_r,$o:w;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3577))

    def test_3578(self):
        input = '''Class _{Var $0:Array [Array [Array [String ,97],0b101011],97];Val $pi:Array [Array [String ,0X16],8];Constructor (){}$8___(a_:JH){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3578))

    def test_3579(self):
        input = '''Class __:G{Destructor (){}we_(_1:__;X,J:Array [Array [Array [Array [String ,8],071],93],0xB];_X:__o;_:Boolean ;u_,__,_VT:Int ;n:Array [Array [String ,0x2A],0XC_2]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3579))

    def test_3580(self):
        input = '''Class _P{}Class z_:RgD{}Class E{Destructor (){Val _,o_,_,q:String ;} }Class _7x:X{Destructor (){}Var $9_:Boolean ;Var $_9_s,_,__,i98B,$r_:Array [Boolean ,9];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3580))

    def test_3581(self):
        input = '''Class vD:tcu{}Class _:_{Val q:Array [Array [Float ,0b11100],0740_3];Constructor (_2s,Q,_:Array [Array [Array [Boolean ,0x48],5_8],0x48];O:Array [Boolean ,0B1_01]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3581))

    def test_3582(self):
        input = '''Class _{}Class P:_n00n_6{Val y:Array [Float ,0B100001];}Class ___c9{}Class T{}Class K{Val $_5:Array [Int ,76];}Class h7_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3582))

    def test_3583(self):
        input = '''Class U:__{Constructor (t,D,_D,_,X:Array [Array [Boolean ,033],0B1011];_359_7:Array [Int ,22]){}Val _3,_,$H:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3583))

    def test_3584(self):
        input = '''Class _7_1h:m{}Class __{}Class Z{K7(O:_;_Y,sQ:Array [Int ,0B1];_9:Boolean ;_3,_B,b:Array [Array [Array [Boolean ,02],0X8],0B100];_gfH_,_,g_3T1_,_X__:x;B:Int ;_:Float ;n,__:_C){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3584))

    def test_3585(self):
        input = '''Class _:Cx{Constructor (M,_rM2_2__:Array [String ,8];_:String ;_,R:Int ;D,__,b:l2){}Destructor (){}Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3585))

    def test_3586(self):
        input = '''Class T_{R_3(){Val _M:Array [Array [Array [Boolean ,0133],03_5],0x4C];} }Class _{Var K3,__,$A:Array [Array [String ,0B10],0B1];}Class SX9{Constructor (_:_j;_,_:Array [Array [Array [Array [Float ,0x9E_5],0b1],9_2_3],0133]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3586))

    def test_3587(self):
        input = '''Class _3{_96(e,_q,X:Array [Array [Array [Float ,041],59_8_5],06];Ly9:Array [Array [Array [Float ,6269],0x38],0b11110]){}Constructor (){Break ;} }Class _62E:H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3587))

    def test_3588(self):
        input = '''Class h:_{Val $_,$_,b3:String ;Destructor (){} }Class R_{Constructor (w:Array [Int ,0X3]){Val _nr27,X:_;}Destructor (){} }Class W{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3588))

    def test_3589(self):
        input = '''Class Q6u_:_8{Var $5:__8z;Constructor (f_:Array [Float ,0b1];r,B2_:Array [Array [Array [Array [Array [Array [Array [Float ,0X14],63],0x83_2],0B1],0b1000001],070],4]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3589))

    def test_3590(self):
        input = '''Class X_:_{Constructor (M,__:__;_,_j_6:Boolean ;__0:f){Return ;Return ;}Var $kV,__Gcz_,$1__,I__:x52;Constructor (l:a){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3590))

    def test_3591(self):
        input = '''Class x{Constructor (_D2,_o:J_6;U,R5__,a5,_:String ;e8v,F_:K){}Val B2_:Array [Array [Int ,0X4_73],0b1_1];Constructor (){Break ;Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3591))

    def test_3592(self):
        input = '''Class b9_:_01{Constructor (Of,_8N:Array [Array [Array [String ,06],56],03]){} }Class _:_{Constructor (_e,_J,_,UmD_l,_,i:Float ){Continue ;} }Class Gd_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3592))

    def test_3593(self):
        input = '''Class H6:_{Constructor (_,_,WH:Array [Boolean ,012];_,__,_0:Array [Int ,0x2C];_R,_E_4,_43:Array [Array [Int ,05_4],0b1_0];z,_:Array [Array [String ,7],0B1111]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3593))

    def test_3594(self):
        input = '''Class K:_{_(_,__,q7:Array [Float ,0B1100_110];_:Array [String ,13];__:Array [Array [Float ,0141],0535_6];X:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3594))

    def test_3595(self):
        input = '''Class S:k{}Class K{Val $__W6H49__L,$_,$y:Array [Array [Array [Float ,0X49],95],0X9_C];Destructor (){Val V,_U0,_2:Array [Float ,95];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3595))

    def test_3596(self):
        input = '''Class _q:__{Val _,_:Array [Array [Array [Array [Array [Int ,0b101011],1_6_89_9],0B10_1_00],0B1],0141];Constructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3596))

    def test_3597(self):
        input = '''Class s{}Class _1ja{Constructor (_,b_:_;uw,_5:Array [Boolean ,0x26];_:Int ;z_,_a:Array [Array [Array [String ,0b1_1_1],02_4],1_7_5]){} }Class X0g85_{___(){}_9_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3597))

    def test_3598(self):
        input = '''Class VH79r:_4T{Destructor (){Break ;} }Class __I:_{Val __t,$_2,G_,h,_7_:String ;$8(u_Z:_){} }Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3598))

    def test_3599(self):
        input = '''Class _1:_{$7(Z,oAz___:Array [Boolean ,0B1];D8:Array [Float ,0X2B];_,g,_O,_I69_7:S;__r,_,_vn,q,h:S){}Constructor (Xi:String ;p9C47:_;Q__,_,_,_,m:Float ;oH28_:_3_;E_____J8a,Jk,__2,_,fSi_,m8,p,xdJME:Boolean ;w_:Array [Boolean ,0124]){Continue ;} }Class m:_1i{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3599))

    def test_3600(self):
        input = '''Class _0:_{}Class sh{Destructor (){} }Class _:O2{Constructor (P,Wc7:__Y;_:Boolean ;k:Tl4;Q,__:Array [Int ,44];Di0q,_9,_:Array [Float ,06];_17,__27_,W,_:Array [Boolean ,0x29]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3600))

    def test_3601(self):
        input = '''Class __0{}Class F:_{Constructor (c_,AIWn,C_,I:t;qs:Array [Array [Array [Float ,6],0b101001],0XF];_,R2:_;_,_,_:_77c2){}Constructor (_:Array [Array [Array [Int ,03],06],0b10]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3601))

    def test_3602(self):
        input = '''Class y{$3j(F__:_J;_:U){Break ;} }Class aY{}Class q9{Destructor (){ {} }Var _40_,$z__,$3,_:_d;}Class f:X9{Var $_j,_,$_P_:_;$EYD(){} }Class B{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3602))

    def test_3603(self):
        input = '''Class Fo{Var $_5,IStM,$_04,_,$_2NF,C8:_e;Constructor (){}Constructor (_R:String ){Break ;} }Class h{Val _,$2:l9_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3603))

    def test_3604(self):
        input = '''Class r:i{_(){} }Class y{Var $5m_V__,f,$__,$_1:Boolean ;Var $9_:String ;Constructor (L:Int ){Continue ;Continue ;}Var $_,E4:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3604))

    def test_3605(self):
        input = '''Class H:G25{Destructor (){} }Class H{Constructor (YP:_K;K3:Array [Array [Boolean ,0b1_11_00_0],0B1];f8_:Array [Float ,0X84]){Continue ;}$3(){} }Class _{}Class P{}Class I7v_:W_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3605))

    def test_3606(self):
        input = '''Class N{}Class _{_6x8(_Lv,D,_Vpd,__7:Array [Array [Boolean ,0B10],02];L_3_:Int ;_1__,_,G2,hVX,g:String ;K,_,_:Boolean ;t5:Float ;m,_79:Array [Array [Int ,7_2],0b1_11]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3606))

    def test_3607(self):
        input = '''Class x{Constructor (be,_,_43,_Ml,_z:K_;__,__:Array [Int ,017];cP_iZ:Array [Array [Array [Array [Array [Array [Array [Boolean ,3],01],0x6],0x39],13],017],0x39];_c4:_F__r;K,R:String ){Val lLj_t3,_,k_,_tU,_:Array [Array [Array [String ,0X7D],03],0x39];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3607))

    def test_3608(self):
        input = '''Class A:W{}Class _{$_(_,pm:Int ){} }Class _{}Class _8{}Class x7elb_:j{}Class U{}Class _{Var _s4,$0_U_6,$lj:Int ;Val $_,$i,_2,$972:String ;Constructor (_6_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3608))

    def test_3609(self):
        input = '''Class _{Constructor (){} }Class _{Var $_:String ;}Class J__:_C{Val $45:Array [Array [Array [Array [String ,0B1001101],61],0x3],61];$2JB(i:Float ;H,_:String ;__q3,y5_QW,z,M,zC6,__1:Float ){}$9(_,_g:i;y,_:Array [Array [Array [Boolean ,0x9],05],0B100]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3609))

    def test_3610(self):
        input = '''Class _{Val $Z_8:Int ;Constructor (_3,h_,__0_,wZW:Array [Array [Array [Float ,14],0X9],0x3];_:__4H){Break ;}$2(){Break ;} }Class a:_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3610))

    def test_3611(self):
        input = '''Class _3Z:_3{}Class fCO:__5v{Val $2,_:Array [Int ,57];Var _:Float ;Var $4_7_63X___R,_,$3_:Array [Int ,1];}Class _:_{}Class cz{Val $I,t,_v,$4:Array [Array [Array [Array [Int ,06],0B101010],0x53],0xFD0_88_7B];Var _0:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3611))

    def test_3612(self):
        input = '''Class _:_{Destructor (){}k(_KaPd,uEz_Z:Array [Float ,0b1_1_1];p,iT_e9_:Array [Array [String ,70],70];B:Array [Array [Array [Array [Array [Boolean ,0X4F],70],70],0B10],0x42]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3612))

    def test_3613(self):
        input = '''Class j{}Class s:HK_{Destructor (){}Destructor (){}_(__:Int ;cdl_,__,y_70,_:_;T2:String ;_:String ){Continue ;{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3613))

    def test_3614(self):
        input = '''Class Y{}Class _9pn:___{Val n,VK:Array [Int ,0306];Val $F9_:Array [Array [Array [Array [Int ,0102],0B1010110],0102],83];o_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3614))

    def test_3615(self):
        input = '''Class _5{}Class _:_{Constructor (L:Array [Boolean ,0x1];J__,_F,_:Array [Array [Array [Array [Array [Array [Int ,63],63],0X2F],90],0122],0x7];_,I:A__;it3,_,Z:__176__;_,A9,_1:Array [Array [Float ,0B1100000],0B1100000]){}$G(_:Array [Boolean ,16];A5_,_ij:Array [Int ,0x7]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3615))

    def test_3616(self):
        input = '''Class _i5l{Var $_,p,$K_,$_TC:Array [Array [Array [Int ,0b1100010],053],0x63];Constructor (){} }Class _v:_{$_(_37,_:Array [Int ,0XF];Q_W___65_1,_8,t,_,_2:_5_){} }Class K4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3616))

    def test_3617(self):
        input = '''Class P{Var $g:Float ;Destructor (){}Val $P:Array [Array [Array [String ,0X5],0b111111],075];Var _c,$1_,$pm_:Array [Array [Float ,0B1],0X7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3617))

    def test_3618(self):
        input = '''Class _l:_{Constructor (_K:Array [Boolean ,27];_,y,Dk:Boolean ){} }Class N{}Class KD_{}Class _6:h_D_{Var $3:Array [String ,017];}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3618))

    def test_3619(self):
        input = '''Class _{Constructor (){Break ;Var S_:Array [Array [Array [String ,0B100110],0XB],69];Val _:Array [Array [Boolean ,0xC],4_4];}Val $__:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3619))

    def test_3620(self):
        input = '''Class dz{}Class _:D{Constructor (__r,_,h,_5,q0,T:hi__2;_2d_9n,j:String ;_Z3:Float ;Rw4_,__0_,_:Array [Array [Float ,70],0b1010100];_I,_,Y,A:_;e4_O,D8l:Boolean ){}Val $I5_86,$_8,$5,$5:Array [String ,024];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3620))

    def test_3621(self):
        input = '''Class __0b{}Class _{$4_(p:_7;J0:rKl){}$T_(li1E,__0_:Int ;_,R,i,___,_wjk_:Array [Float ,9_9]){} }Class Ia_:_4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3621))

    def test_3622(self):
        input = '''Class a{Val $_zI_w:Array [Array [Int ,0b110111],0B100101];}Class G:M{_i(_S__0:Array [Array [Array [Int ,07],01_7_1],0xF_9];_Rl:Float ;UB,R:Boolean ;m9_B9:Float ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3622))

    def test_3623(self):
        input = '''Class Q{}Class _:e_{Constructor (F_,_Gp:Float ){Continue ;} }Class H_{}Class _i_:_{$_(__5409:Array [String ,0120]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3623))

    def test_3624(self):
        input = '''Class _84S_:r8{}Class _49{}Class ___e_8_{Constructor (_9,Y,_6c,O_5:Array [Array [Array [Boolean ,0X2C],0x63],027];_,_7m___HRE_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3624))

    def test_3625(self):
        input = '''Class _8_{$3_(){}Destructor (){Break ;Break ;}Destructor (){Return ;} }Class _:F8{Val $1,$__,$4:Array [Array [Array [Int ,0b100_1],39],073];Val k:Array [Array [Array [Float ,1],0X32],97];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3625))

    def test_3626(self):
        input = '''Class i_5E_{Constructor (r_,_:Array [Array [Boolean ,0xF],0X2];_q:String ;n:String ;__s_7:Int ;_,_0:__JlY_2L22_8V7){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3626))

    def test_3627(self):
        input = '''Class _:T{Constructor (Hp:D;B72,K:Array [Array [Boolean ,0X3E],03_3];rq,__8a9dB,_:_;_60_6,m80,_Q,P8,R0L:Array [Array [Boolean ,0B1_01_1],04]){}Constructor (){Var _:String ;Break ;Var ___6:Boolean ;} }Class x:u6{Val $32,$_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3627))

    def test_3628(self):
        input = '''Class b{Constructor (NI:Float ;__F1,FW:Array [Array [Boolean ,0XCE],0B1];xLac,V75_,_0_:_x;p9ih:_;m:_;JAfV6:cI_8__5_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3628))

    def test_3629(self):
        input = '''Class _OZ7{Val $I:Array [Array [Array [Array [Array [Array [Array [Int ,03],04],076],26],076],1_2],0x36];Val i:Array [String ,024_1];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3629))

    def test_3630(self):
        input = '''Class f4{$sB(_,_F_,_:Int ;c7:Array [Array [Array [Array [Boolean ,0X7_3],6],0B1110_0_0],0B1_1_0_1];f,_s_4z_,_,eVx_,J,DQa:_8D;_,M_,_,Bm:_;_,p2:_;_,b39:L){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3630))

    def test_3631(self):
        input = '''Class a:A_x{}Class _q_{Var $_:x_;Val J_:Array [Array [Array [Array [Array [String ,03],073],0B1_1],0X6],0b1_1];_(_,_,_K2_:_81_75){}Val $d_:Array [Array [Boolean ,0X9],4];Val U:_5;}Class _:_3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3631))

    def test_3632(self):
        input = '''Class _1{}Class _:O{Var $_,$4,M_14,$Y,s14_:Array [Int ,010];}Class _:e{Var _ga,$_:Array [Float ,0b10111];}Class k{}Class _:z9__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3632))

    def test_3633(self):
        input = '''Class Y9:G_{Constructor (mX0,I_:Int ;XAG,_Z_:Array [Array [Int ,0b11_0],7_3];___,_,J:Boolean ){} }Class _{Var $c_:Array [Boolean ,074];}Class _:_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3633))

    def test_3634(self):
        input = '''Class zcO_:_{Constructor (c:Boolean ;l,L6:Boolean ;m,V3dk,EZfJ6:Array [Int ,0B1];_:A7__;M_,_,___:Array [Boolean ,5]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3634))

    def test_3635(self):
        input = '''Class x4{Constructor (I_6_,_:Boolean ){Continue ;}Val _,$ZM,$t,$_6_1C,$7,$9m,_:String ;Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3635))

    def test_3636(self):
        input = '''Class Z:_I{Constructor (_,__,uu,A5:Array [Array [Float ,0b110011],0X7];F_t:Float ;w,p_0:String ;_5l1,__:_;_:_9;yV,A4,__:Int ;tR:Int ;_1,_:_4_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3636))

    def test_3637(self):
        input = '''Class p:_{Constructor (P,Z,_:Array [Array [String ,0b101010],0b101010];K:Array [Array [Array [Array [Array [Float ,0B1_0_1_10],0b101010],0x41],02],065]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3637))

    def test_3638(self):
        input = '''Class _{}Class S0{}Class x:x{}Class x:x{O(){Continue ;Return ;}Val $m__:Array [Array [Array [String ,06],055],773];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3638))

    def test_3639(self):
        input = '''Class b:i{$0(RRM__:q;_o,_0732,__:Array [Array [Float ,03],0X4];_380,_9_Vd:__H_;_3C5:Boolean ;D9:Int ){} }Class _{$3F__J(_2D0:g;f,hV:Float ;__:Int ){Var _6z:Float ;} }Class w{Val $7:Array [Float ,0116];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3639))

    def test_3640(self):
        input = '''Class _R1{Val $_:Array [Array [Array [Array [Array [Array [Int ,0b1],54_6],0252_47],29],68_8],0X9];}Class _:__Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3640))

    def test_3641(self):
        input = '''Class _:M{Val $A2,Kk,_,$V4,$__,u:Array [Array [Boolean ,60],7_0];Var _:Array [Array [Int ,9],04];}Class z{}Class G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3641))

    def test_3642(self):
        input = '''Class p:_o5{Var i04:_=!-B::$l__;c(_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0x2B],06_0],04_0_2],81],6],0b1],064],0X8_6],5]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3642))

    def test_3643(self):
        input = '''Class __:_7{}Class XJ3_3Y:g90{}Class _6:ytT{Var _:Array [Array [Int ,0b1],0B110111];Val $4,_,_:Array [Array [Array [Float ,0x3B],017],02_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3643))

    def test_3644(self):
        input = '''Class Y:_{Destructor (){} }Class _{Val v3:q;}Class x__A_w_:_g{Destructor (){} }Class W{}Class _6:_c_{Val _,MZ,$cU,$_,$1:Array [Int ,0X9C];Val $X:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3644))

    def test_3645(self):
        input = '''Class __{$5(){}Val $O,$7,_,$_:Array [Int ,0B1011];Var V:_RK;Constructor (_7:Array [Int ,02_6]){} }Class _h_:_{}Class Z7:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3645))

    def test_3646(self):
        input = '''Class _{Destructor (){} }Class U:k{Destructor (){}Constructor (_P,j:Array [Array [Int ,2],0X11];_l,_,_,_:Boolean ){}Val u,_,_:m_l;Val $96XN:Array [Boolean ,0B1001001];}Class P_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3646))

    def test_3647(self):
        input = '''Class J:C{Constructor (_,h,__,Q:Array [Array [Array [Int ,0B100111],2],020];G,d:Array [Array [Array [String ,0B100111],91],0b1010011];O,b:_){} }Class p:Ii{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3647))

    def test_3648(self):
        input = '''Class UV_:H{Var $Q,$s,$hI_,$AQW:A03;}Class gq{Constructor (_H_:String ){Break ;}Var F,z,$_:Float ;Var $xlF_,$8,A__R,_R1:E09z;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3648))

    def test_3649(self):
        input = '''Class __:_{Constructor (e:_;_:t;_:Float ;_,_86,R8:_;f:_;a,CO322:Array [String ,0x1B]){}Val $9WoU,$7,_6:Array [Array [Array [Boolean ,0X3F],0x1B],042];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3649))

    def test_3650(self):
        input = '''Class A___{}Class UiP:C{Constructor (_I,_:Array [Array [String ,41_9],9298];Kg67o9B,_:m;_:_){}Val _,_tbe,_,$x,ubZ,__t2_,$_P,h_3,_,$6:Array [Int ,0101];}Class M{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3650))

    def test_3651(self):
        input = '''Class _9{}Class W:__{Val _m:Array [Array [Array [Array [Array [String ,0b111001],0x35],35],02],0222_4];}Class _A_:_l7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3651))

    def test_3652(self):
        input = '''Class S_a_5:GEh{$_B(_d9:Array [Array [Array [Float ,03],1],13];W4,__d:Array [Array [Int ,0X37],0B101_1_1_1]){Continue ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3652))

    def test_3653(self):
        input = '''Class W__F2SX16C0Sx_:__5{Destructor (){}Constructor (){Continue ;} }Class _:i{Constructor (_:Array [Array [Array [String ,0131],3],0x63];q,y_2:Boolean ;_,_d7,hC:Array [Array [Float ,99],0X16]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3653))

    def test_3654(self):
        input = '''Class i:_{Destructor (){}Constructor (){} }Class _a3__{Constructor (){} }Class E_O{Constructor (){}Var $88,$_:Float ;}Class B{Destructor (){}Var $___N,$5,___:Array [Array [Int ,01_7],016_7];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3654))

    def test_3655(self):
        input = '''Class Kz{$9Rv(F__,_C,u0:j;_,C,G29:Float ;_s,___,__:Boolean ;a_:Array [String ,55]){Val Xzh,_:Uc;}Val __:Array [Array [Array [Array [String ,55],033],0B110010],6];_(){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3655))

    def test_3656(self):
        input = '''Class JO{}Class __:wZ{Constructor (__:Int ;_l_:_Ad1;L1_:ON_1){}_(__:String ;_,I:d_;_2WB_:_VP;o,_:B){} }Class Fm:Oa{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3656))

    def test_3657(self):
        input = '''Class L_:_z{Constructor (_:String ;N,QWyJQ__f_V8:Array [Array [Boolean ,07],0B1001011];_,__J_45:Array [Int ,0B1001011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3657))

    def test_3658(self):
        input = '''Class j_9x:a4{Var $7_,X:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0X3C],0b1],0B111],0x5],6],0x5],0X3C],0b1011011];Var w_,$C8_a,_m:_;Destructor (){}Val $_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3658))

    def test_3659(self):
        input = '''Class k:l{}Class _:T{Val A:Array [Array [Array [Boolean ,01],0x49],0XA];}Class X___o:_X{}Class _{}Class _{}Class E65r_9G2o:_{Constructor (H,Q9:__){} }Class _:s{Constructor (){}Val o86_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3659))

    def test_3660(self):
        input = '''Class _{Constructor (){Continue ;}$R_(c5O,M62:Array [String ,064];G__,S:f2;O:Float ){}Constructor (){}Var _,$Z:Array [Int ,064];Var _,$__,$1_v_,$c:g;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3660))

    def test_3661(self):
        input = '''Class ___{$__go0(_h,Y:_7){}Constructor (){Break ;}$Q(__,_,c,a_:_422){}Var _,$o,H,$_z:__;Var $61:Array [String ,1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3661))

    def test_3662(self):
        input = '''Class __{Constructor (_O_,p:Array [Array [Array [Float ,90],0xB],0X5];g,i:Array [Array [Array [Array [Float ,0B1100100],4],0B1100100],056]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3662))

    def test_3663(self):
        input = '''Class x:__{Constructor (){}Constructor (m:E_;__:Array [Array [Array [Array [Int ,0x5],0x5],02_5_61_3],41];S,_,O,_30,k_R,l,l:F_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3663))

    def test_3664(self):
        input = '''Class _31_88{Constructor (_,_1:Array [Float ,0b1101];f_,_:Int ;B,_:_;_:Int ){} }Class qa50:__{M(s:_;_z4:Array [Array [String ,65],01_101]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3664))

    def test_3665(self):
        input = '''Class V:_{}Class __{Constructor (__O,i,_,_O:Array [String ,0b10111];_,E:Array [Array [String ,074],8]){} }Class R1_X:Z1{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3665))

    def test_3666(self):
        input = '''Class N{}Class _{}Class _{Val $V,_:K_;Constructor (_:Array [Array [String ,6_7],86_5_69];k:String ;E,_,o4_,f,l,_F,_Y9,__:t){}Constructor (r_:Array [String ,28];_,_:_){} }Class _:nZ_1_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3666))

    def test_3667(self):
        input = '''Class _0:_{Destructor (){}Var _F5_,$_E,c:Array [Array [Array [Array [Array [Float ,0xA_4],0144],0b1],8],0B1010101];}Class _22:s{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3667))

    def test_3668(self):
        input = '''Class _{}Class _I{Destructor (){Return ;{Var k,zy:Int ;}{Var _,__,X,_,_,__:Array [Int ,0xB];}_7_::$0()._();}Constructor (_Df,_d,H:E6;_:_;_,_,h_:Int ;_:_;q:String ;v,_,Q:_ub2H;___0__:Boolean ;Aa,____:Array [Boolean ,0B1001]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3668))

    def test_3669(self):
        input = '''Class e_:_{Constructor (_,_:D){I::$_();Val __w,_:_7;{Return ;} }Val _84:Array [Array [Array [Array [Int ,0x5],0B1101],0x5],02];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3669))

    def test_3670(self):
        input = '''Class N{}Class _:_{Constructor (_nn:Int ;_lw,_:String ;_,_,bT:L3p;_v0,f__S:Boolean ;_,_:Cr3P__){} }Class B:__{}Class __{}Class ___4H_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3670))

    def test_3671(self):
        input = '''Class d{}Class _0:__{Var $42:String ;P5_(F2_m_1,_:Array [String ,067];Z9U,__:Boolean ;_:Array [Int ,0x1_3];___0:__71_){Return ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3671))

    def test_3672(self):
        input = '''Class __:C{}Class _{}Class j:_{Constructor (_3,p:Boolean ){Val b,A,_,__,__4r:_;{} }}Class __r5:_{Constructor (__A:Float ){R::$303._().m.h();Return ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3672))

    def test_3673(self):
        input = '''Class _{$5(){}Var $U,Ac3,_1__y7O7x70:Array [Array [Float ,90],04];$_(f2a_:Boolean ;l8:Int ;B_D:String ){} }Class sIf {}Class _P:mIx{Val g4_U,w_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3673))

    def test_3674(self):
        input = '''Class _x:E_{}Class J:j{Var $6:Array [Array [Array [Array [Array [Array [Array [Array [String ,94_94_1],0x5E],63],043],0xF9],9],0B1001101],8];Val $_:_;}Class _8t03:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3674))

    def test_3675(self):
        input = '''Class _m_:_7AxD_{}Class c4{Val _:Array [Array [Float ,0x9],23];Val $68,_,_2J,$779l,$3c:Float ;}Class q_X_:m{}Class _:a{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3675))

    def test_3676(self):
        input = '''Class Y_:f8Io{Constructor (){}Constructor (){}Constructor (L:H){} }Class P:_{}Class o:X{$_W(__:Array [String ,0X8_6]){} }Class _48_:_1U{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3676))

    def test_3677(self):
        input = '''Class l:c4{__(E3:Z18;_9D,_:T;_,t94:Array [Array [Float ,0x1D],0X6_9_9];__8:r0;Q:Int ;_,___:Int ;_,_,Z,EZ4,_3_0:Int ;_:ih;L:I7){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3677))

    def test_3678(self):
        input = '''Class d:ha{Destructor (){Var _8,K,_6L,_,yg:Array [Array [Array [Boolean ,0XE],987_0],0xB];{Var _:_;} }}Class a_j_8h_ZV2:__{}Class Z{Destructor (){} }Class D190{Var $8_:Pu;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3678))

    def test_3679(self):
        input = '''Class I_:_{}Class D:_{}Class __gK{$5(){}Constructor (_,kF_:Float ){Val _,_:___dM0;} }Class _{Var _,_BYtp3,_:String ;}Class _{}Class w:V{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3679))

    def test_3680(self):
        input = '''Class _088z:ji_{Val __H0B_2:String ;Constructor (_,_:Array [Int ,060];_2G,_Y:Array [Int ,067];_,_,Lc,_:_;h:String ){}$x___1(TYk,y,_p_2,y,_,R,_,L_2,l8:Array [Boolean ,0X51]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3680))

    def test_3681(self):
        input = '''Class _88:Q{}Class h:j8{}Class y7:L_{Val $_6_:NR4;Destructor (){Break ;} }Class Gx_{Val $p_:Array [Array [String ,94],0X74];}Class __:t{Var _4:_;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3681))

    def test_3682(self):
        input = '''Class rJC4{Constructor (_L1:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0621],0134],0X22],0B11],48_91_4_6],0XF],02_1],0B1000010],6],0134],0X22]){}$1s(_u,x:gM){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3682))

    def test_3683(self):
        input = '''Class __{}Class f__:l{}Class R__4{Constructor (_11:Float ;PwK,_52o,w,_,_,A,n9,_7:Array [Array [Array [Array [Boolean ,61],1_4_53],02],0x17];Bz,q_,__y_:_y1){} }Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3683))

    def test_3684(self):
        input = '''Class e:_{Constructor (_,d,r,__W:Float ){Break ;}$__(){Return ;}$_8(P,C:Int ){Continue ;_::$__.k();}Constructor (C,C,M:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3684))

    def test_3685(self):
        input = '''Class Rh:v{}Class C__u0{Val $97__gF_M6:Array [Boolean ,034];Constructor (g7:Array [String ,0B1010];w:Float ;z,_H,h:Array [Boolean ,0X23]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3685))

    def test_3686(self):
        input = '''Class _{}Class g{}Class Z:V_{$y0(A:Array [Array [Boolean ,0B1],2];R:_6P){} }Class _:Zp1{Constructor (){Val a,n:Array [Array [Array [Int ,0B1],0b10],0b10];} }Class __{}Class _{Var $9_,$Hm:__Gd;Constructor (){} }Class _0w{}Class _3t:G_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3686))

    def test_3687(self):
        input = '''Class _{Val $0:Array [Array [Int ,0xE],0B1010100];}Class m:_{Constructor (p,j,A_,_Y:Float ;Q:Array [Int ,2_9]){Val _D8,_:Array [Int ,0x1D];{} }Constructor (z,_:q1){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3687))

    def test_3688(self):
        input = '''Class V_{}Class _{}Class __R49_X_1:g{}Class un:_{}Class _56_M1_B:W__z{Val R:Array [Int ,0116];Val $M:Array [String ,4_2_52_28];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3688))

    def test_3689(self):
        input = '''Class y:_T59{Val $_3,$6:Float ;}Class v:Q{Constructor (N9_:Array [Boolean ,88];q:Array [Array [Array [Int ,02],6_2],0x62]){} }Class A:__{Val __,$_F,_:n79_;Var $_n8:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3689))

    def test_3690(self):
        input = '''Class _:__{}Class o_W77D{Constructor (y:_;_v58O:Array [Array [Array [Array [Array [Array [Array [String ,02_7],0B100],0b1010001],02],072],0B10_1],90];_019,T__,Q_:g){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3690))

    def test_3691(self):
        input = '''Class _{Constructor (__9,i_:String ){Continue ;} }Class B:q{Constructor (g9,vWm:Boolean ;f:Array [Array [Int ,0B1],49]){}Destructor (){}u(W:Array [Array [Boolean ,034],2]){}Constructor (__:String ;_X0:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3691))

    def test_3692(self):
        input = '''Class _6{c(_,q3__,_4__,z078,I1:Array [Array [Boolean ,0x8],0b1];y1__,_o,Iy:Boolean ;y9_f,s,G_,_4:Array [Array [Array [Float ,010],2_5],0B1_1];_,_:_;u,l0:Array [String ,05_7_00]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3692))

    def test_3693(self):
        input = '''Class ALFW:_8T_{}Class U{}Class _{}Class I_:t{}Class _:_{Val $_6:Array [Array [Array [Array [Array [Array [Array [String ,0B1000101],012],0XA],97],0B1],012],0B1];Var y5,Y,_J:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3693))

    def test_3694(self):
        input = '''Class o:_{Var z,$_v6,h1:Array [Boolean ,0B10];Destructor (){Continue ;} }Class _o{Var g4_J,$_43v:Array [Array [Array [Array [Int ,0111],96],0B111110],0b1_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3694))

    def test_3695(self):
        input = '''Class _{}Class u6_:r{}Class y:_m{Var _nF,$_U:Float ;}Class _C_{Destructor (){} }Class _{Var _y1,W:S;Destructor (){Var _7,O,_v,F_:Float ;}Val g_,_6I,LI,$0p:Int ;Val t:String ;Destructor (){}$R_(){}Var $5:i;}Class Xf{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3695))

    def test_3696(self):
        input = '''Class A_08{Val $g3:Array [String ,053];}Class _:___S{}Class DP8:_f{Constructor (P,w,_,w2:x;_48J,_u:Array [Float ,0B11];_876v,bF_,g,G:Float ;P:Array [Int ,6_8];_:Array [Array [Float ,053],03];hM:Float ;E:Array [Int ,06];l_j,B5,_:Float ){} }Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3696))

    def test_3697(self):
        input = '''Class _C{Var mr3e,$_8X:__;}Class k:_HnXn{}Class o_{c_(x4,_1_URdpM,__:Boolean ;_hYQB,xg__m_E:Int ){} }Class m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3697))

    def test_3698(self):
        input = '''Class _:J21{Val $m_m,U:Array [Float ,0X1B];}Class B{Val x9:Array [Array [Array [String ,0X1_E2],69],0B11100];}Class _:__y{Val $_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3698))

    def test_3699(self):
        input = '''Class u{Constructor (_:Array [Array [Array [Array [Array [Int ,41],0x16],1_8_6_38],0b101111],06];_,r:Array [Int ,0111]){}Val _:Int ;}Class T_y:x_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3699))

    def test_3700(self):
        input = '''Class f_:S{Destructor (){Continue ;{} }Constructor (){Return ;} }Class _:q2{}Class _{Var $74:E;Var f:Float ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3700))

    def test_3701(self):
        input = '''Class N{__(__:String ;_,_51,_,_,wA:Boolean ;X,D,_,_4:Array [Array [String ,0xA],0x55];y:U;e,__9,_:Array [Array [Array [Float ,8_19],0x55],0B10010]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3701))

    def test_3702(self):
        input = '''Class m{}Class p:F{Constructor (kP:Int ){ {} }}Class yJrD:_Jb{Destructor (){Continue ;}Val $7,$8,$_:Float ;}Class f_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3702))

    def test_3703(self):
        input = '''Class __oF:_{Val $_,_:Int ;Var _:Array [Array [Float ,0b10101],0x1F];}Class _{}Class X6_:l{_7(){Return ;}Val _:String =!!!_::$D.j_37_().LP&&-Null .C()._*---_N::$_._;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3703))

    def test_3704(self):
        input = '''Class _zi2p{}Class N{}Class ZG{}Class _p{Val $_,I:Array [Array [Array [Array [String ,0b10_10_10],0xD],0B10101],22];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3704))

    def test_3705(self):
        input = '''Class L__{$0(P:Int ;_k,_z:Float ){b::$R9__Q_();}Constructor (_,f:_UM){}Var $_7_7,$5,w,$_K07,$p:Float ;Constructor (){}$71(_:Array [Array [Boolean ,0103],03];p,_,_:Float ){} }Class p{}Class w7{}Class _g:E_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3705))

    def test_3706(self):
        input = '''Class _{Constructor (n:Float ;l26:Array [String ,5];N_,n,_,A,N5,_,_X:_t;_:Float ;__6:_;_:s_;_,_:Int ;__:Array [Array [Array [Boolean ,0B1_1],0b1010100],0X2D];ysS:Float ;_47s,_:__T){}a_(){} }Class _:r_t{}Class D:T{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3706))

    def test_3707(self):
        input = '''Class _{}Class f9d_{Var $3d_,$r_,$_,_:Array [Boolean ,0B110];Constructor (i,__1:Int ){Continue ;Var _:Float ;New _J().l();}Var $f:Array [Array [Array [Array [Array [Array [Int ,0126],0x40],0XC],75],074_1_35_5],0B1011011];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3707))

    def test_3708(self):
        input = '''Class _:M{Val _fG,e:String ;}Class _2{Var W:Array [String ,0x819];}Class _1{}Class P14{}Class __M:w{}Class _1:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3708))

    def test_3709(self):
        input = '''Class _{Val $__,$_:_5;}Class _:A_{}Class _3:__b_r_32{Val M:Array [Float ,0x9E];}Class __Bb__8_4K:_{}Class g{}Class z_P__1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3709))

    def test_3710(self):
        input = '''Class E:_{u6(__l_,x,n,w:A;T2,_,B_H_:Array [Float ,0xB];_:Array [Float ,0X3];_____:Array [Float ,0b110100];_,_n_K4:Float ;_2_q,_3:Int ;_:_o){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3710))

    def test_3711(self):
        input = '''Class _3{Constructor (){}$_B___(j,__:W4__L8){}Val vc4,I,$5:Array [Boolean ,01];Constructor (){Return ;}__(){}Destructor (){}Constructor (_:F3k890m){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3711))

    def test_3712(self):
        input = '''Class ii__I_{Constructor (){}Val P_W_4_,_I0ee708w,$13___L,$S:Int ;Destructor (){} }Class A_:P_{Constructor (H__o,A:___;_0_A9:Int ;_:p;f:Array [Int ,0B1_000]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3712))

    def test_3713(self):
        input = '''Class __{}Class _G_a{Val _56i:_2;}Class _826{}Class _WxF:W{Val $Q0:Array [Array [Boolean ,0X2],63];Val _1:Array [Array [Float ,0x5],04];Val _,$_1:Array [Array [Boolean ,0X8_5],2];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3713))

    def test_3714(self):
        input = '''Class _:_0{$H(){Break ;}Var $F,__8TL,$_w,$D,q,_:Float ;Val _:String ;Var $852:o9;Var z_,$0a,Ux:Array [Array [Array [Array [Array [Int ,3],051_7],061],0xE],0B1111];Destructor (){Val b,w___v,G___:Array [Float ,0X4D];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3714))

    def test_3715(self):
        input = '''Class b:l{Val _,$_o1,$_:Array [Array [Float ,0B1],98];}Class N:_{}Class _:_{Val $0,$0_:Array [Array [Array [Float ,020],020],40];}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3715))

    def test_3716(self):
        input = '''Class H:RI{}Class _:_900_{}Class b:M{O(){Var j__35:Array [Array [Array [Array [Array [Boolean ,05],0B1],0XF_F034_1],0x26],0x26];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3716))

    def test_3717(self):
        input = '''Class _{Constructor (V_4_F8,t5,_7,o6:String ;_:Float ;_:String ;_,Y0:Int ;____H_:Float ){}Constructor (){Return ;}Val x,$D81:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3717))

    def test_3718(self):
        input = '''Class __:M{}Class DU__M{Constructor (_4K,h:Array [Int ,0B10110];M_Y_:Float ;H,_:Array [Array [Boolean ,0b100111],0x47]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3718))

    def test_3719(self):
        input = '''Class c25{Constructor (){}$b3(_:Array [Array [Float ,67],13];_:_;_:Array [String ,0xFE]){Val E,O,s:Array [Int ,56];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3719))

    def test_3720(self):
        input = '''Class F_:__j{Constructor (){}Var vB,$d_:Boolean ;$6K(___:String ;O_,IL2I:s_N8J;C_,_,_9:String ;LK,c:String ;_:String ;_:Boolean ;_:Float ){Break ;} }Class n{}Class A:_{$Y(A0F7_,d_5_o_:_h;Z:Int ;_:Int ;_D:Array [Array [String ,6],0xB];_,Q,_2,_:Boolean ;_:Array [Array [Array [String ,02_2],0XD],182];_3:Array [Array [Array [Int ,63],63],63]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3720))

    def test_3721(self):
        input = '''Class Tc:u5{Var _:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,054],0X59],0B1],0XD],0b1],01],054],0b1_0_10],0X59],01];Var _37_,$_6:_N_;}Class t_{Var $s,$6:L;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3721))

    def test_3722(self):
        input = '''Class _xs_l_g_t{$__5B(Z_:Array [Array [Array [Array [String ,0b1_00],0136],01],3]){}Destructor (){}Val $_9:_;Destructor (){} }Class v:_{Var $M6_I:Boolean ;y_3(_:Int ){} }Class _{}Class _:__x_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3722))

    def test_3723(self):
        input = '''Class D{}Class m{Var h:Array [Array [Array [Float ,07_1],03],0B111111];}Class A:x6{Val $_p__54h:Array [Array [String ,59_2_8],2];Constructor (l,X3_u:_k;Y_,XW,c6:String ;___,R3:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3723))

    def test_3724(self):
        input = '''Class s9{}Class y:z_7{Val $P,$_:Array [Array [Array [Array [String ,0x23],03_37],04],2];$P(_2:K;_8,_,_K____,D,_,_____,_3:m0){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3724))

    def test_3725(self):
        input = '''Class _v:t{Destructor (){}$_q_8J(X:Array [Array [Int ,6_5_99_0_5],0x3_5];w,_,_:String ;__4,_:Boolean ){}uP3(K_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3725))

    def test_3726(self):
        input = '''Class Q0:_s_{}Class _we:m__N7{Val $_I_:Q;$U1_(){}Rt(){}Val a3,$___,$_H,_3_,S,$p,$5:_k2;Val $9:Float ;Constructor (gvy_0,_,H,___,_x:S;u,_,_:Array [Float ,0b1010010]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3726))

    def test_3727(self):
        input = '''Class O_{Constructor (_:Array [Float ,0X8D];_e7:Array [Boolean ,05]){} }Class _8H_:_x{}Class _:Nn{Destructor (){} }Class _K:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3727))

    def test_3728(self):
        input = '''Class __:_{Constructor (_1B_:s;_:_SM){}Destructor (){}Var _,c06,q1_B,_TI_,$1,$iK,$7qK,$6___:Array [Array [Array [Array [Array [Boolean ,0X1],0B1],50_6_3],0123],0123];Constructor (_,y,M,j:m;L:pq){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3728))

    def test_3729(self):
        input = '''Class _l:N{_g(_5v_a_,_:Int ;O,_:Int ){}q9_3(g:Array [Array [Int ,0b1],02];__,_,q,t,n,v_,_:Boolean ){Break ;}Val X:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3729))

    def test_3730(self):
        input = '''Class _e:Oc{}Class a_l:_{}Class p:K3{Wl(_06:Y){Val _,y___,d:__g;}Var q_,$g,_,_h:String ;Var c3,$_:Int ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3730))

    def test_3731(self):
        input = '''Class __7:_{}Class i:_H3{Var $1_:Array [Array [Float ,0b1100000],0116];Constructor (u,_5,_:Boolean ){} }Class b:G_{}Class x4__{}Class _:E65C__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3731))

    def test_3732(self):
        input = '''Class z3_1c_:Jpw{}Class _{}Class b:_0H{}Class _{Var Z,$68_,_:_6_S;}Class c:_2l{Constructor (){} }Class a:J{}Class I:_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3732))

    def test_3733(self):
        input = '''Class _J__:_{Constructor (_,p_3O:Int ;_:o;_,s___:Array [Array [Float ,0B10_1],1_1_4]){} }Class _{$60(T_,_,h:Array [Int ,0B10111];o:Float ;_:Array [Boolean ,0X3C]){} }Class e7:_{Destructor (){}Constructor (g,O:a7;_e,q:Array [Array [Boolean ,0137],0X2]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3733))

    def test_3734(self):
        input = '''Class _c{}Class _{}Class _{}Class _{Destructor (){}w7(_:Array [Float ,0131];_i,_,O_:Int ){}Var __:Array [Int ,0b101100];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3734))

    def test_3735(self):
        input = '''Class _{}Class _{Eo8F(_:Array [Array [Array [Array [String ,0106],287],2_5_19],0106];G,r:Array [Boolean ,0B111011];__,h,_:String ;fL,_D:Array [Array [Array [Float ,0B111011],95],0B111011];h:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3735))

    def test_3736(self):
        input = '''Class __:_O{Constructor (sZ_:String ){} }Class _:_{}Class F8A4_88{$_(_X,m:String ){Return ;Return ;}Var $a:Array [Array [Float ,0B1_0],0b11110];}Class P:_2{}Class M3g_:q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3736))

    def test_3737(self):
        input = '''Class nZg_m6:_0{Var _,v:YB28;Var V,$_,$c:Array [Array [Array [Array [Array [Array [Boolean ,0B101001],013],013],94],0b10010],1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3737))

    def test_3738(self):
        input = '''Class _:_{Constructor (){S::$W9._70();}R(_:j){Continue ;Continue ;}Destructor (){}Constructor (_P:_){}r1_(){Var _6,R:D;}Val $4_:Array [Array [Float ,04],0b110001];$C(Y,_:RZ4;h,s_,G:KW3){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3738))

    def test_3739(self):
        input = '''Class c:R{V0(k3_:Array [Array [String ,3],0X5];_,__9_8e_3U,f_r:m){}X_(){} }Class _Z_0E{Destructor (){Return ;Continue ;Break ;Return ;} }Class P{}Class Q1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3739))

    def test_3740(self):
        input = '''Class _:__9{Constructor (){} }Class _{}Class o4{}Class _:_{Var _f_:Array [Array [Array [Array [Boolean ,79],0XE5],0b1],0X13];Val $_:Array [Array [Array [Array [Array [Array [Array [Array [String ,8],01_64_702_3],06],0b111100],034_36],0xBA],0X13],02];}Class _CJY{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3740))

    def test_3741(self):
        input = '''Class S{}Class __{Constructor (LE5R___:Array [Float ,0B1_1_000];v:_4;vX___,W,S,_,jX98_,G88:String ;_,W2_v7:Int ;C_8:String ;_r8,_:P;k_:Array [Float ,0x2];yk,_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3741))

    def test_3742(self):
        input = '''Class _{Var $X,f__,Z,$7:E_;}Class _:X{Destructor (){}Destructor (){}Var $__79:Array [Array [Array [Array [String ,0X50],052],0B1],02_7];}Class _1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3742))

    def test_3743(self):
        input = '''Class _{}Class Q:j1{Q(){ {}{} }Destructor (){} }Class Y_:_{n_(){}Destructor (){}Constructor (){}Var $a_7,R_:Array [Array [Array [String ,510_6],0xA],047];}Class __6_:_y{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3743))

    def test_3744(self):
        input = '''Class s_0:rQ_2H5{Constructor (G,_,__:Float ;__I,O_:Array [Array [String ,0b1_10_01_0],0XD]){} }Class G3:f{}Class _:_9{$I(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3744))

    def test_3745(self):
        input = '''Class _:__{}Class _:J{Constructor (g_:Boolean ;D:Int ){}Destructor (){}$1(Q:Array [Boolean ,3_8];_,z,__3_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3745))

    def test_3746(self):
        input = '''Class z1__:y92_{k_y(_:_;G:Int ){}Val dv_H:Int ;Destructor (){}Val _,$_,nl2:Array [Int ,0XE2];Var w:String ;}Class q:_9_s_5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3746))

    def test_3747(self):
        input = '''Class HP:_{Val $_,U:Array [Boolean ,34];Var k:String ;Constructor (){}Constructor (__,_,w,___:Array [Array [Array [Array [Array [Array [String ,9],0X7],0b1],0xC],0x4],0b110010];p,u9u,F:Float ){} }Class __:y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3747))

    def test_3748(self):
        input = '''Class _{Var D_,$565:Float ;}Class F993_:T{Constructor (_s_,B:Array [String ,77];j:String ){}Destructor (){}Var _,$_:Float ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3748))

    def test_3749(self):
        input = '''Class U{Var $T___,$_,$K_N0J,_3_6,$_:Array [Int ,02_54];Val _4_,$6:Array [Array [Int ,0B110010],5_3];}Class ey_hC6:IVZK{Var $_,_M:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3749))

    def test_3750(self):
        input = '''Class p{Constructor (){g554::$__H();}Val $_8,$Q:Array [Array [Array [String ,02],0b101101],0b1_1];$0(){}Var $4:_3=l::$_._();}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3750))

    def test_3751(self):
        input = '''Class fS{Constructor (){} }Class G_:__4__{}Class A_:r_{$3c(a:Float ;_8,nJj,m:Array [Array [String ,0x2],0xA_41];TW,_,_3:Z;H3,K4_,_C_,_:_H9){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3751))

    def test_3752(self):
        input = '''Class Y{Destructor (){Return ;}Destructor (){Continue ;} }Class _2p:E{_WO(){}Constructor (Vq:Array [Array [String ,0x26],02]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3752))

    def test_3753(self):
        input = '''Class _1SZ{L_(_Y_y:Int ;khd:Boolean ;S:Array [Boolean ,0B1100100]){}Var $_,$f,$_:Array [Array [Array [Array [Int ,8_4_0],0B1_0],0b1],04_0];Constructor (){}Destructor (){u_2::$3y();Val _,a,s_:Array [Array [Float ,0B1100100],0xD];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3753))

    def test_3754(self):
        input = '''Class m:_{Constructor (_,X,_z,G_I:Array [Int ,0X11]){Continue ;}Val __t:_3n8U;}Class Y:K_{}Class _S_:_{_s9(){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3754))

    def test_3755(self):
        input = '''Class _G_:C_V{$2(L952:j_9c;_KB,t:Array [Array [Array [Array [Boolean ,0B1_1],0b11001],1],0xF_39F];A__:q;_,Z,_,_:Int ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3755))

    def test_3756(self):
        input = '''Class o8_{Constructor (_,Bz54:Array [Int ,0B1_1_1_1];__,__:String ){Var g9_X_,V:P;Continue ;}Destructor (){}$_3t(_x,IS,E__:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3756))

    def test_3757(self):
        input = '''Class h{}Class _V:__A{Destructor (){}Var $B,$___,__,$_V__a68:Array [Boolean ,0B1];}Class l{}Class __L_:R{W(){}Val _6,$_,U:Array [Array [Boolean ,0X4D],045];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3757))

    def test_3758(self):
        input = '''Class R:_833_{Constructor (P5:Array [String ,0b1_10];h,_8:Array [Int ,0B101];_,H,l9,_3______,uXf6d:Q_;_itn3,G:Float ){} }Class z_{}Class _{Var M:Int ;}Class H{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3758))

    def test_3759(self):
        input = '''Class H2X1{Var _,_:Array [Array [Array [Float ,0B1010101],052],0B1];Constructor (__0B:Float ){Var R,_58,_:Array [Array [Array [String ,052],04],1];}Destructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3759))

    def test_3760(self):
        input = '''Class _:w_{Destructor (){Break ;}Constructor (j:_;X,M81__:Array [Array [Array [Float ,0X20],31],075];_,_,_7_,Q,Dfv6,c_,i:Array [String ,31]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3760))

    def test_3761(self):
        input = '''Class _{Val $TJ3__1,$6O_:Array [String ,0X5E];$6(_1,z,_,_60G4,a_:Array [Boolean ,39];_,NV_,b_:Array [Array [Int ,15],0b1000101]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3761))

    def test_3762(self):
        input = '''Class ___6h0:z{Val $_:Boolean ;Destructor (){}Constructor (_,_568h:Array [Array [Array [Array [Int ,0xE_4_3],5],0123],8];_5,_:Boolean ;W,_a3,k:Array [Int ,0B1];_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3762))

    def test_3763(self):
        input = '''Class qk00Y___1:a{Var $9_km_:Array [Array [String ,03],0X1];$_(_____:Array [Float ,0B1100010];T,_,Em_:Array [Float ,0B1100010]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3763))

    def test_3764(self):
        input = '''Class L4_:_{Constructor (YQ:String ){}Val $_:Array [String ,0b1_00];Constructor (j:Array [Int ,8]){}$C324(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3764))

    def test_3765(self):
        input = '''Class C{Constructor (____:Array [Int ,4];_,B692,q4py,_,_,_78:Array [String ,0103]){} }Class _:c{Var $N,S7:Array [Float ,60];Val $8:Boolean ;Val O_z:Array [Int ,60];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3765))

    def test_3766(self):
        input = '''Class _:w{Destructor (){Continue ;} }Class ____e6:__{$JVe_(q_:eY_l_2__){}Constructor (){}Destructor (){Return ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3766))

    def test_3767(self):
        input = '''Class X38:n{$5(){}Constructor (z7Sj,D6:Array [String ,0B1000110]){} }Class XK:Lk2{Constructor (_4:Array [Array [String ,0XD],0X2C];__:Array [Int ,0b1]){} }Class Z:i{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3767))

    def test_3768(self):
        input = '''Class _{Constructor (_:Array [Array [Float ,0b1000000],0XE];__:Array [Array [String ,0x20],0x20]){Break ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3768))

    def test_3769(self):
        input = '''Class J{}Class _:_{Var $_c:_8;}Class _{Destructor (){}$a4(_,_,_0,b:__9_4;J_0_6:Array [Boolean ,100]){} }Class V:_i_526{}Class e___:_{}Class A:S{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3769))

    def test_3770(self):
        input = '''Class PB9{}Class _B_{__(){}$U_ui(_:f){}Constructor (_:m_;__r:_t7;_:Float ){}Val $__4:String ;__(){} }Class _a{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3770))

    def test_3771(self):
        input = '''Class _{Constructor (){} }Class p:_{}Class Q1_J3{Constructor (){} }Class _{Constructor (_,b,_r:En;_,_2:Array [Array [Array [Float ,0x9],012],0b1100100]){Var _j:_di_90_8;Break ;Continue ;}_012(__:Float ){Var _3,Y:Float ;} }Class _:b{}Class _4_:l_{Constructor (h2Jh:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3771))

    def test_3772(self):
        input = '''Class hr0{Constructor (_:Array [Array [Array [Array [Float ,0B101000],4],58],0x3D]){_::$R();} }Class k:_G{Val $2,$W,_:Array [Float ,1_9_31_1_37];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3772))

    def test_3773(self):
        input = '''Class K5d{Val $3,$__5:Array [Array [Array [Array [Int ,016],03_3],016],1];_(Q,_2,g:Array [Boolean ,0XD]){} }Class R_R_:__m_{}Class _:h{}Class _:_{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3773))

    def test_3774(self):
        input = '''Class f__{}Class U:m{}Class w{Var _:S;Var R:a5;}Class s:I{}Class E{Constructor (l,___,Wh,U:Array [Int ,9]){Val j:_6p;}Var $5q,_5_oE:Int ;}Class _____:_{}Class _{}Class A{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3774))

    def test_3775(self):
        input = '''Class _{Destructor (){} }Class _b1:z{}Class r_{Val h,W_M,$H_,$L,$6,__,L_,V:Array [Array [Array [Float ,46],0b1_1_10],0x65];Constructor (m1:_4;l4:_4_1s){} }Class l3:b6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3775))

    def test_3776(self):
        input = '''Class _:n{Destructor (){}Var $_0,$e2:Array [Array [Array [Array [Boolean ,042],0B1],042],0x8D_6];}Class PjS__4:A{}Class _D__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3776))

    def test_3777(self):
        input = '''Class X386{}Class i:G3NL_{Var y_:zy9;$__(_3,A:_;C_W5,_,X:N){Return ;}Destructor (){Val _v_f_,H,_:_;} }Class _K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3777))

    def test_3778(self):
        input = '''Class _51j{}Class _w__TA{Val $8,g,$8,$6_,__,$6:_;}Class _{Var _Y,$5:Array [Array [Array [String ,0140],0b11],5_2];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3778))

    def test_3779(self):
        input = '''Class RE:_{Val $Q_,_:Float ;}Class w{Constructor (R,_:Array [Array [Array [Boolean ,0B11],074],074]){} }Class _:J{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3779))

    def test_3780(self):
        input = '''Class _:_{}Class U_d32{}Class ld2T_:v2{Destructor (){}Constructor (_:V;_1,f,_,y:Float ){}Constructor (){}Destructor (){} }Class _0p:_6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3780))

    def test_3781(self):
        input = '''Class _1:g_{Destructor (){_::$_4_x();Continue ;{}Continue ;Qvr::$B();}Destructor (){}Destructor (){} }Class _:t{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3781))

    def test_3782(self):
        input = '''Class _3{Var $8D7:Array [Array [Array [Array [Array [Array [Array [Float ,071],29],071],071],0b1_1_10_11],0b1000101],0b1_0];}Class _z:_{}Class P38{Var _,_:Array [String ,0x13];Constructor (O_6K0,_,g,_2:Boolean ;_uur,_,_:a){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3782))

    def test_3783(self):
        input = '''Class m2:Y6{Q(PG,H:_a;_,_:Array [Float ,0XC];C__dA:Array [Boolean ,1];Jh,_,___37Nz:Array [Array [Float ,0b1010010],0X4_2F]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3783))

    def test_3784(self):
        input = '''Class Q7w:__1{Destructor (){}Destructor (){}Constructor (_,W7,__M_,Fn,pmUD,_,r___,_3,__9_:z2;_vC08:Float ;_:k){} }Class vv:__5{}Class S_0m_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3784))

    def test_3785(self):
        input = '''Class D:V{Constructor (){}Constructor (N58,_:Array [String ,41_7_05]){}Var _,E_082sEZ9,$18e:Array [Int ,0143];}Class F{}Class J_45{Constructor (uF0_a5:String ;_,_3__,v_6,_:String ){Continue ;Continue ;}Constructor (d2:Float ;_b_:_){}Z(E_w_,T_:_8;_7,y,W5_:Array [String ,0B1_0]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3785))

    def test_3786(self):
        input = '''Class _{$P3(w,_,e:Array [Array [Int ,0x2],0b10_11];rD,S2:x4){} }Class x_:r{Var $8_fS,$_:t0;Val $_9:Array [Array [String ,0x7],84];}Class __1{}Class m_z:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3786))

    def test_3787(self):
        input = '''Class g:h{_8_(){}__E(_:_;z:Int ;_b_e6:String ;jf,__,_r_,_:Array [Float ,0X1];a__:Array [Array [Boolean ,0b1_0_11],03_37]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3787))

    def test_3788(self):
        input = '''Class i_8:S6{}Class _{Constructor (B__,__I_I__,X_:Array [Array [Float ,50],0B10_0];e:Array [Boolean ,50]){m::$3Zv3();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3788))

    def test_3789(self):
        input = '''Class i__6b:_{}Class _P7{}Class _{Var E:Array [Int ,32];Var _:Float ;}Class _l{Constructor (_8:Array [Boolean ,0B1];P_,i38,_,D,_,___,eY_:Float ;_,d,_:Float ;_:Array [Array [Array [String ,0b1010101],017],0B1_1];_3:Array [String ,4];_,_L8gO,X,_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0B1],60],0X9],0b1010101],0x4F],01],5],0X9]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3789))

    def test_3790(self):
        input = '''Class _:_{Var $XO,$8:Array [Boolean ,64];}Class H_3_83{Val $_,$___z03_H,zs:e6;}Class E6_{}Class _1P_0{Var $l,B:D;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3790))

    def test_3791(self):
        input = '''Class j:_C{Constructor (_,S_:Float ;w2,_,_:String ;_:Array [Array [Int ,0XA],40]){}Val $__9T,$4__,$9:Array [Array [Array [Array [Float ,40],0x8],0127],201];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3791))

    def test_3792(self):
        input = '''Class PEd_{}Class M4_8_V1{Constructor (){} }Class H:__{}Class _{$51eL(e:Array [Array [Array [Boolean ,02],0101],4_5]){} }Class oN{Var _:Array [Array [Float ,71],71];Var _,$J,$2:Int ;Val s:Array [Array [Array [Array [Array [Int ,070],0b1011],0b110],4],0XD];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3792))

    def test_3793(self):
        input = '''Class A{_(_C_6:Array [Int ,0105]){ {} }$_(_,_8,u_:Float ;Q_2_,K43,_,_0,l,D_b_,_,J_ie_839I,z__:Array [Array [Int ,4_0_7_2],0105]){Break ;}Var _:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3793))

    def test_3794(self):
        input = '''Class _{}Class _{_31(v,_ey,k,N_,_7:Boolean ;V:M;o,_C__:C){}Constructor (){} }Class g5{}Class _{Val $4B:_;Val $__,_,$4,_,XMh:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3794))

    def test_3795(self):
        input = '''Class _f:eju{$G(K:Array [Float ,0b1]){}Var $_:Array [Array [Boolean ,87],52];Vj(_,_:Int ;R:Float ;W__,Vy:Array [Array [Array [Array [String ,07_2],07_1],015],87]){}_(){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3795))

    def test_3796(self):
        input = '''Class f{Var $AU8_3:String ;_(_,_W:Array [Boolean ,015];_,Ha,_q,CQ:E;_,_nFS,T,_,P,h:Array [Array [String ,0x8],0X48]){} }Class t3:_{}Class S10{}Class _{Constructor (W5:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3796))

    def test_3797(self):
        input = '''Class _4i:_u___S99_{}Class ____:D{}Class _{}Class M{}Class _:_____{}Class A_K{$7(_Qv,__,_:J__X95q94){} }Class V{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3797))

    def test_3798(self):
        input = '''Class f_{Val _3,$_6G__:Array [Array [Array [Array [Array [Array [Array [Boolean ,0xCFE],04_6],33],0x21],03_6],0X50],4];}Class Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3798))

    def test_3799(self):
        input = '''Class _:G{}Class __{}Class X:___3{Constructor (){}Constructor (){}Val $_:f;$s_l(){} }Class _{}Class __{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3799))

    def test_3800(self):
        input = '''Class _:_{}Class mJK{}Class b52_{}Class _:_{$CeM(W:_Wa;_8_:S;m,wf,J665_:Float ;_:Float ;_2_:hp;U:__;_,__:_w_Ck3I0;_,u41g:zN){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3800))

    def test_3801(self):
        input = '''Class p:l{Constructor (_:Array [Array [Boolean ,0B111111],0xCCD_1];_:Array [Array [Array [String ,070],070],06]){ {} }Constructor (X:HP9;_H3,_:String ;C__:Array [String ,0B1]){} }Class I0_cJ_B{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3801))

    def test_3802(self):
        input = '''Class W:_{_(q_04_Y,___:Array [Boolean ,0B1_1];__87N:Array [Array [String ,0x7],0x7];_o5:Array [Float ,0b1_0];L_:Array [Array [Array [Array [Float ,1_890],0B11],0764_3],0B1_0_0]){Var __d,__5,g,d,__,_:String ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3802))

    def test_3803(self):
        input = '''Class _{}Class He5{Var t:__9;}Class _j:b{Constructor (y9,J03,_,Y:Array [Array [Array [Array [Int ,071_4_6],0XB],12],0X8_F];x2,_1_,m:VX){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3803))

    def test_3804(self):
        input = '''Class _3{Val $r_9,M:Array [Array [Boolean ,0x76],0X4B];}Class _p{J(G:String ){Break ;{}Break ;Continue ;{Break ;}_::$14_();Val h9156,__056:_Z;Var _:ND;}Val _a,_:P_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3804))

    def test_3805(self):
        input = '''Class _:_L{}Class _6_R{b(){} }Class Y:__{Val X,_,$I,_,Q9_:Boolean ;Destructor (){}Val $_:Array [Array [Boolean ,6],0b11];Val _:Array [Float ,0B1011011];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3805))

    def test_3806(self):
        input = '''Class I:_{Var _5,O3_q:Array [Array [Array [Float ,0X46],17],07];}Class _P2_26_:_{}Class _:R{}Class _L8:n_pN{}Class H:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3806))

    def test_3807(self):
        input = '''Class RX7{Destructor (){}Val p15,$_P,$5276_:Array [Int ,94];}Class I:_3_o_{Val u_,$_:_i_3_F;Destructor (){} }Class _:Z_7W{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3807))

    def test_3808(self):
        input = '''Class _56wV1o:f_{Constructor (_:Float ;dG:_J){Break ;} }Class r:B_{}Class B8_{}Class _{}Class _:i_rC8{Val $JF6:Array [Float ,0144];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3808))

    def test_3809(self):
        input = '''Class gVsRQ{}Class _{Constructor (_,_:Int ;_0:Array [Array [Array [Array [Array [Array [String ,0B10101],0B1],0B10101],696],0125],8]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3809))

    def test_3810(self):
        input = '''Class q:_{Val C,$_,$2,_mz:___6_;Constructor (z__U:Float ;__4_:c){Break ;}Val $5,o3:O;Var I,$53n0_,$_:R;}Class O_2:__{}Class O{Var $7M,$V:Array [Int ,0b11];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3810))

    def test_3811(self):
        input = '''Class WK{Constructor (y4:__;_v_75,f_O29X,T,_:String ;__5_,R:Array [Array [Array [Array [Float ,0b1],0xA],0B11_0],4388];__,S42738:gN;_:__08){}Constructor (P:M;_3,L,_,__i,_a:Array [Array [Boolean ,2_4],28119_0_8]){} }Class ei:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3811))

    def test_3812(self):
        input = '''Class mZ:_{$Y(_,H,_,_,E,lR3E61,rA6_5,f:Array [Array [Int ,0b1],0X48];RH,_:Array [Array [Array [Array [Array [Int ,240],0xBB],07],0XC],0x7]){}M(_1:_;x0_E_,_:Array [Array [Array [String ,0B1000010],0x4D],0B1000010]){Return ;} }Class d:F{}Class X:d_5{}Class _:_{Destructor (){}Val $9,$_Z:_;Val __1Q,$97,R,$4_,_7_,o:Array [String ,4];$q(_78c,_,I1:Float ){Return ;}Constructor (){} }Class Xg9L{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3812))

    def test_3813(self):
        input = '''Class t{Val _,$__,$2:Array [Float ,0b1];}Class _:_x_{$_(J,TI,_S72:_;F:Array [Array [String ,0B10010],9369];nQo:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3813))

    def test_3814(self):
        input = '''Class y:_{$Z(_4F,_6,_:Array [Int ,0X5];_:Array [String ,0XB_7]){} }Class _{}Class _:dT_{}Class a{$_(){}$_k_(__:Float ;_9:_){}Var $_H,_J7_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3814))

    def test_3815(self):
        input = '''Class _{}Class _33___{Var $4e_vX9:Float ;Constructor (__:Array [Array [Boolean ,0b11001000],22];_S36,n:Float ){}Var ___P5_3_AH:Array [Int ,02];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3815))

    def test_3816(self):
        input = '''Class __{Destructor (){_::$_();}$_S(){}Destructor (){}Var $6_,kFzD,$_,_:Boolean ;Val _6q,T:Array [String ,0x6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3816))

    def test_3817(self):
        input = '''Class _{Constructor (P:Array [Float ,0b1011110]){Break ;Var g:_0r__;}Destructor (){ {}__::$9();} }Class __{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3817))

    def test_3818(self):
        input = '''Class d{Constructor (Q,H1,_d:Array [Array [Array [Array [Array [String ,055],0B100101],9656_2_3_32],0X4E],0x55]){Val n405c:Array [Float ,4];{Break ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3818))

    def test_3819(self):
        input = '''Class lMhU{Constructor (_:Int ;_1,_:Boolean ;_4,o_,X_v_6,Xkj___8_M:Array [Array [String ,0B110],0X5F]){}Constructor (){Continue ;} }Class Q:_y{Val c,_:_;Val $_e_:Array [Array [Array [String ,07],0x2B],4];}Class _F:t0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3819))

    def test_3820(self):
        input = '''Class _L_v{Val $i,$_,$6M8,$_9A2:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0B1],32],32],0B111_1],0127],0B1],4],0227],0b110111];}Class i:Q_rd{}Class b{}Class E{Constructor (_6:String ;_s_,__:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3820))

    def test_3821(self):
        input = '''Class qd:c{Destructor (){}Var $_,G:Array [Array [Array [String ,1_9_6],0b11110],062_5_0];Constructor (){ {Continue ;{} }} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3821))

    def test_3822(self):
        input = '''Class Wb__p{}Class _E{Val _8:Boolean ;Var __v:g_;Val $_:Float ;Constructor (){}Destructor (){}Val EF:String ;}Class k{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3822))

    def test_3823(self):
        input = '''Class __CM_S:___{Constructor (_:Boolean ){}M(_:Array [Array [String ,027],0b101111];_3:Boolean ;E:Array [Int ,03];_:Array [Int ,2_9]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3823))

    def test_3824(self):
        input = '''Class O_N:_{$x(_,_:Array [Array [Array [Int ,04_124],026],0x85]){}Destructor (){}Var $4:Array [Array [Boolean ,026],07_5_11];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3824))

    def test_3825(self):
        input = '''Class nIsu___:G___W{}Class _:X{__025__b_u(D5_,_,W,___,N_,__,___,_n:Array [Int ,8]){}Val _:Float ;}Class _z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3825))

    def test_3826(self):
        input = '''Class U3:T{Constructor (){}Val l4,$___O,$22:Array [Array [Array [Array [Array [Array [Int ,79],0b111110],0X38],1],0B1000011],0B10];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3826))

    def test_3827(self):
        input = '''Class C:a{}Class k:H{Constructor (_,G_,y5,N,_,R7,wI:Int ;j:_){Val y0:Array [String ,0x5_B];Break ;Return ;{ {}Continue ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3827))

    def test_3828(self):
        input = '''Class A9{Val L_5,$59,$7Si:o_;}Class _1_k_6:_19{}Class __{Constructor (){} }Class __{Val Y_,$Qf,$_,$G5i_d:Boolean ;}Class x_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3828))

    def test_3829(self):
        input = '''Class _:_{}Class _ZX{Destructor (){I::$9();l4::$_.I._J();} }Class _5{}Class y55_:pI8{Destructor (){Break ;}Val $63_,$_2__,$_x,_,$7,$i,$_:String ;}Class c:l0{Var $__:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3829))

    def test_3830(self):
        input = '''Class _O:__{}Class _i_:I{Val _931,$A9,$_:Array [Float ,0X6_638_4F_5_6_6];_(D,a:a){}Destructor (){} }Class g{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3830))

    def test_3831(self):
        input = '''Class _{}Class G{Destructor (){ {} }$4(){}Constructor (i,S:String ;m,_,z:yy){Break ;}Var _,$F,_,$3:N;f2wF(_G3,___:Array [Int ,0B1_00]){Continue ;Continue ;} }Class _:t_{Var _,c61:Array [Array [String ,0B1],0X1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3831))

    def test_3832(self):
        input = '''Class _{$_(_1_:Int ;J:Array [String ,0X19];R,I__6_,o:Array [Float ,017];G:Array [Array [Array [Array [Array [Int ,0X19],0B1],83],58],0b1]){} }Class BL_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3832))

    def test_3833(self):
        input = '''Class R{}Class _:_{Destructor (){Return !!t_5::$e(!_N::$p.__K.L_O+!!!--_::$5().Q()).ld0Io_5_.N__().R_()._().__().g__()+.t0_6n_e::$_Fr;}Constructor (){_::$x();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3833))

    def test_3834(self):
        input = '''Class _:_j{Val $UP,i_,_,_,z0,o,$9:Array [String ,0xB];Constructor (_:Array [Array [Float ,0XC],0x1C];__:_Z;_4,_,_,W44,R,_95:CK_f8;u,_,a1:_T;R_2:String ;e,__B,M_:String ;_e:Array [String ,032];_A2:Array [Int ,0B1011];_,V_pj,Q__k:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3834))

    def test_3835(self):
        input = '''Class O6{Constructor (_,Q_:Array [Array [Array [Boolean ,0B1_1_1],021],674];_q:String ;_:Array [Array [Array [Array [Array [Int ,0B110001],0X4D],056],0x1C],0x1C];_,y:Array [Array [Boolean ,0x8_5],8]){}Var _:Boolean ;}Class N__2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3835))

    def test_3836(self):
        input = '''Class d{$8_Z_2(G1_:o_N){}Var $2t4,$___40b4_5:Array [Array [Array [Array [Boolean ,3],0B11_01_1],0x18],0b110010];Var $46:Float ;}Class ak{Val $5_4:_S;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3836))

    def test_3837(self):
        input = '''Class I{}Class ___Ea{}Class N:b{Constructor (_92,_:String ;V,_,_,X,r:NT;V_9:Int ){New U().__Ce_mC();}Val $_,_,$4,_,h:Z6;}Class a:__{Constructor (){}Destructor (){}$jT(){}$_EZ(){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3837))

    def test_3838(self):
        input = '''Class mhXa9{k__(_53_0w:Array [Array [Boolean ,0X21],84];X,__,_:_2;d:_;f:Int ;W:__;c:Array [Int ,0X21];_9,W,_,__,ddE:Int ;A,_,Ro086_,_5:Float ;__,_,WJ:Array [Array [Float ,0111],84];_15s0:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3838))

    def test_3839(self):
        input = '''Class _2:a{}Class _1r83g{Var $__3,$N_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,58],7_55_2_72],024],07],0b101011],0b11],02_62_7_130_4],02],0XCE];}Class _1Y{Var _:String ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3839))

    def test_3840(self):
        input = '''Class Kq:Q{Val _:W1;_(){} }Class _757{$5(x,z:__e_){Return ;}Val _39_6,$6:Array [Array [String ,9_78],0B111010];}Class x_{}Class s{Constructor (E0B,L0G,___:Float ;X,_:Array [Float ,0b1];_:Array [Array [Boolean ,0X54],0b1]){Break ;Return ;{} }Var $8:Array [Array [Array [Array [Int ,0X2C],0B1_0_1],0X2C],01];}Class _:RR{Var $a:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3840))

    def test_3841(self):
        input = '''Class _M{Constructor (_95:Array [Array [Int ,0B1111],0121];Kh,is,__,OH:String ;_jo,_,_:Array [Boolean ,0X1];_3:_){ {} }w_(){Break ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3841))

    def test_3842(self):
        input = '''Class a4{Constructor (_q_,V34_8:W;N_:Array [Array [Array [String ,0X24_4_A_7A6],1],0xF_A_B_4_2];W_,f,_,o_,_:Boolean ;x,__,_,x:Boolean ;_N:Array [Array [Array [String ,9],0x1B],2]){}_(vV,_,_,_,_,E:Int ;u,__s1,_:Float ;_,_,_:Array [Int ,04_7_64]){ {} }}Class B3{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3842))

    def test_3843(self):
        input = '''Class _:J_6{$I9H1(){} }Class N:_{}Class R{}Class __n{Var d:_4_;}Class x:z{$1(t79,_,t:_){Break ;Val _1C:Array [Boolean ,0b111];} }Class _F5cx:_9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3843))

    def test_3844(self):
        input = '''Class s1:_oL{_D52(){}Val K:o;bI_(Bz,_,g:Array [Array [Array [Array [Array [String ,04],7],53],0X61],0126];_,_X94:Array [Array [String ,53],0X8];D6:Float ;_:Int ){} }Class Gz{Destructor (){}$cM(){}Var $_T7__:Array [Boolean ,0126];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3844))

    def test_3845(self):
        input = '''Class G__:_27P{j_(_,P,V:Array [Array [Array [Array [Array [Array [Array [Boolean ,0X28],44],0xE],44],0103],0B100001],44];c,__,__3___0b:y;_w:Int ){} }Class U:_{Val _56,Du5,A,_:x5;Var $Y,$_f,f,$K:C2;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3845))

    def test_3846(self):
        input = '''Class _{_7lD(Cx:_){} }Class _{}Class _l{_(){}Destructor (){Continue ;} }Class _1yt{}Class Fyy:b1_E{Constructor (){}gf(A3_,__,_:D;_J,_1,p:Int ;Nv,F3,_:String ;s_l:_7_4){}$_(){} }Class _7:_8{$5(){Val __:Array [Float ,0b110];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3846))

    def test_3847(self):
        input = '''Class _:__{}Class AV:_1{}Class _:O{Constructor (_,_i:Boolean ;P_,eg,R,_:Boolean ;_T,fc,ksq_5:Boolean ;_,__,u,V_,_:Array [Int ,0x49];KW_4:Float ;_,x:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3847))

    def test_3848(self):
        input = '''Class _J{$O(_,_4_W,__,X:q;n,_,__,v,_V_P,W:Array [Float ,015]){}$9(Z:_){}Var W:Boolean ;}Class e:_{Val V:Array [Array [Array [Array [Array [Float ,01],04],37],0XB09],0X56];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3848))

    def test_3849(self):
        input = '''Class _9{}Class C:aN{}Class s:C_{}Class q{Destructor (){}Val _55:Float ;}Class Gn_{Var i:Array [Boolean ,0X1_02];Val _,k:c;__65(){}$_(__,MC3g:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3849))

    def test_3850(self):
        input = '''Class _:ct2_{Var $__:__;Var $_:Array [Array [Float ,0B1_1],0B101111];}Class s_5:a9{Constructor (){Break ;} }Class L{$2(___,R,_:_;_d:Float ){}Constructor (){}Destructor (){Continue ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3850))

    def test_3851(self):
        input = '''Class _z{_(_,_7:Array [Array [Float ,0X57],64];_H82:Array [String ,0xE];_:_){} }Class _C{$_(_:Boolean ;Y,_,_:Float ;b,_O7,_41,___:Array [Boolean ,0X7];A,q,_:String ;V_,_,mJ_7,W:Boolean ;Z_8:Array [Boolean ,05];I,_:Array [Array [Boolean ,4],64]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3851))

    def test_3852(self):
        input = '''Class m3{Constructor (){}Val $___:Array [String ,0X1];Constructor (){}Constructor (D04:Boolean ){}_(h5:Array [Array [Array [Boolean ,60],0b1],0b1];G_:S){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3852))

    def test_3853(self):
        input = '''Class _{Destructor (){}Var _Y6_1,$Td:Array [Boolean ,04225_0];}Class _n{Constructor (_:Array [Float ,0X1_0]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3853))

    def test_3854(self):
        input = '''Class z:h{}Class _:oD7Hl__8{Var B4,$_:Array [Array [Array [Array [Array [Array [String ,013],0x8],013],0X42],8],013];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3854))

    def test_3855(self):
        input = '''Class _9{n(__P,_2:_){}Val f92yB_z8:Array [Array [Array [Array [Boolean ,0141],7],0243],07_2];}Class R:_{Constructor (_:Array [Array [Float ,0b11100],0x4E]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3855))

    def test_3856(self):
        input = '''Class t{Constructor (){} }Class q{__Y4(p9:Float ){} }Class ta:I{}Class u:__Bx{Var $c0:String ;Var g,$9_,$l:Array [Boolean ,072];Var __:Float ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3856))

    def test_3857(self):
        input = '''Class _{z(K:Array [Float ,050]){}Val $V,$10A2:Array [String ,0x6];}Class Fi:f{}Class _:_{}Class w:L{Val _8,_:Array [Array [Array [Boolean ,0XE_702_BF],0X64],69];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3857))

    def test_3858(self):
        input = '''Class _o_{$_(d:Array [Array [Array [Array [Array [Array [Array [Int ,05],1],0b1011001],39],3_3],0B1011100],0x7_A];V,_B:_7__70_;_w,e_,_:Array [Int ,39];_,x1_:Array [Array [Array [String ,0B1],01],0B1011100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3858))

    def test_3859(self):
        input = '''Class x_:_{}Class _0:_9j{}Class _:_{}Class Co:_{Constructor (_Kc3:Array [Boolean ,044]){}Val i:Float ;}Class _t:GQX_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3859))

    def test_3860(self):
        input = '''Class __:_{Var _,$5__:Array [Boolean ,072];}Class l:_z2{Destructor (){}Var $70_,__:Array [Array [Float ,04],0xB];Var $7f,$2,$d,_,_:Array [Array [Float ,072],0x20];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3860))

    def test_3861(self):
        input = '''Class P{}Class O:_3{Constructor (Hv3,w,o:String ;_,_:O_5){ {}Continue ;}Val k:_I3;}Class X:T{Constructor (_,_4_,_wxi_R,o_,_4:Int ){Val _,_:Float ;Break ;} }Class _:u{Val $_,_:t;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3861))

    def test_3862(self):
        input = '''Class pe:R{Constructor (){}Destructor (){}Constructor (l:Array [String ,839];_:Array [Float ,0b100011];__:_){}Var $R:Array [Array [Array [String ,025],6],0B101010];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3862))

    def test_3863(self):
        input = '''Class rK{vy_t_(N,_,f_,I:Boolean ){}Destructor (){}Val $5,_f:_Y;Var $U__7:Int ;}Class _{}Class _{Constructor (){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3863))

    def test_3864(self):
        input = '''Class _Z{Constructor (__,w,__:Array [Array [Array [Array [String ,0X16],025],94],025];p:Array [Int ,0x36];JrC:C;b:u_;cG8:Array [Array [Array [Array [Array [Boolean ,0b1_1],01_5],0b111111],0X16],0X16];__S:Boolean ;_1:w_){}$Y(V6O,_4,__:Array [Boolean ,0b111111];_1S,oY,_t_:String ;_,UkT_5,E87_4_:Array [Array [String ,025],025]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3864))

    def test_3865(self):
        input = '''Class _83Y{Constructor (CV4:String ;__,A6I2,_,_,_:qI7){Val Af,_Z__,_,_:Float ;Continue ;} }Class h{}Class d{}Class K__0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3865))

    def test_3866(self):
        input = '''Class _589:_{}Class _{Constructor (L:_8;Y__:Int ;_:Float ){} }Class D{Val $z:Array [Array [Float ,0B110111],0X1E];Constructor (){}$_H(){}L(_0:String ;o:Array [Int ,1_1]){}Var $_:Array [Array [Array [Array [Int ,0X1E],0B110111],0X1E],04];Val _1x,$m,_,_58,$__,P,$4,h:l;}Class j:f20{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3866))

    def test_3867(self):
        input = '''Class n:_6aM{}Class j:L_{Var $0k,_54:_4;Constructor (){}Val z:Array [Array [Array [Array [Boolean ,0261_7],065],0X20],02_53];Var $R,$8:Z;}Class __{q(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3867))

    def test_3868(self):
        input = '''Class x:_{}Class _:w6{Var __:_p;Val _,Z:Array [String ,0x48];Constructor (){}Val _7,$1x_:Array [String ,0X4_6];Destructor (){True .u._();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3868))

    def test_3869(self):
        input = '''Class _5{Constructor (){}Destructor (){} }Class _A4:H_{}Class _O0I8:_{T_0(){} }Class _5_{}Class _w1x3{}Class f:ea4_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3869))

    def test_3870(self):
        input = '''Class D:k_{}Class _z{Val $0:_;Destructor (){} }Class X:Y_{}Class e5:gK{Var _,$4_y:Array [Array [String ,0xD],20];Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3870))

    def test_3871(self):
        input = '''Class F_:h{Var _,$7:Array [Array [Array [Array [Array [Array [Array [Array [Float ,013_6551],0x64],0X3E],05_1],0B10],020],020],07_5_640_3_72];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3871))

    def test_3872(self):
        input = '''Class _d{Destructor (){ {}{} }Var $_55:Array [Array [String ,07],63];$7(_3:_){} }Class _2:_2_8{Var p_,o:Boolean ;}Class _{}Class V__7:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3872))

    def test_3873(self):
        input = '''Class __H9_m:_{}Class A{Var $J,$jxt_,_4L_:_7;Val $_2:Array [String ,0xAD];}Class C{Constructor (v5_c,t,_8_6,RT,U:Array [Boolean ,43]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3873))

    def test_3874(self):
        input = '''Class G1:J{}Class vsP:S8{}Class _:B1{$q(__:Array [Array [Boolean ,7],0132];T,_8,_0_S1_:_;_:_;m,_,a,s:Array [String ,065]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3874))

    def test_3875(self):
        input = '''Class V:a_{Var _:Array [Array [Array [String ,07],0x6E],28];Constructor (_:Array [Array [Array [Array [String ,0b10011],0b1],01],28]){} }Class QZ6:K_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3875))

    def test_3876(self):
        input = '''Class d4:_3{Destructor (){} }Class _{}Class An:w{X(sxi,_0:_2__){}Var __:q8_;Constructor (){Continue ;} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3876))

    def test_3877(self):
        input = '''Class _:r{Constructor (Y,f,d5e7:_ax5_;q_2,_3_:Array [String ,035]){ {}Return ;}Var _9Z2,$__O_43,g:M;}Class z{Val _:Boolean ;Destructor (){}YR(__:u87_;_,f__w,i4_,z06,K__Z:Array [Array [Array [Array [Array [Array [Array [Array [Int ,5],0b11110],035],0xF5],0B1000010],0B1000010],0xE],0X5];A_:Float ;o_:Array [Array [Array [Int ,0xC],44],0b1_00];_:D;Q:Array [Array [Float ,0X43],0B1000010];V77:Array [Array [Boolean ,0B1000010],0XD6];U,q,_:n;x,_r__32,k,_:Array [Boolean ,44];_,_,_:String ){} }Class y2:p{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3877))

    def test_3878(self):
        input = '''Class _:_{Var z,$6:Boolean ;}Class _:__7Q{}Class JK{Var k,$0038,_6,g:Array [Float ,73];Val $0_q:_;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3878))

    def test_3879(self):
        input = '''Class _{Val $0,c:Array [Array [Array [Float ,0xDF],0B110111],24];uN(o:_;__:u){p::$___._._.X();Break ;Break ;} }Class L_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3879))

    def test_3880(self):
        input = '''Class om:_1_{Val $tG,$_,$V_:Array [Float ,0b1000111];$P(Q,y_:String ){Continue ;}Var q5J3,T,$7,b:Array [Array [Array [Array [Array [String ,0114],0x3],0B100],0XC_3],4];}Class _H_:S{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3880))

    def test_3881(self):
        input = '''Class _2:Pe_{Var $6,_,$13:Array [String ,02];Var __L_:Array [Int ,0x3B];Constructor (_971:_){Break ;}Val G5:_Z8;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3881))

    def test_3882(self):
        input = '''Class Z:_R{}Class __{}Class H483:x_{}Class n_v_b:G{}Class M4{Constructor (){}Destructor (){} }Class _{}Class R88:o{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3882))

    def test_3883(self):
        input = '''Class _Q___0{}Class K:_7_8I__Ys_f{Val _0,$3:h9;_(){} }Class _c2_Tv7:f_6{Constructor (j_:V;_,O___,Z__h:Array [String ,013];_,__,_,K_,H:Array [Boolean ,013]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3883))

    def test_3884(self):
        input = '''Class j:_{$n(y:b;_7,__,i:Array [Int ,0B1_10]){} }Class j7:I{}Class _0:_{Val $N24768:Array [Array [Boolean ,0B1],0124];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3884))

    def test_3885(self):
        input = '''Class G9{Var J:_;Destructor (){}Constructor (_e_4Wg:String ;_:Array [Array [Array [Int ,0102],0B10],0B100]){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3885))

    def test_3886(self):
        input = '''Class i_{Constructor (__,__P,_d4_4:Array [Float ,5];_:Int ;A,_:Array [Array [Array [Array [Float ,1],040],84],0b10_0];_F_I6,Z:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3886))

    def test_3887(self):
        input = '''Class g_{__(){Var _,V6:Int ;} }Class Q{}Class m:i{Val K:Array [Float ,064];$_(_m7:_L){} }Class _{Val _:Array [String ,1_9_18];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3887))

    def test_3888(self):
        input = '''Class d_q{}Class _wL{_65__neWu(x,r:Array [Boolean ,4_8]){}Var _x_:Boolean ;$7Cu_(){}Var WY,$__,$__,$_t,$_,_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3888))

    def test_3889(self):
        input = '''Class _551:l{Val _z_5:String ;}Class J:_8{}Class VW95{}Class _{Var __g4v,$_:Array [Array [Array [Boolean ,0b110100],07_4],56];}Class i{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3889))

    def test_3890(self):
        input = '''Class _:_4{Var $L,O:u;Destructor (){}Var n,w,$d:Int ;Var $9:Array [Array [Array [Array [Array [Boolean ,05],91],053],053],7];}Class _S:y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3890))

    def test_3891(self):
        input = '''Class h:L_{$_(_N___,_:Int ;_,hLKA__,V__n,_,V:Array [Array [Array [Array [Int ,0xA_B],0B1],0x61],55]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3891))

    def test_3892(self):
        input = '''Class _{Var _8:V;}Class g_w{Var $1,$_4:Array [Array [Array [Array [Int ,0B110000],7],0b1001111],0xA7_1_A];Constructor (_,_62:Float ;_O:v){ {{} }} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3892))

    def test_3893(self):
        input = '''Class _{}Class m:_{Var $_:String =!__::$4_.___z<--_::$_()._().D;Val _aB,i_Y,$_G:Array [Array [Float ,3],0x7];}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3893))

    def test_3894(self):
        input = '''Class __9_u_:l5{$_(_,k,___A:Array [Array [Array [Array [Int ,037_3],0X7D],63],63]){Val _0__:Array [String ,63];}Val $N_:String ;Destructor (){}Val __:f;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3894))

    def test_3895(self):
        input = '''Class _0{Constructor (t,_,h1:Int ;_:Array [Float ,56];__5:Float ;P:_){}Destructor (){} }Class Wj_3A{}Class __4:j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3895))

    def test_3896(self):
        input = '''Class T:z{}Class _9X:__{}Class dO{Constructor (j,d6,_7,A:Boolean ){}__(r17:Int ;_u,f,__:Array [String ,60]){_::$c_();} }Class x_{_(G_17:Int ){}Constructor (){} }Class L_t{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3896))

    def test_3897(self):
        input = '''Class s:__P{Var $5:Array [Array [Array [Array [Boolean ,0127],0127],0127],0xA];}Class k1:_C_aT{Val ___b,_p54:Boolean ;Var $7u,$G,$_8:tQ6;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3897))

    def test_3898(self):
        input = '''Class Nr{Constructor (i,_,K,__:Array [Array [Array [Array [Array [Array [Int ,4],0X1D],6],04],0B1000100],0x4B];__H,l,XD_:S;Q,p:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3898))

    def test_3899(self):
        input = '''Class _5{Constructor (){}u(_:GR__){}Destructor (){} }Class zQ{Val $p,__I,___0__,_r_:E___;$W02(){} }Class _20{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3899))

    def test_3900(self):
        input = '''Class a1:I0{Constructor (){}Constructor (_2,_:Int ;zY_:Z;__,_:Array [Array [Array [Array [Float ,0X74_9],2],0X7_A],0133];GBEBv,_,_:_;bY,_,es4,_B:Float ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3900))

    def test_3901(self):
        input = '''Class _01_{$4_85(pB:Float ;Bb_1,_:Array [Array [Array [Array [Float ,0x6],07],0b10100],0b10100];t:VzX;t2_,_yy,d_:Array [Array [Boolean ,2_53],0b1_0];w:f_;S:i2__6){} }Class _r_:H2{}Class AWKP3KL:_{}Class _{Destructor (){}Val _:Array [Array [String ,43],0X55A4];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3901))

    def test_3902(self):
        input = '''Class f:H9BB{Destructor (){}$_(){Continue ;Break ;}Constructor (q:Array [String ,0136];_4:_){}Constructor (P:Array [Array [Boolean ,0XA],0136]){}$_(){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3902))

    def test_3903(self):
        input = '''Class N_{}Class p{}Class _:e3M_{}Class __b:_0{Constructor (_d,c8:Array [Array [Array [Array [Array [String ,0B11111],52],0B1_1_11],0b1],0x2D]){}Var $_:Array [Array [Array [Array [Array [Array [Array [Array [String ,7],52],0X3F],03],52],035],0B110_1],0212_33];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3903))

    def test_3904(self):
        input = '''Class _t:K{$C_1F(){}Destructor (){_t::$9();}Constructor (V,F,_,m:Array [Array [Float ,0B1011001],0b1001101];Tnbv:String ){}Destructor (){}Destructor (){Var _:Array [Boolean ,0112];}Var $_u,$_:String ;}Class i{}Class _0_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3904))

    def test_3905(self):
        input = '''Class U:_v{Constructor (_,_:q;p:Array [Array [Array [Array [Array [Int ,33],06],0x7_9],0x7_9],063]){} }Class _:_{}Class x:_6{}Class _{}Class _{Constructor (_,SW_j01s:Boolean ;V:Boolean ;_,_,_,___4:Array [Float ,6]){}Destructor (){ {} }$0(Z4,_e:String ;_1,r,KE:String ;_,_:j_Jc){}Var $3_M8H:Int ;Var J_:D3;Constructor (_G,_P:Array [Boolean ,66]){} }Class f_{}Class __o:p3{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3905))

    def test_3906(self):
        input = '''Class __m:_{}Class _{}Class wu{}Class W{Var $_rg_,$0:Int ;Val $_:Array [Float ,0b1];}Class _e:Qp{Constructor (_:Int ;_ji:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3906))

    def test_3907(self):
        input = '''Class _:S8x{Constructor (_:Array [Float ,7];_:Array [Float ,07];j:String ){}Constructor (__,_:Array [Array [Array [Array [Float ,05],0B111110],0x1_C],0x23_3]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3907))

    def test_3908(self):
        input = '''Class _:L9_{Constructor (_,_5_G,_:Int ;_:__GA_q_;_:Array [Int ,0x6_0];_L,a:Array [Int ,9_6]){}Destructor (){}Destructor (){} }Class P:_{}Class y_T:___{}Class D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3908))

    def test_3909(self):
        input = '''Class _{$4IE(_:Array [Int ,0x5];fx,_,_8,Y:Array [Array [Boolean ,0x5],0B10]){} }Class __g:w{Val XV:T;}Class Z_V{}Class _2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3909))

    def test_3910(self):
        input = '''Class U_{Val $23a_9,$7:M;}Class U{_(_,_:J;j:Boolean ;__,WfP:Array [Array [Boolean ,06],0xC];B_,_,_,nW,i,____6:Int ){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3910))

    def test_3911(self):
        input = '''Class _:_y4{Var __2f0,_,$_,_4_u_34ef0_2:Float ;}Class _{}Class zo{Var $_7,V9,_nfm04:Array [Array [Boolean ,67],7];Constructor (___:q){Var Cf_,_:Array [String ,07_5_0];Break ;Var _,_,_v:String ;} }Class R:__{Val vq:Array [String ,0X6];}Class A:e{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3911))

    def test_3912(self):
        input = '''Class _{Val _:Boolean ;Destructor (){}Val $_:h;Var $_z9A,$__:Array [Float ,01];}Class O:S{}Class __:_q{Constructor (__,C:_){Continue ;Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3912))

    def test_3913(self):
        input = '''Class _{_(w:Int ;_W,e_:_;_,_,N2,___3_,A:A88z2){}Val $_:String ;Destructor (){} }Class w:___o{Var D:String ;$d__(){Val _:Array [Array [Array [Float ,22],0XC],2_6_5];}Var _:Array [Int ,8_8_54];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3913))

    def test_3914(self):
        input = '''Class z{}Class J5_{Constructor (_:Float ;Q6:_c){}Val w___0_f:Float ;}Class _{Var WS0:Int ;Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3914))

    def test_3915(self):
        input = '''Class _:_{}Class O:__Yt05R__A_{}Class E_w{Destructor (){Return ;iq::$R().Y().B_0();}Val $7,$_5_:Float ;_t(_15_OB_,X,_v_:Array [Array [Float ,0xCF_85],7];q,G:Int ;z:Array [String ,0X3B]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3915))

    def test_3916(self):
        input = '''Class s:_{Constructor (_7:Array [Array [Boolean ,19],0B1000101];__4__I,_S5:_n_;_,_E_l,J5,_C,_,HB,E_J:_;b,QT,d,T,_9,p,E__:Array [Array [Array [Int ,5_9_68],19],0b1001001]){}Val $4,_xK,$18:Array [Boolean ,0B11];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3916))

    def test_3917(self):
        input = '''Class _1_:_{Constructor (_f,x6:_7B;N,m_A2_,__Y,WM9O8c:String ;k8,_1,Z:Array [Int ,055];_3:Int ){ {} }}Class J{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3917))

    def test_3918(self):
        input = '''Class O8_Y_:_{}Class U__4:_B{_I(__8:Float ;_:c3q_;EH,FR,Z:String ){} }Class _:N{Var g:Array [Array [Float ,0X34],29];}Class b:_x{Destructor (){}Val $5v:Array [Array [Array [Boolean ,29],0b111101],06];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3918))

    def test_3919(self):
        input = '''Class t6Z_9_8{_(_04_,__j:Array [Array [String ,0B1],9]){} }Class Y{}Class _c:_l{}Class _4{$a_o(_:String ;_9j,s:SB6){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3919))

    def test_3920(self):
        input = '''Class i{Val $u_v8,$3_a5,$7V,$_:Array [String ,0b10];}Class _Z:j_JX{Constructor (){}Var $Q_i1,$j_,_F,T:String ;Var N53:__;}Class __:i_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3920))

    def test_3921(self):
        input = '''Class _{W(_:c5_;_:Array [Int ,10]){}Destructor (){}Var _:Array [Array [Array [Array [Int ,0XD],07_3],0472],0x3];Constructor (){} }Class R_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3921))

    def test_3922(self):
        input = '''Class ___{Constructor (__RYQ8B_,e:Array [Array [String ,53],0B1]){} }Class M_{Var $P_f_10,$_:Array [Float ,0X5B];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3922))

    def test_3923(self):
        input = '''Class __V:__{Constructor (_9:a32){}Constructor (_:Array [Boolean ,0X25];B,_,y0,__chL:Array [Array [Array [Array [String ,0X1D_86],0b10],0X25],0x15];Y,_o,u,_,_0:Array [Int ,31]){} }Class _00:q{Var _6:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3923))

    def test_3924(self):
        input = '''Class _M95N1JT:_{}Class _18{}Class _{}Class X:_{}Class _56{Var _,O:Boolean ;Constructor (Jg:__;_Q__0t:Array [Float ,94_0_6];W_W,d,_:Array [Array [Array [Int ,0B1011010],3],06_3];W_T,_,o:Array [Float ,55];i9:Array [String ,0x62];N:Array [String ,0x1A];_X,B:Array [Array [Int ,03],55];_:Boolean ;v_:Array [Boolean ,0xD];D:fN;R:Boolean ;_,_,jD,m__8,R:Boolean ;_,n_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3924))

    def test_3925(self):
        input = '''Class _p:_{__S8(Q_:Array [Array [Float ,0X16],027];_H7,_,xQ_0,_0,m,__,Z__4:Array [Array [Array [Array [Array [String ,0141],9],78],78],9]){} }Class l{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3925))

    def test_3926(self):
        input = '''Class _{Constructor (_,P8_7:Ns_;d:__;_:Array [Array [Float ,0x63],0B1010001];_:Float ){Break ;}Var $3_,$_Js_1,$u:r4;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3926))

    def test_3927(self):
        input = '''Class u{}Class lr_:T_{Constructor (z:Float ){}q0_5V(_,__:String ;_k:_;oeG:se;__y7:Boolean ){}Val $45:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3927))

    def test_3928(self):
        input = '''Class F:__{Constructor (_669fW,__YGw,W_,__Yx5,_9,_ht,J,kD:Array [String ,0x1D];__,_:z){} }Class ___g_aq{Constructor (y_:Array [Array [Int ,011],0B110]){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3928))

    def test_3929(self):
        input = '''Class c_:o_{Val $1_R:Array [Array [Array [Int ,0x51],18],0xC_B0A];}Class __5{Constructor (C:_;b:Array [String ,07];_:V){}Constructor (_,p,J8,_,D:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3929))

    def test_3930(self):
        input = '''Class vo{Val $n,$__gxL:_9P;Var _:_;}Class Mq{Destructor (){}Constructor (_X_:Int ;_k:Array [Float ,07_2]){} }Class _{}Class u:b3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3930))

    def test_3931(self):
        input = '''Class h3:_{$v(){} }Class V:Sw9{Constructor (){}Constructor (Q_B:Array [String ,0b1_01];_:Array [Array [Array [Float ,58],05_1],58]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3931))

    def test_3932(self):
        input = '''Class F:__6{}Class e:y{}Class _{Var __V_,$5,x:__;Constructor (){}Constructor (){Break ;} }Class _:j{Var $06_pC_:Array [Float ,0x63];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3932))

    def test_3933(self):
        input = '''Class l:_F{}Class _ov{Val $_,$2,_:_;Var F:Array [Array [Array [Int ,77],77],0x16];Var G,X,$9_y,DV,p,$C4Q:Float ;}Class L9:_{Var r,$__L:Array [Array [Boolean ,020],0x16];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3933))

    def test_3934(self):
        input = '''Class _:_3{}Class __:_{Constructor (){} }Class x:_3L{Constructor (_:Array [String ,18]){}Var __i:I;Val _,_,$4,E:s;}Class _:k{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3934))

    def test_3935(self):
        input = '''Class PQ_:_{Destructor (){} }Class _4{Constructor (s:__;Ry5:__Fv){} }Class _7_H:m{Constructor (_,_,C0,S8,GN:Array [Array [Int ,0b1001],053];_:A){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3935))

    def test_3936(self):
        input = '''Class _:jB{}Class _9h:_{Destructor (){} }Class g{Val $85,F8:Array [Array [Array [Array [Boolean ,0516_0],07],0b10001_0],0B1];}Class __0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3936))

    def test_3937(self):
        input = '''Class R_1{Constructor (_,o_q07,Yj,M:Array [Float ,0x3];__:Float ;v,Hd_Y,_p4:_;j,H,_0__5_0,ci:Int ;_,d,p_,_:aI_;u:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3937))

    def test_3938(self):
        input = '''Class T4:__nhy{$3m(m_:Float ;S:String ;_69,S__:_;_,i:Array [Array [Boolean ,85],0x28]){Var O:Float ;}Var $C8_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3938))

    def test_3939(self):
        input = '''Class T:_{$9w(A:Array [Array [Array [Array [String ,0x6_E_1],031],0XC],0X2];_3_:dq3;_:Int ;__l:Float ;l3:Array [Boolean ,6]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3939))

    def test_3940(self):
        input = '''Class _2:j{}Class U:_{}Class _{Val L__:Array [Array [Array [Array [Array [Array [Float ,58],0b1],02_7_002_5],0X24],0XB],0x62];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3940))

    def test_3941(self):
        input = '''Class _ZH_:_{Val $_,_A6,F,_9_F:Array [Boolean ,047];Constructor (D:___;y,_,_0,__,_,u,t:_){} }Class _:FQ27{Constructor (_Y5oVZ:wS){}Destructor (){}w_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3941))

    def test_3942(self):
        input = '''Class i{Val tX__2c,_6:o;Destructor (){}_M__7p5M(W6,As,_:_9_1;S:Float ){} }Class __:_{}Class XNe{Val k15:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3942))

    def test_3943(self):
        input = '''Class _C:d4{Constructor (){ {Return ;} }_(J,_Y8,_7,G,d,C,I_,jA_:F_8;C:_8;q_:_R;h,QQ:String ;_C,__:Float ;_B_:Array [Array [Array [Boolean ,03],0b1101],2];W,V,__:Float ){} }Class _6{Var j_H:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3943))

    def test_3944(self):
        input = '''Class _1{Var $U:String ;Destructor (){} }Class NH3{}Class h6_{}Class N{}Class _:bav{}Class B{}Class Q:__49Li6r{}Class P:B8{$_(){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3944))

    def test_3945(self):
        input = '''Class _{}Class __:n__{Constructor (){}Constructor (){} }Class _8{Constructor (_,M:Float ;I:B;_,z_,N:Array [Array [Array [Array [Array [Array [Float ,04],98],0b100000],02],0B100100],98];L:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3945))

    def test_3946(self):
        input = '''Class c7__1:_{Constructor (xk8,z7b,T,A4_,s:Int ){}Var __:Array [String ,6_9];Destructor (){}Var $9_iJ_b:w;Constructor (){}Constructor (E:Dt){}Destructor (){}Val $02,$Z4,$e:Float ;}Class s_:x_2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3946))

    def test_3947(self):
        input = '''Class __:___fq{}Class y{Var $3:Array [Array [Float ,72],0b10];Val _M:Array [Array [Array [Array [Boolean ,7],2],04_7_6],68_9];Constructor (){_1::$H3();} }Class Oy:i{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3947))

    def test_3948(self):
        input = '''Class i_gn__8:G_{Constructor (_5,I_:Array [Array [Int ,0x5],0XB_BFEE_F]){}Var $_,Bg_b,$____,gh,$Q:Array [Float ,0X48];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3948))

    def test_3949(self):
        input = '''Class _{}Class _5{Constructor (_,_:Array [Array [Float ,0B10],45];__1g9:Array [Array [Array [String ,0x2_E_CF],45],0x8];l4_,_,i:_){} }Class _b_2{Val F:String ;}Class _{}Class __{_Q(){}Constructor (A,XzSwM8_:Array [Array [Boolean ,0X3_5],2];x21:Int ;_46__m,_2,T:String ;D:z){}Var X,$_,__:String ;}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3949))

    def test_3950(self):
        input = '''Class _4:__{_5(o_,_0,_,e7,M,__:Array [Int ,0B1011110];__,M,UK_o_3:String ;__:JRU;_m,N0g:Array [Array [Boolean ,044],0b10];_,T:_j75;n:String ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3950))

    def test_3951(self):
        input = '''Class K3_:__{Constructor (k_,_Q_,q:String ;__,_:Array [Float ,04_5];S18b_49:_9){} }Class XW:i{Var $H:Array [Boolean ,0x9_F];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3951))

    def test_3952(self):
        input = '''Class G4:_5{Constructor (){} }Class oy:R{}Class _g_:L1{}Class _:G2_Fb{}Class U_b{}Class l:T_C9__{}Class __:e___{Val _8_AU__:Boolean ;}Class Mm{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3952))

    def test_3953(self):
        input = '''Class o0{Destructor (){Break ;}_t6(_:Boolean ;_O8,__41,_,_X:N;_:F;_:G;c_1Zn:Boolean ;_,k2,b,x,g12I7:Boolean ;_2X:Array [Boolean ,052]){Val s_,__,_4,R3___:Array [Array [Boolean ,0B1],498_70];} }Class _{Destructor (){} }Class es{Var $__1:String ;Var S,__,$5,_1_:Array [Float ,0B111011];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3953))

    def test_3954(self):
        input = '''Class _:_59__{$_8Q(){}$_(_5_L4,_I_90,__y,T_57,_:Array [Int ,0x53];H,k:_;_0,l6,WB:String ){} }Class _:_0{Var $R:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3954))

    def test_3955(self):
        input = '''Class _F_9{}Class D{Constructor (_k7,_,_3K:Array [Array [Int ,06],0B1010110];_:H;_I6h:String ;_8,__38_9,_,_7O_,__:Array [Boolean ,0xC]){}_(){}Constructor (__0_:Boolean ;_,_Of,_,_:String ;R6:Boolean ){}X_(){Continue ;} }Class Z3:r{}Class pY{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3955))

    def test_3956(self):
        input = '''Class CX:_{$_7(a_,C,_,A9,_:String ;_:Int ;_:o;P__T:Float ;_:Float ;X_I:Array [Array [Array [String ,0x1B],0xD],05];y_Y4:String ){} }Class U_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3956))

    def test_3957(self):
        input = '''Class O:W{Constructor (_:x_;I,wN2:_;v_,o,_9:String ;OM:s;x,_U_0BY__,K_,K_3,_y,___,_:String ){}Val $_N4B,_:_;Var _:Array [Array [Float ,70_2],81];Constructor (){} }Class wC:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3957))

    def test_3958(self):
        input = '''Class _:_y{}Class E:_{}Class z:_{}Class pK{}Class _2:q{}Class Ve{__(X:_;_,U8,__,j5,k,__2:Int ;_,_:Array [Boolean ,0XB];I:Boolean ;R0R_:Array [String ,032]){Continue ;}Val u,$_l4_,$_,w:Array [Array [String ,6],0x2_C_06];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3958))

    def test_3959(self):
        input = '''Class k_{Var $1,$92k1:_g_;Var _G1gQ6:Array [Array [Array [Array [Float ,0x25],0b11011],0X3],060];Constructor (M:y;_,_q3__,q9E,F:String ){} }Class dG:_6_rg{}Class a5325:O6_2{Constructor (qS,Z:Int ){}x(K:U;_3,_,_,s,j:String ;_,U,y:_){Var di17_:Int ;Var _,QoY46T_s:Array [String ,07_4];} }Class ___D:c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3959))

    def test_3960(self):
        input = '''Class sbD_{}Class CV:_{}Class _{Val $__,$6,$w:Array [Array [Array [Boolean ,054],072],0B1];Var Lm:_;Destructor (){ {} }}Class _:___G{}Class un:N_{}Class _:_0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3960))

    def test_3961(self):
        input = '''Class _:R{Constructor (){} }Class l_:__Z5y{}Class _{YNEA___0(_:Array [Boolean ,0B11];G06_3,_,h,o__,__,_,_:Array [Array [Array [Array [String ,0X9],0x18],03_7],0X83];G:Array [Boolean ,0x18];q:_;_,H5__:Array [Int ,0b1001010];_X_:_g;_,_e_:Boolean ){} }Class f:B{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3961))

    def test_3962(self):
        input = '''Class _:_24{Var c,d,$2:Boolean ;}Class _cO{Constructor (F,_,L_q:_;M:String ;e6,OZ8_t:y_____82;_y:String ;_,__,_,__:Int ){}Destructor (){} }Class R:HUs{Val __:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3962))

    def test_3963(self):
        input = '''Class z:_{_(X,__Z_x,p,a,VP_:Array [Boolean ,11]){New i()._._.__6X_._25();}Var $__2:Array [Float ,0b1];Var W:N;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3963))

    def test_3964(self):
        input = '''Class _:y{}Class bf{_(F:Boolean ){} }Class L6_j{}Class jn:_I_67_9_{Val _x,m4_p,ot_:u;Val __V,$__1,A_49_L_:_;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3964))

    def test_3965(self):
        input = '''Class x:w{Destructor (){}$2(__,p0,IX0B:Array [Array [Int ,0x7C],19]){Var __:Array [Array [String ,19],0X1C];{} }Val o:Array [Array [String ,1],0B111001];Constructor (_:Float ){}Var $0_:k;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3965))

    def test_3966(self):
        input = '''Class __{Destructor (){}Constructor (IRT,__,_z:Array [Int ,0b1];p:Array [Array [Array [Array [Array [Float ,047],0X50],0B10111],0x5B],0B10111];C,NN__sTV,_,p2j,_1W,M9,v_h:String ){} }Class A:__{}Class _:_6{}Class _8_:j{}Class m26t:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3966))

    def test_3967(self):
        input = '''Class g5_:sBW_{Constructor (z:E_gElhg_6;o,_,_:Array [Array [Array [Array [Array [Array [Float ,9],046],36],0x52],0B1],79]){ {} }}Class _:N{}Class _9_z_1:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3967))

    def test_3968(self):
        input = '''Class IQ5:o__{Constructor (W0_,_w3V383Q,_:Array [Array [Boolean ,0X30A5_B],050];V:Array [Int ,0XB];U_,_,w,s,__2__3,b7,_,_,_,_:Array [Array [Float ,06],0B1];_,S:Array [Array [Array [Float ,0X8],0X4],53]){}Val $4:d;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3968))

    def test_3969(self):
        input = '''Class A:L{}Class rXx_:Jg_{Var p:Array [Array [Array [Array [Float ,03],0b110],62],0b101111];Destructor (){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3969))

    def test_3970(self):
        input = '''Class _:_W{}Class J3B6{Var $p,_,$9,B3,I_bd:Int ;}Class _:__{$_(Hj2,_49_rW:_;p9,_,H54c__i6C_,__,_,_,_5__:String ){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3970))

    def test_3971(self):
        input = '''Class PH:_{Val __31I,$5_,$b4:_;$E(){}Val $6_:Array [Int ,43];}Class w_e4:EJX{Val _,_,$G:Array [Array [Array [Array [Boolean ,0b1011100],05],0xF],8];}Class V6_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3971))

    def test_3972(self):
        input = '''Class s__3{Var _,_:Array [Array [String ,0B1],0B1001001];Val _:Array [Array [Array [Array [Int ,78],0b1100001],034],78];}Class _b{Destructor (){Continue ;} }Class kG2{}Class ZL:a{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3972))

    def test_3973(self):
        input = '''Class _T{Destructor (){Return ;Break ;_::$4rg6();} }Class H{Var Q,$9_:Array [Array [Array [Boolean ,0XF],4],0b1001100];Constructor (_:Array [Boolean ,0B1_0_0_111]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3973))

    def test_3974(self):
        input = '''Class _:_{Var _27_:Boolean ;}Class _{$70(){} }Class L_:_t{Constructor (____2,r_,__,Q,G1:b){} }Class _{_78(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3974))

    def test_3975(self):
        input = '''Class yd{Val _,$3:Boolean ;}Class _:l{}Class p_:V{Val $0,_,$d:String ;}Class qX_{}Class _F_{}Class _3{Constructor (_,k:Boolean ;E9,K:p_;_:_;_5,_6,_L,F3,Cn_M:Int ;_7To,___:Array [Array [Array [Int ,0105],0b1_0_10],0b1]){Continue ;} }Class X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3975))

    def test_3976(self):
        input = '''Class _:_M{}Class _{Destructor (){}Constructor (_,_lN,f:Array [Array [String ,065],0X4D]){ {Val _,M5,k___:String ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3976))

    def test_3977(self):
        input = '''Class _0___{Var $iZM_2,_91,$5,$___,$M,_,$t:___5;Var Gn:O;Destructor (){Return ;Break ;}Destructor (){}Constructor (){Break ;Val _01:Array [Array [Int ,0xD],3_85];}$q9_7Lm(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3977))

    def test_3978(self):
        input = '''Class Z{}Class _3:_{Destructor (){}Constructor (){}Constructor (_6o:Array [Float ,0B1_10_11];_E,_S:_;_4,_:H){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3978))

    def test_3979(self):
        input = '''Class _N{}Class _:Z{Var $8,_03:Boolean ;}Class _x:JVHk{Constructor (p_6:r;HI,U_B:Array [Array [Boolean ,0104],0X6];_,Wu4_:Float ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3979))

    def test_3980(self):
        input = '''Class _6:M_{Val $x_,$5,$3c,$8:Array [Int ,0b1];Val _,h,$_:qE_f;}Class x72385M{$_(ds,D,C7,Z4,__:Float ;_1_2,_4X:Array [Boolean ,0B1_1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3980))

    def test_3981(self):
        input = '''Class _9{$4_(K:K){}Destructor (){}Constructor (G_0,_V_:String ;f8,__,h,_J:Int ;g,_:Array [Array [Boolean ,0B1],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3981))

    def test_3982(self):
        input = '''Class __{Var $i82:Array [Array [String ,0x2],0b1];}Class _:N{Constructor (_:Array [String ,0x9]){}Val $9eE8_,rN,$_:_f;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3982))

    def test_3983(self):
        input = '''Class _:QD__90{}Class _{}Class _2{Val D_,$_,$R,_:_;Val $9l:Array [Array [Array [Array [Array [String ,0B1],020],1],0b1],0b1];}Class _:__{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3983))

    def test_3984(self):
        input = '''Class _:_{$g(){}$_(_:__;t3,H,E:_;_6:Array [Array [Array [Array [Array [Int ,28],0x33],0X58],3],02_0]){Return ;}Val $9,$j:X__;Val $Z1:Boolean ;Val _J7_,__M:Array [Array [Float ,28],0B110110];Constructor (){ {_M84__4ko_W__D_2_e::$3_();} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3984))

    def test_3985(self):
        input = '''Class _S__F:R{Constructor (A:Array [Float ,0X32];gE2:n;_,_X:Boolean ){}Var $_8_,_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,74],74],0XE],0xA_7],0B10100],0b1010010],0XD],023],023];Destructor (){}Destructor (){} }Class f5w__j3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3985))

    def test_3986(self):
        input = '''Class u{Constructor (){} }Class l___p:w{Var tG,$p,$__,$2:a;P5(_,k:Int ){Break ;Val _M5:Array [Array [Int ,0b1_10_1],88];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3986))

    def test_3987(self):
        input = '''Class S{$D(E,_,_:Array [Array [Array [Array [Array [Boolean ,0B11111],8],0b111],78],78];y_,U,__,_,e_:Float ;_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3987))

    def test_3988(self):
        input = '''Class t:r{Var $j,$q,$_:Array [Array [Int ,0b10010],0b10010];Constructor (c,_,t,_:Array [Boolean ,0B101011]){} }Class d{}Class _:FF{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3988))

    def test_3989(self):
        input = '''Class _:P{Constructor (t7:Float ;_:_;_8X:String ;_8_,_6,__w_90A:Array [Boolean ,0b110111];_:Array [Boolean ,0b11_0]){Continue ;}Constructor (){}Constructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3989))

    def test_3990(self):
        input = '''Class g:J{Constructor (_L,_:_;_4_:Boolean ;_:String ;U1_,v,_:hxi1y;_,a:Array [String ,02_3];G,_,Q:A;_0:zb___89;A,_f:d_78){}$_(){}Destructor (){ {} }Val _,_,_0v_,_2_K,_19_,$j2B5_:RS;}Class _xz:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3990))

    def test_3991(self):
        input = '''Class M_5t_:_{Var $z,$_:Int ;Var w9H:d;}Class c:v6{Constructor (d__,O_,_:_;Fo62A_1:_){} }Class z82__C:_{Val $_p:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3991))

    def test_3992(self):
        input = '''Class Q{$_(_3O,n,o_4_h:Boolean ){}Var o,_:Array [Array [Array [Array [Array [String ,0x23],11],0B1],0X3EC2],0x7];}Class M7P__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3992))

    def test_3993(self):
        input = '''Class _{Destructor (){}Destructor (){}Constructor (sSu6:Array [Array [Array [Array [Array [Int ,0X4],027],0B10100],03],28]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3993))

    def test_3994(self):
        input = '''Class p2B_:g_h{}Class _{Destructor (){}Constructor (p:Array [Array [Boolean ,0B11111],0140];__J_PH6R,X5,Q76,u_,s:Array [Array [Array [Array [Array [Int ,0X7_B_3],0140],21],0B11111],0X2A];a:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3994))

    def test_3995(self):
        input = '''Class _x6__5_S2_:M{Var $6__,$6J:Array [Array [Float ,0XE_6],0x5A];r6(_L,__,_v,_:Array [Float ,0B1_1_0_0_1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3995))

    def test_3996(self):
        input = '''Class __2{}Class j_:_{}Class _:_{}Class _:_752_o{Destructor (){}Destructor (){Return !!--_::$z.F63._O30()._;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3996))

    def test_3997(self):
        input = '''Class _J{}Class _:_{}Class __{Val Fs94:String ;Var r,$_Q5_A_:Array [Boolean ,9];Val _4LE:Array [String ,0122];Val A:Float ;}Class p{}Class v{}Class _5:b__{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3997))

    def test_3998(self):
        input = '''Class qqw7{Val $_:Array [Int ,5_96_4];}Class a2_{Var $48:Array [String ,022];}Class _{Var W,$42,$1b1:Int ;Constructor (){}Var $_5_,QT,f:Array [Boolean ,0b1_1];}Class MVU:_v_{}Class Dh{}Class _:_{Destructor (){}Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3998))

    def test_3999(self):
        input = '''Class X7{}Class _{}Class _:_342E{}Class T20{Val Xf:__3X;$__(_,w2_,a:Array [String ,84]){} }Class X_:_{Var Ez_,$5:Array [Array [Array [String ,0B1],8],0b110000];}Class jCW:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 3999))

    def test_4000(self):
        input = '''Class _Z:D{Constructor (){}Var $k_:Array [Array [Array [Boolean ,0XB_7],0b11001],0B1_01];}Class _:_j{Var __,$4:w;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4000))

    def test_4001(self):
        input = '''Class D_x:_A{Val N:Gg_;Val w,$H:M;Destructor (){}Destructor (){}Var t,$2,$_8:Array [Array [Array [Array [Array [String ,0xD_7_F5_9D_2],0X5],0XD],0B10],0X8_45];}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4001))

    def test_4002(self):
        input = '''Class u_5{Constructor (){}Val __G__:String ;Var h,$2:String ;}Class Y:g{}Class __8_:m{Constructor (_MP:Array [String ,0b1_1_0];_7xw_9V_,Ac:_;__G,_,_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4002))

    def test_4003(self):
        input = '''Class C:_{}Class N:_a__lJ{Var P:Array [Array [Array [Array [String ,01],0b1],60],0b111010];}Class __{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4003))

    def test_4004(self):
        input = '''Class __:_A{}Class I{}Class nm8:s{}Class JB__3{Destructor (){}Val cwT__t,_,_:O_;Val __:Int ;Val tR:Int ;Var __,t:Boolean ;$_(){} }Class _{}Class _:_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4004))

    def test_4005(self):
        input = '''Class l:_1{Val z,$_,$_,j,$n04h45_,$4W,$J8:Float ;}Class b_{_(__i,_:Array [String ,0b111010];__d,MT,_:Boolean ;_,Z974,X_wn_m:S_E0;_,__:Float ){}Constructor (__,_:w_;CK:Array [Array [Int ,0XB],90];p,_:_3){} }Class ___{$_(){} }Class _H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4005))

    def test_4006(self):
        input = '''Class _I6J3I{Val OM:Array [String ,92];}Class _{Destructor (){} }Class _:q_{Destructor (){} }Class _:B{Val $9a:Array [Boolean ,06];Constructor (_nUy,W:XHZv;d:Int ;_7GC1_:Boolean ){} }Class _6_S:S7{Var V:Array [Array [String ,076_5],0b1010110];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4006))

    def test_4007(self):
        input = '''Class e:_{Var $z,I:Array [Array [Array [Array [Array [Array [Array [String ,23],01],0X1B],0X1B],01],0B10],0b100];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4007))

    def test_4008(self):
        input = '''Class __:__8i{}Class d{}Class Y4:a{}Class _:Z{Destructor (){}$RLA(_,MV_4:Int ){}Val $5:o_;Constructor (h,U1,_,_:Array [Boolean ,0x7_1];a:Float ;_DU_5:Array [Array [Array [Array [Int ,0x6],2_65],0XD],0XC]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4008))

    def test_4009(self):
        input = '''Class _{Constructor (_ne,_2,_g:e7;_:String ;E3,Jd0:Int ;__,_z,_,_c,V,_k:Array [Array [Array [Array [Array [Int ,6],074],0XD],17],0x8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4009))

    def test_4010(self):
        input = '''Class _:G{}Class _H_:P487_{Constructor (){Break ;}_p__(N__6_W:Array [Array [Float ,74],057]){} }Class __fu3h{Val $HT:_2;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4010))

    def test_4011(self):
        input = '''Class Bo:_{}Class u{}Class _{__(_,D,w42,z,B:e__L;_:String ;Q:String ;_,__:_c6__){} }Class p____:qC{Val ho:Float ;}Class Z1Ho{}Class n3:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4011))

    def test_4012(self):
        input = '''Class l:J{Destructor (){} }Class _:_0{}Class i{}Class J:a{}Class d:_{$p(){Continue ;}Constructor (_,_:P__L_q_0lZ){}Val _8_:C;Var $a,o:Int ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4012))

    def test_4013(self):
        input = '''Class _:_3_1{Val _6,f0k_5_0:Array [Array [Array [Array [Int ,0b1],0b1],22],0X57];Val $g,I_,_:Int ;Val $w,$6:_36;Var _:_z;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4013))

    def test_4014(self):
        input = '''Class _I{Var _:Array [Array [Array [Array [Float ,51],51],2],0b1_1_1_00];}Class __ty_{_(_A3:Array [Array [Array [Int ,51],51],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4014))

    def test_4015(self):
        input = '''Class ___:_{}Class M{Var _Q8,rN:_39;}Class KY:___9v{}Class _:___{Val $8Z:Array [Array [String ,02_521_5_1],0b110111];}Class _{Var _4c1:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4015))

    def test_4016(self):
        input = '''Class _:_kRC__FT9{}Class v:Ln3_{Constructor (p,Y:Array [Array [Array [Array [Int ,0B101111],3_16_1],0b1010000],31];__:Array [Array [String ,4_18_78],0x4_2];L318__4_3__,_KV,_o,f:m){} }Class _h2d:_{}Class E_{}Class c:_{}Class _u:S{Var $3_,_VH6_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4016))

    def test_4017(self):
        input = '''Class _D_:j{Destructor (){Break ;Break ;} }Class D_{Constructor (F_Em9Z:i_;_,_9,CjHH9sD6A_5___7,Z,j,_:Sf){} }Class U:Z3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4017))

    def test_4018(self):
        input = '''Class _r{}Class _8s5105_{}Class __8:G{Destructor (){}Destructor (){Val _H,_,_,m,_p,_,_:Float ;} }Class n__{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4018))

    def test_4019(self):
        input = '''Class d9_C_:___8{Var _,$4_,_5,d:_;}Class K:a{Destructor (){}v1a(){}Destructor (){Break ;} }Class JaB7_3{_r(_:_;O:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4019))

    def test_4020(self):
        input = '''Class _nn_:b2{}Class _:_{Destructor (){} }Class NL:_{Val $__:Array [Int ,0xE];Var r59:String ;}Class j{Destructor (){Var ___q_7_,zh_,_,g2,_:Array [Int ,0B10];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4020))

    def test_4021(self):
        input = '''Class K_7:EG{Val _:S;}Class u:Jt{}Class _{Constructor (_,K,E:Array [Array [String ,0X5],06]){Continue ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4021))

    def test_4022(self):
        input = '''Class nkg{Constructor (_,xS__D_:Array [Array [Array [Array [Float ,04],0B100110],0X44],0b1_00]){}Val $g:Array [Boolean ,9_772_7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4022))

    def test_4023(self):
        input = '''Class vv:_8{Constructor (){}Var $6,$__5,$_,r:Array [Array [Float ,0b10001],2];}Class M8D{Val _,$1,_Fs:Array [Array [Array [Boolean ,0XD],15],013];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4023))

    def test_4024(self):
        input = '''Class _:j_86{}Class n2{Var $Y2:Array [String ,6_8_3_78_7];Val $13:Array [Array [Array [String ,60],0x56],024];}Class h:_V_RZ2_Eh{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4024))

    def test_4025(self):
        input = '''Class Y:_62yq{}Class j{Var _f:Float ;Destructor (){}Constructor (){Break ;{} }Var _4:Boolean ;Constructor (){Return ;Break ;Break ;}Constructor (_R,_:d;_:Array [Int ,0B1010100];___Gp8,_,k,_Q,__0L77E4,_T,_24,_,Q,___:Array [Array [Array [Array [Int ,0b1011000],030],0b110_0],0b1_1];w:__){}Var _,$Oa3:Array [Float ,030];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4025))

    def test_4026(self):
        input = '''Class _:a{Z35_5(){}Constructor (P,u:b;O_1,_,b0_:Array [Float ,0x1E];__5I:_){}Var f_,_5:Float ;$_(X,O,_lo:Array [Boolean ,0x1E]){}Constructor (_,_Ti:Array [Int ,0B10101]){}Constructor (t_:String ;y,_:Array [String ,05]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4026))

    def test_4027(self):
        input = '''Class _:_{_(V:Array [Array [Boolean ,0b1_0],0xF]){}Constructor (_22,_a:___){Break ;} }Class S{$_(Y:Float ;xb8_:w40Z){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4027))

    def test_4028(self):
        input = '''Class K1:_{Destructor (){Continue ;} }Class b:_{$_(p_3:Array [Array [String ,0132],0b1000000];A:Int ;K8:__;_:Int ;_sz7p_S9F,N:Boolean ){}Constructor (J__,_2:_){} }Class _:_{Val _8,$87,_,__,$2,___,$1,_C:L;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4028))

    def test_4029(self):
        input = '''Class _{}Class P__N:_{$0(__,Y9,_6_H:Array [Boolean ,023];_:Array [Array [String ,0x49],34_1];Ba9:_0__1_p){}$_(__,L_0,_,u:Int ;a:_;_s,_,X,W5:SG;_,__,__:Array [String ,13];_:Boolean ){} }Class T:D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4029))

    def test_4030(self):
        input = '''Class B:KM__W6_{}Class p:L7_{Val _:_D;Var $X:Array [Float ,02];$9(){}Var $_v,$zV,$396:String ;}Class h_{Var $_,_,W:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4030))

    def test_4031(self):
        input = '''Class Q1:____{}Class W42_u:e4{Destructor (){Continue ;}Var g_,_:Boolean ;Var o937,_D:Int ;}Class A:U_8{Val y_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4031))

    def test_4032(self):
        input = '''Class Y{Constructor (_,h_,__,S,g,O_,M_,_7,B_,_:E_;_1__p:e_){Continue ;{} }Destructor (){}Constructor (S:Float ){} }Class zl1{Val _k:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4032))

    def test_4033(self):
        input = '''Class _{Constructor (_:Array [Array [Array [Float ,0b111011],0B1011100],87]){}Destructor (){} }Class _{$711(){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4033))

    def test_4034(self):
        input = '''Class __Zz_F_:J7{}Class _{Constructor (_,m,p:v;ey,_,_:v;b6I,k,K,c:Array [Array [Array [Float ,0B1],108],1];m,_,__1c,_t,_7w,k,s9:nV){} }Class _{}Class _3{Val $6:p;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4034))

    def test_4035(self):
        input = '''Class _6{Constructor (){}Constructor (h:Array [Array [Array [Float ,043],0B11110],8_2];_:C20r;_,_d,__Fn:_D;p,_,P:Int ){}Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4035))

    def test_4036(self):
        input = '''Class _{}Class _:t{Var V9KsB:_18;}Class y___w{$_lo(){}M_(){}Constructor (o:Array [String ,044]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4036))

    def test_4037(self):
        input = '''Class _{}Class _{Constructor (k,_H:I;d_:Array [String ,5];_,_1,_:Array [Array [String ,26],0x35];p7,V:Float ;E,o0:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4037))

    def test_4038(self):
        input = '''Class k__A9_:K{Var $Yf_0:Float ;}Class _8:Y{Destructor (){}Val $3_4__H:Array [Array [Int ,0b101111],064];}Class _:_A{}Class d79_{Val X:Float ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4038))

    def test_4039(self):
        input = '''Class _{Constructor (_W,_5cAr:Array [Array [Array [Boolean ,0b1_0],0X43],065];A:Array [Array [Boolean ,39],065]){} }Class ___{Val _:Boolean ;Val _45t4Z2m:Int ;}Class ___e_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4039))

    def test_4040(self):
        input = '''Class z5_:_{Constructor (_:_;_rk:_){_::$3J();}Constructor (e,___5,_:String ;N:l;q__cP_,__0,U:__;t:_){}Destructor (){Return ;} }Class _:___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4040))

    def test_4041(self):
        input = '''Class k_{Var u,E:P;$8Y(___:String ){}Constructor (Kl7:A_2;_:Array [Array [Boolean ,0x8],0b1];L,_4:Array [Int ,0x37];Zu_2,L:Boolean ;k:v){} }Class Mk7hoX{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4041))

    def test_4042(self):
        input = '''Class S8:c{Constructor (_,u8__,_,T_z:Float ;_,R,a,__XpN:_d;QX_76:Array [Array [String ,076],19];y_,_43co6:Array [String ,0B1_1];d:Boolean ;U_:x_6u;_:Float ;x,_K:Float ;_:Array [Boolean ,076];j:String ;_:Array [Array [Array [Float ,19],0452],0X4];n8,_12Cs,p,oN:Int ;S:_;f_,W:Array [Array [Array [Boolean ,4],0X2B],19];l6:_;Dz__:Float ;_,_T,W_,_:Array [Array [Array [Boolean ,0X9_F_A],19],4]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4042))

    def test_4043(self):
        input = '''Class _0{$_06(mQA_S0:ryG71Q_;_,_,pA,__,zC,_k,_:Boolean ){Continue ;}Destructor (){}Destructor (){Continue ;}Constructor (){}Val $0:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4043))

    def test_4044(self):
        input = '''Class _9:_9{}Class __{Constructor (){}Destructor (){}Val _h_:Boolean ;Var $90,$J:o;}Class __5{}Class _:I8{}Class s_:R{Val _:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4044))

    def test_4045(self):
        input = '''Class _{}Class _:H_D_{}Class _3ej{}Class __o:_{}Class __:n{Val r:Array [Boolean ,0b1101];_3(chA_,_:q;Z:_;h:Array [Array [Array [Array [Float ,03],0b10100],43],43];n:String ;_,RQ_:E_k185zc;_,_F:Float ){} }Class _{}Class __4:p{Var $094u__:K__;}Class Q_0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4045))

    def test_4046(self):
        input = '''Class X_:c_y_{}Class P{}Class _zvcE{$I__48_(p,b_:String ;j3j,_:Array [Int ,0X2A];S6Z__Y5h:Boolean ){} }Class i_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4046))

    def test_4047(self):
        input = '''Class __{Destructor (){Var _0_:Array [Array [Array [String ,0B1010010],0XD1_1],0X48];Continue ;}$_(_:Int ){Break ;Break ;}Constructor (____:Vy;tB,m_6m6,S:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4047))

    def test_4048(self):
        input = '''Class _{Var _3,Q:Array [Array [Array [String ,04],0130],0X7];$JM(){} }Class h{Qa(_99,_0cs,_c:String ){}Val $E_,$_7,r,_4:Array [String ,0x5A];Val $m,$_,$q,__:xi_t;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4048))

    def test_4049(self):
        input = '''Class _{}Class a___66_0:_A{Var w_r:_;$_(q:Array [Int ,0XE];_:_A){Var y:_;}Val $7g:Boolean =!-New RNw();$z(e4:Boolean ;m,gF1R:_pu;___,_,_,j:Array [Array [Boolean ,0B11],0124];w_,_9O,_2O,v:Array [Boolean ,0124]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4049))

    def test_4050(self):
        input = '''Class _v_{}Class z:Qz{}Class P{Constructor (M2:Array [Float ,0143];_:P0_0c;Jp,_2,p,k_:Array [Array [String ,0b1],0143]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4050))

    def test_4051(self):
        input = '''Class _z:k__{Val _:Float ;Destructor (){ {Break ;Val _O:Array [Array [Array [String ,7],0b1],0X9];} }}Class _:__4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4051))

    def test_4052(self):
        input = '''Class k:F9_{Constructor (Q:String ;_,_,Q0:Array [String ,0b1];HX66Z5y2,Jy,sbo_:String ;x,_Y__:Boolean ){}FOh(){Val C:String ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4052))

    def test_4053(self):
        input = '''Class T:_{Destructor (){} }Class w{Val $a2:Array [Array [Array [Array [Array [Int ,0xA_2],0XB_4],0x5],647],76];Var $___:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4053))

    def test_4054(self):
        input = '''Class _:O{}Class _2:X_{Val _:Int ;Destructor (){} }Class A{Var R6:Array [Boolean ,3];}Class _R{}Class Vv2:Q{$L(){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4054))

    def test_4055(self):
        input = '''Class __l3__{Constructor (_,_v8_:_;_,_d7:Array [Array [Float ,0b1],0b10111];_8:Array [Boolean ,055];_:Boolean ;l7p_:Float ;k__9V_:Int ;o:__;C73,_:x){Val _:_w4;{Return ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4055))

    def test_4056(self):
        input = '''Class _:_{Destructor (){}Constructor (){Val _B,_5:Boolean ;}Constructor (F_0_v65Bn6,_9,_05:Float ){}Val _,$2_s:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4056))

    def test_4057(self):
        input = '''Class ma{Var $Z,n_,F:Float ;__(ob,t8,n444__:Array [Array [Array [Array [Array [Array [Float ,025],0X1],0B1],0B1],0X40],0xD]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4057))

    def test_4058(self):
        input = '''Class V:_{}Class B_{Var $1:Array [Array [Array [Array [Array [Array [Array [Float ,0x3C],0b101000],01],0b101000],0B1],0x3C],0X13];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4058))

    def test_4059(self):
        input = '''Class W_0Q{Destructor (){Return ;}K(_U,x_3__,_:Array [Array [Boolean ,0B10011],0x23];U,___:Boolean ;_:Array [Array [Int ,0b11100],0B1]){}Constructor (_,oR_s8_6,_M,_,_:_;W,a:Array [Float ,0112]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4059))

    def test_4060(self):
        input = '''Class _d{Val L:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b101_01],077],0b1_1_0_111],056],0X1A],0B1000100],4_55],07],0b11];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4060))

    def test_4061(self):
        input = '''Class _:I_{$c(){} }Class N_{_(a1_:h){} }Class YCc{Constructor (__,r:Boolean ){} }Class _7{$2Z46_7(A,S,u18_q,_B:G6){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4061))

    def test_4062(self):
        input = '''Class v:_{M_(x04_,_,_,_,o,W0,w:DG;_:Int ;e9:Array [Int ,8];N_7:z){}Val X__S_1z9S,o2,_2:Array [Boolean ,0b11111];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4062))

    def test_4063(self):
        input = '''Class _5_{}Class j{Var $1,L3:String ;Var y,$3v:Int ;}Class _D{Constructor (){}Destructor (){} }Class __0t_3:t_1G_{Var _,J:Boolean ;i0(){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4063))

    def test_4064(self):
        input = '''Class I:E_{}Class _{_4__2(_,U,P:ZT_){ {} }Val $J:Array [Array [Array [Array [Array [Array [Float ,0b1001001],16],16],0B1111],0b1001001],0x17];}Class j{Destructor (){} }Class _3W{Val J_RB:Boolean ;Var _45,$4,d:Array [Array [Array [String ,16],0104],07];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4064))

    def test_4065(self):
        input = '''Class m__9{Constructor (_,_:Array [Array [Array [String ,0x7F_F5F_3],55],0x68E_4_B_9];N_w0:Array [String ,016]){}Var rK6gv1,D:String ;Destructor (){} }Class _m:_z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4065))

    def test_4066(self):
        input = '''Class N{Val $aH_,Ub,_8:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,010],28],28],02_6],0X2],057],28],0B10],056];}Class g:__4_P{}Class r{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4066))

    def test_4067(self):
        input = '''Class aty{}Class __{}Class _{}Class _{}Class B{}Class ep{}Class _{}Class _:l{Var _:Array [Array [Array [Int ,0B1000011],0B1],0116];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4067))

    def test_4068(self):
        input = '''Class _:SyBU{Var _,_:Array [Array [Array [Array [Array [Array [Float ,023],0XE_B],0X50],0b1_00],66],0x9_F];}Class m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4068))

    def test_4069(self):
        input = '''Class hO{Destructor (){}Val $_C__:j5;Constructor (_,o:N_;l9,y:Array [Array [Array [String ,0b10110],031_72_0_1],14]){Continue ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4069))

    def test_4070(self):
        input = '''Class _E7{Constructor (Y,_y:Array [Array [Float ,067],5]){Val _:Array [Array [Int ,0b1],0b111011];} }Class e{Var AD4:Array [Array [Array [Int ,8],01_1_4],060];}Class _z:_M{}Class x8_4:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4070))

    def test_4071(self):
        input = '''Class __{Destructor (){}Constructor (Q,f:Array [Int ,0b11000];_z:S___;e1,_:Boolean ;_:Array [Boolean ,95];__,x_,_,__T,W,__:Float ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4071))

    def test_4072(self):
        input = '''Class T{}Class m99{Constructor (_8Fj__,Ls:Array [Array [String ,0b1],0b11_10];_:_u;Rk5cr_:b){}Val __c:String ;}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4072))

    def test_4073(self):
        input = '''Class _52{u633(){Break ;}Val $_,$_6:Array [Array [String ,0B10_0_010],063];}Class _:_{Var $_8,_5,$___:String ;}Class E5{}Class _4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4073))

    def test_4074(self):
        input = '''Class ___W2Ia3:_71L58{}Class _hw:_A_{Destructor (){}Var $_3X_YL,$7p:Array [Array [Array [Array [Array [Float ,0x9_D],05_70_1],0B1000001],0144],0144];Destructor (){}Destructor (){} }Class _G7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4074))

    def test_4075(self):
        input = '''Class o4{Destructor (){}Destructor (){} }Class kt_3{Val c:__H;$8(_,_OE,_:Int ;_3,_9h:Array [Boolean ,8];Z__:_;_:Array [Int ,0x9]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4075))

    def test_4076(self):
        input = '''Class _{Var _Z:b_;Val x6_8J,_:Array [String ,0xA_8];Constructor (_:M3){Return ;}Constructor (_Z,xS,Va3652,__:Int ;_,_,_39,u_7,_,V:Array [String ,0B1]){Return ;Continue ;} }Class DJ1Ig:__{Constructor (){}Destructor (){} }Class V:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4076))

    def test_4077(self):
        input = '''Class __p:e{}Class __:_{}Class J_:K_{A(){}Constructor (){}Var _7DM:f_P;Val d9:Array [Float ,02];Var $_8:String ;Val ___40:Array [String ,0B11_10];}Class __0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4077))

    def test_4078(self):
        input = '''Class YO:H_8{}Class R:_1_{Constructor (T8_:G){}Destructor (){}Val Q,$6h_,$6t,$3C:Array [Array [Boolean ,0b1],0b11];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4078))

    def test_4079(self):
        input = '''Class _5_{$32(){Break ;} }Class rO:_4B7{Destructor (){}Val n:Int ;Val _7:Int ;Val $J,$5,Z6_:y___;}Class z5_T{}Class _:_8{Val X:Array [Boolean ,0B100110];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4079))

    def test_4080(self):
        input = '''Class _:_M{Val $_1:Array [Array [Boolean ,0144],0144];Val $7_c2GW,$Vg8:Array [Int ,0x5F];Val _,$_l:Boolean ;Var _Ue:String ;}Class _0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4080))

    def test_4081(self):
        input = '''Class _1_8{$M(){}Val __7,$x_,$_E167,$T,l8,$UQ_:Array [Array [Array [Array [Float ,0x2_D_5_A_C_2],48],07],030];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4081))

    def test_4082(self):
        input = '''Class p:m8{_4j(cLx_I,_,N:Array [Int ,0x4A];D_,a6_0_96:Boolean ){}Constructor (){Return ;Break ;} }Class ef{}Class d{Destructor (){} }Class _H__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4082))

    def test_4083(self):
        input = '''Class u{Var $7__K,$Rj53e9:Array [String ,072];Constructor (D6R:Float ;_,_K:String ;_eZ:Int ;N_En98y,_,_:Array [Boolean ,072];__M,r:_;_:Array [Boolean ,0b1]){}Val $B,_:String ;}Class _4_{$_7_(_:Y;V,D:y_9;_7____0,l:Array [Array [Array [Int ,523],0b10100],0x3D]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4083))

    def test_4084(self):
        input = '''Class d{$__Z_1(){Break ;}Val Gqd_8_P:Float ;Destructor (){_::$6__5();}Constructor (){}Destructor (){} }Class k:UY{}Class _2:s{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4084))

    def test_4085(self):
        input = '''Class _1x{Destructor (){} }Class c:_{}Class _:K1{Var _:dz;Destructor (){}Val $_,$u:Array [Array [Array [Array [Array [Array [Array [Array [String ,06_7],0X48],0X7_5],06704],160],9_66],0B1010],9];}Class _7E:_S_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4085))

    def test_4086(self):
        input = '''Class _11_:NC_{Val $5A:Array [Array [Array [Array [Array [Array [String ,0754],0B11],0b1],0b111100],0131],0B1];}Class M:i{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4086))

    def test_4087(self):
        input = '''Class f{}Class I_{_e(){} }Class R{Val a,$J__:Array [Array [Array [Array [Array [Boolean ,0B10001],0X6],0x31],0x31],0b10_0];}Class c4_7_h:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4087))

    def test_4088(self):
        input = '''Class _{Constructor (Mv:Array [Array [Array [Array [String ,0X4A],0B1010110],0b1],04];l:_;__4_:_511e;_,_,o_u:Array [String ,0X39E_E]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4088))

    def test_4089(self):
        input = '''Class b7_6_{}Class t1_:q7X{}Class _:_{Val i:Float ;$_(y_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0140],04],0X3A],8],0140],0b1011110],0162],0140],07_4]){}Var $_:_f8;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4089))

    def test_4090(self):
        input = '''Class y{$_(_s_,Lu9:J_){} }Class _:_{Var $0,$___:Float ;}Class ___:T_8z9{Val $9,$c,yd_t0_,Dr3:Array [Array [Int ,0b101101],03];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4090))

    def test_4091(self):
        input = '''Class Z_:E8{Var $30_j1G,K,$D3:Array [Array [Boolean ,28],0B101001];Destructor (){} }Class _{Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4091))

    def test_4092(self):
        input = '''Class PPdi:_{$_m_8h(){Return ;Val _m,K,_:__;}Destructor (){}Constructor (d:Array [String ,0B1_0_101]){}Constructor (){Break ;} }Class _{Constructor (_5:Array [Boolean ,0b100000]){Val a_:Array [String ,0X1F];}Val X9_l:Array [Int ,06];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4092))

    def test_4093(self):
        input = '''Class D7:_n8_{}Class W:il{}Class as236:__hH{Val _:Array [Array [Array [Array [Array [Array [Array [Array [Float ,062_4],6],07],0xA],0X51],0xF],02],46];Var __:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4093))

    def test_4094(self):
        input = '''Class X{Var __,fVe3J0M226,p,t__:Array [Array [Float ,0x47],50_5_7];}Class _h:_8{Destructor (){}Var M:y;}Class _4:P{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4094))

    def test_4095(self):
        input = '''Class o{Constructor (_b,_Y4:_4_4_sL3;_57,LE,v,_:M;T,iK:q_9;__,_1,__,_:Array [Int ,057];_5_8:Array [Int ,86];I__,FM,kc,w:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4095))

    def test_4096(self):
        input = '''Class _{Constructor (_g39,q57,J___uGI:__;yi7_:Int ){} }Class _{Var $P:Int ;$_0(b_L:i3__;M,bu:A__){} }Class u2q:m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4096))

    def test_4097(self):
        input = '''Class __{$6S8(d:Boolean ;o,M:Boolean ;l,_:Array [Array [Array [Array [Array [Array [Float ,0x31],047],033],0X6_2],0B1000000],0x31]){Continue ;}Var $_4_:t;}Class V_:C8av{Constructor (){} }Class s:_w{}Class H{Var R_u_n5:V9;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4097))

    def test_4098(self):
        input = '''Class X5__q:Z6{}Class e_4_k8:k_5{Constructor (y:Array [Array [Int ,29],036];_:Array [Boolean ,29];_,_7:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4098))

    def test_4099(self):
        input = '''Class _:Q{Var $_,$d_Y,$_,_E_:m;Constructor (){}Val $M:Array [Float ,47];}Class _{Val $i,$0E,$_:Array [Array [Int ,0X2],59_6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4099))

    def test_4100(self):
        input = '''Class _{}Class n__{Var V:Int ;__(Ve:Array [Boolean ,0x1]){}Val f_1_:String ;Constructor (){} }Class _:g{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4100))

    def test_4101(self):
        input = '''Class ___8:_{}Class _{}Class _{Destructor (){}Val $9:Boolean ;}Class ____:_i{Destructor (){}Var $7:_;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4101))

    def test_4102(self):
        input = '''Class G1:_{Constructor (_:Array [Array [Float ,99],0b111010];_,SH,__:String ){}Val _6qm,$1,$P:Array [Boolean ,3];Val $__:Array [Int ,051];}Class J__2u:M{Destructor (){Continue ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4102))

    def test_4103(self):
        input = '''Class V{$_6(){} }Class _{Constructor (){Var _,C_:Int ;} }Class W2{Val $_h,$0,$2w__yg,$_,$8,$7_,$2:Array [Boolean ,07];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4103))

    def test_4104(self):
        input = '''Class U{Var s163,$3:X;}Class HZ:_{Var $K__,$S:String ;Destructor (){} }Class _{T(){Return ;} }Class _:B{}Class __:_D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4104))

    def test_4105(self):
        input = '''Class _2:dRM_{}Class _2y:__{Constructor (_,__,_e,_,aI:Array [Array [Float ,0b10],07];_7,z,l7O,yJ_5r_,Q,G:_2__;_6:_k1_u_){} }Class __:_f_{}Class H{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4105))

    def test_4106(self):
        input = '''Class T{p_(_jG,_6U:Array [Array [Int ,0XD],071];_:l;__,__,_:Array [Array [Array [Float ,0X4_4_078],0B1],15]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4106))

    def test_4107(self):
        input = '''Class U{Constructor (W,n1,_Gr:_){Break ;}Var _,M,$T_,_:Array [Boolean ,0X6];n(d2,Y,_:_){Break ;Val m,_:_4;} }Class TLX{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4107))

    def test_4108(self):
        input = '''Class B{}Class Iu:_7{Var _:Array [Array [Array [Array [Array [Float ,0B10],0B10],0B1],6],0x55];$2(d:Array [Float ,0127];x:J){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4108))

    def test_4109(self):
        input = '''Class w1__F{}Class R0:X{Constructor (){}Var $6_:Array [Boolean ,061];}Class _{Constructor (){Continue ;}Destructor (){} }Class Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4109))

    def test_4110(self):
        input = '''Class I__:t{$205(e_,E,m:Array [Array [Array [Array [Array [Boolean ,0b10],06],0xA_1B],0x23],0x23]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4110))

    def test_4111(self):
        input = '''Class r:_{Constructor (__3txu4:n__Le;O,_:Boolean ;_,F:Boolean ;W,Oe:Int ){}Constructor (){}Var d4:Array [Boolean ,0b1];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4111))

    def test_4112(self):
        input = '''Class n:d5{Var m:Array [Array [Array [String ,0x10],0b1_1],0b1];}Class ___r:_{Constructor (){}Var _a,_,$M8,$6:Array [Array [String ,0X6D2],2];Var $9:_9_03Fq;Destructor (){}Var K,l:Array [String ,0X6];}Class R1Au{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4112))

    def test_4113(self):
        input = '''Class _{Constructor (){}Destructor (){Val g,B_:Array [String ,4];}Constructor (){}Constructor (){}Destructor (){} }Class _i:p_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4113))

    def test_4114(self):
        input = '''Class y_6:__g{Val $2:String ;}Class _Z:H6b_22{Constructor (){}Var $33Ai,ovU:Array [Array [Boolean ,0xF],54];Var $_DR,$_:Array [Boolean ,0B10_0];Constructor (B:String ;_,__,_,Q:Array [Array [Array [String ,4],54],0b1_1];__4,_,o:String ){}Constructor (M:_k){}Constructor (){}u(_1:_;__M,_D:Array [Array [Array [Boolean ,04_4_6_52_35],0106],54]){} }Class _:K{Var $_:jJ60;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4114))

    def test_4115(self):
        input = '''Class _:_2{Destructor (){}$o(){}Constructor (y:Array [Array [Array [Boolean ,05],6_49],0x62];_,x_:String ;y1,ldd,r4u,JiZ:Float ){} }Class A{}Class _3:r{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4115))

    def test_4116(self):
        input = '''Class _:_7{}Class _{Destructor (){} }Class N9noy2zR:_10{}Class W7{}Class zp__O__{}Class _:N28_q7{$5(){} }Class a:IQq2{}Class T{}Class _:Et{_(NR,j:Array [Float ,033]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4116))

    def test_4117(self):
        input = '''Class __:d{h8(b:Array [Array [Int ,0xA_1],61]){Break ;} }Class _R{}Class ___{_(_6,m_:String ){Var d32:Array [Int ,61];} }Class _9_:F5{Var $4_G0:Array [Float ,0B1111];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4117))

    def test_4118(self):
        input = '''Class _5:M{}Class _{Var $T:N=!--------_::$n();Var __53,_:Array [Array [Array [Array [Boolean ,0B1],0b110001],0136],0b110001];Val _:Array [Array [Array [Array [Array [Int ,0x1C],02],0b11],0b110001],7];}Class h__:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4118))

    def test_4119(self):
        input = '''Class _:__{Constructor (_l7:Array [Int ,0126];L,_,_Pe:Array [Array [Array [String ,8],96],0X59];f_:Float ;_,_:Array [Int ,471];sd,_p_:Boolean ;nM:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4119))

    def test_4120(self):
        input = '''Class j{}Class _tj{m_v(_F2k__:Array [Array [Int ,0B100],0X58];O_,_:__nXg69;D,O:Array [Array [Float ,0b1],0B111110];bu8,_:U;Yd:__3){} }Class _k:B{}Class Wy{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4120))

    def test_4121(self):
        input = '''Class Z_{$G1m94s(c:Array [Array [Array [Array [Int ,8_6],0b100110],07],48];r,_EQJ:Boolean ;_14,_,_:B5_9){} }Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4121))

    def test_4122(self):
        input = '''Class _W1w_{}Class p:p{}Class _:_52eo0{}Class GE{}Class J6{Constructor (V,__3:Array [Array [Array [Array [Float ,01],05_3],0X5],28]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4122))

    def test_4123(self):
        input = '''Class _:X{Val $_,__:Array [Array [Array [Int ,042],0x3_E_8_E],06_1];Val _,$_3:H1;Constructor (_:Array [Float ,042];_,_2O,_a:_;i8,_,Nd,_:Array [Array [Boolean ,0x4A],0x4A];i:Array [Array [Int ,49_49_88_1],042];_6J:Array [String ,0b1000101]){} }Class _:c8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4123))

    def test_4124(self):
        input = '''Class AKU_M_1:v{L(D:Array [Int ,7]){Var _q:__S;{Return ;}Break ;} }Class HO{Val $4:z;D6(_y,j:_zc;Ftq,q,VWP_,_:g8_;M,W_:Array [Array [Array [Array [Int ,11],05],0xF],1_50]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4124))

    def test_4125(self):
        input = '''Class r__s:_{Var $5,N,lr5_,n,$_D:Array [Array [Array [Boolean ,0XB],0XB],0x41];Var j7,$3,V:Array [Array [Boolean ,0B1100],0B1];}Class S4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4125))

    def test_4126(self):
        input = '''Class X{Val s,$_m__,$b,$h_,U6_:Array [Array [Array [Array [Array [Array [Array [Int ,9],64],0X41],0X41],3],0b1001],010];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4126))

    def test_4127(self):
        input = '''Class F65:_7{Constructor (Z_:Boolean ;P_HnT__Y,c,p___4_,_0,_Q_,_,ZT_0:Array [Array [Boolean ,047],0x2F];J,__j7a_d8,_,_,_:Array [Int ,0B1]){}Constructor (XK3G__7,nsV,_1l,_J:Int ;X,B9,__p,_,lhI:__3;il_:Int ){ {} }Var $J0hu_s,$45:_;Val u_5,_:p_1J;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4127))

    def test_4128(self):
        input = '''Class _:_c{$b(v_:Int ;_:String ;x:Array [Boolean ,0B1010100];_,p:Array [Array [Array [Array [Array [Float ,36],91_04],0x27],0136],0B1];lM:Int ;E:Boolean ){Break ;Continue ;} }Class A{}Class n:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4128))

    def test_4129(self):
        input = '''Class _{}Class u:n_{}Class a4{}Class _a__:Y_5{Var ___01:k_;$5(_:Float ;__:Array [Array [String ,0X32],0b1_1_1]){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4129))

    def test_4130(self):
        input = '''Class __:S{Destructor (){}Constructor (RY,Qf,_:Array [Boolean ,71]){}Constructor (I,_G,_,dk,Bfa,_x,_:Float ){} }Class iA:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4130))

    def test_4131(self):
        input = '''Class c:L_7{}Class G:_{}Class c:_{_7(_:__V;_55md:Array [Array [Array [Array [String ,061],0x2],0X64],0X1B_5]){Val __1_5,__,_:Array [Array [Int ,25],02];} }Class _:_g{}Class c:_7K8E{$_3_(_:Array [Boolean ,0b1001110];_IQ,_c2:String ){} }Class g:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4131))

    def test_4132(self):
        input = '''Class _:V{}Class _:_{Destructor (){Break ;}Destructor (){New INw60().r();}Constructor (Z:String ;_:_7;_,_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4132))

    def test_4133(self):
        input = '''Class ___:TRM_{}Class __{}Class W:u{$6(__:Boolean ;j_,e_72T7,U_X:_;A:M;_:Array [Array [Array [Array [Array [Array [Int ,02],06],0b10_1],18],0x14],0xA]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4133))

    def test_4134(self):
        input = '''Class ____:TBzZ_{}Class __{Constructor (xV,_,h_:Array [Array [String ,03],0XD]){} }Class _g:n_L9{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4134))

    def test_4135(self):
        input = '''Class Q:___{}Class C:RR_4m_{Var $_9,$_:Array [Boolean ,17];Val $9:Array [Array [String ,0b111111],0b111111];}Class __:_{}Class _F_:O{Val _20v9__,_3:p;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4135))

    def test_4136(self):
        input = '''Class W_E{Var $_,V,$G_V,$P,F,_,$e,p:Array [Float ,041];}Class _v{$6(_,J7_:u0v_){}Val $_l:Array [Array [Array [Array [Int ,36],0x2A],4],36];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4136))

    def test_4137(self):
        input = '''Class l{Var d8_:Array [String ,5];}Class _{Val $_,$NTm9d_,UD_,_,$5,$4,$7l8:Array [Float ,0X61];}Class _{}Class t{Constructor (_W,_:Boolean ;_,T,_,_5,_N,y,P_,_VN_,D8,_:Float ;h,_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4137))

    def test_4138(self):
        input = '''Class _{}Class b:_{}Class N:_c{Constructor (J,Si0_,X,_,W,__:zQ_;_:Float ;_4_,k0,_0:Array [Array [Int ,0B1_0],0x2B];_4,__62:Array [Array [String ,021],4_6];_aQ,_:Gf_){} }Class __:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4138))

    def test_4139(self):
        input = '''Class vI_7{}Class V3A_{$A(_6_f,o__:Array [Array [Array [Float ,0B1],0B1_00_0],07_2_12];_,J2k:Array [Int ,0X42];__:String ){}Val _95,__:P0997;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4139))

    def test_4140(self):
        input = '''Class _:__hz{}Class __73:QAh{Val __:Array [Array [Float ,52],52];Val _2h:Array [Array [Boolean ,6],0B110001];Val $ki_,_Ii8Q:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4140))

    def test_4141(self):
        input = '''Class _:__{$6(TL,_3_9:Boolean ;___8:Array [Array [Array [String ,0x32],0XD],041];lg_,p__3UI:Array [Array [String ,2],0b1];_,_s,_,_U_,V_,ob__:J_e){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4141))

    def test_4142(self):
        input = '''Class Ez960:Z{Val $7:Float ;$_bf_32_(){}Var $_J_:Array [Array [Array [Array [Array [Array [Array [Float ,89],0B1010111],0b1],0x76_5_4],89],0X5],0xF_E_7];}Class Fr8{}Class _1_:h{}Class X:v{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4142))

    def test_4143(self):
        input = '''Class vZuA:_{Constructor (){}Constructor (_,Z94,_,d,_,q1,_:Array [Array [Array [Array [Array [String ,0xF],0b1001000],04],03],0123];_,_:q;_7,_6t_:Array [String ,04]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4143))

    def test_4144(self):
        input = '''Class Fg_:Q8___6_{}Class _5e{Var $u3_9,_,$a_,J:Array [Array [Boolean ,0B1001],0130];}Class zN:MQ{}Class _:p_U{}Class _6:G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4144))

    def test_4145(self):
        input = '''Class Y5P0l:_6g_{_R(__3,_,_1p:Boolean ;_3:Array [Array [Array [Int ,72],07],0XB_75_937EAF]){Val Q,O,Cj,_T9__4,g,_a,N_:_3_;Continue ;Continue ;} }Class J8P07016_F:_3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4145))

    def test_4146(self):
        input = '''Class _63{Val v,$GD:Array [Array [Array [Boolean ,56],0553],0x2F];$_76(K:Float ;V9C2:Array [Array [Array [Array [Array [Array [Int ,0B1],0B1],0B1],0b10011],0B11111],0B11111];__,_,Y7_:Array [Array [String ,0B1],0X64];s_2:Array [Array [String ,0X64],56];_:__){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4146))

    def test_4147(self):
        input = '''Class s_{}Class _7:j_{}Class w{Var $_,_54:Array [Boolean ,83];}Class _{}Class u__:v99_M_A_{}Class _58:x{}Class f:f{}Class __a_L:_{}Class _2_rq19n_0le79:P49_{}Class E{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4147))

    def test_4148(self):
        input = '''Class f7:_{Val $0:String ;}Class __C:F38{Constructor (H016:Array [Float ,0x8];c4:Array [Array [Array [Int ,5_98_3],0x5_E],0130]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4148))

    def test_4149(self):
        input = '''Class _:RS{}Class _i:q{Destructor (){ {} }}Class _80{}Class _:b{}Class _ap6:R{Constructor (nm,s7,_r_4O,_,_,_2_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4149))

    def test_4150(self):
        input = '''Class _c_:_{}Class c:__{}Class __{}Class r{Destructor (){}Val $_4:String ;Var a,_kT7_:_;Val __,g_:Array [Boolean ,0x6];$A0(){}Constructor (){}_(_1_,___:Int ;__y,_,d,H_:_;lu:Array [Int ,0X39];g,_O,o,__u,_:Array [String ,39];pd23_9,J,_,_S:_;M:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4150))

    def test_4151(self):
        input = '''Class _L5M:_{V(_4:Array [Array [Array [Array [Array [Float ,0x52],6],7],010],0xC];_7,K:Int ;_1_,_sV:Float ;_6,__,___e,_69,e,O_:Boolean ;N:Array [Int ,0XD];Ga981,_7L,_:_;RN,__:Array [Int ,0xB_4C];J:Int ){}Val $_6,_,_rN:Array [Array [String ,010],0X5D];}Class RgJS2_{}Class _wp6:EM{Var ___,$_:Float ;Val _4:Array [Array [Int ,75],75];}Class m__L{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4151))

    def test_4152(self):
        input = '''Class P3{}Class qx_W{Val hl:Array [String ,0x5];Val _:Array [Array [Float ,052],10];Var E_8,$I:Array [String ,10];Val u1:_KX__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4152))

    def test_4153(self):
        input = '''Class w5:_Q{Constructor (__7,_:m;_O_GV9,m_x1Hv,dh,f:Array [Int ,034];L,O,e1X60,s:Array [Float ,89]){Continue ;}Val $5:_v7;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4153))

    def test_4154(self):
        input = '''Class _:_B4_M5{Var _oA:String ;Var $_o:Array [Array [Array [Array [Float ,52],4_2_95],0X12],0B111011];}Class Hx:_{Ir(_7:Int ;__:Boolean ){}Var _,$ce:Array [Float ,046];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4154))

    def test_4155(self):
        input = '''Class ___j:_x_5_9_{}Class _3:_4__i_{$7(t:Array [Array [Array [Array [Boolean ,036],0b101001],14],0X2];d,_:Array [Int ,0B11010]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4155))

    def test_4156(self):
        input = '''Class MZz:__2{Constructor (_m_:String ;_OL_9M,_,_F_:String ;Ju4:Array [Int ,02];E,V9,nS_:Float ){} }Class YW:z{_0a(){}$__(){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4156))

    def test_4157(self):
        input = '''Class _:_{Var _,$43_:Array [String ,0b101100];}Class _{Constructor (_0H,_k,N:Array [Array [Array [Float ,0x4D],02],0b1_1];Uk,_,H,j,lN1,_,_:_7_){}Var $_d030_:Array [Array [Array [Int ,5],0b101100],06];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4157))

    def test_4158(self):
        input = '''Class l:H7{Val _,k,$_,$1:Int ;Constructor (E_4_,_,_62:String ;_,q:Array [Array [Boolean ,0x3],0B11001];K:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4158))

    def test_4159(self):
        input = '''Class W:_f{}Class P____{Val n:Array [Array [Float ,0xC],0xC];Destructor (){Var uT,_:Array [Array [Float ,0B1_00_0],0xC0];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4159))

    def test_4160(self):
        input = '''Class v:_V5{Constructor (N,_56o4:Boolean ){}Val _:Boolean ;$8(g,i,o2,W7:Array [Boolean ,0B110101];n93_:Int ;f0A,L0:Boolean ;R:String ;P1_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4160))

    def test_4161(self):
        input = '''Class E{}Class a{Constructor (){Var o,_k,l_,_:_sF6_UT;}Destructor (){Var _gX:Float ;}_(L:_r_){} }Class _0:K{}Class hE:K{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4161))

    def test_4162(self):
        input = '''Class u:_{}Class _{Var _,_9_:f_;}Class _1{}Class ___{Var y:Array [String ,0X2A];Constructor (_5:_;_M:_L){}Constructor (_:Array [Array [String ,0B1],0B1_10]){} }Class n:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4162))

    def test_4163(self):
        input = '''Class l:i_f1{Constructor (m:Array [Array [Array [Boolean ,2_0_4],0X61],016];Z:Int ;sN:Array [Float ,0B10110]){Continue ;} }Class _u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4163))

    def test_4164(self):
        input = '''Class _9{}Class M7_{Var $_:Boolean ;}Class DH53:c{}Class P:t{Constructor (){Val p,Q,y,c,_U_,__:FBb__;}Constructor (_:_){} }Class z:_z_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4164))

    def test_4165(self):
        input = '''Class _{$_8(V1,C,_:Float ;___:Array [Array [String ,0B10000],0b110]){Break ;{Continue ;} }Constructor (____Q_,_8,o5:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4165))

    def test_4166(self):
        input = '''Class v_:__{}Class _os:__b_{Var _,$F,__:Array [Array [Array [Array [Array [Array [Int ,4_1_4],0x52],82_6],0X58],90],0X60];Val $N,_,$4:Array [String ,0b1001110];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4166))

    def test_4167(self):
        input = '''Class _{}Class l{Var $Q_,$11:_;}Class T{Var _,_:Array [Array [Float ,025],057];Var $i4_,Y:Array [Int ,63];}Class f{Var z:Array [Array [String ,63],0X4D];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4167))

    def test_4168(self):
        input = '''Class M_:Xh{_(x3:Array [Array [String ,0141],03];_k6F__,x,I,_,E,Y,s_n:String ;_,OD:Float ;_,_S:Array [Array [Array [String ,0141],5],0x51];__,_:Int ){Continue ;Val _,_,_:_;}Val $_:Int ;}Class k1:_2_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4168))

    def test_4169(self):
        input = '''Class e_Z{Constructor (__,__q_7:Int ;i_3_G,__b390,__z_6,o:Ecq;myz,_2_:Boolean ;O_,_:i_;S:Array [Array [Boolean ,0102],0102]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4169))

    def test_4170(self):
        input = '''Class A:_{Destructor (){}Val $D,$91,$8,$_z0:Array [Array [Array [Array [Array [String ,0B10],0b1001001],0x3_E],0B10],0B110100];Val R_,c,H,_:OS;Val k,_j,$Z:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4170))

    def test_4171(self):
        input = '''Class _:_P{Destructor (){}$7s13(){}Constructor (){}Val $35,_,$z,I609:Boolean ;}Class Mb_{Var mH0,C6:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4171))

    def test_4172(self):
        input = '''Class _l2_gl9H:_{Constructor (_,_:H;__0_:F8){New g_5a().__._c2();Break ;}Val _7:Float ;Destructor (){} }Class _{Val $_:P_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4172))

    def test_4173(self):
        input = '''Class Z_{Constructor (H:Array [Boolean ,0X64];W,_:Array [Array [Array [Array [Array [Int ,16],0B1],0206],0x64],16]){Return ;} }Class AI5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4173))

    def test_4174(self):
        input = '''Class E8:jm_{}Class _:_{Val $7:B;Val $__1M,$1,$7,$1:Array [String ,0xF];}Class j{Val _8_,C:_;Var __:String ;}Class y{Constructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4174))

    def test_4175(self):
        input = '''Class _:B_{}Class s6:l_{Constructor (gW,C,u:_V_6){} }Class p:_{Constructor (M_X,N:U;ng5,__20D5_x:O;bf,Bt__5:Boolean ;_,_,N,eG:Array [Array [Array [String ,0X50],8_9],63];h,K,_,_25s8,_v,D,p,V:Array [Float ,0X50]){Break ;} }Class l{Val F_:Array [Array [Float ,0x33],0B110110];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4175))

    def test_4176(self):
        input = '''Class __{}Class _:_{}Class i_____:i{}Class I:_0n___{Constructor (_,_:JZ;__,g,_5:Int ;_:Int ){}Var $9,$_,$_9__:Float ;Val $_7:sf_;Val $_,$_p:Array [String ,0X3B];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4176))

    def test_4177(self):
        input = '''Class _{Destructor (){} }Class a:_i{Constructor (_,_,w,_,k8_V:Array [Int ,016];l9:Array [Array [String ,0xB],0B1001111]){__::$vq.G._();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4177))

    def test_4178(self):
        input = '''Class H5_{Val $H:Array [Array [Array [Boolean ,0X5D],48],5_8];Var $_,$_:Y;Var $It_,$5X:Float ;Var $__,P:Int ;Val __7gR__:_06_18o1;}Class S_8{_(_,_,_:Array [String ,0b100]){}Destructor (){} }Class _Gq:d{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4178))

    def test_4179(self):
        input = '''Class c:D{_B_(_N,_:Array [Array [Array [Array [Int ,1],0X4C],1],0xAB0]){} }Class _{}Class u:_{Destructor (){}Var y:Array [Array [String ,1],0121];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4179))

    def test_4180(self):
        input = '''Class Z_:Nq{}Class B{}Class KK7{}Class v{Constructor (){}Constructor (O,J_:Array [Array [Boolean ,01],0x61];_:Array [Boolean ,02_21]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4180))

    def test_4181(self):
        input = '''Class _d:U_8{}Class M_q1_:J__{Constructor (_8,e,L7,_L2,_,_:Array [String ,0X4F];_:Array [Array [Array [Array [Array [Boolean ,0142],021_65_4_3_0],7],0x25],37]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4181))

    def test_4182(self):
        input = '''Class b00092e{}Class __:__JDX{}Class i_1:e{Constructor (U:Array [Array [Array [Float ,0B1010111],0X8],63];_,nT:Boolean ){} }Class _yH{}Class R_3{b72(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4182))

    def test_4183(self):
        input = '''Class P:_{C(_,_,U,k:Array [Float ,0b1_00_111];O:i;_,Z:Array [Array [Boolean ,0XF],03_01_31]){}$3__(t122l,l:Array [Array [Boolean ,07],0b1001]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4183))

    def test_4184(self):
        input = '''Class _:j{Destructor (){} }Class _:j0{$8(__:q;_00:Array [Array [Boolean ,03],0XA_D_5_90_08];j,__:_t;_:Array [Array [Boolean ,0x19],0x19]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4184))

    def test_4185(self):
        input = '''Class o_:g{Val $70,p:String ;Var F_u_,$s5,p,$_t:_57b;Val $m,$t:Array [Int ,6];}Class _L:mf40{Var _,N:Array [Array [Boolean ,0X1],0b1_1];Var $9cc:Array [Array [Array [Array [Array [Array [Array [String ,0B111111],0B1],01],014],0b1_00],07],0X7];Constructor (_,Y:p){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4185))

    def test_4186(self):
        input = '''Class _{Destructor (){_::$p();Var _:Array [Array [Array [Array [Array [String ,0X40],055],0XB2],0b100],0XE_0D_5_8_4_5];{} }Constructor (p_,_,_g0980,_8v7:Float ;g22,_:_0){Val H5,w:_;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4186))

    def test_4187(self):
        input = '''Class V:_4{Constructor (ny:Array [Boolean ,0107];_:String ){}$s(x,_,_,_:_78_;UX,p,_,_:Array [Float ,0b111000]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4187))

    def test_4188(self):
        input = '''Class b:__9s{Constructor (_,_,P:Array [Boolean ,0B1];_15__:Array [Boolean ,0b1_1];Ml:_){j::$14q();}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4188))

    def test_4189(self):
        input = '''Class D{Var w,$8Y9D:__;}Class _{}Class __2{Val $_,F_,n_5689,K:Array [Array [Float ,8],98];Val $E,$R:_;Val $1,C,$_198:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4189))

    def test_4190(self):
        input = '''Class _{}Class u5:_{}Class __r{Val $N,l__,$j1,_p56,_:Boolean ;}Class w{Constructor (L_,X:Int ;Z,Jl6,d:Array [Boolean ,0b1001011]){}Val $7,J,$go2___:__0;}Class M:_{}Class Y__4M{}Class X1_im{}Class H:d{}Class _E_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4190))

    def test_4191(self):
        input = '''Class oQ{}Class __:_{Destructor (){}Constructor (_,_5A,_8:Array [String ,0b11001]){} }Class pU:_{Constructor (){c::$_o_();Continue ;{} }e(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4191))

    def test_4192(self):
        input = '''Class w_{}Class _:g{Constructor (_,v_,nP5:Array [Int ,065];_:Array [Array [Int ,40],40];_,q4,_:String ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4192))

    def test_4193(self):
        input = '''Class Z{}Class _{}Class _:R_{Var __,$s1_c_,$90iI,$_2,$g8,__,$_:Array [Int ,0B1000110];}Class j:S{Constructor (_9h340__,__,V,PA,_C_,_9k:Array [Float ,05_7]){} }Class Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4193))

    def test_4194(self):
        input = '''Class qy:Y{Val h,_A7f:Array [Array [Array [Int ,0X1],64],0121];$_(__,r,_c:Array [Float ,04_00];_,C40_:i){} }Class c2l_2{Var $I6_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4194))

    def test_4195(self):
        input = '''Class y:e0{}Class v_:i{}Class _w{}Class x4:_{Constructor (l5__:_;_,_,ZB,M:_;_0,R_:Array [Array [Array [Boolean ,0b1011111],0xB],0x3]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4195))

    def test_4196(self):
        input = '''Class rw5S_:_89__{Val $yU:_fA;Destructor (){} }Class _{Val D40,J:Array [Int ,0B1_1];Var _:Array [String ,6];}Class A_{Val $g5:Int ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4196))

    def test_4197(self):
        input = '''Class C:X{Var y_4_1n_:Boolean ;Constructor (){}Var J,u_:Float ;}Class f{Constructor (s,__,_:_){}Val $6___:_2_;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4197))

    def test_4198(self):
        input = '''Class B{Constructor (e_:Int ;_50:Float ;_6,_4:Array [Array [Int ,0X2_7],055];D,__,I,_3,_6,__s8787:_;Z00y_8:J_;t,_,_,_:Array [Float ,07_2_66_07];_:h__tD_;b4,P_:Array [Array [Boolean ,0X19],1]){}Constructor (){}Constructor (xS_:Array [Array [Float ,03_400_2_1],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4198))

    def test_4199(self):
        input = '''Class ___9{Var $5,n:Array [Array [Array [String ,69],0b101],042];}Class _h:F{Var $J:Array [Array [Boolean ,69],0X53];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4199))

    def test_4200(self):
        input = '''Class k__:_{}Class __:I{$_Ir(__R:J){Return ;}Var $7__:Array [Int ,0X1E];Val $5N4:_;Var $d1,n:Array [Boolean ,0xD];}Class _Fj_B_:_9{}Class _4_mU_{}Class __:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4200))

    def test_4201(self):
        input = '''Class e_{_Dk(H,LoZi:Array [Int ,0B1];m__:Array [Array [Boolean ,0XD],024]){}$9(){}Var $hn:A2;$28(d_3,J__:_ok_8;o,__,_,i_26,_,_:_){}g1(i1,_:_;_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4201))

    def test_4202(self):
        input = '''Class d:_9{Var $W,$4:Array [Boolean ,04_2];Y(){}Val $9x,f:_;Var $G:Array [Array [Array [Boolean ,6_1],0x2C],24];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4202))

    def test_4203(self):
        input = '''Class w{F(_,_q,_T,_,U9h_,_:Array [Array [Int ,80],30];___,_9,S2,i,_I,O22,c,_y:Array [Array [String ,014],06_50];f:Int ;__,W,_:Boolean ){} }Class _{z6_(_u__s5849,__:Boolean ;W:_;_,Tr2,wq_FFZ:String ;_,_I_,g40d,_01m_,p,I:_){} }Class c8_:__s_N_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4203))

    def test_4204(self):
        input = '''Class Dm{}Class _1_{Var _0H3_:Array [Array [Array [Array [Int ,33],3],0XA_66],037_6];Var $1,$u_,$U,R,$1:s_;}Class U_Z_:f{Constructor (_,y:Array [String ,0b11100];_8qX,_,p_:Array [Array [Float ,0x54],0x3];_,_,hT3JCTJ:_P){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4204))

    def test_4205(self):
        input = '''Class _{Val $8,$__,Y5__,_,_,$____8,$g:C;}Class pp{Var $_,$Kf,_2S_:i;}Class _{R(){Val _3:Array [Array [Array [Array [Boolean ,031],0X62],0b1110],1];{}Et5::$e();Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4205))

    def test_4206(self):
        input = '''Class _:s{Destructor (){}Var $72:Array [Array [Array [Boolean ,0B10_0],0X2_F],0X43_5];Destructor (){Break ;Break ;Break ;}Var _3:Array [Array [Array [Float ,78],207],0xD_6];}Class uZ:B787{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4206))

    def test_4207(self):
        input = '''Class _:_4___{Var y_:_19_;Constructor (Z0Q:Array [Array [Boolean ,0X8_8F],0X7];f,c,_:__){}Constructor (){} }Class __B{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4207))

    def test_4208(self):
        input = '''Class P:_{__5_(){}Destructor (){Val _:Array [String ,0B1000111];}$7c_A(w,W:_;j8h,_:Array [Array [String ,0b1011111],053];_:_;_4__,M:Array [Array [Array [String ,04],0X4],0x3D]){}Constructor (){}Val $g:String ;Val _,$4,$9,_,M__,$w:F;}Class W1R_0{}Class O4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4208))

    def test_4209(self):
        input = '''Class R_:bp_4{_(_:T_O;_4:Int ;_B_t_:String ;_:Float ;_p__FP__q:_;__:Boolean ;__1s:Boolean ;a:Array [String ,7];_:Int ;_:Array [Float ,9];__,b:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4209))

    def test_4210(self):
        input = '''Class E{Constructor (_:String ){}Constructor (_:Array [Array [Array [String ,0x2],0XD],02]){Break ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4210))

    def test_4211(self):
        input = '''Class eCX:Xe45_{}Class _:_1{Var O:_;Constructor (){}Constructor (r:Float ){Z::$L__7();Return !--True !=!!--W_6U::$9lj()*!O::$_j_().d2_.P;{} }Constructor (O:String ;g896:Array [Float ,02_5_76]){ {} }}Class d{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4211))

    def test_4212(self):
        input = '''Class __:A{Constructor (j4:Int ;_,v,_:Array [Array [Array [Array [Array [Array [Array [Float ,0X36],0B1],023],0b100_11_0],0X6],0b100000],67];_,dz,FF95_,nh2_7,__04,M,_0:_8a_k514;J,_,_,G:Array [Float ,0b100000];_,__:String ;_35yr3,C:___){z_0L_::$_();Continue ;J::$_();} }Class _9:z{Var $_z:Array [Int ,0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4212))

    def test_4213(self):
        input = '''Class K_:J{}Class Lq{Constructor (__,P,L,_:Int ){Break ;}Constructor (_E__:String ;u9:Boolean ){} }Class Y__{}Class hq7k_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4213))

    def test_4214(self):
        input = '''Class x:_h{Constructor (_:String ;y,b:Array [Array [Array [Array [Array [String ,06_1_302],0121],0x63],0XB_6],030_7]){Continue ;} }Class Bv:s0_f{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4214))

    def test_4215(self):
        input = '''Class _W_:L{f(c63,s47,M:Array [Array [Boolean ,61],0x7_0];_,m2,___:_;_7:LO;_9lkF,n:__){}Var $L_M,$_:Array [Boolean ,040];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4215))

    def test_4216(self):
        input = '''Class _:_{Var y,$_pLr:Array [Array [Array [Array [Array [Array [Array [String ,0x70],041],054_71],0XBF],03_3376],06],12];_H(g05:Float ;_:_3){}Constructor (){}Val $_,$_:k;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4216))

    def test_4217(self):
        input = '''Class __{Val $Wc3Z:Array [Array [Array [Array [Array [Float ,100],07_7_33],0XD_B_A_9_8],0b1011000],0x59];}Class Z_:rx{gJ(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4217))

    def test_4218(self):
        input = '''Class XU:_X7{}Class _:_{Val _78:String ;Var $_,Fd__:_;}Class iy:hV{}Class z{Val g:Array [Array [Array [String ,3],84],075_05_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4218))

    def test_4219(self):
        input = '''Class ___ye__00:E_3{}Class I_{}Class _1___{Var $a,$d1:Array [String ,0x2D];}Class _d:_8{}Class x{}Class _:av{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4219))

    def test_4220(self):
        input = '''Class W47:Ku5{}Class _{}Class _s:_{}Class _:i8_299{Var $r_z_,$4901:Array [Array [Float ,0b111001],0144];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4220))

    def test_4221(self):
        input = '''Class K:_{}Class _V:A_D1{}Class l_:P{}Class x9{Var X,$N_,Xs,$3:String ;Constructor (_:String ;_74ZF8:Ov;H,G5m:_;t,__k:Boolean ;I:Array [Array [Boolean ,0127],60]){}T(){}Val $_9g5,_2:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4221))

    def test_4222(self):
        input = '''Class _2Y79_{Constructor (_7_,_:r3;_5,q6:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0xA_21],0b1],51],0b1011110],07_1],9],0X6],02_3],0x10];_:Float ){Return ;} }Class __{}Class _:iLOP{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4222))

    def test_4223(self):
        input = '''Class zP:_{Val N:Array [Array [Array [Int ,0X3D],0XBCAC33],0XF];}Class w:j{$EU(o:Boolean ){Break ;} }Class _{Var $I_nN,$_C:Array [Array [String ,94],0x3A];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4223))

    def test_4224(self):
        input = '''Class _d_6:_{Constructor (_Ev:_2;_,C_g_:Array [Array [Array [Array [Float ,59],0B1],07127],0XC]){} }Class n:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4224))

    def test_4225(self):
        input = '''Class B:_{Constructor (_:Array [Boolean ,10];J:Array [Array [Array [Array [Array [Array [Boolean ,10],9],5],0b1],06],10];_,_,H,_:Boolean ){} }Class __M{$1_6(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4225))

    def test_4226(self):
        input = '''Class z___:S{}Class _{}Class _C{_63(N5,_1W,y9_,_,L:G1;_,S_,N,W,E,_:_;__,_7:Boolean ){}$0M_8__(C:P4;_,_Y:Int ){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4226))

    def test_4227(self):
        input = '''Class d{}Class e:d__3{}Class _k:e___{}Class A:_s{Constructor (_wr,I:_I;_d:Array [Array [Array [Float ,56],0b11],0X5B]){} }Class _09_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4227))

    def test_4228(self):
        input = '''Class j8o:p5{Var _z,b:_3;_(_:Array [Array [Array [Array [Array [Boolean ,4],17],0x29],07],7_8];a5:i61s){Break ;}Var $_:Array [String ,0B111101];Destructor (){} }Class r:T_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4228))

    def test_4229(self):
        input = '''Class Q5{}Class _b{Constructor (W,x_:X;_:Array [Array [Array [Boolean ,47],0b1010],2_7]){Return ;Return ;}Constructor (_73,_N9_:Float ;_,__:Array [Array [Array [Array [Int ,47],0b1010],5],47];B:_){}Val _,_,$1_,$lW:String ;}Class x:_4{}Class L:bOs{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4229))

    def test_4230(self):
        input = '''Class _:_{Var $F:Array [Array [Array [Array [Array [Array [String ,47],0X1B],0X1B],47],0b11],0XD4_D_8];}Class bC{}Class o_:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4230))

    def test_4231(self):
        input = '''Class _{Constructor (h_3,_:Boolean ;f_8_:U0;__qY_l:Array [Array [Array [Array [Float ,0B1_0],8],71],0B1];q:__5;_i__l__,__W:__){Val _9,_8,F7:Array [Array [Array [Array [Array [Array [String ,0X64],0X64],0X64],07],0b110000],0b1];}_L(v6:Boolean ;_:Array [Boolean ,3_4_74]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4231))

    def test_4232(self):
        input = '''Class Q{Constructor (r,_7:String ){}Val $5A:Array [Array [Array [Array [Float ,0B100111],03],0x10],0xD1_1];Var D_:a;Var W_W:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4232))

    def test_4233(self):
        input = '''Class _5:_6{Constructor (Q1V:Array [Array [String ,0XA],02]){I_::$Y().t.Y3B._0()._1().V1_.T.__();}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4233))

    def test_4234(self):
        input = '''Class vidt8m{Constructor (z:__){} }Class _57_:D{$o(__3:String ;Y2:String ;_:Array [String ,0104];j:r;x9:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4234))

    def test_4235(self):
        input = '''Class c:s{Val $9:Array [Array [Array [Int ,3_66],0B111001],0XC8];}Class P1:_7__5rQ_{$nI1(K,X4U7:Array [String ,0x45];_,aw_t:V____;_,_,P0,_,__e:Array [Float ,83]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4235))

    def test_4236(self):
        input = '''Class _{Var $598,J8,h:Array [Array [Boolean ,19],0X5_AC];Val $6o:_;Destructor (){}Val _,C,$_,_1,_2_7_77,$KLT_J,_:Array [Boolean ,0x14];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4236))

    def test_4237(self):
        input = '''Class i{Destructor (){Break ;}l(_,_:o3){}$D(__,_:Float ;S:Array [Array [Array [Float ,074],0B1],3];kx:_A;_:Array [String ,011]){} }Class _T:n4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4237))

    def test_4238(self):
        input = '''Class _8c{Var $_,$_:Float ;V(g01_s_5:Array [Array [Array [Array [Array [String ,0X2A],031],0X2_7],01],031]){}Constructor (D:_G4){Continue ;}Var _5:Array [Array [Array [Int ,84],84],0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4238))

    def test_4239(self):
        input = '''Class _:k9{$_(p,_,___,U,N__358_z,_,_:Array [String ,0x3D];_,__,__j7:Array [Int ,0B1];P_7cs,___s__1bs3,Y,L_,cP:Float ;f6J_v,__,_,_4,_:String ){}Constructor (){g__9::$D();} }Class j:Q{}Class __K_t:n{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4239))

    def test_4240(self):
        input = '''Class o7:B_{Val _0,$__:Array [Array [Int ,0132],0B1000110];Var H4_8,$_:Array [Array [Array [String ,01],0B1000110],0B1000110];Constructor (){}Constructor (__5_:_){}Destructor (){Val _0G:e_hp7_0;}Var $54:Array [Array [Array [Float ,0B1000110],052],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4240))

    def test_4241(self):
        input = '''Class Q__3:_{}Class _L__{}Class Z{Var $_,$__0,$NG,$qB,_:Array [Float ,02263_5];Constructor (s_,ew:String ;_b0L_K:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4241))

    def test_4242(self):
        input = '''Class BK:K{}Class _Nv{$_(Z:Int ;N9:_6;v,G:Array [String ,033];_j_,rp,_4_:q){} }Class __RQ_K__:_{Constructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4242))

    def test_4243(self):
        input = '''Class d_{}Class __:_{}Class o20:D{Destructor (){}Constructor (){}Var Z,$_8_,_2,H_7_:Array [Array [Float ,0x1B],066];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4243))

    def test_4244(self):
        input = '''Class ___K4:k84_6D{Val $__,$_,_:Array [Array [Array [Float ,0x15_D],0b10000],0X5C];$O(_9,_,ns1,c8,Z,_:Int ){}Destructor (){}Val $F0zB,b,$_,$_w:Array [Array [Float ,0131],044];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4244))

    def test_4245(self):
        input = '''Class s:u{Destructor (){}Destructor (){} }Class _:G{}Class ZZ:__5{Constructor (__,_:Array [Float ,0X7_99_9E_9]){} }Class j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4245))

    def test_4246(self):
        input = '''Class _5u{Val $_0:H;}Class H{}Class d:R7{Var $8:Array [Boolean ,19];}Class c:_{Destructor (){Continue ;}$__Yl_8(){Return ;} }Class W1_6i:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4246))

    def test_4247(self):
        input = '''Class _I5a:I_{}Class __{Constructor (){Val l__68:Array [Array [Array [Array [Float ,63],0b1],0xA_95_D],0X74];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4247))

    def test_4248(self):
        input = '''Class _2_:_{}Class _{}Class C9_{Var $z77:Array [String ,0B11010];$o(){J::$u2_().f();} }Class L{}Class _8{Val $86:_;Val _:X9R2;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4248))

    def test_4249(self):
        input = '''Class _{}Class __:_9{Destructor (){Break ;}$_(jT:Array [String ,0b100]){}Var $i0,$4_9:String ;}Class _{}Class J_:_{Constructor (){Continue ;Val _S__78,_y,v8,Gs:PR;}Destructor (){ {}{}Val O____,___z,T:Array [Array [Array [Array [Int ,0b1010101],0B1010010],43],5];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4249))

    def test_4250(self):
        input = '''Class J2:A{Constructor (L:n;_:Array [Array [Array [Array [Array [String ,0b11],057_1],0b1_0],0X41],79]){}$3_(_G,_:Boolean ){} }Class _:F__{Val $4,c5:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4250))

    def test_4251(self):
        input = '''Class RiIF3:_9{Constructor (__O_,y:Boolean ){}Destructor (){Break ;} }Class _{Destructor (){Var _,iZ1:Boolean ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4251))

    def test_4252(self):
        input = '''Class _:_0{Constructor (_:String ){}Constructor (_,l,_97V:Array [Array [Boolean ,0XB],0X38];O,__vH:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4252))

    def test_4253(self):
        input = '''Class __{Constructor (_:_9n){}Var _,_,i_2,$0:_;Val $S:__;Constructor (){Continue ;}a67674(X_1X,_,_,_V8,_Am,__:Boolean ;E6p:Array [String ,04]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4253))

    def test_4254(self):
        input = '''Class NA:PU6{Val __6,$_8Q91,$_1,$_:String ;}Class D{Constructor (_:Array [Array [Int ,023],0b111000]){} }Class ___IC:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4254))

    def test_4255(self):
        input = '''Class _{}Class __9:_{Constructor (){Val d:Array [Float ,0x8];}Destructor (){}Constructor (){}Destructor (){}Var $693:Array [String ,6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4255))

    def test_4256(self):
        input = '''Class Ks_:_7{__(Sj4,M3:String ;_2_6,_,_:Array [Int ,0X6]){} }Class I:_z{}Class AB:On4q{}Class m:R{Var S,$__:M;}Class jv{}Class w{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4256))

    def test_4257(self):
        input = '''Class _6H5____1:p_aWi1{}Class _:C8{Constructor (n_a,_6_Qu,e:_;S,_1G,_:Array [Array [String ,0b1011010],0b1]){} }Class Q2_h:B{Var $_:o_C_y;Constructor (){Var x:Array [Int ,0x5];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4257))

    def test_4258(self):
        input = '''Class _:A{Constructor (_0J:Int ;w,D_l76,q6_9_8_IY_D:Array [Int ,0B1_01];Z,_:Float ;A:Array [Array [String ,04],03]){Continue ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4258))

    def test_4259(self):
        input = '''Class _o{X(_89,_:Array [Array [Boolean ,0b1],0B1010010];y0,X_G:String ;_:Array [Array [Float ,0B1010010],0124]){Return ;}Constructor (_Q:Array [Int ,0124];n_S,__:Array [Boolean ,031]){}Var e_9,_:Array [Array [Boolean ,0b10101],23];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4259))

    def test_4260(self):
        input = '''Class __{Var $3,Q:Array [Array [Array [Float ,1_60_20],014],4];Constructor (p570_:Float ;T,F,u84,____2e,_8,L,_8:Array [Boolean ,014]){} }Class _o:n06{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4260))

    def test_4261(self):
        input = '''Class y:_03{Val yS:_;}Class N{Destructor (){ {Var __,g9f,JE3:Array [Array [Array [Array [Float ,623],0B1_0],0x5],0x53];} }}Class _{}Class _{}Class __1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4261))

    def test_4262(self):
        input = '''Class L_:W7{Val $j:Array [Array [Array [String ,0b110100],0B11001],0x12B];}Class p{$_(_:Array [Array [String ,0x73],0X1B];A_,k5_:Array [Int ,0b110100]){Continue ;_::$6_();Break ;}t(_:Boolean ;_w_:String ;__:String ;O,_9:g;__:String ;TP:g;v_,t:Array [Array [Array [Array [Array [Array [Array [Boolean ,5],0B11001],05],0B11],0xD],31],0X1B];__:Array [Int ,0B10_1_11]){}Val $_l9,X_2:Float ;}Class _:_{}Class _:_{Destructor (){}Constructor (){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4262))

    def test_4263(self):
        input = '''Class a{Destructor (){} }Class v{Val $77_,$w_r_6d5,$__,$8,Y,$C8p,_,$82tb:Array [String ,49];}Class _6U:b{Constructor (){}Val _6,$n_:__4;$P1(){If (Self .H0){}Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4263))

    def test_4264(self):
        input = '''Class w6{}Class _1__:Y_{Val c:_;Destructor (){}Constructor (_P:Boolean ;t,I4U7B,_04_:_D;_,a,v__,_e8_:Float ;_B_Y:Float ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4264))

    def test_4265(self):
        input = '''Class _:_3l{}Class _ks_{}Class _3{Val $Z8:Array [Array [Array [Array [Array [Array [Boolean ,0110],0X1_1],0x5],0b1010_0_101_1],0x49],0X1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4265))

    def test_4266(self):
        input = '''Class B{Val $S0:Boolean ;Val $V,$Q,U:Boolean ;Var I_,$S:Array [Array [Array [Array [Array [Array [String ,0B1_1],0b1_0],0b1_00],82],0x5A],82];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4266))

    def test_4267(self):
        input = '''Class _{Constructor (__:_Y){} }Class GU{Val $0:String ;__2(a8r4g__,__,O,_:Float ){}Constructor (){} }Class _K__{Val _:Array [Array [Boolean ,057],0x8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4267))

    def test_4268(self):
        input = '''Class _2:__{Constructor (_,_,_,_:P20A;_:String ;_3,_,k,uS,_2__:Array [Array [Array [Array [Boolean ,8],0B1],0b101_0],38_6];R,_5,_3U,_:String ;HBA,Xu,y1,__,gMy5:_;_0,h3:_){} }Class g{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4268))

    def test_4269(self):
        input = '''Class _6_{Destructor (){}Constructor (__:C;__j4,__l:Array [Array [Array [Array [Boolean ,0x2],0B100100],0b111111],0b111111]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4269))

    def test_4270(self):
        input = '''Class I{}Class _gz9{Constructor (__R5b,_:String ;__,F,_:Array [String ,0b1];G,___:_;C_X:Array [Float ,0B1_1];T_,d_,K:Array [Float ,0b1];_q,Ic:Array [Boolean ,0X4]){Return ;} }Class _Tjg{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4270))

    def test_4271(self):
        input = '''Class U{_(_,_:__;Z:Y;_,__,_3,_W9,_I,_:Array [Float ,0x2C];v,_5:Array [Float ,52]){}Constructor (_,_2__:Int ;_G_,um:_1_7_;mV,_:Int ;_,_U,_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4271))

    def test_4272(self):
        input = '''Class _y{Destructor (){}Destructor (){} }Class _2{}Class v:g{Var _,__,$9e,m:Array [Float ,0x8];Var $26:Array [Boolean ,0112];Var $1q_,$d4,$_0f,$x3R,_,$W:Array [Array [Array [String ,02_1],0xA_F_C],0X6];Var __9_,_3:Array [Array [Array [Int ,0112],0b1_11],0b1011101];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4272))

    def test_4273(self):
        input = '''Class f{Constructor (Z_:Array [Array [Array [Array [String ,0xD_E1],80],4433_5],0114];_:Array [Array [Array [Array [Boolean ,023_30],0XE],9],15];_:___){}Destructor (){} }Class S0__{}Class _7{}Class jM_b9h96:B{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4273))

    def test_4274(self):
        input = '''Class _8_{Constructor (_26,O1:Array [Int ,01];__,W,He___:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0x63_6_CA],0x2A],0b1010010],0120],0x2A],0120],0x5],0b111]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4274))

    def test_4275(self):
        input = '''Class _1pR{}Class _{Val _:String ;Val _n:_2uz4;Var _,Y:Array [Boolean ,4];Constructor (___:_;M_,I:x25;EC:Array [Int ,100];F__V,rP,__,_:Array [Float ,0b1];__,B,C_2,cf7_DL,cQ,T,s:L;D,_:Z1){Break ;} }Class ___:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4275))

    def test_4276(self):
        input = '''Class F:v{Constructor (){} }Class r_hy__9:f{Var _z5_:Array [Array [Int ,0XB7],1_903]=!!---Self ;Var $_:Array [Int ,0B11000];Val I,$9:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4276))

    def test_4277(self):
        input = '''Class Q{_(c4:Array [Array [Array [Array [Int ,05_7],0b11110],0b10],0X3_96];_:Boolean ;p:_6oI;e:X__;_,_F:Array [Float ,0B111011];_:__){Return ;R__D::$0();Break ;}$G(){Return ;} }Class _0V_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4277))

    def test_4278(self):
        input = '''Class T{Destructor (){}Val $_qY,__,_:Array [Array [Array [Array [Int ,55],010],0x40],05];}Class _{}Class x_:WVe{}Class D_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4278))

    def test_4279(self):
        input = '''Class KOz0:S_zH{}Class I{$7(_,AWw_,_5,_1_7,G,H,p_,O50:l){} }Class I57:_{Destructor (){}$303(_,h2_:Array [String ,15]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4279))

    def test_4280(self):
        input = '''Class A1:_0_7{Val $_:Array [Array [String ,0B1],0b101001];_8_(){Break ;}Constructor (_:_l_;_n_d:Boolean ;__g:B4){} }Class u_699M:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4280))

    def test_4281(self):
        input = '''Class P{m8a(_:q;H:Array [Int ,0104];BoD,A0,_Gk,__:_;h,n__o_:Int ;__:String ;_7_Q:_;__:Array [Array [Int ,0x58],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4281))

    def test_4282(self):
        input = '''Class _:E{Constructor (h3,k,_,_:Array [Array [Int ,04_6_30_7],2];V9:Int ){}Destructor (){} }Class I6:J{}Class Rh_:p{}Class y:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4282))

    def test_4283(self):
        input = '''Class _:_{}Class _{Var $Y,_n0_:Boolean ;Destructor (){}Val h_o5_:d=!!f2_::$N()._D4();}Class I_o_:_52{Var G:e03;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4283))

    def test_4284(self):
        input = '''Class r3:m{}Class n{Var S:Array [Array [Float ,0XB3_E],06];}Class SD_33{Var _I:Array [Array [Float ,0B110010],0x40];}Class _{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4284))

    def test_4285(self):
        input = '''Class bf{Var _:String ;}Class _9m_{Constructor (){Break ;}T(H,U_:Int ;_,H:Array [Int ,0x3D];W,_:_s;_,EE,X,O_,uEj:Array [String ,03_2]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4285))

    def test_4286(self):
        input = '''Class V{Var $C:Array [Array [Array [Array [Array [Array [Array [Array [String ,0112],67],0x4],0x8_6],0B11001],0b1001100],0b1],67];}Class f0N_:__8__{}Class Ht:_{}Class o:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4286))

    def test_4287(self):
        input = '''Class Y_:A{Val $C1e,r:Array [Array [Array [Boolean ,0x40],02],5];}Class _0:EF{$3(){} }Class AQ{Var _U_,O3:Array [Boolean ,043];Var g1,$40,_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4287))

    def test_4288(self):
        input = '''Class D___:a{Constructor (S,t,_,_0EB_:Int ){} }Class r1:O{Var $9iqIel__C,G:Array [Array [Int ,0b100000],0XE5];Destructor (){}Val _:Array [Boolean ,0X4_5F];_(i_:B_;M,T3:Float ;_7__P_48_,_1w:String ;rh5p_,_,_:_){} }Class _{Destructor (){ {{}Continue ;} }}Class _:_2{Q_(){Return ;} }Class i6:e{}Class R_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4288))

    def test_4289(self):
        input = '''Class _25{$x1(_f5L,nq09n:Array [Array [Array [Array [Array [Float ,12],06],06],9],0b1];_,_,_6,yH:Array [Array [String ,0x12],12]){} }Class S{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4289))

    def test_4290(self):
        input = '''Class C:bz{Val _6:Array [Int ,38];_1_p8(_:Array [Boolean ,8_1_7537];_E,f:Array [Array [Int ,40],0B1001010];i:Boolean ){}Var _C:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4290))

    def test_4291(self):
        input = '''Class s{Var Jr:Array [Array [Float ,0B1],1];Var _B__T,j4:iy3;Val $__O3WZ,$_,$7,$_:__;}Class F:_83{Val $3:String ;Val $__S_Y4:Array [Array [Float ,0x46],0117];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4291))

    def test_4292(self):
        input = '''Class _:T{Destructor (){} }Class _{Constructor (fH:Float ){}Constructor (O,H_:Array [Float ,0XC_55];m:Array [Boolean ,0X6]){}Val U,$_,Uc:Array [Array [Array [Array [Array [Array [Array [Float ,04],0b1_0],18_9],0xC],0b1100011],0b1100011],0B11];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4292))

    def test_4293(self):
        input = '''Class V_J8:w34{$H9(IDA,_J0IKP:Int ;_:Float ;Y5:Array [Array [Float ,07],023];d_:Boolean ){} }Class U{e2__3(C:Array [Float ,0b1]){}Val $T,k_,d,$K_:M;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4293))

    def test_4294(self):
        input = '''Class k{Destructor (){}C(){}Var $v:_o_O;Dq0(__,_,R,_,j:Array [Boolean ,04];__9d,_59:O273eZ8US){Var uA:Array [String ,19];}Val _c:String ;Var $r:_3;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4294))

    def test_4295(self):
        input = '''Class _{}Class TX:_{Var $Z,$al_,$8P,_5,_,$6,$8,$__,H:_;Destructor (){}$4X_(){}Constructor (i,_5E38,_7,_:_;_2,_58_:Array [Array [Array [Array [String ,32_0_958_82],0XA],0X32],0x48D]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4295))

    def test_4296(self):
        input = '''Class _{}Class _u__{Destructor (){}_9k(oBV_:Array [Array [Array [Array [Array [Boolean ,0xB],02_3],9],0XE_F],8_8_9]){Break ;} }Class e6{Destructor (){} }Class r_:o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4296))

    def test_4297(self):
        input = '''Class E{}Class b:xd5{Var $_H:_;Var Z:Array [Boolean ,0114];Val _,_6kE_71:Array [Array [Array [Int ,0B1_11],0b1111],0XB_3];_1(_,_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4297))

    def test_4298(self):
        input = '''Class _:N2{$U(__qw:Array [String ,0B100010];_d,___,l58:Array [Float ,0B100010];_,O__08_k_8oja:Array [Array [Array [String ,0B100010],060_5],0b10]){} }Class _{}Class _c_CM:g{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4298))

    def test_4299(self):
        input = '''Class _T8{Var $7:Array [Array [Array [String ,0B1111],12],07];Constructor (Y:Array [Boolean ,0x4C]){} }Class _:f{}Class k:_p4{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4299))

    def test_4300(self):
        input = '''Class o:_{}Class N4:Iu{Var $9_J,_,R_,$Mwp,$Xv65:Int ;}Class T{}Class L_5{u(){Continue ;}Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4300))

    def test_4301(self):
        input = '''Class U:o{Constructor (_,_:Array [Array [Array [Array [Array [Int ,0B11100],0x4],3],70],02];Y,o:Boolean ;_:_;Y,Q,U,O:Array [Boolean ,0B1_00]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4301))

    def test_4302(self):
        input = '''Class _:L{}Class _7:__NS{Destructor (){}Constructor (c__9,_,_,_g,_:Array [Int ,0B10100];C,t:Array [Array [Array [Array [Float ,0x1],8],0B10100],0b10];B_8,_:Float ;_:Float ;_,_7Y,_,_,J,_:Float ){} }Class rs{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4302))

    def test_4303(self):
        input = '''Class v{Var g_:g;Constructor (_:M9;T,F:_;M:String ;RG,_:Array [Array [Array [Array [Array [String ,026],03],0XF],026],0B101101]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4303))

    def test_4304(self):
        input = '''Class K5{pc(){}Constructor (a,A:p;Q,l:Array [Array [Array [Array [Array [Int ,076],0b10_1],0X43],8],0b1001110];P2,D,R__,_5:_f){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4304))

    def test_4305(self):
        input = '''Class _:e{Destructor (){} }Class _:_87{_(iq_3,SS2:Boolean ;r9,q_V:rT;a4:Array [Float ,062];_0__:Array [Float ,062]){Return ;Break ;}_P(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4305))

    def test_4306(self):
        input = '''Class __{Val ___:Array [Array [Array [Array [Array [String ,1],0xF],0130],0x2_E],2];Constructor (__0,b:Boolean ;Cz___,_2:Array [Array [Int ,0B1001000],2]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4306))

    def test_4307(self):
        input = '''Class _{Constructor (Y,__,d,__,_:Boolean ;_,Y53,_:String ;_,_:Array [Array [Array [Array [Boolean ,0B1010001],0b11000],0x89],43]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4307))

    def test_4308(self):
        input = '''Class _2:_{Val W6:M;}Class PF:ZJ_X_t{Destructor (){_::$6().I();Var A,o:Array [Int ,0B100_1];Return ;}Var S,H2:_W;}Class _1:_K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4308))

    def test_4309(self):
        input = '''Class _6_8:_{Var _0:Array [Array [Float ,0b11100],01];$B7_8__(G:Array [Array [Array [Int ,4],3_954],0x2D];___,_,_M:String ;_v:Array [Array [Array [Array [Float ,052_55],0402],0B11],0X25]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4309))

    def test_4310(self):
        input = '''Class z:D__{}Class z:_{Val $49,$i,_45,$_6,$z_:Boolean ;Constructor (Y6:Boolean ){}Constructor (){Return ;}Var __,_,$0,$4_,dq8l:Array [Array [Float ,0b10001],0x2_3E];Constructor (){} }Class _:O{}Class v:KG{}Class Z_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4310))

    def test_4311(self):
        input = '''Class M_{Var $_6_Tl7:_G;Val o55:Float ;Var $_,__:Array [Int ,035];Var $2,_,_:Array [Array [Array [Boolean ,035],61],0B1];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4311))

    def test_4312(self):
        input = '''Class _82:e2df_{Constructor (d,sz:Array [Array [String ,05_3_4],04]){}Val $y:_;}Class F{}Class _{Var _,s9,$_,K_,_:_4Z2_k6;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4312))

    def test_4313(self):
        input = '''Class W:_{Val RkWS,$_7,$4_,_:Array [Array [String ,0b1000000],037];Var __,$P:Boolean ;}Class _1:__P_M9{Val d:Array [Array [String ,7],0X17];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4313))

    def test_4314(self):
        input = '''Class q___:_{$1(c,K:Float ;z:Float ;_,E_,c,_6_:String ;_Y,_l1_:Array [Array [Array [Array [Array [Int ,0B1_11],6437],0X4],06_5],03];__3F,g:Array [Float ,29]){Continue ;Return ;}Constructor (){ {} }$1(){}Val _J:Array [Int ,0b1000];}Class _:F__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4314))

    def test_4315(self):
        input = '''Class yN_{$_(k:Int ;Q,_:Array [Array [Array [Array [Array [Float ,0x37],5],0b1_0_1_1_111],0x37],063]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4315))

    def test_4316(self):
        input = '''Class _9:_{Constructor (){}Constructor (Y94,Lf_:Int ;L,l1_:Array [Array [Array [Int ,01],16],0b1011]){Var ___,G,sb,__3,e,H_y,u,_60qb,_,v_G:Boolean ;Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4316))

    def test_4317(self):
        input = '''Class I_4:M__{Constructor (s5Fq,ZIC,_:Array [Array [Array [Boolean ,0X40],0b110_01],4];_:String ;S7:Array [Array [Boolean ,070],0B1];__,zD_51_:Array [Array [String ,0X40],0x66_4];Kw,_:Float ){Break ;}$L__f(){}Constructor (_:Boolean ;_3:Array [Array [Array [Array [Float ,0B1],42],0b111001],0x5]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4317))

    def test_4318(self):
        input = '''Class _:U{Destructor (){Return ;} }Class q{Constructor (__:Array [Boolean ,06];__:Array [Array [Array [Float ,0125],8],0125]){} }Class _7:b{}Class _:__8{}Class z_:r_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4318))

    def test_4319(self):
        input = '''Class _Z5:_{}Class QE_y:_mw{}Class _Ns9{Val L:W;Var B:Array [Array [Array [Array [Float ,014],0B1],0b1011101],014];}Class s:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4319))

    def test_4320(self):
        input = '''Class _1:HZre{}Class _15:_{Var t,$6:Array [Float ,10_81];Destructor (){}Constructor (){} }Class S4_{Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4320))

    def test_4321(self):
        input = '''Class o5:dd7_{}Class o:Cu_A_{}Class _:T_{$8(_0:Array [Array [Int ,460],0B1]){}Destructor (){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4321))

    def test_4322(self):
        input = '''Class _Kx:Y2t{Val $8:Boolean ;}Class __{}Class R{Val _8_:_;Constructor (_,n:Array [Float ,0B11];Vn5_Z,OX,__:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4322))

    def test_4323(self):
        input = '''Class _{$_(T,_l1,O59t,_,__,__o__:Boolean ;_:_;PP,xP_:Array [Array [Float ,0X5_E_9],9];__:Array [Array [Int ,01],040]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4323))

    def test_4324(self):
        input = '''Class _83:Dw_{$7(){Continue ;Val m_rW_K_,x:Float ;Continue ;}Var $9m9z__,$s,$_:Array [Array [String ,0x26],03_25];Val b,_:Array [Float ,0B110];Val G,Cb:Q;}Class __:G_{Var $H4:Array [Array [Int ,05],07];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4324))

    def test_4325(self):
        input = '''Class lXm:e{F(S,_,_6,R:Array [Boolean ,4_2_1_9];a,E_,b,b39,v:Array [Array [Array [Float ,03_4_7],0b110_1],0X55]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4325))

    def test_4326(self):
        input = '''Class t:Y7{Constructor (){} }Class U8:L{Constructor (){_::$l(-_::$F0);}Constructor (Q,_,__6,sS_:Array [String ,052];I,F,_,d_,_75_:JN;Jn:W;YX15Q_D,J,_i,pFV0y,d,_,aF2_,O:Boolean ;x,u0,_E:String ;a4,xtKy,O:Array [Array [Int ,0b11],0126];__,E,L:String ){}$_0H(_6:_){}Val $hh,_:Array [Array [Boolean ,0126],0x60];}Class _4:q{}Class M:_u_____Q{}Class _89_5_:o75{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4326))

    def test_4327(self):
        input = '''Class __5{}Class E:Y{F(De:Int ;___P_,_H__0,m,W_aJ6,_,_:Float ){Continue ;}Val $__a,$M_,$6715_,xHK_:Array [Array [Boolean ,5],0xC];Destructor (){}Constructor (){}Constructor (ES:Array [String ,0b1001]){} }Class _BF{}Class D533x7{Constructor (__,__,__,t,_:Array [Array [Array [Float ,0x51],0b1001],0b1]){}k9W(__,nj:String ){}Var $1:Boolean ;}Class z{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4327))

    def test_4328(self):
        input = '''Class _n9{}Class c_:_{Var $___v:G___;Val _K,$6n,I_,$1,$H,_Q:Array [Array [Array [Boolean ,36],10],0b1];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4328))

    def test_4329(self):
        input = '''Class _u4{Var TH,$_:Int ;$Tf(_,h:o;_,_:Float ){Null .K_Y().d._();}$d(){}_(_:f;__:_){}Constructor (H2D_:Float ;o1:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4329))

    def test_4330(self):
        input = '''Class E{Constructor (q:X_J){}Var A_:Array [Array [Float ,03_6],0xEF_4_E];}Class _{Destructor (){} }Class n4l:_P44{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4330))

    def test_4331(self):
        input = '''Class gDX{Constructor (_,D:n;_,___,i_:Array [Float ,0x24];X3g73,_:H;_:Float ){ {}Val T:Array [Array [Array [Float ,0X4],0B1010000],0x24];{} }}Class l:V{Val _:Array [Int ,8_8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4331))

    def test_4332(self):
        input = '''Class _3_2{Constructor (wg19:Array [Boolean ,7];f,_:_;ZL:_1;__B:Array [Float ,0106];f:Array [Array [Array [Boolean ,0106],0x23],5];Zaw,jH1:Array [Float ,0X16];X0__:Float ){}Val $_8_8_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4332))

    def test_4333(self):
        input = '''Class a{}Class b9W{}Class d_{}Class _:_g{$0(){} }Class r_:_r{Var $8ZR:Array [Array [String ,0b10],6];Val Cv_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4333))

    def test_4334(self):
        input = '''Class c{Val _X:_2;}Class _:H3{Constructor (){}Val $___6:Array [Array [Array [Array [Boolean ,0B1],075],075],15];Var $X:Array [Array [Array [Array [String ,0b1_0],0x34],0b11],84];Constructor (_s:Float ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4334))

    def test_4335(self):
        input = '''Class _E5{}Class N:_{}Class _17{Constructor (){}Constructor (__,_M_3I:Array [Array [Array [Array [Array [String ,0b10_11_11100],0B1_11],23_7],0x8_7],0B110001];_:Array [Array [Int ,0b100011],0x1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4335))

    def test_4336(self):
        input = '''Class _{Destructor (){Break ;}_L8(){}Var _:Array [Array [Int ,0x27],0X1D];Var _,$x__,S,$7:l;}Class Z{Var $7_,$8:Boolean ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4336))

    def test_4337(self):
        input = '''Class __:u___{}Class KDAv{HD56Y(){} }Class _{Constructor (L:Boolean ;__:_;_,W79qD,_,F:Array [Int ,0b10];w_:Array [Int ,0x29];W_,_,_1_L:Array [Int ,0104]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4337))

    def test_4338(self):
        input = '''Class _:_{__m_5(P:A;M,eF_,_,_,v,_:Array [Array [Int ,0X58],0B1000011];S,_0E__1,_,tj_:_;_,t_b:Boolean ;k:_9){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4338))

    def test_4339(self):
        input = '''Class N:lCi{}Class l{Destructor (){Return ;}Constructor (x,X:String ;u:Array [Boolean ,04];_:t8_G0){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4339))

    def test_4340(self):
        input = '''Class _{Var U5_1B:Array [Int ,43];}Class _{Var e__M_v_1,_,$_:Array [Array [Array [Boolean ,0b1101],0XA5],43];}Class oV6_2m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4340))

    def test_4341(self):
        input = '''Class _{Constructor (KX_00,n,_u29,L:Array [Array [String ,07],0b100010];_,_,_6,G_0:String ;R:Boolean ;t:String ;_:Array [Int ,0xA]){} }Class _:C{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4341))

    def test_4342(self):
        input = '''Class _{}Class _1{_(l:Array [Array [String ,0B1000011],44]){} }Class _:w5{Val $5,$KL8_:Array [Float ,9_7];Val _,$D:_;}Class E:xo_{}Class T96N_6{}Class _9:_q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4342))

    def test_4343(self):
        input = '''Class _40:Bk_W{Destructor (){}Constructor (___:Array [Array [Array [Float ,0130],03_4],0X5F];Qk:S){} }Class D:b{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4343))

    def test_4344(self):
        input = '''Class h:_VB{Val $6K:Array [Array [Float ,0115],6];Constructor (){}Constructor (_:Float ;_N:Boolean ;_S:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4344))

    def test_4345(self):
        input = '''Class P:_1{Destructor (){ {} }Var _:_;}Class _:Ek{Destructor (){}Val $0,$2:Array [Int ,06_57];Constructor (l,X7,_4,o:Boolean ;_,R:String ;cn5:Float ;_,t,B,Uy:String ;K:Array [Array [Array [Array [Array [Int ,0b1_0100_01],0b100],0135],0x1B],53];D,_:Float ;_q:Array [Array [Array [Float ,9],0XA],0b100]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4345))

    def test_4346(self):
        input = '''Class _{Constructor (_,U,C,X,_2K,y:F;__e_,_,__,F,_9:Array [Float ,0100]){} }Class b0:_2{Destructor (){}Val $_7:Array [String ,0x3A];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4346))

    def test_4347(self):
        input = '''Class _:_{}Class J:i{Destructor (){T::$7s_7();} }Class __V__:_9{Val S8,$O,l3,s,__:Array [Array [Array [Array [String ,0B1],57],05],0X1F];Constructor (_j_,b,r:Boolean ;C:Array [Float ,06_7]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4347))

    def test_4348(self):
        input = '''Class B:_{Constructor (){}Val $5_v_CH,$6:_5;Destructor (){} }Class V__:_{}Class _:_1{Val V_U,$2l:Array [Array [Array [Array [String ,8],0b10111],0x26_90_8],060_1];}Class x:_{}Class __{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4348))

    def test_4349(self):
        input = '''Class __n:_3{Constructor (_:Array [String ,020];a,_5X:Array [Boolean ,0b1];Fk,Q2H0o_9:_X){}Destructor (){Val _:Array [Int ,0b1000];}K(l:Array [Array [String ,020],0B101111];B,A:Array [Array [Float ,0b1000],0X57];W9s:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4349))

    def test_4350(self):
        input = '''Class A{Constructor (_,l6,Ub1,vvD,J,x,Q,X_,l:Boolean ){} }Class _y:_{}Class ___2{Val $K:Array [Array [Int ,073],0xE];__(_0:Array [Array [String ,0b1_1],30]){} }Class __{Var Mr,$__P,$Y:_50;Var $7,E6_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4350))

    def test_4351(self):
        input = '''Class W2:_{}Class _72{}Class _m{Val _,$_1_,i5_,_,$f,_9,O,$_,$2V,_,_,u:String ;Constructor (){Break ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4351))

    def test_4352(self):
        input = '''Class N6:_A{Constructor (){Continue ;}Constructor (DV_6,_718____,vP,p:Array [String ,0x2E]){} }Class _:C96{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4352))

    def test_4353(self):
        input = '''Class c:V{Constructor (td_,l7__,k1,m_:b0p96){}Var __,m0,$_:Array [String ,0B1];Constructor (){}Val $M:R;}Class _1X__3:o{Constructor (UQ:Array [Boolean ,0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4353))

    def test_4354(self):
        input = '''Class _:a{}Class DT{Constructor (){ {} }}Class _:fv_v{}Class i:Z_{Val $k6:Boolean ;Val $_,a,$X:Array [Array [Boolean ,020],020];Var $r6:Array [Float ,0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4354))

    def test_4355(self):
        input = '''Class e{Val c0,$__:Boolean ;Var $h,$W,_3,v_aG,$_:Int ;Constructor (Y,_,U,g:Array [Int ,35];Sk,_7,t,_,_:M;_:Boolean ){} }Class _:H{}Class B:_C{Destructor (){} }Class U{}Class _3:r{}Class N:_u{$v(_:Array [Array [Float ,0B1],063]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4355))

    def test_4356(self):
        input = '''Class y{}Class CVL9_tp:g{d(d3Q,_,__,W6,p3,n_:Array [Float ,0x4F];v_:q_;O:Boolean ;_p,Y6:_;_0_Hm0d18:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4356))

    def test_4357(self):
        input = '''Class c_84:G{Val $u8_,_q:Array [Array [Array [Array [Array [Array [Array [String ,7],0x64_8E],33],0B1],33],0b1],0X25];}Class _kl5{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4357))

    def test_4358(self):
        input = '''Class _{Constructor (){} }Class d_q{}Class _14R_4_:Eb{_(_V:R;_,T:_3;__,_5t,_N_:Array [String ,18];_,A3n,s:Boolean ;q:Array [Array [Int ,0b10],0B11];_Q__:Array [Array [Array [Int ,06],0b1_0],0X4E]){} }Class __p_0{$_D(){Continue ;} }Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4358))

    def test_4359(self):
        input = '''Class _:b{$G(t__,uM0c_x:String ;L60:Array [Array [Int ,0X9],01]){} }Class e:v{Destructor (){} }Class _38{}Class j__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4359))

    def test_4360(self):
        input = '''Class _6{Val $_:Array [String ,0142];Var _:Array [String ,0X1E];}Class _{}Class _:_2{Val $3U_,t8,_,$o,$C_1n4,$2:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4360))

    def test_4361(self):
        input = '''Class ___c:W_1_{Val $7:String ;}Class _P__k_z__Z:_{}Class __:_{$_3_(){l::$_k.I4.A._87_().v.r_()._.x_._();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4361))

    def test_4362(self):
        input = '''Class _5{Constructor (v76:Array [Array [String ,8],0x37];_z__nF52_,V,_:Float ){}Val $8,$_,$S,_,_B,_:_3;}Class _7:_h{Var $1U:i;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4362))

    def test_4363(self):
        input = '''Class B_i{}Class R:K6{Constructor (_9x_G__,g,lVk,_U2:q75z){}Constructor (){}Val $_p:String ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4363))

    def test_4364(self):
        input = '''Class N:_{Constructor (_,_M,_,_n33:Int ;_M,k,_7,r7,F:String ){Break ;}Val P99:Array [Boolean ,0x4];}Class t5:_L_Y0{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4364))

    def test_4365(self):
        input = '''Class _E:_{Var $3:Array [Array [Array [Array [Array [Array [String ,01_3_7],0x5_2_1],42],7_20_5],42],06];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4365))

    def test_4366(self):
        input = '''Class _:_{Constructor (){Val __,_,f,_:C7_;}Var f,$_:Array [Array [Int ,0x1],0b110011];}Class Y4:n{_4L(){If (!_A::$4()){}k5::$0();{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4366))

    def test_4367(self):
        input = '''Class _9u:_C{Val $3_,$1:_5;Destructor (){}Val $__,F:Float ;}Class _s2:yA{}Class h_K76X{Var $_s_,$0,$_:Array [Float ,0B1];_o(shY0:Boolean ;_:String ){}Constructor (){} }Class J_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4367))

    def test_4368(self):
        input = '''Class _4b:W{Val _1_:Array [Array [Array [Float ,05],0B1],0B1001111];mJ(A_,K:String ){Return ;{}Break ;}Val $_,P_:__;}Class Pl:_{}Class _Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4368))

    def test_4369(self):
        input = '''Class _:_{Constructor (_i,A,W_,_,__,Yr:Int ;H,__,_0,_5E14_A:Int ;_jjG__3,P:__;_:String ;_7:_0_;__1,c,_Z,s_u:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4369))

    def test_4370(self):
        input = '''Class Ay_e:QS5{Constructor (){Val _,Guk6:String ;} }Class e{Destructor (){}$_(_,_,_h,w,_:Array [String ,1_8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4370))

    def test_4371(self):
        input = '''Class u9:__1_3{Constructor (_:_0){}Val $_t,$e,$H:k0g0;C(_:Boolean ;g88:_;A8_w:Float ;_0__:String ){ {} }}Class _3NQ56:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4371))

    def test_4372(self):
        input = '''Class _1:y_l8{Destructor (){}Destructor (){}$q_(_,Z_K:Array [Array [Array [Array [Boolean ,04],076],076],3];K,_Y_,m,___4__,i9y,e:_G___){Break ;} }Class dQ:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4372))

    def test_4373(self):
        input = '''Class _:_6{Destructor (){} }Class S{Val p_,$_,$8,_Ij_L,__,_P__:Array [Array [Array [String ,0b1],0B11],7_0];}Class _u{_(__,l,_,u:Array [Boolean ,0X1];u6Qi,t_,_:_;a,D:v;_5:Array [Array [Array [Array [Array [Array [Array [Float ,0B1_1],0111],0x6],06_7],0111],0111],04];L8,_7:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4373))

    def test_4374(self):
        input = '''Class a:_{}Class _4:_{Destructor (){}Destructor (){}_T(_3_,_,_Sg,_:Array [Int ,03_2_40];_:Yr_;_,__,b,_61_:Float ;_,_,_:Array [Array [Array [Array [Array [Array [Array [Float ,0B11000],0131],72],0B1],9],6_6_6],36]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4374))

    def test_4375(self):
        input = '''Class __{Constructor (){New _().T();} }Class _:Ee{}Class C:C{Constructor (__,HH,_:Float ;___9,D:String ){} }Class _T_9:R{}Class _2:W{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4375))

    def test_4376(self):
        input = '''Class _70_4:P9__2VX3{}Class t:_{Constructor (u_:Array [Array [Array [Array [Boolean ,8],05_0_1_5_5],0B1011],0XC_C];_i:String ){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4376))

    def test_4377(self):
        input = '''Class _:_{Val $21IcS:l;Val $_rN,$4d:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,63],9],0x8],03],0x5_0_F],1],0X9_4_A_F],0155];Constructor (M2557_,_,_L:_;K__:String ;P0:Float ){}$_(){} }Class p{Var $_K,$w8,_5:q;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4377))

    def test_4378(self):
        input = '''Class _5{_(y_,TB4g:Float ;T,_:Float ;e:Array [Array [Array [Boolean ,0x2],0X24],4];K:String ;_,h:String ){}Constructor (_60:Array [Array [Array [Array [Array [String ,0x5D],0x5D],04],0B1_0],4]){}Constructor (Z,_9,_32,_g:Array [Array [Array [Boolean ,0X9_6_D9E],0X24],04];v,_5,g,RT3:_R0_){Break ;} }Class _U:ik{}Class _:Y_{}Class _{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4378))

    def test_4379(self):
        input = '''Class l7_{Constructor (_:vt;ZO_,_1:Array [Array [Boolean ,0b1],79];L3o,d:Array [Array [Array [Array [Float ,0B1011011],0x18],04_1],79];b:Array [Array [Array [Boolean ,026],0x18],0X13];I7,Z,_,_,_,HS0:Array [String ,0X9];Zdp6,_:_;R_,___7:Int ){} }Class I:G{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4379))

    def test_4380(self):
        input = '''Class ld2b_{Val _U:Array [Array [Array [Array [Array [Array [Boolean ,0x2A],0B1],0x2A],0123],45],013];Var _6:Array [Boolean ,0xED];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4380))

    def test_4381(self):
        input = '''Class __{}Class E___{Var _d,$4_R_:Int ;Destructor (){Continue ;}Constructor (_i3_c,I:Boolean ;F:String ;d:N;x,e:n){Continue ;Return ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4381))

    def test_4382(self):
        input = '''Class C4_:C082{Constructor (){}Var $_9,$5:Array [Array [Boolean ,4],0X50];Val $65,$94_,jj__JV:Array [Boolean ,075];}Class __:i_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4382))

    def test_4383(self):
        input = '''Class _{Constructor (w_7:Array [Array [Array [Array [Float ,07_5_3_77],50],0X9],0X9];XdCe,_:Array [Array [Boolean ,051],051];_9_,_,B:_8){}Constructor (_L:Int ){}Var $_,m_:Int ;$_U(WT:Q0){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4383))

    def test_4384(self):
        input = '''Class _:R{}Class yn{}Class _:_6{}Class ___O:v1{Constructor (_440:K;f:_s;_:Array [Array [Array [Boolean ,7],0B1011111],05]){} }Class _:_{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4384))

    def test_4385(self):
        input = '''Class p_9{}Class __:___b_{}Class _z{Var $CX_:Int ;}Class _M:T6_X__{Var $_:Array [Array [Array [Boolean ,53],6_8],05_3];Val $6vZ:Array [Int ,071];}Class P{Destructor (){} }Class UE3___7c{}Class z{Var __,c:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4385))

    def test_4386(self):
        input = '''Class I0:_Q3{Val $_,$Lj:Array [Array [Int ,0B1_11_01],0121];}Class __:_{Var _20:_7;Val $_7:Array [Array [Float ,0x47],6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4386))

    def test_4387(self):
        input = '''Class __{Constructor (_,m9_:Array [Float ,15];n6,Iz9,w8,X__1v__:Float ;Jj:qd;k,o,U:Array [Array [Array [Int ,0x32],15],0B1011010];_,z,nGZ3__:String ;l0:Boolean ;s9,_,_,c_f,_,U1k__:Boolean ;K:G;U,_,g_,Y,Dj:Array [Array [String ,15],0B1_00];_7:Array [Array [Array [String ,074_2],0b10],0X1F]){} }Class _82_:_{_8(){Continue ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4387))

    def test_4388(self):
        input = '''Class f{}Class r:_{}Class F6hr_:q{Var $6,__:Boolean ;}Class _r{Val $___,$_,$v,k:_;V___(){Return ;}Val uY,$n:Array [Float ,62];Constructor (o:Int ){Var V:P;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4388))

    def test_4389(self):
        input = '''Class m:_{Var $L:Array [String ,0B110010];Var M:Array [Array [Array [Array [Array [Array [Array [String ,9],3_89],0x11],100],0X50],0X50],0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4389))

    def test_4390(self):
        input = '''Class _4SW:h{Constructor (){}Destructor (){}Var E:String ;Constructor (__M:String ){_6::$_z_();} }Class I{Var $p,$5:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4390))

    def test_4391(self):
        input = '''Class _{Destructor (){}Var $y,a,$96,_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,076],0b111],0B1],012],0XB1],0X3C],0x1D],076];}Class _{Constructor (){Continue ;}Val $_1d:Array [Array [Int ,076],25];}Class _Q:P_V2{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4391))

    def test_4392(self):
        input = '''Class i{Val $_2,J8:F_2E1m10;Var $D:Array [Array [Array [Array [Array [Int ,0114],9],0b1],0114],0b11_0_1];Constructor (){} }Class r_{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4392))

    def test_4393(self):
        input = '''Class __:q{$918__(q__39t,_,__v1:_;P,S,S:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0X2B],0b1011],02_0],070],0XD_8_9],0x54],86],86]){ {} }Var W52o:r;Constructor (){}Val $_9__:__L;}Class c2_n__994:h5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4393))

    def test_4394(self):
        input = '''Class _4{Val $8__:Array [Array [Array [Boolean ,05],0B110110],0b1_0_11_1];Constructor (_68_,_S,PI:Array [Array [Float ,05],1]){}_D(){} }Class l:_{}Class C:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4394))

    def test_4395(self):
        input = '''Class t{}Class F:q_{Var p__,$_:B;Constructor (_l,___gM_:Boolean ;A,P:Array [String ,9];_5:Array [Boolean ,20];_L,__,j:_25;_,p:Int ;O:v;N___Q9:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4395))

    def test_4396(self):
        input = '''Class VR:m{$P(){} }Class V_8{Val $m_:Array [Array [Float ,0B101],0x5_B];Constructor (_g:Array [String ,0b111010];_:__u;dq,j:Int ;_MeBL:_b;D,_BO0,_9_55_x:Array [Array [Float ,0X63],042];k,V,_,o:String ){} }Class _:k{Constructor (){} }Class ___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4396))

    def test_4397(self):
        input = '''Class _{}Class _:_{}Class _{Var $_,$1_,e,_8K:Array [Array [String ,0B1],02_02];Var __,B:M_K5;}Class d{Var _i4i_,__:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4397))

    def test_4398(self):
        input = '''Class _y:____{}Class n:_h{Constructor (_:w_){}_(X25,_2,__:D_dE;a2,___4,_:Array [Array [Array [Array [Float ,0X54],0B1],0X54],05]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4398))

    def test_4399(self):
        input = '''Class __19l0{Constructor (){ {Continue ;} }Val $P8_4_,$W45:Boolean ;Constructor (H_:_;k0__,_83,__:_;d,_,_C_,____2,_,p1:m39){} }Class _04{}Class HF{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4399))

    def test_4400(self):
        input = '''Class B{_(){}Destructor (){} }Class K:I__9{Val $r:W;}Class _{Destructor (){} }Class _:z{}Class z{}Class CN:X39{$_C_(i_0:_6_X_h){} }Class _:D{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4400))

    def test_4401(self):
        input = '''Class __{Val F:Boolean ;}Class A{Destructor (){Return ;Continue ;} }Class _:x__9{}Class _3{Val M,_j_,_:Array [Int ,66];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4401))

    def test_4402(self):
        input = '''Class n{}Class lH{Var _,d_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,02_5],01],01],48],0B110000],01],0b1],0b1],0x8_5_A];Var $C:Array [Boolean ,0X4B];Val $_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4402))

    def test_4403(self):
        input = '''Class _8{$3_(_L3:Array [Array [Array [Boolean ,0B1011101],8],496];_,B:String ){}Constructor (Z,M:Int ){Break ;} }Class Y{}Class h:_{}Class r9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4403))

    def test_4404(self):
        input = '''Class _3{$_(){Break ;} }Class _{}Class _:G{C(_,_:Array [Int ,12];z2C,_:Float ;L:Array [Array [String ,2_2],12]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4404))

    def test_4405(self):
        input = '''Class e{Constructor (){Continue ;Val VV,N:_9_;} }Class _C{Var $_a6,_:Array [Array [Int ,0b1],0X16];}Class _8:_a{}Class __S:c_w{}Class _{}Class n:_{}Class _U{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4405))

    def test_4406(self):
        input = '''Class h{}Class _{}Class _{Constructor (_o,__,B,w,B_,e,_S,Z:Array [Int ,0xEE_1_B];u:Int ;E_,X:_c___KQ0;__:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4406))

    def test_4407(self):
        input = '''Class __8:jA{Var _,F,$4Y,$0h,__,_:Array [Array [Array [Array [Array [Array [String ,90],0111],90],7],01],0x7];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4407))

    def test_4408(self):
        input = '''Class b__{}Class i:_T_e7_y{Constructor (){}Val _:IyPy2_;}Class t{Destructor (){ {} }}Class _H{Destructor (){} }Class _:u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4408))

    def test_4409(self):
        input = '''Class _:__{Var oID1,$_,__:_4f;}Class _:_{}Class R5:_{N_(_:Array [String ,0b100]){}Destructor (){}__26C(_,_5c,_,_4_,_,tQ:Int ){}Constructor (F_:Array [Float ,0B11011];q:Int ){}Var $_,_9C_,i,$K:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4409))

    def test_4410(self):
        input = '''Class _l:_{$_7(l,_,_7:Array [Int ,90];_,A,_,R:Array [Float ,0xF]){Return ;}Val __71,$_91_h:K;}Class _8:G{Var $9:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4410))

    def test_4411(self):
        input = '''Class _9:i3D{F(__:I;_,Hj:Array [String ,0b10101];g:Array [Array [Float ,0b10101],0b110]){Var w,_:Array [Array [Array [Array [Array [Array [Array [Array [String ,2],9_3],06],0x16],0X4],0x16],07],3_2_6];Val _,_:_K07;{} }Val _gc,Zi:_y_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4411))

    def test_4412(self):
        input = '''Class Y:_{}Class bf5:_0{}Class u_:Bw{}Class _o{$07(){Continue ;} }Class D{}Class _:A{$_f(_5:String ){}__(){}Constructor (){} }Class X{Val $_5,$7:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4412))

    def test_4413(self):
        input = '''Class _{}Class I:Co{_0(_,___H:e4;_,T:Array [Array [Array [Array [String ,0x3],0x4B],5659_0],0XCE]){}Val c,_:XF;}Class _:R{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4413))

    def test_4414(self):
        input = '''Class _:fh8Y__JknA{Constructor (){}Destructor (){}Var _:String ;Val GB:Array [Array [String ,4_6],0x47];}Class X:H{Var $4,$_5:__;_02f(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4414))

    def test_4415(self):
        input = '''Class __{$U56B(){Var Y6i8,g,_,_u__,_:Array [Array [Array [Array [Float ,47],81],054],47];}Constructor (_,_l,_7,_,_02:_;yg,S:_;_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4415))

    def test_4416(self):
        input = '''Class _{Var $_9,$b:Boolean ;$9(){Break ;}Constructor (bw,_:Float ;_4,G_5,_:Array [Float ,0x57];_8B:Array [String ,0x57]){}T(rN8X:Int ;_,__:Array [Float ,01];q:W_){} }Class __:_1{}Class _b{}Class J:v{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4416))

    def test_4417(self):
        input = '''Class H6{Var s6_4,$_,b:Array [Array [Array [Array [Array [String ,0X4_2],063],36],36],0B1];}Class jd:v__f{}Class _{Var $2m_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4417))

    def test_4418(self):
        input = '''Class _{Constructor (_67,_9,_,T,A:Array [Array [Array [Array [Array [Array [Boolean ,10],0XE],0100],0x43],0b110111],0XE];Te_:Array [Array [Array [Int ,79],0XE],7_1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4418))

    def test_4419(self):
        input = '''Class q_uf:q2N{Destructor (){}Val n,$6S0,_9,$u6,$_x:e_;}Class W3{Val _6999:Array [Array [Array [Array [Float ,80],80],0x47],0X36];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4419))

    def test_4420(self):
        input = '''Class __{Val P,A,_7sL3_,_7:Int ;Var R:String ;Var $e6_0O:Array [Float ,0b1];}Class _xf{$__(){} }Class m601:ctFZ6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4420))

    def test_4421(self):
        input = '''Class G:_{}Class _{Destructor (){}Constructor (_1B:Array [Array [Int ,0X1C],46];u:Array [Array [Int ,071],0x9_4_8]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4421))

    def test_4422(self):
        input = '''Class b_{Val $_8:Array [Array [Array [Array [Array [Array [Float ,0b110010],040],97],04_2_2_4_3],0x2],070];}Class o{Var _E,$_ZH_,v,_M9j,$7:Float ;}Class _:p{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4422))

    def test_4423(self):
        input = '''Class zt{Var __:String ;Var _vs,$O:_z;$a_(__,_U____6,_r,O:Float ){}Var __X_:Array [Array [Array [Array [Array [Boolean ,57],05_5],061],57],01];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4423))

    def test_4424(self):
        input = '''Class _:r{}Class r:_8V_{Constructor (_,_,j:Int ){Break ;}Constructor (_O,H3,j4:Array [Array [String ,0b11011],30];R,m:R_0k;_:Boolean ;_:_;w76_,_:Array [String ,0b11011]){_1::$_();} }Class j{}Class o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4424))

    def test_4425(self):
        input = '''Class m:_4{Constructor (X,_n:Array [Float ,0x2C];_k:N_O__O;Xs4jx,j7:Array [Int ,466];___,_2_2,__,L,_,_5,_,A:__){Val _:V;} }Class _:Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4425))

    def test_4426(self):
        input = '''Class _Wa_:_{}Class Z:R_{}Class z{$_(_:Array [Array [Array [Boolean ,0b1],0b1],0X36]){} }Class _:E6Y{}Class C5{Destructor (){} }Class _AOH_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4426))

    def test_4427(self):
        input = '''Class w{Destructor (){} }Class _:_{Var B,_:Array [Array [Array [Array [Array [Boolean ,0x3F],0x9_B_B],4_5_5],5_9_79_4_76],0x5];Destructor (){} }Class _:d3{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4427))

    def test_4428(self):
        input = '''Class c5:u{}Class _s{}Class _:O{}Class _y{Destructor (){Break ;}Val $_,m_8:Array [Boolean ,0x1_C_4_68];z(dA,_:Int ){} }Class j:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4428))

    def test_4429(self):
        input = '''Class D:__{Val _:Array [Array [Array [Float ,0B1011000],0X42],065];Constructor (TMK_,_TE,E9Wh:_;J,b,q:String ){Continue ;} }Class j5_i:_9s{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4429))

    def test_4430(self):
        input = '''Class U:d1Ax{Constructor (IV,CuS:Float ){Var _0,_,_:String ;} }Class t__:_{_(j,__,__,_594,C,__:Boolean ;_:Array [Float ,4];rO40CI_,F:_;_,_iT,W:V;__:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4430))

    def test_4431(self):
        input = '''Class _9:N_2j{}Class _{Val $_1,_:Float ;Val L_,$P0U_:Int ;Var $_,$b0:Array [Int ,0b1001111];Var $38:String ;Val $q:Array [Boolean ,1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4431))

    def test_4432(self):
        input = '''Class _0:TWz_{$_(P,x3:Array [Array [Array [Array [Array [Array [Array [Boolean ,0x39],034],0x9],67],67],0X1],0b1000010];M67,m,_I,__:oi){}$Y_(k236,__48:i;_:Array [Float ,0B10_1];_:Array [String ,026]){Return ;} }Class _{}Class o_3:g2{}Class H_r{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4432))

    def test_4433(self):
        input = '''Class A_:S_{$_9(K7,_,_,a,S_,jg,_qv__j:Array [Array [String ,02],0XF]){} }Class ___{Destructor (){} }Class _fN:_c__{__z5(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4433))

    def test_4434(self):
        input = '''Class __zt{Constructor (Tv:Array [Array [Array [Array [String ,0143],0143],6_82],0b111001];CMa:Array [Array [Int ,7_98],0XFE]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4434))

    def test_4435(self):
        input = '''Class lc:yRM{$__4(_i:Array [Array [Array [Boolean ,01],0xB_B],52];m9x__7__0_,H,_,k:_;T,J,a_5v,_n_:QS;z:x){}Val $_:P;_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4435))

    def test_4436(self):
        input = '''Class W4:H{}Class t:X{s(B74,Df_295F,Ql:W326;W:Array [String ,0B1];Z6:Int ){}Destructor (){Val e:Int ;} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4436))

    def test_4437(self):
        input = '''Class _Ng8{$_i(NZi,H,_:g5;_I,D88,_5,R,_0,L,_,_:p;q6__X_:Float ;_G_:L1){} }Class __m4:M{HN(){} }Class iv7_:d1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4437))

    def test_4438(self):
        input = '''Class R4m{}Class b_:jY8{Constructor (___C_j:Boolean ;_7_,_:Array [Int ,0b11011]){}$5(O,_,I,_W6:Array [Array [Boolean ,0b1],0X46]){Break ;} }Class p_{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4438))

    def test_4439(self):
        input = '''Class A:o94_4{Val $_:_Q__3;_3_(_,tc:S;f:Float ;w9a:Array [String ,20]){Val _:Array [String ,0X7]=!!!Uy_::$O.__()+!!H0::$D.pt_5._._9;} }Class yU{Val $_1:I7;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4439))

    def test_4440(self):
        input = '''Class _{Constructor (BPp,_g72_:Array [Array [Boolean ,3],94];_D_,_,D_,T:String ;_,_:Int ;_:String ;U__71:Array [Array [Array [String ,0XD],0X5E],0B1]){}Val $_,$3_96,__5RD,$__,$V_:_;Constructor (R92,_,__A,FM:Float ;U,e:_;_:_;A,_K2UM_bd2,B,Nf_:O;g,E:Array [Array [Boolean ,0B1011],3];x_,_:Array [Array [Int ,01],0X5E];_Z:Array [Array [String ,4_2],0XC]){Continue ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4440))

    def test_4441(self):
        input = '''Class __3k{}Class W:_5{Var _,$7:Array [Array [Array [Int ,67],2],026];Var $0,$f:_4_h;Destructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4441))

    def test_4442(self):
        input = '''Class I{}Class _kjS{B8(l_l_:Array [String ,49];_1f6_:Array [Float ,34];j0:__5){b_::$_();} }Class __:_{Val f_F7:Array [Array [Boolean ,0b1],0B1100000];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4442))

    def test_4443(self):
        input = '''Class _{Constructor (){ {}Continue ;} }Class __Y_:_9_z{Val $pL__:Array [Array [Array [Array [Boolean ,0B1_0],02],0x30],0B1_0];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4443))

    def test_4444(self):
        input = '''Class G:y_0{Destructor (){}$64955Z(_:Array [String ,3_9_1]){}Var $x,$_4L88:Array [Array [Int ,0x32],72];}Class f_C__c:_{$e3(o:Float ;_:Float ){Continue ;{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4444))

    def test_4445(self):
        input = '''Class _8:y{}Class _2_60{Var _7:_;_(){ {} }}Class _:k31{Destructor (){}Val _73,$YE,Q__d,$1,$64,v,$4i,Cl,$n:D9;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4445))

    def test_4446(self):
        input = '''Class A5{}Class _:T49{Val rS:_44;Constructor (g,_U,xB9d:_0VD;_,_:String ){} }Class L:_{Val e5,$zcH,Y8_2_2y:Array [Boolean ,87];Constructor (){Continue ;}Destructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4446))

    def test_4447(self):
        input = '''Class __{}Class S15_:_{}Class w{}Class _:_6__c_{Val $Ob:Array [Array [Int ,04],0x2_0_8];Constructor (_7,_:Float ){Var tQAd:Int ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4447))

    def test_4448(self):
        input = '''Class yZ{_(tO_:Array [Array [Array [Boolean ,070],0x8B],0x38];J:Float ;KK:Array [Array [Int ,070],070];M:Boolean ;s7x5,__,_:Float ;y__,_:Array [Boolean ,070]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4448))

    def test_4449(self):
        input = '''Class _0_OO{Val U9,$70h:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,03],06],0xF32],0x46],0b1010100],0b1010100],0B111110],074_6],0B111110];Constructor (){}Val $3n521,_:__771;}Class J:R6{}Class _:___D3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4449))

    def test_4450(self):
        input = '''Class UE1:n{$L(w_73_v7,_3,_:_X_0;IF_,___,Af,ykU,_:Array [Array [Array [Array [Array [Array [String ,07],0xA],0X677_7],02],35],0x618E9]){Break ;Var s9,p,_:Array [Array [Array [Int ,9],0B1_011],0B1];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4450))

    def test_4451(self):
        input = '''Class Q:a1{Constructor (_,N0,_:Array [Array [Boolean ,50],0B10];_:Array [String ,50]){} }Class F:_{Val $_P,$k6,$fB:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4451))

    def test_4452(self):
        input = '''Class v_{}Class Y:a{_w4(_,_,w,_,v3_:w6;f:String ;_R,_:_;a2:Array [Int ,0B1]){}Val $F,_Z:Array [Boolean ,3_7_0];}Class _768{}Class _:__{$f(D3o:Array [Array [Int ,2_80],0x1];V,_,P:Array [Array [Array [Array [Int ,0x10],94],052],0X4B_21]){}Val V,$F8:Array [Array [Array [String ,0X7],662_57],2];Var $_,$2_:_7s;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4452))

    def test_4453(self):
        input = '''Class I:zC{Val i6x6,$_:Array [Boolean ,0XD];}Class O_0{Val _Az:Array [Float ,0x9];}Class M:_1{}Class __:x{}Class gY8:_1{Var $_:sNoC;}Class QU4:P{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4453))

    def test_4454(self):
        input = '''Class _w4_d{Constructor (l:Boolean ;___:a6;_:String ;_,_,_,w,i,E8:Array [Float ,0b1];_0,_:d;uK3_:g;_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4454))

    def test_4455(self):
        input = '''Class u_{Constructor (__,_:Array [Boolean ,8]){_::$_();} }Class y:s{}Class x{Constructor (zGQ__0,z3:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4455))

    def test_4456(self):
        input = '''Class gW{Val __R,r:Array [Array [Array [Array [Array [Array [Array [Float ,0xE],0x6],04],0b1],077],0b1],0x3A];}Class _{s(){}Val _,$2:Float ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4456))

    def test_4457(self):
        input = '''Class _5____a_:A{}Class C{}Class _pI__{$k(){ {} }Destructor (){}Var O_N8,$w3:Boolean ;Constructor (_R_D_:Array [Int ,0b110]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4457))

    def test_4458(self):
        input = '''Class __2_:y{}Class _{O(XR:_6;_18_,qA9s,h_,m:Array [String ,0b1_0];k:Boolean ;w:Float ){ {}{} }Val _m,$__7__:Array [Boolean ,02];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4458))

    def test_4459(self):
        input = '''Class cL_:_{}Class __:t{}Class t:_{Var O4_,_,_:Array [Float ,064];_5(_,q:_){}$nhy(){}Var $_:Array [Array [Array [Array [String ,0xE],0b1000101],1],61];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4459))

    def test_4460(self):
        input = '''Class U:_mE{_6(_4_g:Float ;UH:_){}Var $8_X,$__:__JK_;Val $_:w__;}Class P:_{Constructor (t3J:Array [Float ,0b1001011]){} }Class e:j4{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4460))

    def test_4461(self):
        input = '''Class _:eR{_(_673,t2368E:Array [Boolean ,0B10100]){} }Class _:_{Constructor (_k,_,_30Y:Array [String ,062];__,UW,M_,Te:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4461))

    def test_4462(self):
        input = '''Class _K_{Var cD,Y,_:HG2_;}Class _{$l(_la__8975_,g_,n02_:Array [Array [Array [Array [Array [Float ,0B1],0b1000011],0x12],0x9_DB_C],0XBB_A_1];_2_:_2){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4462))

    def test_4463(self):
        input = '''Class _{}Class ___{Destructor (){}Constructor (){Continue ;}Destructor (){} }Class _{Constructor (_:Array [Int ,0X34];__:Float ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4463))

    def test_4464(self):
        input = '''Class U_:w{Val $4:Array [String ,8_1_566_5];Var f,_:Array [Array [Array [Array [Array [Array [Boolean ,05],0xB],4],06],067],4];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4464))

    def test_4465(self):
        input = '''Class p:_af4{$4(__XzQ_,U_K:S;l9L,w:Array [Array [Array [Array [Array [Boolean ,0B1],0b1],0x40],0xF],011];X,_,_P:xvM){Break ;Continue ;Break ;Break ;}Val _,$g_,$c:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4465))

    def test_4466(self):
        input = '''Class _:_D{}Class l{}Class M:a{Var $4,$z:Array [Array [Int ,0B1],04];Constructor (g8:Array [Int ,035];_,H2:Boolean ;X:Array [Int ,031];_,_:Int ){Var ___w5w:Boolean ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4466))

    def test_4467(self):
        input = '''Class E:X{Constructor (W_n,_40VbJ_:Int ;o_,__6V:Array [Array [Float ,77],6];H,A:Array [Array [Array [Float ,1],0XF_C],0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4467))

    def test_4468(self):
        input = '''Class _8k{Val I7,Dx3AA,$M6,_:Array [Array [String ,0B10000],047];}Class b:_03_{Destructor (){Break ;} }Class l9{Destructor (){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4468))

    def test_4469(self):
        input = '''Class __6:g{Constructor (_,_,_:String ){}Destructor (){}Constructor (){}Constructor (___00,X_w:_;_:Array [Boolean ,99];_,_4,__:Array [Array [Array [Array [Array [Float ,0126],0126],0126],0X4C],0b111111]){}Var _:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4469))

    def test_4470(self):
        input = '''Class _:_{Constructor (mvC7,_o,_L_VG_,__,k0,s3:_;u_,m:J5;F:w4;L_,_,__7:Array [String ,0B1];n:Array [Int ,0B100001]){}Constructor (_:Array [Array [Array [Int ,0B100001],07],0125]){} }Class G:X78{Val P,R:Int ;Val E_,Y4:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4470))

    def test_4471(self):
        input = '''Class _:_{}Class _:U{Constructor (__:String ;_:String ;_z1,o8:Int ;_37,i:Array [Array [Boolean ,053],0b1100100];_66,m7:Boolean ){} }Class _{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4471))

    def test_4472(self):
        input = '''Class ___:_6_Sm{}Class gym{Constructor (){}Val _:Array [Array [Array [Array [Array [Array [Int ,0b1000001],78],7_0],057],0B1],5_6_0_6_2_7];Val U,___B_,_,$54:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4472))

    def test_4473(self):
        input = '''Class l{Val _,$8,__,w_:Array [Array [Array [Array [Array [Array [Float ,84],4],0X8E10_7],0126],0X8],0xA];__(){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4473))

    def test_4474(self):
        input = '''Class X:_1p_{}Class r{Destructor (){} }Class h{Destructor (){} }Class T{$xs_(_OhA:Array [Array [Boolean ,0B1000100],066];b:Boolean ;_ct362:_;__z_,_,D_,_:b;o,n2,qv,O_:Array [Array [Float ,0X67_3_45_3_E],0B1000100];_,_,i:Array [Array [String ,0x10],0X40];_s1:Boolean ;p:_){} }Class _:N{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4474))

    def test_4475(self):
        input = '''Class C546:_{Var $c,$3:Int ;Val $7,_:Array [Float ,01];$_(){Break ;}Val _,$6:Array [Array [Array [Int ,5_99],0B1],032];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4475))

    def test_4476(self):
        input = '''Class f6R:_F{Var $H,c,$1:Array [Boolean ,12];Val f,$_,$6sV:_;_(_,_I,G_:Array [Array [Array [Float ,0b111100],05_4_0_1_5_7],0b111100]){} }Class _:A_{}Class aP_:i{}Class z:W{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4476))

    def test_4477(self):
        input = '''Class s_{}Class _:XL_{Var $_,f,_,$J,__0_E,_h4:String ;Var $811_,_,$9,$Jv,$c_15_,$8,$X:_q;Destructor (){} }Class _81:_1h{}Class vw{Constructor (){}Destructor (){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4477))

    def test_4478(self):
        input = '''Class d9:_7N__5{Val $0__8P4:Array [Array [Array [Int ,0x1_7_8],0B10_1],23];}Class _8:c{Destructor (){Break ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4478))

    def test_4479(self):
        input = '''Class _:V__{d(__,__:_){Continue ;}Var $96_,__:Array [String ,04];Destructor (){}Constructor (_7,_:Int ){}Destructor (){}u(){Return ;}$7(){}Var $F_:Float ;Destructor (){Continue ;}_(){}_(c:_;t:Array [Array [Array [String ,0x2A],0B1000101],0x7]){Var _0D_:Array [Array [String ,3],0X8];} }Class _21{Destructor (){Return ;}Constructor (_ZB2,J:Array [Array [Array [Int ,06_2_26],0B1],0XB];_:__;w1,X,u3o,B,_:Int ;c5,_2__,_9N_4:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4479))

    def test_4480(self):
        input = '''Class v:_0{Constructor (){}$8Q(J:D;_4l95g5E_,J,_:A;XZ_,_J_,Hx,h_,__Eg:U;f2_f6,a_,o2,_1j_4_:Array [Boolean ,0b1011000];_,_2:_;_:Array [Array [String ,60],0XE_7_8];dH4,E1,_O:Array [Int ,60];w_,_4__,__,M:String ){Break ;Break ;} }Class T6:q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4480))

    def test_4481(self):
        input = '''Class _{}Class x{D(__,r,K8:T_t;E:_0P){Continue ;}Var x:c_;Val $g:Array [Array [String ,0x50],0b1_00];}Class g_:v{Destructor (){Break ;}Constructor (){} }Class t{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4481))

    def test_4482(self):
        input = '''Class _{Destructor (){}Constructor (_t:Array [Array [Array [Array [Array [Array [String ,8],01],0X2A],0B1001],73],02];j_,b852_2_5:Array [Float ,06_3];f_,_1:_CZM;_:Array [Array [Array [Int ,02],8],4_0];x,f__F:_;_:Array [Boolean ,0b1];__6,_8,_:__FLh;d9T0_C,_L5,_9i_Y:_2){} }Class n5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4482))

    def test_4483(self):
        input = '''Class G{}Class G_:__22{Destructor (){Var _,_:Array [Array [String ,0x62],3_2_5];} }Class L:q{}Class _{Constructor (z,__,p4_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4483))

    def test_4484(self):
        input = '''Class S9{_(){Return ;Break ;} }Class _:F1t2j_L_{}Class _W{Val $_j:Float ;Constructor (){Break ;Continue ;} }Class _q35{Constructor (r,__:O){Var F:Boolean ;}Constructor (_,__f:Array [String ,0B11]){}$1(){}$6(__3:Array [Array [Array [Array [Int ,0X64],03],0X3_B],0b111100];_,k2:Array [String ,052]){Continue ;{Break ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4484))

    def test_4485(self):
        input = '''Class _:ga{Var $U,x:Array [String ,76];Val _o,$QK_1,e:Boolean ;Constructor (__,_:Int ;__,db8h:Array [Array [Array [Boolean ,9_85_1],0b1],76]){}Destructor (){Var __:Int ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4485))

    def test_4486(self):
        input = '''Class e:_D{Constructor (___,_4DYn:Int ){Continue ;}Var ___x2PhJ,_0_,$H_0_8A9,$_J_:_;$_(j,r4CD,G,_,B:Int ;_,_2_:Array [Array [Int ,71],0X6];_i8:Boolean ){}Var Nb,$9_G34,_i,_G,c_,$4,_:Array [Array [Array [Array [Array [Int ,0122],8],0b10010],0122],0x2AF];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4486))

    def test_4487(self):
        input = '''Class _0:_5Y_{Val _,Y,$0:Float ;}Class d{Val $8:Array [Array [Int ,0x53],0b1111];Val $m4:Array [Boolean ,0b1111];}Class _:__{Constructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4487))

    def test_4488(self):
        input = '''Class y__{Destructor (){Var C:Array [Array [Array [Boolean ,0B110011],0B1_1],0X38];} }Class j__{Constructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4488))

    def test_4489(self):
        input = '''Class I_{}Class _:CD{Val $3_h:Array [Array [Array [Array [Array [Int ,04_3],0B1001010],5],0b1111],651];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4489))

    def test_4490(self):
        input = '''Class rR{}Class ___Xr{Val c7,pR:Array [Array [Array [Float ,0b1010001],0X4A],0476];Var __,$2:YwN3n____;Destructor (){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4490))

    def test_4491(self):
        input = '''Class _E_{$_Eu2(_H__:__;_:Array [String ,0B1001000];D_,Q_,_:_){Var m,__3,mm_:Array [Array [Array [Float ,88],0127],0x4_9_8];} }Class x{$9(_K:Array [Array [Array [Float ,3_1],0127],0X56];o,_,Z3_159,X,P:Array [Array [Boolean ,0X56],0B1];G:_k;I1:Array [Array [String ,3],0X2_2_8];__,_:Array [Boolean ,0B1]){} }Class B5O:g10a_9{}Class C8:w{Destructor (){}Var $_:Int ;Val $o_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4491))

    def test_4492(self):
        input = '''Class _75_{Val $M,$_:TWh_53;Val $6WEV_i_:String ;}Class ZTu5{Destructor (){}Constructor (____,Wx8m:Array [Array [Int ,48],36];Q_,NFP,_L_2:Array [Array [Array [String ,0X3_7],043],0b1];_7_,t8,_:G){}$_(){} }Class Y{$_(_,W_:String ){} }Class _{}Class _:_{Var _,__6q:Array [Array [Array [String ,065],6_2],05];Constructor (_I_,_:String ){ {} }}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4492))

    def test_4493(self):
        input = '''Class _{r2_7(_,m,_,_,__:Array [Array [String ,0124],35];y:Array [Int ,0B1_0];_:Boolean ;_:Float ;C,_,x:Array [String ,0X5C];_,_:Array [Array [Array [Array [Array [Float ,0x18],0X82],0x6B9_18],03],0b1];_,_81:Float ){} }Class _E:RD{}Class _:j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4493))

    def test_4494(self):
        input = '''Class _wl{Constructor (r,z:Array [Float ,0XC];qJ,c:String ){}Destructor (){}Val _l:String ;Val ___:Array [Float ,054_6_57];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4494))

    def test_4495(self):
        input = '''Class _:O{}Class _:B{}Class I9_:o{}Class _:n{Var $x:Array [Float ,4];Val _3u:Array [Array [Int ,0b1],0b1];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4495))

    def test_4496(self):
        input = '''Class _y{}Class ue:ZD_3{Destructor (){} }Class T:Q_{}Class __:__G{Val _:Float ;Val $m:String ;}Class _{Destructor (){ {}{} }Constructor (D7:_I;_c,X:Boolean ){Continue ;}Var __:Float ;}Class e:____{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4496))

    def test_4497(self):
        input = '''Class Ns:__7_637{Val $4o7:u;$6(){}Val $_l,X,$i_2__:Int ;Constructor (){Break ;Continue ;Return ;Break ;}Constructor (lGT,K,_,_:String ){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4497))

    def test_4498(self):
        input = '''Class YQG{Val $_uUo:Array [Array [Array [Array [String ,035],0X7B],0B110110],0B11];}Class __SJm{Destructor (){Val C,A:____Z;} }Class J:X1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4498))

    def test_4499(self):
        input = '''Class T__{}Class _{Val _:Int ;$_(_81,t:a){ {Return ;Var h,X_:Int ;} }}Class _{}Class _{Val B,_:Array [Array [Boolean ,050],03];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4499))

    def test_4500(self):
        input = '''Class A:b{Val $2,$3,$29_,$4P,__,T,J_,$9:_4qU;}Class s{Var $m4:Array [Array [Array [Boolean ,4_7_6],02_5],06_1];}Class cF:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4500))

    def test_4501(self):
        input = '''Class _2_:s{}Class _R:Z0k{Val c_:Boolean ;Var x:String ;}Class p:_T4U{}Class xU:__X{}Class eD{$4m(_9:Float ;F__z3:Float ){Return ;} }Class p{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4501))

    def test_4502(self):
        input = '''Class __:_{}Class q8{}Class ga{Val s_,_O6g8:Array [Array [Array [Float ,0B1],9_55],25];Destructor (){}Constructor (r:Float ;_:Array [String ,0B10101]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4502))

    def test_4503(self):
        input = '''Class _:m_JR_2_9I_{Var _72,__W__:Array [Boolean ,06];$_(b7,_B,_,_:Array [Boolean ,46]){Break ;}Constructor (){}Destructor (){Break ;} }Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4503))

    def test_4504(self):
        input = '''Class _{Var $v:_Q;Constructor (){}Var $1___:Boolean ;}Class _3:_{}Class _:y{Val _t,pY_:Array [String ,0B1];$4(_3,k_3:String ){} }Class s{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4504))

    def test_4505(self):
        input = '''Class x:x_{}Class _:L{}Class _:__{Val $3:Boolean ;}Class Q_:_507_{Constructor (B6,M2_:Array [String ,0X1F]){Return ;} }Class G{_(){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4505))

    def test_4506(self):
        input = '''Class K_486_AtZ:e{A_(__,_08,_0_,c,v57:Int ;N,_U:Array [Array [Array [Float ,69],0b10],0X24];K_:Boolean ){} }Class __:A_1{Val Q:i_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4506))

    def test_4507(self):
        input = '''Class _:_G_{Val $_uF5:Array [String ,0X61];$_(k:Boolean ){}Var $_3_:Array [Boolean ,82];Var $m,x5:Int ;Constructor (kik:_2;_0e:_sK){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4507))

    def test_4508(self):
        input = '''Class ai3:_{Val $_,$4_9:Float ;}Class k:P3{Val _,$8__b:Array [Array [Array [Boolean ,0b1],0XB68_A],034];Var $_:Array [Array [Int ,03577],1_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4508))

    def test_4509(self):
        input = '''Class y:A{Var $i,$z0__:_;Val _,_:Array [Boolean ,04];G(){ {}Break ;}Constructor (X3:Boolean ){}Constructor (mV,_,_,hn,_:Array [Array [Int ,072_4],05_0];a,i:Array [Array [Array [Array [Int ,63],0B11_0],02],0X235];_:Array [Array [Boolean ,0B1100010],0b10]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4509))

    def test_4510(self):
        input = '''Class _3y:_x{Var _5,_d5_X9:Array [Array [Array [Array [Array [Int ,0B1_1],0b1001100],98],98],0b1001100];$O6d(__,_A4,_U:Int ;n,_:eoV_N;_DH,a:Array [String ,98]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4510))

    def test_4511(self):
        input = '''Class _{}Class _{}Class O_{Val b:Array [Array [String ,0x55],0X22];Destructor (){k_C::$7_9()._C();}_e_(){} }Class Y_{}Class hm_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4511))

    def test_4512(self):
        input = '''Class f_{Var $_,_:Array [Array [Float ,0B1001000],34];}Class _q:_{$D___(){Val V:Array [Array [Array [String ,3],0X4B],34];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4512))

    def test_4513(self):
        input = '''Class _1{Constructor (){}Constructor (){} }Class _{Var $67,s_T:K;}Class _:_9{}Class O_V1291_{Val _3_4,I,$__:Nu;Var $7_:_;Val W_98:Array [String ,0B100];$n(){X2::$v()._._3B();{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4513))

    def test_4514(self):
        input = '''Class _3:_{Val $BqX2:Int ;_8(Q,_,D,_,_:Array [Array [Int ,062],0xE];_7_0:Array [Array [Array [Array [String ,02_5_2],0136],0X9_B9_6],04];_1_d:Array [String ,5_2];_J_,_:Int ){}Constructor (_:Int ;_y,K6,e,__:i){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4514))

    def test_4515(self):
        input = '''Class _{}Class p_{Constructor (m6W9:Float ;Tq,_,IA_29,_UM:Array [Array [Array [Int ,2],01],0X8EC0];__j,_X3,V,ofY,X:Float ){} }Class Z69:V{}Class _4_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4515))

    def test_4516(self):
        input = '''Class j:N{}Class _4:e6{}Class l{Destructor (){} }Class _6:D{Var _,_l:Array [Int ,0B1];Destructor (){Continue ;}Var _:Array [Float ,53];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4516))

    def test_4517(self):
        input = '''Class _G:__{Destructor (){} }Class Z:_{}Class _3{Constructor (V,d:Boolean ;T:Array [Float ,93];r_:B){}p(){}Destructor (){Var e5__,_,_,Y:Boolean ;}Var $_M:Array [Array [Array [Boolean ,0B1],0B1100100],0114];Constructor (){ {} }Constructor (__,_:Array [String ,0x9];E:Array [Boolean ,7]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4517))

    def test_4518(self):
        input = '''Class _:B{}Class _{F_(_,IO:Array [Float ,01]){Break ;Return ;}Var $__,u,i,$_3:Array [Int ,0b1100000];}Class _:N{Destructor (){} }Class R_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4518))

    def test_4519(self):
        input = '''Class _:dd2{}Class C_nTq62{Constructor (){}Val _:Array [Float ,4];}Class Vx{Val $d,$M_,$_O,$3,$Y:Array [Boolean ,94];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4519))

    def test_4520(self):
        input = '''Class _:_n68_{Destructor (){} }Class c:h{Var $0J:Array [Array [Array [String ,043],0X7],0b1_00_0];$62(){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4520))

    def test_4521(self):
        input = '''Class _3Q{Destructor (){Var e1_,n,_:_;}Constructor (E3,_F_,s__,da,R,__0,_9:Array [Int ,03];_,_b9,_T,_A,_q:Float ;_:Array [Boolean ,0XA];R_q:_pE;_S:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4521))

    def test_4522(self):
        input = '''Class _8:B{}Class _59:Z_9{}Class _5__{Val _v,$82:String ;Destructor (){}Var $0_0_o,$_1F:Array [Array [Int ,3],8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4522))

    def test_4523(self):
        input = '''Class __{Constructor (__X_k:Array [Array [Array [Array [Array [Array [Boolean ,0B100000],0x5C],06],0B100000],071],0B100000];_:u2;__:Array [Array [Array [Float ,05],0b1101],100]){____3_k_::$_._Nw.O9U94Z4F3();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4523))

    def test_4524(self):
        input = '''Class Jm{__7(_:Int ;Rj,_:Float ;JZg_8O_:Array [Boolean ,0x54]){} }Class I_:_s{Val $r_E0_,$__S:Array [Array [String ,0b1],0X34];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4524))

    def test_4525(self):
        input = '''Class _{Constructor (v:Int ){}Constructor (S:_;d:Array [String ,0b1100];_u:Array [Float ,0b1100];D_zX8,__w9M,O_:Array [Array [String ,0x45],0xA];A_1u:Boolean ;_:Float ;u,Pcq:Array [Array [Array [Int ,0X66],0B11],04]){} }Class _{Var _,f,Q:Jh;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4525))

    def test_4526(self):
        input = '''Class _:_{}Class pY4{}Class _:_S_q{Constructor (sD,JF_,m__:Array [Array [Array [Array [String ,022],0X4C],054_7],35]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4526))

    def test_4527(self):
        input = '''Class _7Ydy9_:UQ0TT{iA(_33,e:Float ;f6,v_96_2P,e:Array [Array [Array [Array [Array [Array [Int ,0115],0xD],0b1_1],0x46],05],0b111000]){}Constructor (H:Float ;A_:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4527))

    def test_4528(self):
        input = '''Class w6__g{Destructor (){}Val _:Array [Boolean ,826_4_4_0];k8_R(_L:Int ;a:_7;Q:Array [String ,0240];me,F,_B5:Int ;_R:Boolean ){}Val $1:Array [Array [Int ,44],04_0];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4528))

    def test_4529(self):
        input = '''Class _E{Var P,$m,$_:Array [Array [Array [Array [Array [Boolean ,0B1_0],91],03_1_7],0114],91];Val $_:_X;Var M4__41:g;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4529))

    def test_4530(self):
        input = '''Class a:aG{Constructor (_5p:Int ;JO__rV:__){}Var $_,$__,_2:Array [Array [Array [Array [Array [Boolean ,0B111110],7],04],7],4_8];}Class g{Destructor (){T::$l();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4530))

    def test_4531(self):
        input = '''Class _:_{}Class _k:_2{Constructor (){Val _1:Array [Array [Int ,76_9_71],2_2];} }Class _tX{}Class _r9:_{}Class W{$6(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4531))

    def test_4532(self):
        input = '''Class _{Val _,$144,_,$5:_7_71;}Class _p_:AH{}Class _7_:_u_{}Class _{Var $_m:Float ;}Class _:__{}Class Y{}Class T{Val $G1,_:Array [Boolean ,0X39];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4532))

    def test_4533(self):
        input = '''Class K2:_{Val _1,$0,c_:Array [Array [Array [Float ,7],60],0x4];Val $1z____:Array [Array [Float ,60],4];Var r,_b,$_:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4533))

    def test_4534(self):
        input = '''Class __:Z_{Var W:Int ;Val $5_6:Array [Array [String ,0b1_1_1_00],7];}Class _{Constructor (M,_1_7,f__:Array [Array [String ,0X48],0123]){} }Class x{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4534))

    def test_4535(self):
        input = '''Class _{Var _X,j,$_:Array [Array [Array [Boolean ,0xD],0XE],05];Val $6:Array [Array [Int ,0B1101],12];}Class _{Destructor (){} }Class u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4535))

    def test_4536(self):
        input = '''Class _{$1d_(i,_:F0;_,E_,G,_,__:Array [Array [Boolean ,0B1],0X1_C_54F];_Na:___;w0_,Z,_8:Array [Array [Array [String ,021],0xF],0x1C]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4536))

    def test_4537(self):
        input = '''Class _{__O(cAY,S,id:_){} }Class _2{}Class _{Val $G42:Array [Int ,0X5];Constructor (o,_:Array [Boolean ,0b110]){} }Class S_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4537))

    def test_4538(self):
        input = '''Class _{}Class __{Val $TQ56:Array [Array [String ,44],064];}Class _uO:i{}Class __{L(){}Constructor (){}Val CR,t2,$1_,_,$Dv,$9L92V,_:_K;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4538))

    def test_4539(self):
        input = '''Class _3:D5{Destructor (){.9E498.__.J._();_7::$y();}Val z7,$1,$8_:_u9;}Class R{_j_(f:Array [Array [Array [Array [String ,0xB],0b11],0B1],7];gCI70y:zQ5){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4539))

    def test_4540(self):
        input = '''Class ho{Val $__7,a:Boolean ;}Class j:__{Constructor (_:Array [Array [Array [Int ,0B110],01],0B11_0];_3_,__r:Array [Array [Array [String ,0x4F],06_7_1_3],07]){} }Class S_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4540))

    def test_4541(self):
        input = '''Class M:___sZ{}Class __x:_lig{}Class _{}Class H:F3{Destructor (){} }Class J:P_{Val $__,$3,$b,_,$P:String ;J_(){}Destructor (){Break ;{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4541))

    def test_4542(self):
        input = '''Class __{}Class q{Val $3e0,C8T:Float ;Val $28_i,$_,$_,$2vJ,$7,_,x,$d:Array [Float ,0XB_1E];Val z_d:Array [Array [Array [Boolean ,0X13],040],86];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4542))

    def test_4543(self):
        input = '''Class d1iL__{Destructor (){}Constructor (G3,n5,_:Array [Int ,0XC];_:Float ){} }Class o:_I{$BS(){}Var $_,_5_Vi_9,__:_;Var $96,T8:F;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4543))

    def test_4544(self):
        input = '''Class _{}Class f:Z_0{}Class _1{Destructor (){}$4(){Val T__,_:Array [String ,14];}Constructor (_,_:Array [Array [Array [Array [Boolean ,14],06_6_53],4],0b1_1]){Break ;}Val e1W,B:Array [Array [Array [Array [Array [Boolean ,0b10100],0x2_6_2],0B111],14],879];}Class _NUP_3_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4544))

    def test_4545(self):
        input = '''Class N{Constructor (){} }Class t:_{Constructor (_,_dc,L__:G_zI;_,__QF_,_3,g,kX:Array [String ,0X2]){Continue ;} }Class _:_{E4(an__0_:Boolean ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4545))

    def test_4546(self):
        input = '''Class _:wzDz{Val _K2C,$_T,C_:Array [Array [Array [Array [Array [Array [Boolean ,61],04],03],61],6],0X59];}Class z:M{}Class _{Val u6_,$_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4546))

    def test_4547(self):
        input = '''Class _{}Class _4{$5(){}Destructor (){}Val $n93,s_,_:Array [Array [Array [Array [Array [Int ,3],0b10_10_0],0b10001],0124],0124];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4547))

    def test_4548(self):
        input = '''Class D3___{}Class r{}Class _{Constructor (_:Bv){Break ;}$7(){}Constructor (x,__3_770,x7j,yc12:Int ;_:B){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4548))

    def test_4549(self):
        input = '''Class _2{}Class _{Constructor (_1xN:Array [Array [Array [Array [Array [Array [Float ,07],055_5],0B110011],0xF5],0b1_1],0B1];_80Y,__,hK_,_,a,g,d5,Lo:Array [Int ,0X489];_,_,C,U:e;w,S:Int ){Break ;}Val M2Y,_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4549))

    def test_4550(self):
        input = '''Class S:D6_{Var _,_,$5:Array [Array [Array [Array [String ,0x6],39],0B11],0X61];}Class _l:d2___{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4550))

    def test_4551(self):
        input = '''Class _{Var V8:Array [Boolean ,0X5D];Constructor (){} }Class _{}Class _g{Constructor (veY_,M9:Array [String ,03_3_4_07];L6h:Int ){Return ;Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4551))

    def test_4552(self):
        input = '''Class _{Constructor (){} }Class G{__(C32:Array [Array [Boolean ,07],0xC];r,__,P_C,Y7_o,k_:Array [Int ,0b111]){}Var _Wy7W:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4552))

    def test_4553(self):
        input = '''Class _24:___{Constructor (){}Constructor (_,_:pf_){}Var x_,G:Array [Array [Array [Array [Int ,04],0B1_01],0b111],0B1_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4553))

    def test_4554(self):
        input = '''Class _:Y_{Constructor (Y15_9,_95:gfbw;z2,_,__,C8l:Array [Boolean ,53];x,_,o_,E_9nE_Ef8:A;u_7f___W_7,P:_){ {} }}Class f9_{}Class _:_1_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4554))

    def test_4555(self):
        input = '''Class y{_(x,_:Boolean ){Break ;}Var j_:Array [Array [Array [Array [Array [Array [Array [Int ,0b1_0_1],062],0B100011],0b10001],0x5C],0x5C],062];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4555))

    def test_4556(self):
        input = '''Class __:v{}Class _3:XT_G{Val $1,$_6,q,__B4_,_,$_,$__,_r4,$X,J,_:Array [String ,64];_1_(_,O7T,r_O:Int ;m__8,rM,__,j,k__J,_U:Array [Int ,0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4556))

    def test_4557(self):
        input = '''Class _Z_:_{Constructor (_:H;M,Q_:Boolean ){}$__5X(_:Array [Boolean ,18];d2X9MY_,F,o_,_,O9:Array [String ,18]){} }Class E_:Z5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4557))

    def test_4558(self):
        input = '''Class f{}Class M_6:K{Constructor (_2H_,_:Array [Array [String ,0X24],0b100]){}Var _D,$v7Dv97,$_:Array [Array [Int ,04],0B10];Var $5:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4558))

    def test_4559(self):
        input = '''Class _1:__{}Class k:M{Var $5:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0XA],0X6_2B5],0b1011100],0X3],24],0x5D],39],0X13],07],0B1];}Class __P_65y1{}Class H5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4559))

    def test_4560(self):
        input = '''Class __a:_{}Class _b__:___dR_4{Val $33:Array [Array [Array [Array [Array [String ,0xC],03_3_2_1704],4],4_0_7],9];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4560))

    def test_4561(self):
        input = '''Class X{Val W3__:Array [String ,0XF_0B];Val $_:Array [Array [Array [Array [Array [String ,17],0X3F],0X6],01],0b1];Val $_,H,SO_,_,$_,w,_,$B_,r,$Jf:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4561))

    def test_4562(self):
        input = '''Class _:v{_H(){} }Class __0_3D_{}Class _:_{}Class s:_{}Class G7:x{}Class _P:K{}Class _73:LRN_3{}Class _{}Class _rlM00{Destructor (){} }Class _:KK16{}Class _{Destructor (){}Val $_:Array [Boolean ,053];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4562))

    def test_4563(self):
        input = '''Class pq:_{Destructor (){}Var $_,$q:_964_;}Class _{Var U06:_;}Class q:_7{}Class _{Destructor (){j::$G();} }Class b__25:K__1_0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4563))

    def test_4564(self):
        input = '''Class c:_7{}Class s:p{}Class A{}Class _:X__3z0{}Class q:t{$78F(__,_3D6_,_,_,_,_,_4:Boolean ;_,_:Array [Array [Array [Array [Float ,31],0x9],0136],0136]){}v(__:_;j8:_44;S:Boolean ;_:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4564))

    def test_4565(self):
        input = '''Class _{}Class Y__{$1_(u_k,gy7:Boolean ){Continue ;}l(_8:__J7;a_,____9v_,__D_1,c,p2:lA;s,J_,Fi:F){Continue ;} }Class _u_2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4565))

    def test_4566(self):
        input = '''Class z__aT{}Class _:v_O{$2(v,kaY:Array [Array [Array [Float ,2],06],0X63];T656axG3:Array [Int ,0X63];hv5,t,n:Float ){}Constructor (){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4566))

    def test_4567(self):
        input = '''Class b:B{Val __y,Y:Array [Array [Array [Array [Array [Array [Array [Int ,0X6EC],0B11011],0B1],0b1_0_0_01],0x6],0141],83];$2P(__T_:Float ){Continue ;}Constructor (tL,Z:Array [String ,0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4567))

    def test_4568(self):
        input = '''Class pn_v_{Destructor (){}Destructor (){} }Class _62{Var $_X9,__:Array [Array [Array [Array [Array [Array [Float ,7],0XF],0X39_8_2D],0b1],031],5];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4568))

    def test_4569(self):
        input = '''Class _:O4FT{Z(B,__:KM){} }Class _:_4{Var _1_,$4I,_,j5:String ;}Class _:_{z(_4,_:Array [Array [Array [Array [Array [Boolean ,0b100000],84],0b1],0b10_1],0x1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4569))

    def test_4570(self):
        input = '''Class vn2:E___{Constructor (e8V__:Float ;L:Array [Array [Boolean ,18_7_2],0B1011001];y:Array [Array [Array [Array [Array [Int ,023],0B1011001],023],0b111111],023]){}Val __08,$i,_,_,_,$10,xg,_:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4570))

    def test_4571(self):
        input = '''Class _4{Var $_,M,$___mR:Array [Array [String ,073_0_652_2],6];}Class G:t{}Class __j_:_{}Class _:_{}Class _IZ:O{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4571))

    def test_4572(self):
        input = '''Class ___:_x1{}Class _{F(_:y;O,_6o_,_y,_y58,_G57P:Array [Array [Array [Array [String ,0x25],0X28],31],0x25];i___,U:Boolean ){}Var h:Array [Array [Array [Float ,8_1],0X921_8_1],64];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4572))

    def test_4573(self):
        input = '''Class _{}Class l:_u{Destructor (){}Var G,$b_:Array [Array [Array [Array [Int ,0b1011101],0b1_00],0b1],0x1_F];$x5(_T1WQlq0,J,_:Float ;t,_u:Array [Array [Array [Array [Int ,05353],0137],0x2],8]){}Constructor (){} }Class xj98{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4573))

    def test_4574(self):
        input = '''Class E:_m{}Class Vpbq{QgJ4(_:Array [Array [Array [Float ,0b1],0xF],0X1_B5_C];y:Array [Int ,46]){} }Class Q_A_:C{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4574))

    def test_4575(self):
        input = '''Class b{Var $_,_2_D:_;Constructor (){}Constructor (_:Boolean ;P,_p,_:Array [Array [Array [Array [Array [Array [Float ,74],0X9B_D_7],015],02],0X79_4_C_A],0B110011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4575))

    def test_4576(self):
        input = '''Class f:_3__{Val $S,_KV_,_5gS:Array [Array [Array [String ,0XF_D7_35D],02],01];Destructor (){} }Class t:__3_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4576))

    def test_4577(self):
        input = '''Class P_{}Class _{Destructor (){}$bS(){} }Class __:G8X{Var _:Array [Array [Array [Boolean ,0B1_1],31],6];$_9(_:Array [Float ,31]){ {{} }} }Class K{}Class t1_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4577))

    def test_4578(self):
        input = '''Class _T:_{}Class _c{Val _0,_:Boolean ;Constructor (){}$E(_3c:g_S){}Val $_,$T,$5:Array [Array [String ,01],0x4];}Class s_:__C{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4578))

    def test_4579(self):
        input = '''Class _2{Constructor (_,C_:Array [Array [Array [Array [Float ,52],0B101011],8_64],0B101011];_:Boolean ){Continue ;}Val $_:___C;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4579))

    def test_4580(self):
        input = '''Class _{Val d,_:_;}Class _{_(O2,_,_,__,__:_N;a:Int ;yJ_:String ;__,A:_6IQ){}_(){} }Class _:e_{}Class _M408:__P{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4580))

    def test_4581(self):
        input = '''Class OK:___1{}Class _4:_{}Class _r:_{Var $RS:_;$5_c(){} }Class T_6{Var $c:Array [Array [Array [Array [Float ,050],0X6],36],36];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4581))

    def test_4582(self):
        input = '''Class _9_:p{}Class b_:_3R{Constructor (hL0,p_:Array [Array [Array [Float ,0B1],025],0B1011011];_:Array [Int ,0b1101];_,Y,_,_6:Int ;_U_:Boolean ;d4r:_3){}Var x:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4582))

    def test_4583(self):
        input = '''Class s4N__:M{Constructor (N3,p,_,C:_v;_:_9IL7Z4W_b3_44){} }Class ZU{Var $W,$pFi,_i6_,$3Z,$_6,_,$O_4l:Array [Array [Int ,0X6],021];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4583))

    def test_4584(self):
        input = '''Class _{}Class _a9__W7{}Class v:Q{Var u:Array [Int ,0x5];E9(l_5,VX7,XT,_:K_){} }Class R{Destructor (){m8_3::$87();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4584))

    def test_4585(self):
        input = '''Class _:_{}Class mT:Z{$QT(_L2,_,_,_0:Int ;q,G:Array [Array [Array [Array [Array [Boolean ,043],0B111111],0x4C],043],06];p_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4585))

    def test_4586(self):
        input = '''Class _{Constructor (_I_:String ;T3:Y;N:String ;P4d_,N,__:Boolean ){}Constructor (){Break ;Val Zy:_;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4586))

    def test_4587(self):
        input = '''Class __:l{Constructor (BR,__,_5:Array [Float ,02_3]){Return ;}Val pD,$R7,e:Array [Array [Array [Float ,0114],0B11_1],0X2C];}Class _Y:z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4587))

    def test_4588(self):
        input = '''Class _{Constructor (j54__96:Array [Float ,0X18];_6Bta:S;_e,h:f_){} }Class LR:_{}Class _{Destructor (){}Var $_5:Boolean ;Constructor (){Continue ;} }Class _09_8{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4588))

    def test_4589(self):
        input = '''Class O3{Val i:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,2_2_1_0],8],0b1010000],0x23],0b1],0B1110],3],01_2],0X3_2];$p(){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4589))

    def test_4590(self):
        input = '''Class R5{}Class _x{}Class GBK0:_z_{L9(m,_:Array [Array [Int ,0X5B],0X2A2];_,_R,Y2_,t_Iu,_,l__w:Array [Array [Array [Array [Boolean ,0b1],0b101_1],2],0XB]){}$62_(){} }Class yH7:__{Destructor (){} }Class u{}Class __Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4590))

    def test_4591(self):
        input = '''Class z9l_q:_{}Class Dj{}Class i_NK_{Destructor (){}R(__8:Array [Array [String ,0X44],0x2]){}Destructor (){} }Class B:D{t2(O:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4591))

    def test_4592(self):
        input = '''Class O_:G{Destructor (){}Var $_2:_;Var $5_3_:Array [Array [String ,0X9],0X2D];}Class _I{Constructor (){} }Class i{}Class _{Val $Jf_,_,$W1:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4592))

    def test_4593(self):
        input = '''Class A:u1__7_z2_2{}Class _{Destructor (){}Var $_s2y,$44,$_M,_,Y,E:Int ;Constructor (__:Float ){}$h_L(L:f){O::$E__();Var H:_r_;} }Class j:__{}Class _:T_3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4593))

    def test_4594(self):
        input = '''Class _22y:_Bz{Var $3F1,__,__,$2_9,_8__:Array [String ,030_1];}Class __{Destructor (){Var g30:rv6Q;}Val _,$7:M_cl__2;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4594))

    def test_4595(self):
        input = '''Class ___:n{}Class _Pn_:__{Constructor (_u,c,B1_t_4K_6x:Array [String ,25];_l,x:Array [Float ,0B1_0]){}Val _4,__,e_6:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4595))

    def test_4596(self):
        input = '''Class t{Var _:_;Val _:Array [Array [Array [Float ,0X5],0B1000101],0b1011011];Destructor (){} }Class _x_{Var w,_E:Array [Boolean ,0125];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4596))

    def test_4597(self):
        input = '''Class b89:X{}Class _:_{}Class K:__{}Class _i{}Class _{Destructor (){} }Class _:_5{}Class Q{}Class W{$87(){} }Class B{}Class V{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4597))

    def test_4598(self):
        input = '''Class h{Constructor (_:_p;W87,___m,_,_4__B,S3G0:__;NC:Array [Array [Array [Float ,0b1],3_8],0B11];o,__y3:Array [Int ,0b1011];__:Boolean ;__:Array [Int ,06_1_2_1]){} }Class B_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4598))

    def test_4599(self):
        input = '''Class M{Val x8_,_,$___,_7,$_:Array [Array [Array [Array [Array [Boolean ,0B1],026],18],8_3],0B1_1001_0];}Class _6:j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4599))

    def test_4600(self):
        input = '''Class _:B_7_7{$8(N5M6,_I,_:_){} }Class v7:_{Destructor (){}$N(n_91:Boolean ;__,_U_,_,r_1_:Int ;x:o_qS){ {Break ;}Break ;}Constructor (){}$9(Y8,__,sK,V:w_){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4600))

    def test_4601(self):
        input = '''Class _r:n{$2(_,Z,_:Array [Array [Array [String ,025],0b1],16]){ {Continue ;}Var i:Array [String ,2];Continue ;Val _5:_;} }Class _9A1:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4601))

    def test_4602(self):
        input = '''Class _:e{Constructor (_:Array [Float ,0X5A];_,tz___,_:Array [Boolean ,7];_:Float ;uIb5,_:_N){Continue ;}Destructor (){}Constructor (k,_W_8ZS,c9:Array [Array [Int ,051],051];_m,C,__p2_:String ){} }Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4602))

    def test_4603(self):
        input = '''Class _T776T:_{Constructor (){} }Class _{Constructor (A9__7,h:String ;_,Pw:Int ;K:H_){} }Class _:_{Val _,$22_0,_,$0:Array [Array [Float ,0x48],0122];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4603))

    def test_4604(self):
        input = '''Class __8:_i{}Class _:v3_{}Class _l_4L:_{$m(){}Constructor (){} }Class T8:_{}Class _:_{$8v(_x:Boolean ;_3,_4,_,_:f;A,V:Int ;d__:Float ){}Var $9x:Array [Array [Int ,0x9_E],16];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4604))

    def test_4605(self):
        input = '''Class e{_o(Y,_9:_;g:Array [Boolean ,0B1]){Return ;} }Class M_{Constructor (n60:Float ;_j_:Array [Array [Array [Int ,0X1D],0xF4],0B1_1];_0:N){} }Class u4:_2_h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4605))

    def test_4606(self):
        input = '''Class _{Constructor (){}Var $X0_03:Array [Int ,03];}Class _:a_{Destructor (){} }Class W_{}Class _x4:_{}Class e{Destructor (){} }Class _{Val O:__2_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4606))

    def test_4607(self):
        input = '''Class _:E{}Class y:_D{Destructor (){Break ;}Constructor (_v,_,S9M:Array [Array [Array [Array [Boolean ,0x8F],0B1010000],0B1010000],0X24]){}Var $_:_;Var H_:Array [Array [Array [Boolean ,0X24],0x62],0x62];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4607))

    def test_4608(self):
        input = '''Class w_:_{}Class _:f{Constructor (_,_HM___,l,n:Float ;_:Int ;U:Float ;x_O1,n_C_:Array [Boolean ,0B1];_,c_D_,s:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4608))

    def test_4609(self):
        input = '''Class _:T0{Destructor (){}$6(_:Array [Array [String ,0x868],0B1];_9,m,s,_U,_,p,_fQ:Array [Float ,0b1];d:Float ;X:Array [Array [Array [Array [Array [Array [Array [Float ,0130],0X2A_9_F1],0B11001],90],0b1010011],90],0X1B]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4609))

    def test_4610(self):
        input = '''Class __h{Var v_A_,$_,_7_32:Float ;Var SO,$_,$R,$4_,__0H_:Array [Boolean ,1_1];Var $_:Array [Array [Array [Array [Array [Boolean ,71],06_6_430_4],0x8],71],0X5];}Class _:_{_(){Break ;}_5(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4610))

    def test_4611(self):
        input = '''Class Y{Val $_,_BlF_:o;}Class a___:_{Val d:Array [Array [Array [Float ,0XFFE],50],50];}Class ____{}Class R:_1yE_{Destructor (){}Val Z15:Array [Int ,6];Val $_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4611))

    def test_4612(self):
        input = '''Class i__u:_60{Constructor (j1X,_,_:Array [String ,0B1];_h,_,YX_:Array [Array [Array [Array [Boolean ,0B11_00],99],0X4],05_7_5]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4612))

    def test_4613(self):
        input = '''Class _g{Destructor (){} }Class ____8_a4:Fzq{Destructor (){}Val $6_,S__8_:Array [Array [Int ,25],91];}Class wA{Val $0:Array [String ,0x47];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4613))

    def test_4614(self):
        input = '''Class k22:C{Var $_4:__;}Class Ro_g5:ML_{Constructor (){}$8(c,_6:Array [Array [Array [Boolean ,2_22],07],2];_t,_:Array [Array [Array [Array [Array [String ,0x24],0B1_1_00],066],016],3_58_6];V,Re,_:String ){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4614))

    def test_4615(self):
        input = '''Class _3:G_{}Class x{Constructor (___gs,_:Array [Array [String ,016],16];_:Array [Array [Float ,04],0xEA]){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4615))

    def test_4616(self):
        input = '''Class Oy__{Constructor (b,o,_,Q,N36,_:Array [Array [Boolean ,0b10],0B1100011];__3,Y_:__4l;_:_r9t2_1){Continue ;} }Class _:y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4616))

    def test_4617(self):
        input = '''Class Y{Constructor (_:Boolean ;_:Array [Array [Array [Array [Int ,0b10],0b1_11_0_1_1],01163_11],0B1_1];_,_c__:Int ;_,R0,Y,_:Z){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4617))

    def test_4618(self):
        input = '''Class d3:_{Constructor (x1_p:v;_s_:Array [String ,0X26];_:Array [Array [Boolean ,0b1],0b1011010];_O:Array [Array [Array [Array [Array [Array [Array [Int ,0B1011],066],0X26],0x2],0X26],0X7_C],066]){} }Class j:j2_{Var n8_:_L;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4618))

    def test_4619(self):
        input = '''Class L__:__y0{}Class g_h{Destructor (){Var XL,_,_u2_:Array [Array [Array [Array [Array [Array [Int ,0X3],06],03],9],0x49],032];}Constructor (c,_,_:Array [Int ,0xC]){} }Class ___c{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4619))

    def test_4620(self):
        input = '''Class _Ti_:_{$2(P:Array [Array [Boolean ,74],0X16];_:Array [Boolean ,1]){} }Class j:_vrR{Var U0_,$21:Array [Array [Array [Array [Array [Array [Array [Boolean ,06_04],0341_1_2],7_1],0x4E],027],0b1],0x4E];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4620))

    def test_4621(self):
        input = '''Class W{Var $YE3:String ;Destructor (){}Constructor (KT_,_,_Rq_,I,_:Array [Array [String ,06],0XC]){ {Break ;} }_(__,_,_4:Boolean ){}Var $a:_;}Class _0_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4621))

    def test_4622(self):
        input = '''Class _w3:_{}Class _25V{Var y:u;$4_2(_3,__:Float ;_G,x,_o,_,__,p:Int ){A::$W();}Var $7,$_Q:Float ;}Class _f___:d6{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4622))

    def test_4623(self):
        input = '''Class _{Var $9_7Eo9,$6EZ,$0,$U,j:k;Constructor (E,L,_,T0_,O_n,_,P:Array [Array [Array [String ,01],06],03_7];A_:Array [Float ,0B1]){} }Class __:C__{Var YI,g,$31__77,$6_,_:String ;l(){} }Class _:_B7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4623))

    def test_4624(self):
        input = '''Class _:V{Val __29:Array [Array [String ,0xC_F],0B11];}Class _:S{}Class _:z{$b7Z4_z(_:Boolean ){}Val $6:Array [Int ,0x60];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4624))

    def test_4625(self):
        input = '''Class _76:Ikq_FI{Destructor (){}Constructor (){} }Class j5__:M_{Var $_,B,$T:_;Var $_9_Hp1,$_,$__14,$_0,$0__:Int ;Val $__:v;}Class Eq6X{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4625))

    def test_4626(self):
        input = '''Class _5{Var __:Vo;Var $t,$__:Array [Array [Array [Array [Array [Array [Float ,45],0x16],0X4E],0x8B_BD_B],0x16],1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4626))

    def test_4627(self):
        input = '''Class _4_h_:_{Var $d,$_a,s,$T_,I,W703:String ;Constructor (wp8_,g:Int ;_:Array [String ,0B1_100_0]){} }Class _:_w__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4627))

    def test_4628(self):
        input = '''Class _{Val h:Array [Boolean ,0110];Val _,_,$Q,_,$_,_3,p,$hV:Array [Float ,56];}Class __{Var k,$O,$D,$U:Int ;}Class _6_:_{Var __5:String ;Val r,B1_X:x;}Class _S{}Class i:y3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4628))

    def test_4629(self):
        input = '''Class Sc:_{$UIc(_:_Mv_Z){}$_8O_(_M:Array [Array [Float ,057],100]){yv::$3();{} }}Class C_{Val $_,$_,s0G,L,$8V_l,NN:String ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4629))

    def test_4630(self):
        input = '''Class _:_s{}Class R_e:YB{}Class _1g{Constructor (k7:Int ){Return ;}$j(f_,_:Int ){}Var $__,$WgK:Array [Array [Int ,47],47];}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4630))

    def test_4631(self):
        input = '''Class F{Constructor (I_:Int ;__:l9;_2,_:Int ;vJ:Int ;__:Array [Array [Array [String ,051_1],05_4_7],0X8]){}Constructor (G_,n_1,se,_:Float ;_,k2,__:S_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4631))

    def test_4632(self):
        input = '''Class r_:Q_Q_{Val y9:Array [Array [Array [Float ,0b111101],0b1_1_1_0_1],50];}Class _7:_{Destructor (){}Constructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4632))

    def test_4633(self):
        input = '''Class _:q{Constructor (__1o,T,Z9T:Array [Array [String ,59],0b1_0_0]){Val __mv,v,_T:Boolean ;_::$5()._.w.j_4();}u_ZV(){} }Class _2:_{}Class _:__{Constructor (e:Float ){Continue ;Break ;}Var $_,$5,$_8,$Oo,Z,B:_r4_;}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4633))

    def test_4634(self):
        input = '''Class L{}Class f:v8{}Class Y:Z{Constructor (){}Var Q:Array [String ,0xE];}Class Gr:__{Constructor (H_6_uv_J,_4,vE:V1_;c0z6TC,mw_06i__:J){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4634))

    def test_4635(self):
        input = '''Class _{}Class aQ:y{$b(_,_5,_,nb,vPf0,Oj_S:Array [Array [Array [Array [Array [Int ,0b110100],0B110_0],021],0x13],042]){}$k(PU5Q,t:_;_,F:_){}Var _Cx:Boolean ;Constructor (_:_){} }Class __o_7{}Class O{}Class w{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4635))

    def test_4636(self):
        input = '''Class Z{Val _:Array [Array [Array [Boolean ,04_0_2],0X4C],0x1F];Constructor (){} }Class j{}Class _4:A{}Class e:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4636))

    def test_4637(self):
        input = '''Class w:H{Val $__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,7],0xA],0144],0b1],0144],0B1_0],0b1001100],0X3],0144];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4637))

    def test_4638(self):
        input = '''Class b_{Constructor (j6_2_:Array [Array [Array [String ,0b10],0X3E],03];_TV,_:_4_l){}Val _,_,$_4,Q_8,___OwX98q,_0u,$4:Float ;}Class _49___1{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4638))

    def test_4639(self):
        input = '''Class Nf:y{Val $D:Array [Array [Array [Float ,0B1],94],0XF_2];Var _y_5,$_:_g3;Constructor (K4Tw:Array [Array [Float ,94],0B100110]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4639))

    def test_4640(self):
        input = '''Class _{Constructor (_:Ed;jwG,A:Int ){} }Class _6_:_8X{Var $3_,A_:dE__O5;Destructor (){}Destructor (){_::$50_();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4640))

    def test_4641(self):
        input = '''Class _:_{Val __,d,$0,$_:Array [Float ,0B1010111];Var N:Array [Array [String ,59],06_0_7];}Class _:_{Var __L,E8,$n,$_:Float ;Val $_:Array [String ,0X5];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4641))

    def test_4642(self):
        input = '''Class S:P{O(Qlg1BJ:Array [Boolean ,55];_,k,_:P){}Destructor (){B::$D();}Val $1Q60382_:ol;Destructor (){Return ;{}Var _T_k__7,_,r:_;}Val _:G;Val $_8_yd:_bF;}Class T:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4642))

    def test_4643(self):
        input = '''Class p_{Constructor (__N29a,_e_:Float ;_VHd5Q,___:Int ;C:Array [Array [String ,0B10_01_101],88];B,__c:_;__,_,_,__0:Array [Array [Array [Boolean ,0B110010],0X5],0B110010]){} }Class _{}Class _{}Class _{}Class _C_{Var V:Array [Array [Float ,0112],0b1];Destructor (){Var __,_,_:Boolean ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4643))

    def test_4644(self):
        input = '''Class z{Var __:Array [Int ,0b11];}Class _:_{}Class Z:g{Var _9,$p_,_:String ;}Class z{$__(_:Array [Int ,02_1_3]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4644))

    def test_4645(self):
        input = '''Class i{}Class _{Destructor (){Break ;Return ;} }Class _{Var $5_:Array [Int ,05244];Constructor (_,t:Array [Array [Array [Int ,0B10],0b10],0x23]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4645))

    def test_4646(self):
        input = '''Class D:_{Constructor (O,ND,_:Array [Array [Array [Array [Array [Float ,43],0X3C],01],294],027]){_::$8_();Return ;} }Class Iv:_Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4646))

    def test_4647(self):
        input = '''Class X{}Class _xa{Var $S:String ;Val $_7,_,$s_G,u:Array [Int ,0130];}Class _{Val _:Array [Array [Array [Array [String ,0B1],0B1],07_7],0X7];}Class I2:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4647))

    def test_4648(self):
        input = '''Class c_{Val _w:_;Constructor (V4,Fq2,_,G,f91N:_079;_,__:Int ;s,__:String ;_7D,dVV,_,_3:Boolean ;__,t:Array [Array [String ,041],0b11];x_Fq_PJ:R__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4648))

    def test_4649(self):
        input = '''Class __n1{Var _L5v,m9_M:Array [Array [Array [Int ,040],07_1],014];}Class _6_{}Class K__{Destructor (){ {} }Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4649))

    def test_4650(self):
        input = '''Class _{Constructor (V_a_,R9,k2F_,w:Array [Int ,0120]){}$__(n:Int ){m::$1();} }Class g:A{Var _:Array [Array [Array [Array [Array [Float ,0B10],0b1100001],0x4E],0120],1];}Class Y{}Class _:Y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4650))

    def test_4651(self):
        input = '''Class t{$1(__34y:Array [Array [Array [Array [Array [Float ,0B101110],0142],05],3_7_4358],0X11];V3,_:__3){} }Class y{}Class V_h:T{}Class _:dT{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4651))

    def test_4652(self):
        input = '''Class _:D{Var _,$_,$35:Boolean ;}Class u_{Destructor (){Continue ;}Var n,$P:Array [Int ,0XAF2_6_6_C_1_DF1_D8];Constructor (_q:Array [Float ,0B1100010]){} }Class C{}Class s_qXr{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4652))

    def test_4653(self):
        input = '''Class _:__x{Constructor (){}Constructor (l:Array [Int ,0xA1B];_7_,U,ow,_6:String ;_:Array [Array [Int ,0B11010],06]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4653))

    def test_4654(self):
        input = '''Class _{Var f,$6j:Boolean ;}Class _{Val n:Array [Array [Boolean ,010],91];}Class H5W:q_{Constructor (_:String ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4654))

    def test_4655(self):
        input = '''Class _D{}Class J{_(_:_V_0;_:a737;R61,_,g:___6_;y9,_,G5H_1:Int ;_u,N5_0:Array [Int ,6]){} }Class F7_{Var $A_1l,$4:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4655))

    def test_4656(self):
        input = '''Class _:RT{}Class _{Constructor (_,__0,Z5:___y;V,I:Array [Array [String ,0x44],14]){}Destructor (){}Val _42:k;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4656))

    def test_4657(self):
        input = '''Class _:_Gl{}Class q_:dIf {Destructor (){Continue ;Continue ;}Constructor (E_,_6_:Array [Boolean ,55]){}Val $_n:Array [Array [Float ,55],2];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4657))

    def test_4658(self):
        input = '''Class QU_:_1G{Val ___:Array [Boolean ,0X1];l434y(D,U5:String ){}Val $3,$P_0,$__:Array [Array [Array [Array [Array [Float ,0XDE98],68],032],0B1_11],0B10101];V(jL1_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4658))

    def test_4659(self):
        input = '''Class _3:__{$_(_B:Array [Int ,0x3];D36u,P66:Array [Array [Array [Boolean ,2],86],0140];J,_:Float ){} }Class RI_0ah_7_{}Class m1:K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4659))

    def test_4660(self):
        input = '''Class J{}Class U:_7{q_(){Break ;} }Class q5{Destructor (){} }Class __:Qt{}Class z1{Val Y:__;}Class __{}Class A:q{Constructor (f:_){}Constructor (){}Var _:String ;Val $_:X;}Class q{Var _:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4660))

    def test_4661(self):
        input = '''Class C_7:bz9_j{}Class Y:_{}Class _:_J{}Class _O7:O9{Constructor (){}Val B4,i,Z__m,L_,$_:Array [Float ,0112];$5r_(__,_H:_6m){Return ;} }Class _:_{}Class o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4661))

    def test_4662(self):
        input = '''Class aPx_:I8{Var _d,v,$4j:Array [Array [Int ,027],36];}Class _:___{_(O:Array [String ,06];__:Array [Array [Array [Array [Int ,03],0X15],25],0x26]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4662))

    def test_4663(self):
        input = '''Class al3_iI_1cI_:RV{Val m,_5C,_8,_0,$_YU,$v_,$m,_,D7_a,$48:Array [Array [Float ,07_20],0B1100001];Var _3:Array [Array [Boolean ,07_6],8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4663))

    def test_4664(self):
        input = '''Class d{$W_Y1(__,__:__A;ep,_,L6,y7L_,_8__:Array [Array [Array [Array [Array [Array [Float ,0b1],027_2],7],0B1],0B111010],23];I:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4664))

    def test_4665(self):
        input = '''Class q:o{}Class Y{}Class e:iE5{Destructor (){}Var $k:G;Constructor (_,_:Array [Array [String ,1_7],0b1_000_0];_8,o_,T_A:_09;W:Array [Float ,07];u_3,_:Boolean ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4665))

    def test_4666(self):
        input = '''Class _{Destructor (){Break ;} }Class _l{Constructor (_,f,Y,A_b4w,k7,Q:String ;_,_8,_,n:_;wK,___,P:G){Break ;{} }Var z4,$_:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4666))

    def test_4667(self):
        input = '''Class _Z4:OJ6{}Class cF0bV:_c{}Class a{Val $_:Array [Float ,0X30];Val a:Array [Array [Array [Array [String ,37],05],0x29],0X6];}Class __W{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4667))

    def test_4668(self):
        input = '''Class _J{$8(p_,_b,_C,_I:Array [Array [Boolean ,0100],0x4B];H:Array [Array [Int ,04_56],0X11];R:_;Kb_t,_,__:_;t:Array [Array [Array [Array [String ,0B110111],0x4B],3],32];_,Y,_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4668))

    def test_4669(self):
        input = '''Class __r_:_O___{}Class wc:_8{}Class _W:T8{D(V:Boolean ;v:Array [String ,01_0];_:__4){}Var $_,_9,_zr6i7u:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4669))

    def test_4670(self):
        input = '''Class U_:_{}Class __v:_{Constructor (v__,_544:String ;_:Array [Float ,0x2];_P5_,D:Array [Array [Int ,0B1010001],0b10100]){}Var w:Array [Array [String ,3],053];Val R:__;}Class Z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4670))

    def test_4671(self):
        input = '''Class _5:J{Val _____2,$44,_l,$6,$K,$9:Array [Array [Array [Array [Array [Boolean ,0b101010],036],0b1_00],0X8EB],03];$__a(){}Val $g:_;Destructor (){}Constructor (){} }Class U_{Destructor (){}Destructor (){}Constructor (){} }Class a{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4671))

    def test_4672(self):
        input = '''Class U9_{Val $_:_;$S_GsG__5(_2:Array [Boolean ,044]){Var O,_3,P,h,o_,_:WB;}Val _,$J,$Ru,$__,_266,$oa0:Array [Int ,0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4672))

    def test_4673(self):
        input = '''Class SI{}Class _:G{Constructor (_4_55:Boolean ){Break ;} }Class _h:_EkG{}Class J:T_jz{Destructor (){} }Class __5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4673))

    def test_4674(self):
        input = '''Class X4h:fO{Constructor (){} }Class _:Q{Val _,ec8,$_7_,_n_:Array [Array [Array [Array [Array [Array [Float ,0B1],0X2B],01],0X9_30_8E_E_533],11],0b1000101];Var $p7:String ;Y(Kl9:Boolean ){Break ;}Constructor (){Break ;}Val $__,$5,__p:Array [Array [String ,0104],1_0];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4674))

    def test_4675(self):
        input = '''Class _4:_tk{Constructor (N_6Gi__,X:Y_w;O:Array [Int ,0255_35]){}$_ha4A_0Y38(_,__fa,_zq:k_9_){} }Class P{}Class O1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4675))

    def test_4676(self):
        input = '''Class u:F{}Class _{Val $_:Boolean ;Var K_l:Array [Array [Float ,0x1],053];Destructor (){} }Class QK8i{}Class _{}Class _{Var _,_:Float ;}Class _QtP:X_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4676))

    def test_4677(self):
        input = '''Class B:b{Val E:_;}Class P85_8_{Var __O:Array [Array [Array [Array [Array [Array [Float ,06],0xB],0B11_0],0143],62],0x7_0_31C9347_9];}Class ZV:g_{}Class I{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4677))

    def test_4678(self):
        input = '''Class a:n{Destructor (){}Constructor (T,k69M56:Float ;__,xH,_4B_8,_,f__5:Array [Boolean ,017];_59i_80:Array [Array [Boolean ,0X54],0x1_22_CB]){}Constructor (){}Val $4R,$y,t:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4678))

    def test_4679(self):
        input = '''Class _96{}Class j{Var $_80,$n0_:Array [Array [String ,030],0741];$j(_:String ;_,x:Float ;QV_,y,k0__,_,b0i4,H:Array [String ,0B1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4679))

    def test_4680(self):
        input = '''Class _39_:z_4{Val $I__a:_5;}Class _{}Class _3:_{Val $1_:_I;Var _9,$F_8i:Array [Array [Int ,0121],0b1100000];}Class _q791:_{Val $G,__:_T;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4680))

    def test_4681(self):
        input = '''Class _9{$_0(){}$5__(P:String ;_:a9;h:Array [Int ,0X3];_8_:m__V;_p973_:Array [Array [Array [Array [Array [Array [Array [Float ,0x9_D0],06],060],55],0X3],0X7],0b1001011];n:String ;_Sn8w_:k_){} }Class U{}Class T34{}Class D{Constructor (__:_55;__3:i920e){}Constructor (a,J_RY,Z1_1:String ){Break ;}Var K8:Array [Array [Array [String ,0X3],55],060];}Class _:R{}Class d7_u{Var _,$_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4681))

    def test_4682(self):
        input = '''Class _{}Class Lb{Var _V_:Int ;}Class G:__{$x(a:String ;Q:_){}Val $64,$X_,$8_:Float ;}Class _{Destructor (){Continue ;Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4682))

    def test_4683(self):
        input = '''Class _:U_{}Class _:Ji{Constructor (){} }Class w{}Class P{}Class _37{Var $Y6,$s,_,$g:Array [Array [Array [Array [Float ,0B1],81],040],0b1110];Val __183:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4683))

    def test_4684(self):
        input = '''Class y:C{$c_(_:Array [Int ,065]){}Var $W_,G_:Array [Array [Array [Array [Array [Boolean ,065],51],3],0x48F],065];}Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4684))

    def test_4685(self):
        input = '''Class __{G7(Fu,o,_,_:Int ;_,s:String ;_V:Boolean ;k9:h0){Break ;} }Class v:G{Var P_8c_:i=!JI::$_650()+_::$_._._.u.B().cr/!-False .xYQ_;Var $56,$z0,$8:Array [Array [Boolean ,0XF_9_2],69];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4685))

    def test_4686(self):
        input = '''Class S{}Class IB1:_884O{Constructor (_,q:Z___Y;S:gM8;_42_:Array [Array [Array [Array [Boolean ,0B100110],0x5],0B100110],0B100110]){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4686))

    def test_4687(self):
        input = '''Class _1_:_h{Val $_8,$F,_:x;Constructor (__:Array [Array [Array [Int ,0X40],0X40],0B10011]){Continue ;Var _,o5Z,d,o_,A,_,j3Z6e1:_;Val _:Int ;} }Class __6{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4687))

    def test_4688(self):
        input = '''Class _g4n18B:_y8{Var Z__,V___,R7f0R4_0:____;}Class o:N{}Class D:_{Constructor (T2E:Float ;c:Array [Array [Array [Float ,023],2],2_492];_,X_7:Int ){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4688))

    def test_4689(self):
        input = '''Class a{$mkk3D6(){}Val $k,_9,$m:Int ;Var q:eh;}Class _67{$64_(x3,m:Int ;_:Array [Int ,0137]){} }Class o6{Constructor (_,__,_1j08:q8;g2:Float ){} }Class s_Vq8Y:__8k_7{}Class c_q7O:_2{}Class __{d(){}Var s,_A__:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4689))

    def test_4690(self):
        input = '''Class _:_{$O(_,N,__E:Array [Array [Array [Float ,05],0b1],05]){}Val $0:Array [Int ,0X1F];Val $61:Int ;}Class P:e_5O3{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4690))

    def test_4691(self):
        input = '''Class _O{}Class _{}Class A:_k{}Class _{__(Z21,x,s_:Float ;_56vs:Float ;_J_,_:Array [Int ,0b11101]){}Val _2,w:Float ;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4691))

    def test_4692(self):
        input = '''Class W_1v2E2Vz{}Class _2_:u{Constructor (){}Constructor (){} }Class _:q{Var $u_v:Array [Array [String ,0xA],9];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4692))

    def test_4693(self):
        input = '''Class _:__{$0(_:d2o1){}Val Z_9:Float ;}Class _{Var _,_6,$E__W6_05_N,$9,_:_ex;Destructor (){Z_::$u_();Continue ;} }Class _:z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4693))

    def test_4694(self):
        input = '''Class _0{Val $_,y6w:Array [Array [Array [Boolean ,0X39],85],0B1010100];Constructor (){} }Class _mLm:S{Constructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4694))

    def test_4695(self):
        input = '''Class c_{q_(_j:Array [Array [Boolean ,0X42],0101];_:Array [Array [Array [String ,53_9],0x4_1],0X7]){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4695))

    def test_4696(self):
        input = '''Class p:zI65Z1{}Class _AR{$4(_,_,__,__,A:Int ;_4pur,l,_1d:Array [Array [Array [Int ,0B10],0x8_1],0xA_7A];_:Z){} }Class _:_1_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4696))

    def test_4697(self):
        input = '''Class t:Y{Val B,_:Array [Array [Boolean ,05],05];}Class a:e{}Class RQr{Destructor (){}Val $41,Y,$_,w_,__0,$M8,$z,V,_,t05,$_wD,s_:String ;Var $_,$_,I:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4697))

    def test_4698(self):
        input = '''Class _645{}Class _{}Class _{Constructor (){} }Class _4g:_zg{}Class _3E{}Class C_A{Constructor (){Continue ;a::$s()._().z()._();}Constructor (N,z5cO_,_:Int ;__Y,__32,_,_9r_,l7:Array [Array [Array [Array [String ,0b1],0136],06],0b11_00011_1_0]){Var g:u_;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4698))

    def test_4699(self):
        input = '''Class J6{}Class H{Val $52e:Array [Array [Array [Array [Array [Array [Array [String ,0B1100011],0B110],0X49],0xF],0X57],100],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4699))

    def test_4700(self):
        input = '''Class _:Jfo_{Var $_4HY:Array [Array [Array [Boolean ,0b10],0B110_1],0B1001];Val $a6:Array [Array [Boolean ,0x4A],0B1001];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4700))

    def test_4701(self):
        input = '''Class C{Constructor (FS,M_:Array [Boolean ,04];fR:Float ;__9N,C,iY:Array [Array [Array [Array [Array [Boolean ,0b1100],0B1],0x4],0b1100],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4701))

    def test_4702(self):
        input = '''Class __{$__N(){}Val q:Array [Array [Array [Array [Array [String ,03_0],05_4],03],0X56],073];Constructor (D:Array [Array [String ,07],0x34]){}Var _zB:Array [Array [Array [Array [Int ,0x34],2],050],0X56];Var d_r,$oA__,$5_,$3Y_,$_0:Array [Array [Float ,02_370],073];Val $_:Array [Array [Int ,0b1011100],073];Val _:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4702))

    def test_4703(self):
        input = '''Class x__{$6(){}Constructor (U:Array [Array [Array [Array [Array [Array [Array [Int ,0b11],0b10001],0B101],99],0B10],0x5_EF],0B1];KE3bM:Array [Array [Int ,99],02];d:String ){} }Class M{Constructor (c:Float ){}Var _,_,$5_:r8;Constructor (X_,_:String ;j,_K___,P:bq){} }Class _3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4703))

    def test_4704(self):
        input = '''Class WeC:_62AA{Val $z:I;Val N_G19___R,_:Int ;Var $I,__,$__0F0f,$8_,$3O__7,Sa,_4Q:_pN72;EK(S_a_:_;dwx_:Int ){} }Class Cu{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4704))

    def test_4705(self):
        input = '''Class j1{}Class H_{Constructor (b,G4R34__,_:Int ;I_9,d2b,N_,___,d4,y,r:Array [Array [String ,70],0x53];_:I;_2,_6__X:Float ;B:Array [Array [Array [Array [Boolean ,010],05_1_43],0B1001011],0x53]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4705))

    def test_4706(self):
        input = '''Class _:_{}Class e5{}Class _{}Class P_9_J_:z{Var $y,$_,_,$_,$_,$4,_,$_:Array [Array [Array [String ,0b1001110],95],42];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4706))

    def test_4707(self):
        input = '''Class e{Var _4,hR91M:String ;}Class uS0_{}Class y:_3{_(_:Array [Array [Array [Array [String ,013],0140],4],0b1001010];M:B;__Q:Int ;r:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4707))

    def test_4708(self):
        input = '''Class __9:m_{Val _:Int ;}Class _{}Class n_{Val $1:Array [Array [Array [String ,0113],0113],7_4];}Class v_b:Z{Constructor (_,x,__,_:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4708))

    def test_4709(self):
        input = '''Class _{Destructor (){Continue ;} }Class U{}Class __Y2{Constructor (J:Array [Array [Array [Array [Int ,0131],0131],7],0X3_F_E_8_90]){}Destructor (){} }Class Z_:XH{_9_(){Val Z2:Array [Int ,0X1B];Sd::$L();}Destructor (){} }Class _1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4709))

    def test_4710(self):
        input = '''Class __:_07{Var _y8_7r:_;x2(B:String ;_3,_l_,S,_2_,H6:D;_8H,_:Array [Float ,0X3F];_y861___,_M_,_:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4710))

    def test_4711(self):
        input = '''Class a_:_{}Class dG__:F__{}Class K_:_{}Class sr0MV{Val _,$D,_:Boolean ;}Class T2{Destructor (){}$7(){Val jGU,E:Array [Array [Int ,0B101010],075];_k::$_();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4711))

    def test_4712(self):
        input = '''Class G{Constructor (_,__:Array [Array [Float ,0X79E],04_6];c_,_:W;b:Boolean ;mx_:_L;e__aS:Boolean ){}Constructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4712))

    def test_4713(self):
        input = '''Class jn:bs{}Class U:h8{Val $yj,$_o:Array [Boolean ,0x3];Val $__,$0:_;}Class T{}Class d:c{}Class j:__R{_3(){} }Class _{Val _,h:Array [Int ,0B1_1];Constructor (h,_2,g,_,k,e,_:Array [String ,0B11];_:m){} }Class c{}Class _:E{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4713))

    def test_4714(self):
        input = '''Class _:I{Destructor (){ {} }Constructor (){Continue ;}Var p_,_,_CV8,_:Array [Array [Array [Array [Float ,9],03_6_2],045],9_59];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4714))

    def test_4715(self):
        input = '''Class i9{}Class A{d2(q__LDr6_U,B:Array [Array [Array [Float ,023],0XC],02]){__S::$B();} }Class ___3{}Class y:g{}Class __I3:d{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4715))

    def test_4716(self):
        input = '''Class _a_{}Class q:_{Destructor (){}Var m,$c7:Array [Array [Array [Array [Float ,0X2C],7_8_5_90],0X6_C_5_1],0120];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4716))

    def test_4717(self):
        input = '''Class e_iX:_7{Val r:_;}Class Y5:s__{Destructor (){}Destructor (){u9::$dpS();}Var f:Array [Array [Array [Float ,04_1_4_6],0b1100010],03];$AT(_:Array [Array [Array [String ,0xB1E],0x6],5]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4717))

    def test_4718(self):
        input = '''Class _6:_X{}Class Z_:D_{Val $_,_0,$0_H,$R:Array [Array [Int ,47],0B1_0_0];Val $2L,R:Float ;Val _,___X,h:Array [Float ,0B1];Var $_:b_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4718))

    def test_4719(self):
        input = '''Class K{}Class _:V{Constructor (_z17_H:Array [Array [Array [Array [Array [Int ,0b11010],0xF],0b1],0b11010],01_45]){Var _u54:Array [String ,80];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4719))

    def test_4720(self):
        input = '''Class _3{Val $4,B:Array [Float ,0xE];Constructor (){} }Class C{Val $__,__,u,$5,_,k:String ;}Class __:_Q47O5i307d_94{$6(Y:Float ){} }Class _:_2zp___{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4720))

    def test_4721(self):
        input = '''Class t{}Class j_3:k70{}Class K:_J_{$i_5__(_5,_RxN2,_,_:Array [Boolean ,0X48];_x:String ){}E(__6:Array [String ,0b1]){Return ;} }Class _{}Class Ij:I5y{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4721))

    def test_4722(self):
        input = '''Class w{Constructor (v_K_:Array [String ,0X3C];k,v:E;_:Array [Int ,1];_H:Int ;__23_:Int ){}I(){}Destructor (){} }Class R_:_L{Var $I,_8_,$Bh,_7m:Array [Array [Array [Boolean ,0X9_9_E_0C],07],0x45];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4722))

    def test_4723(self):
        input = '''Class T{$Y____(M4:Array [String ,0X3F];B,W_C:i_){}$_1_(_C:String ){}Var $9,$p:Array [Array [String ,0b1011000],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4723))

    def test_4724(self):
        input = '''Class s_4__9{Destructor (){}Var $_,$1,_:Int ;Val $68V,$5Dze:Int ;}Class _:N{Var $U_9,$0:X7Hi7p;Val $_1:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4724))

    def test_4725(self):
        input = '''Class ee{}Class _N{}Class _2_7:_{Var h:Array [Array [Boolean ,04],0b1];Destructor (){}Val $1:_;}Class D:tq{Constructor (){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4725))

    def test_4726(self):
        input = '''Class __{Constructor (R,ucf:Array [Array [Array [Boolean ,96],0X6],0b1010100];_,_B6,O,t2:Float ;zW6,_,_0_z:Array [Boolean ,96];__p:Int ;_:Array [Boolean ,02_36];___q_:Boolean ;_:Array [Int ,054];L,_,_8,N,T,_H:Array [Array [String ,96],96]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4726))

    def test_4727(self):
        input = '''Class v{}Class s___:_1{Constructor (v81F:Array [Array [String ,0X7],05_4547]){}Destructor (){} }Class _{}Class _3x:Z__P_{}Class _{}Class _u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4727))

    def test_4728(self):
        input = '''Class _{_6(u_0k,_,_:Array [Boolean ,067];_:Float ;R83i,Q6_:String ;_0,_:Boolean ;_:Boolean ){} }Class _M:uQ__{}Class H{Constructor (_:u;_:_a;vg2,X__:Array [String ,0B11011]){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4728))

    def test_4729(self):
        input = '''Class E{Constructor (){}Destructor (){}_(QH:Array [Array [Int ,0B1011100],0xA];L_,__:Array [Array [Array [Float ,0B1_0],96],0b110010]){}_(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4729))

    def test_4730(self):
        input = '''Class _Q:W{Var $98q:Array [Array [Float ,1],0b1001100];Constructor (C_6F_16,PM,__U_:Array [Array [Boolean ,0x4],0X7A];s,__:_8V;S,_:Float ;a:Float ;m_9:Array [String ,0x4]){} }Class F:O{}Class m4Yp{_(__:T;FU0,w0,_L:String ;_9:Array [Array [Array [Int ,14],0100],14]){} }Class _2U{Constructor (){} }Class N76_F_5___3_:_n1_4z{Destructor (){} }Class J:b{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4730))

    def test_4731(self):
        input = '''Class l_RW:__{}Class _b_B_w:_H4{Destructor (){}Val $__,$_X0M:d;Constructor (){} }Class _9{Constructor (L:Array [String ,0510];_:_;l_f,_:Array [Float ,07];_C:Array [Array [Array [Array [Float ,042_6],044],0X7],044]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4731))

    def test_4732(self):
        input = '''Class _{Val _,$_:h_9;Destructor (){ {Return ;} }}Class _:_2P__{$5(){}Constructor (g,_A_:String ;__:Boolean ;K,_3_m,g_4_PE9,KI2_JV2_kO1:Int ){Continue ;Break ;}$_(){} }Class _5{}Class C_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4732))

    def test_4733(self):
        input = '''Class _9_RRv_:_{w2_hI9(){} }Class T9{}Class c:u_{}Class C9__5:_{}Class f:Z{}Class T_0{Constructor (_C:_q7){}$K_(N,_8:Array [Array [Array [Array [Array [Array [Array [Int ,0b1000000],0b1000000],0X5B],7_74_43],0b1000000],0x9],0B111011]){Break ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4733))

    def test_4734(self):
        input = '''Class B{}Class U:_5_{Constructor (___:Int ;c,_,qhZ:Array [Boolean ,3];_:String ;_O:_){}$_n__(){}Val $_,$w_,_,$_6_,$e_L,_,_K:Int ;}Class __:l{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4734))

    def test_4735(self):
        input = '''Class F2{Var r,$u1s_,$_:Array [Array [Array [Array [Array [String ,11],0b1],01],0x1D],07_7];Constructor (){}Var k:Int ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4735))

    def test_4736(self):
        input = '''Class _:Z{}Class L{Var _,$6_,$3,_:_13;Var _W:Array [Int ,0x48];Val $_1_:_;}Class a_:c{_(U,q:Array [String ,074]){Return ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4736))

    def test_4737(self):
        input = '''Class bLv{Val $___03:Float ;}Class m_2{Var _,A:Array [Array [Int ,0xB],74];Val $_,e_,_5G:_;}Class _2_{}Class E4:x{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4737))

    def test_4738(self):
        input = '''Class d{Var $E_,$x_,$N,$36,$h__:Array [Array [Array [Array [Array [Int ,0x31],0X22],016],76],0X22];Var _:b7;Var _u,_O:Array [Array [Array [Int ,0534],0X22],0X2];Var PR,Pw,_rK4G:Array [Boolean ,76];Constructor (__K_:Float ){} }Class _{}Class F:_1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4738))

    def test_4739(self):
        input = '''Class C:___{$9(qp_40_10:Array [Float ,0b1]){Break ;}$1(____:w_;P4_u_95:_;F,_,__0:m;w38:Float ;n:Boolean ;P,_:Int ;Q:Array [Float ,0B11010]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4739))

    def test_4740(self):
        input = '''Class __:__{Var ___:Array [Array [Array [String ,0B1],0x5],02];Destructor (){} }Class d_7_{Var $8:Float ;P16T(_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4740))

    def test_4741(self):
        input = '''Class _{}Class _oV{$7(_,J,W,_,sR_v9,_065,_,_,_:Array [Array [Array [Array [Array [Float ,0x4D],0220],01],0b1],4]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4741))

    def test_4742(self):
        input = '''Class _:_{}Class _1:_{}Class T:q{}Class _{Constructor (_:Array [Array [Array [Array [Array [Boolean ,2974],2_0],02],0b111101],0X4];c:Boolean ;F,yQ:Int ;_5:Float ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4742))

    def test_4743(self):
        input = '''Class _:P{}Class ___:s_8{Constructor (NK:D_f_;e,_g_:oS;_:Array [Array [Array [Int ,02],026],4]){} }Class _I__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4743))

    def test_4744(self):
        input = '''Class Z_61O{}Class L{$75(V,_t_f:U;__,v3:Array [String ,0763_1_4_2]){} }Class _Zp{}Class U:V_{h(M,HPV,__o,x2sL9_,M7,_,k:Dv_;XN,_V:Array [Array [Array [Int ,0X50],8],0B1_0_0_0]){ {} }}Class _2_:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4744))

    def test_4745(self):
        input = '''Class d_:z2{Constructor (Q_:S){}_(){}Var $_,_,$9,l:Array [Array [Array [Array [Boolean ,0b1],0b1100],0b1_1_1],0b10];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4745))

    def test_4746(self):
        input = '''Class _{Destructor (){}Val _1:Array [Array [Array [String ,0124],01],04];Var _7_:String ;Constructor (_:Float ;_j8W,x:_;b4,_7:j_7PQ3){Continue ;} }Class I6{}Class _:_82{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4746))

    def test_4747(self):
        input = '''Class J_:_h{_D(_:Array [Array [Array [Array [Int ,0x5C],027_5_4_1],023],50];I_,t92:Array [String ,0B1];_7:Boolean ;b:Array [Boolean ,0xE]){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4747))

    def test_4748(self):
        input = '''Class _:_jyZ9{_(d,_9,_,_,O_6,y,_,_,_9,ov:Boolean ;_v:Int ){}Var $_e,$_,s:Array [Boolean ,0b101100];Val $0,$95u,$3G_,O_,_:n4;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4748))

    def test_4749(self):
        input = '''Class H:_s{Constructor (E:Float ;c6:rO;_IH:Float ;k,v:Array [Boolean ,045];J,_3B,_N,i77,D:Int ;n:Float ;_:String ;_,q:Array [String ,0b100110]){Continue ;}Destructor (){} }Class __:_6X9{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4749))

    def test_4750(self):
        input = '''Class _:i_7{}Class r3:_{$_J(T_:Boolean ;_,_:ss;_Y:Array [Array [Int ,18],0B1];b:Array [Array [Array [Float ,065],0b100],0b100000]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4750))

    def test_4751(self):
        input = '''Class Q___{Constructor (_:_;_:Array [Boolean ,0b1001]){}Destructor (){} }Class Ok{}Class YG:k{Var __o,V,$c:_I;_p(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4751))

    def test_4752(self):
        input = '''Class _:f_233{Destructor (){Val K_T:Array [Array [Float ,0X41],72];} }Class D_7:E{Var $0L_,$R96:Array [Array [Int ,0x1_6_2_F6_C_C_A],0B1000111];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4752))

    def test_4753(self):
        input = '''Class _:m{$l_(){}_m0(){}Var _,$___,m,$70,$97l6U,$9:V;Val __,c:ol3;Var $7_,$hM5:z8976J_;Val lI:String ;}Class _{}Class FG_1Wy{Destructor (){} }Class N4:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4753))

    def test_4754(self):
        input = '''Class C{}Class Z{}Class Dy{}Class I37h_7_{}Class P:N_{}Class QT_:_{Var xc1y:Array [Boolean ,0b1000101];}Class e:PE{}Class _{}Class _q{K(){Continue ;} }Class _:_u_6r5V{Val $8d_31:Array [String ,04];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4754))

    def test_4755(self):
        input = '''Class h9{Constructor (R,_:Array [Float ,0X3F]){Continue ;}Destructor (){} }Class L:_{}Class _{Val $r_q0_,$_,$_,$_5f:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4755))

    def test_4756(self):
        input = '''Class _3_4{}Class s_{Val $_ME,_,$U,$_:r;Constructor (G:Array [Array [Float ,0132],0x23]){__b_Bv::$E._659_20h._5v_xn();{} }}Class F{Val $_0,$6:Int ;}Class X2{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4756))

    def test_4757(self):
        input = '''Class i{}Class _:__{}Class i:Z{}Class _:_{}Class e0:A{Destructor (){}Var $_:Array [Int ,0B1];}Class x8{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4757))

    def test_4758(self):
        input = '''Class _:c4_6{Destructor (){}Constructor (L:J__0DG_;_4:Array [Array [Array [Array [Array [Boolean ,0B11],0X6],0X73],01_4],0B1011010]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4758))

    def test_4759(self):
        input = '''Class _{Destructor (){}$_(__2_6:Array [Array [Array [Array [String ,97],06],0x3B],31]){}_C(L:_4uTP_){} }Class _:_EC{}Class i:q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4759))

    def test_4760(self):
        input = '''Class HXJ9{f4(c_4_m,_,cM,p_8:Int ;n28,p_,axD,_49,x,_1:i7__;_:Array [Array [Array [Boolean ,0X50],7],0x1]){}Val $_A:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4760))

    def test_4761(self):
        input = '''Class ___:P{}Class E_V{fb_1v(f_,rB,_:__3;_:Float ;_:Int ){}$30(){}Constructor (){Break ;}Constructor (__1_rH_W48E:Int ){} }Class s:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4761))

    def test_4762(self):
        input = '''Class y__:h_z{Constructor (f,_,_G27,Q,_,C8,b9:s_U_;____:Array [Array [Array [Array [Array [Array [Float ,0572],0B11],0x5_D_4],7],07],0X9]){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4762))

    def test_4763(self):
        input = '''Class _YK__q_H:_{}Class _:R8{Constructor (_:Array [Array [Array [String ,0111],0X3_D],0b101]){Break ;}Var _,_:_O8;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4763))

    def test_4764(self):
        input = '''Class _{Constructor (_:Boolean ){} }Class _:_{Var _,_:String ;Destructor (){}a_4(_6,_:u1){}Var $_:Array [Boolean ,9_1];Constructor (_:f;J638uv4,C,Z_:Array [Array [Array [String ,0B111110],0B1_0],060];H,f_,__8,_T,F,_,_t_,P,B,_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4764))

    def test_4765(self):
        input = '''Class _{Destructor (){}Constructor (){}Val __,$_,$__,_7,St:_;Val $7_,$2__1l__236:_S_;}Class _{$3(){Continue ;} }Class _{Destructor (){}Val _2,p,M,$_,$_:Array [Boolean ,30];$_(A:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4765))

    def test_4766(self):
        input = '''Class P:_{}Class _{$1z(y0Q95,R:Array [Boolean ,900];_,__08:Array [Float ,0X52]){} }Class _g7{}Class _m4{Var a,_B_0:Array [Boolean ,94];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4766))

    def test_4767(self):
        input = '''Class _:_{Constructor (Ru2:Array [String ,97];_7_,___,N:Array [Array [Array [Array [Array [Array [Array [Int ,063],97],0x3D],97],0X8],0745],03];BL,__E,_e:Array [Boolean ,0B1_111];_:U){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4767))

    def test_4768(self):
        input = '''Class o:B0_{}Class _{Constructor (C,C,K6__,_:X;_:m;q:Vr24;O:_;mq,C300_,_5:String ;n__:Array [Array [Boolean ,0b11],0b1011000]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4768))

    def test_4769(self):
        input = '''Class _:k{Constructor (){Val Q1,e1,_,F:_;}Var $_:Array [Boolean ,0X9];I4__J___(Y,_,_:Array [Array [Array [Float ,05_3],012_47],0B1100001]){Break ;Break ;Break ;}Var L,_,$i,$_,_,$dT,$_4,$_:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4769))

    def test_4770(self):
        input = '''Class _5{}Class _:_{}Class tEs:a_0_4{}Class n{Var $S_q,$_3_:X;Q0(_:Array [Array [Array [Array [Array [String ,0110],0110],0b10],6],0X42]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4770))

    def test_4771(self):
        input = '''Class m{Constructor (){}Var U1p7:Array [Array [Array [Array [Array [Array [Int ,0XC],0B1],87],0x46],0235],04_3];}Class x{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4771))

    def test_4772(self):
        input = '''Class c:S{}Class bw{Destructor (){}Var $_4,$pw:Int ;}Class _{}Class _:g_{}Class s8:_{Destructor (){} }Class _:__{Destructor (){}$__F(_B5,_:Array [Array [Int ,8],0x1A];_e_2,b:Array [String ,03666_4]){Break ;}$2(_c,_6,I,_,r,n_,X0__,_:Array [Boolean ,0b1100010];x,A4,Cm:Array [Array [Array [Boolean ,4],42_4],3]){} }Class X:R{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4772))

    def test_4773(self):
        input = '''Class _:__2{$_(){Break ;Val _39,__:_0;N::$__8();Val _:String ;}_Z(){Continue ;}d9(b:Array [Float ,0b10_1];_U:Array [String ,0X13];_D5:String ;_,_:_8;_:Float ;_:Float ){} }Class _a{}Class H_5:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4773))

    def test_4774(self):
        input = '''Class E85_8{}Class _{Constructor (_,_O,c,_,_,_:Array [String ,4_61];_,T1:Q;_:Tw;_R__:M4qu;v:x__;_q_:Boolean ;f:Array [Array [Boolean ,0X56],0X3];_,H_:Int ;e:Array [Array [Float ,9359],92];__M:Array [Int ,0X56];___t,Z_,N6_Y19:Array [Boolean ,0b10101_1_0];_,_Z,y:Boolean ;___,__,__:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4774))

    def test_4775(self):
        input = '''Class M{Val $u:_;Constructor (_5f,_:Int ;_sk_rg_58,G,_61:K;__29:Float ;m,Y__,_,_p:_3B;_,_,q,_vJ:Array [Array [Array [Boolean ,0xF_1],0b1],02_3716_2]){Break ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4775))

    def test_4776(self):
        input = '''Class _p{Var __:F;}Class _{}Class J{Destructor (){Continue ;Var P,_,Kq,_O,_,_,HN6,W:Boolean ;Continue ;}Var $33:gO;Val $c0,$oQQ:Array [Array [Array [Array [Float ,0b1],0x9],44],0x10];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4776))

    def test_4777(self):
        input = '''Class J{Constructor (E:_;Ejwj:Boolean ){} }Class R__:K{Destructor (){} }Class _qri2_{Val CI7,$P,$7_,$9q,$t:Int ;$_(){} }Class l:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4777))

    def test_4778(self):
        input = '''Class s{Var w,$4_:Int ;}Class j:n{}Class E_{Val __,T,$q9_F56,r,$2:Array [Array [Array [Array [Float ,066],075],0X3],031];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4778))

    def test_4779(self):
        input = '''Class Z{Constructor (){o9::$25();}$C9(_,G:Int ;wK:Boolean ;E1__5m,u55_,O,_,jL,J_:Boolean ;t_p_a_:Array [Float ,0XA];B:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4779))

    def test_4780(self):
        input = '''Class __{Constructor (M,U,Y:Array [Float ,130_76_1_4];_Xd:g;_a:String ;__:__){}Constructor (k60:Array [Int ,1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4780))

    def test_4781(self):
        input = '''Class __{Destructor (){y::$4_3m();} }Class _9z:ya3{}Class P:_{Val _:Float ;Var _:Array [Array [Float ,0b1],0120];Var _:t;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4781))

    def test_4782(self):
        input = '''Class _:_{Val $_,$2g,_:Array [Array [Array [Array [Array [String ,0B1_1],0X6_24],031],0x94_0],02_365_0];Val _,$_N:o;}Class e5:__{}Class _:s_E7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4782))

    def test_4783(self):
        input = '''Class x__{Val _2xS6,_aj,$iGq:Array [Int ,0X3];Val __,$_84b,$_:Boolean ;Val $_9:Int ;Constructor (g_:_F7_){} }Class B_:_U{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4783))

    def test_4784(self):
        input = '''Class ___xYA{Constructor (__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0X1D],0B1010001],0b10101],7_6_3],0B1010001],023],20],0X1D],023];J6,n:Boolean ;_5,_C:String ){Break ;} }Class _:p_{Val $i_7,h:Array [Boolean ,0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4784))

    def test_4785(self):
        input = '''Class ___:oj9M{Val $6r__:Array [Array [String ,0x8_5],026];}Class _{Destructor (){Break ;}Val _u_,$205:Boolean ;Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4785))

    def test_4786(self):
        input = '''Class _2y96:U{Destructor (){}Constructor (){}Val N,__1y_y:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0X9],0X13],0X13],07_2_3_6],0B1001001],0B1001001],0X13],0x12],0B1001001];}Class V9{Var E_,$Xa,$h:Array [Array [Array [Array [String ,0X55],0b1],0X13],56];}Class ___O_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4786))

    def test_4787(self):
        input = '''Class B{__(v____1_5,e:z_){} }Class __yA{}Class s:q{Constructor (I,_fC6V,_,F,Z4,_,D7:_54){}Var __,$_,$_H:Array [Float ,05];Destructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4787))

    def test_4788(self):
        input = '''Class D:_A697H{Constructor (_:Array [Array [Array [Float ,117],0B1100000],0X19];Q,_f6Ood,b:Array [Array [String ,0X19],22];p,_x65,_X___:Int ;_,v:Array [Array [Array [Array [Array [Int ,0B1],060],6],0XE_F8],060];n2:Array [String ,060];__,_8,m:ul;_,b1,S:Array [Array [Array [Float ,060],3_6],0b10_0]){V_::$___I_();Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4788))

    def test_4789(self):
        input = '''Class _{}Class _{Constructor (_,P_4:Array [Float ,072]){Continue ;} }Class Dde7:d_4{Constructor (){} }Class k:_{}Class _1t_v{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4789))

    def test_4790(self):
        input = '''Class _r_:a{}Class _w3{_(_6,q,Jq,ew_31,jo:Array [Array [Array [Float ,0X2E],0X2],0B1];C,_,__,_L:Array [Array [Boolean ,0x9],017];v8D:Boolean ;A:String ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4790))

    def test_4791(self):
        input = '''Class _:r_{Constructor (){}$f(f,_:Int ;_v,_,_a,C,_:Z;_,G_,qx,i8,_,_,c8_C__:Array [Float ,0B1010001];B_6_5:String ){Return ;}Var y99:Array [Array [Array [Array [Boolean ,4],0b1],0b111011],4];Val _,c,__:__xF;}Class _2Z{}Class _u{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4791))

    def test_4792(self):
        input = '''Class c{}Class g0A{}Class Mc:_{Val $1,$__:Array [Int ,52];}Class F:_n{_(E,U,_39:String ){} }Class _{Destructor (){Return ;} }Class K:N{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4792))

    def test_4793(self):
        input = '''Class id{Destructor (){Continue ;} }Class J{}Class _:b49_8_9{}Class y:_A84{Destructor (){Val c6_,_o:Array [Array [Array [Float ,61],0B11],0X29];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4793))

    def test_4794(self):
        input = '''Class _:t{}Class T:J30{Var $_5H9:Array [Array [Array [Array [Array [String ,6],0XF_1_A_1],0b1],0B110011],1];Var $_:Array [String ,8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4794))

    def test_4795(self):
        input = '''Class e:S{Var $207:Array [Array [Array [Array [Array [Array [Boolean ,04],07],0x70],0B110000],81],81];Constructor (_c9:Array [Float ,0b1010110]){} }Class f_24K{}Class _:_5__04{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4795))

    def test_4796(self):
        input = '''Class _2:__R{Val a:Array [Array [Array [Array [Array [Array [Array [Boolean ,0b110_1],0x44F],07],02_0],0X64EB_7_6],0X4],11];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4796))

    def test_4797(self):
        input = '''Class _w{}Class W:___{$lk(){}Constructor (_1P17_:Array [Array [Array [Array [Array [Array [String ,0142],0X22],74],0142],0X4_3],0142]){Continue ;}Constructor (){} }Class F_zMB_:w{}Class _02:_5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4797))

    def test_4798(self):
        input = '''Class A:_ET{$P(E:Array [Array [Float ,05],0b111011];S:Array [Int ,28]){}$_(_Y,_Nn971X:Array [String ,0x3];F7:Boolean ;_0,G8,a_,_q__:__){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4798))

    def test_4799(self):
        input = '''Class k_Bv{Val $6V:Array [Array [Array [Array [Array [Int ,0x5_A4_2C],0b1000011],026],85],0b1000011];Val H3:_;}Class t61Dw_E:_7{}Class I:_vl{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4799))

    def test_4800(self):
        input = '''Class _:_{}Class __{Val b1_kC,$8,_:Array [Array [Float ,0b1],0b1010110];}Class Q{Val J5:Array [Array [Array [Array [Array [Float ,0x18],04],0B1],0B1],91];Val $c,_,_0_:Array [Array [Array [Array [String ,0X6],02],0B1],07_116_0_1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4800))

    def test_4801(self):
        input = '''Class ___{Destructor (){} }Class _{Constructor (Ey8,_5:_2wpd_;_x:Array [Array [Array [Boolean ,0b100],0b1],01]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4801))

    def test_4802(self):
        input = '''Class f_w{Constructor (){}Constructor (__,N0,R__Y12,E,__t,A_j5_:_p_;G_:Array [Array [Array [Array [Float ,0B1_101_0],1_973],0b1001011],1];o5:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4802))

    def test_4803(self):
        input = '''Class _{Val $L7:Array [Array [String ,0106],0b1010011];}Class z_3{rs(_:Array [Array [Array [Int ,0X41],0106],2]){}$YJV_6(B_0:Boolean ;a,_,_T,__z,_,w_Y:Int ){} }Class vk:_{Constructor (A__:Array [Array [String ,7],0106];E3:Int ){_::$_.M=----"";}$9__(_RoK0CD:Boolean ;_:fD;O,J:Array [Float ,0106]){} }Class _{}Class wK:_{}Class q{Constructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4803))

    def test_4804(self):
        input = '''Class XF{Constructor (_:Array [Array [Int ,1],0x1];d:I3){} }Class __{}Class ___{}Class _:b4{}Class b6j__54_{}Class __{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4804))

    def test_4805(self):
        input = '''Class E_{I(_zZ,A_,_,o_cH:Array [String ,0X31];_z_e,_48i,v:Array [Array [Array [Array [Array [Float ,0b1_1111],0b1000001],199],79],79];Y:L;_,q:bw){}_(_84:Array [Array [Float ,067_7],0B1];E,_8,h:X3){Return ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4805))

    def test_4806(self):
        input = '''Class _{Constructor (x,_5:Boolean ;___:Array [Int ,0x16];F_:_){}Constructor (H_,Jo,c,_W___1,_,FT,__,V2nH:Array [Float ,0B111001];_Rx,x:Int ;d:__;l,___:Array [Array [Boolean ,24],96];_,_J2,_4:Float ;UXCv,g,__,_3:Array [Array [Array [Array [Float ,057],96],8_529],0x1_70];d,__:Boolean ;Y:Array [Float ,5_4]){} }Class _90{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4806))

    def test_4807(self):
        input = '''Class _g{Var _:Int ;}Class _{y(U,__94A,D:Array [Float ,2]){} }Class _{Val $_f,$5_,$1c,_4_9_,$4,$_:Array [String ,0b1_1];$o6t(h,_x,S_8:_;_G,_:__k;kjgx,u5:Array [Float ,0b1];I_,l7:Array [Array [Boolean ,2],2]){} }Class _9{Val v:Array [String ,0X46];}Class T_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4807))

    def test_4808(self):
        input = '''Class _7{$76(_,j7_6_:I1;_:Array [Array [Array [Int ,0b1001001],84],0b1001001];__:Array [Boolean ,0B110101];b_:Array [Array [String ,04],0X8];_6_,_f:Array [String ,0B110101];Tp:_;i2:Boolean ){} }Class J6:O_5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4808))

    def test_4809(self):
        input = '''Class _{}Class _{}Class vol:N9{}Class D:_2E47{}Class _667:_{Val _:Array [Array [Array [Array [Boolean ,015],0x10],0b1],02];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4809))

    def test_4810(self):
        input = '''Class hN:_{}Class _8_V__:D{}Class w3Y_{_(_:_;J,_9H_,_:Array [Float ,0X18];_:__;_:Array [Boolean ,0b1_1];_,U:Float ;X__:_D){} }Class __1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4810))

    def test_4811(self):
        input = '''Class _:_{Constructor (_,N3_,PY,_,Ih:Array [Float ,0B10];_:String ){_::$7.l();Continue ;Break ;} }Class D{C_gg(_G:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4811))

    def test_4812(self):
        input = '''Class _{Constructor (__:Int ;_:Array [Boolean ,045];_,c:R;_:Boolean ;XnB___:__){Continue ;}Val I_,$3__:Float ;Val $8,_Wc8,$_,$8:Array [Int ,0b111111];Constructor (ns:__){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4812))

    def test_4813(self):
        input = '''Class _:_{}Class H{Destructor (){}Constructor (_,Y:Int ;_:Array [Array [Array [Array [Float ,0b1001000],11],0B10000],0b1001000]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4813))

    def test_4814(self):
        input = '''Class k:i{Var k:q1;}Class w:k{Constructor (b6:Float ;_T7,_,muV:k_8;_R7P,_65,I,Zp:Float ;z_,nz3,Y,M,G_,_:String ;l,_,F,__,_8:_){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4814))

    def test_4815(self):
        input = '''Class _{}Class _:G{}Class __4_:_{Var Z,n,$_9p,_28,u,_26:String ;$_(){}Var $4v:_L;_(){Var e:Array [Array [Array [Boolean ,06],0120],0X162];} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4815))

    def test_4816(self):
        input = '''Class __:__{Val $55_,$0_,$F,$2gr9,_X_:Array [Int ,8_6];Constructor (){}Constructor (_8:String ;I,f4:_;U:String ;___9,T,_j:Float ){ {} }Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4816))

    def test_4817(self):
        input = '''Class _c_{Val $O7_x,$_:Array [Array [Array [Boolean ,0b11011],2],6_9];}Class ___{}Class __:u5{$_(_,Q:Array [Boolean ,0x1_2];p_,_:t_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4817))

    def test_4818(self):
        input = '''Class _5_{}Class h9:i_{Var Z,$0_4__3,$G4__,$TX_:i9;Constructor (){}SiAt(){}Val _0:Array [String ,0B100101];Constructor (){ {Continue ;Break ;Continue ;} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4818))

    def test_4819(self):
        input = '''Class _U:wts_{Destructor (){}Constructor (_:_){Val E:Boolean ;Val _,yx,_:Be;Val e,B_Y:String ;} }Class wK3_N__9j{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4819))

    def test_4820(self):
        input = '''Class n:ll{}Class V_:_2{}Class s:C_{Constructor (v:Array [String ,0x3D];Rx,_:Float ){____::$___();}$__4_(pR:Array [Array [String ,0B111111],062]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4820))

    def test_4821(self):
        input = '''Class _{$S_(_:Boolean ;E,_:Q9;_69,_8,vq:_){}$m(_:Array [Boolean ,0XD]){} }Class _{Constructor (_:Float ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4821))

    def test_4822(self):
        input = '''Class _{Destructor (){}_e_(_k,k__:Boolean ){Break ;} }Class ___823_4{Val _,$d,g,T,$_,_2_oz,$_,$_0i:Array [Float ,0b1001101];Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4822))

    def test_4823(self):
        input = '''Class __{}Class _:p{_(h_,e,_o_,_:Array [Int ,0B110101];F,p_,_,u_5_53:Array [String ,0B110101];_:Array [Float ,030]){}Var $J,_oPn,_,$9:Array [Boolean ,050];$G1(){_::$4()._3();Return ;} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4823))

    def test_4824(self):
        input = '''Class _5t:AP_9_R{$__(__tR,p8,_2_:_){}$_7(K:Array [Boolean ,0x6F];_7_:Array [Array [Array [Array [Float ,0130],9],0130],1_0_44];c:String ;B:Float ){Val __:Float ;}$_(L:Array [String ,0x3B]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4824))

    def test_4825(self):
        input = '''Class _Y:q{}Class _:_M{}Class E:_{Constructor (nB,___,q:_){}$cD8(){ {{}Val C:Float ;}Continue ;}Val G:Array [Boolean ,0B100];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4825))

    def test_4826(self):
        input = '''Class r{Val t:kF;}Class w:P{Destructor (){ {} }Val $B1,$43L,_,$3_0,__,c,_F3_3:Array [String ,0X2_D2];Var $n:_1;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4826))

    def test_4827(self):
        input = '''Class rM52:s{}Class _1{Destructor (){}Val Z_:Float ;}Class L:Cmk{}Class __4_3:k_039{Constructor (){} }Class x4e7:S07_04{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4827))

    def test_4828(self):
        input = '''Class _:c{Var $5,$V7_:oI;}Class _:F_{$6(z,_,A:xI63_;eW,_4,W_:Float ){Continue ;Continue ;}$8(u:String ;B,_:Int ;W,Z:Array [Array [Boolean ,0X6],022]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4828))

    def test_4829(self):
        input = '''Class i{Var $e:y;Var _:Boolean ;Destructor (){} }Class _3N_:H74{}Class w{$0(){} }Class Z2{}Class _:ih{}Class I__:_ZF{}Class VC_:_52{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4829))

    def test_4830(self):
        input = '''Class _{Constructor (F:Boolean ;__3,_:Array [Array [Array [Int ,0b1001001],0115],0B11];_G,_:HO;_,_,d,c:Boolean ;__,_,Q,q_e:Int ;_8,b,m_k31:UC;A__,__:p_;nS:Array [Array [Array [String ,8],04],0115]){Break ;{}Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4830))

    def test_4831(self):
        input = '''Class _H4{}Class m_T{}Class v:Y{Var __:Array [Int ,04];}Class a_{Constructor (C9,q_,Z,_:_M;_,L__,__,_,P,G_9:Float ){Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4831))

    def test_4832(self):
        input = '''Class _:_{_g__(t,_9,p,r_,U:Array [Array [Array [Array [Array [Int ,0x6],0X1C],4],0B1],25];K,__,_dc6____9__Rs8,J,_T:Array [Array [Int ,0B1000000],0b10111];_:Array [Int ,0b10111];_:String ){} }Class w1r_:_{$39(oj,k,_6___2,__:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4832))

    def test_4833(self):
        input = '''Class _:a{$9r(){}_(){Break ;Continue ;}Constructor (_:_X1;_,_2,_3:Array [Array [String ,0xE_6_6],0x11];l,z,o,_:Array [Array [Array [Int ,0B111000],3],0B111000];c:Array [Float ,0x9];_d1:Array [Array [Float ,0X4F],017]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4833))

    def test_4834(self):
        input = '''Class f:t{$_(_:String ;_E_9,_q:Boolean ;x:Array [Array [Array [Float ,0B101000],0b11101],3]){}Constructor (){}Constructor (GC_,D:Int ;_,__:String ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4834))

    def test_4835(self):
        input = '''Class T:m{Constructor (n6:a8;q_,S:Int ){} }Class Su_Av_{Constructor (Ep_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0x3A],7_5_6],6],73],013],0b1010100],0B1],4],73]){Continue ;} }Class _6_:__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4835))

    def test_4836(self):
        input = '''Class f:a{Destructor (){}Constructor (_,rc:Array [Boolean ,0x53]){}c(){Continue ;}Val v,$r_g44__,$5__U,$__:Array [Float ,0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4836))

    def test_4837(self):
        input = '''Class _{Var $_:String ;Constructor (U,M:Array [Array [Array [Array [Array [Array [Array [Int ,64],2],06],0X24],0X5],64],0XF]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4837))

    def test_4838(self):
        input = '''Class l:N{$wz(L_BFZ:y_;J,W,_46,Yb,y,m_,_,_:String ;f,___k,_i3:Array [Boolean ,0x19];W:Array [Int ,01]){} }Class n__7Y_i:_7F_{}Class B:C0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4838))

    def test_4839(self):
        input = '''Class X_:_{}Class _1:_M{Val F,$2,$Ht,Sn,$_1J,$W_,L,$_U,Oe,$X,$2__6_,$3_9,a9X3:I;Var $O_9__y,$s,$f_:Array [Array [Array [String ,05_6_22_1_6],0135],36];}Class _:_9F{$4Uy(){Return ;} }Class G:_hM{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4839))

    def test_4840(self):
        input = '''Class _:M4_{$6O__(_2:Boolean ;S4,_29p9_n,_:Boolean ;nR:V;_a9:Int ;H,b_,V5,S:Array [Boolean ,04];_:Int ;__:Ow7){}Constructor (){} }Class _0:__{}Class _{}Class __:C_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4840))

    def test_4841(self):
        input = '''Class _:z{$_(__:Array [Array [Array [Array [Array [Int ,0b10],05],0b1011],02],0b1011];__:Array [Array [Boolean ,0b1],0X16];j,_:_5q;E,o:Float ;bm:jL_){}Constructor (){Return ;{} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4841))

    def test_4842(self):
        input = '''Class H{_4(G:Array [Array [Array [Array [Array [Float ,0102],0b1],0B1001001],0102],0xC];j:Float ;JX2_JV:_;_,V_,__,_102_o02,_577D_,_,_,_z_:_;__,_,R0_j:A){Continue ;} }Class ___:_{$5(){} }Class f:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4842))

    def test_4843(self):
        input = '''Class x_{Constructor (_,__9g08_5p__oM:Array [Array [Array [String ,0X5],0X24],7_32];a:_;_,H,H:Array [Array [Array [Int ,8],0b11101],0X24];_:t;_2r__,Qy8__:Array [Float ,0B1000000];p_,R_:Array [Float ,0X24]){} }Class F:_{}Class hR{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4843))

    def test_4844(self):
        input = '''Class _6:_v{Var _3975,$9:Array [Array [Array [Array [Array [Array [Array [Float ,07_3],0x6],67],0B101001],0b1],1_0_9],92];}Class __{}Class _:N{Var _,a:_6__2;Val _:Gh_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4844))

    def test_4845(self):
        input = '''Class __:_{}Class __{Val a:Float ;Val oq6_H:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0xB_3],0x12],6],15],0x12],15],0b1],024],0X7_82];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4845))

    def test_4846(self):
        input = '''Class _3{}Class o:_{$_(d,__,M_oL:Array [Array [String ,0x53A_4],0XF8]){Break ;Return ;} }Class M{}Class n:R{}Class E_9mqg9{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4846))

    def test_4847(self):
        input = '''Class bY{}Class dc_8d:_{Constructor (){}Var $15_:Array [Array [Array [Array [Array [Array [String ,014],0B1_01_00],0xD],0b11010],0B10_1_1],22];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4847))

    def test_4848(self):
        input = '''Class _{}Class __{Constructor (is,_g:Boolean ;_9:Array [Array [Array [Array [Boolean ,0467],0x8],2_1],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4848))

    def test_4849(self):
        input = '''Class E:__{_(){}Var $05:String ;Val __,$_,$Y,$_:w;}Class Q{Constructor (){Break ;{} }Constructor (){}$L5P(_:Array [Array [Array [Float ,0x4B],0b1],0b11010]){} }Class _:_{}Class _{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4849))

    def test_4850(self):
        input = '''Class z{}Class q28:GaY{}Class _{Constructor (_,_,N1_:Boolean ;R,_O__3,T9,_,__,_:Array [Array [String ,01],047_0];m_,_,_:___;_n:T;k_:v;p3i3u,h,NF:Array [Boolean ,04_6]){}Val _,q_:_r1;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4850))

    def test_4851(self):
        input = '''Class _9b__:IG{}Class __{Destructor (){Return ;} }Class W{Var W:Float ;}Class _:__{Destructor (){}Destructor (){Val _:Array [Boolean ,0b101];} }Class __:__{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4851))

    def test_4852(self):
        input = '''Class __{Destructor (){}$E_(_:Float ;_,_,_:Array [Array [String ,07],0b1];T,________I,__U_B_,_:Array [Array [Boolean ,034],66]){}Val U,$_j:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4852))

    def test_4853(self):
        input = '''Class UuZ_2_:_{Val k8R,$8,$daI5,$_,_l,$_S,v,_j_r_3:Array [Array [Array [Array [Array [Array [Boolean ,022],022],04_2],012],0B10010],0X10];Destructor (){}Var $__:Array [Float ,39];}Class _{V(){_::$7._0();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4853))

    def test_4854(self):
        input = '''Class _{}Class _:T_{}Class _{Var $_5x_:Array [Array [Array [Array [Int ,0X35],54],03],076];Var _:Array [Array [Int ,0b1011101],0x3A];Constructor (__,M:Array [Boolean ,076]){}$28(){Break ;Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4854))

    def test_4855(self):
        input = '''Class E{Constructor (){}$_0N_8__(_,dE:Int ;__:_;O_,i37:Array [Array [Array [Array [Float ,02],0X11],0B1],0x28];vM5,E8Q8_,_,_,_:Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1_1_1_0_01],86],8],0b101111],86],1],01];__,_:Float ;e:Array [Array [Boolean ,0B111100],0b101111]){}V(Y2,u:_58){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4855))

    def test_4856(self):
        input = '''Class _{Val _,$66,_:_k_l;}Class _b_:k_{Constructor (__,_8_,_:Int ;F4,_x,O_,_:__0){}Val $_:Array [Boolean ,0x41];}Class o{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4856))

    def test_4857(self):
        input = '''Class G{}Class c:Z{Val $Y,$8:String ;}Class z_:___{Var a_,$H:Array [Array [Array [Int ,033],033],1];}Class k:M6{}Class _s_{}Class z_{}Class s50{}Class X:E{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4857))

    def test_4858(self):
        input = '''Class __P_:_{Destructor (){ {} }Var _B69:X0;}Class B_{$d(){}Destructor (){Continue ;}Var $8:q;l(){Var r,_,_438Y_:String ;} }Class ld{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4858))

    def test_4859(self):
        input = '''Class _:b{Destructor (){} }Class _:Q__F{$p5(_,o_2,_:_){}Constructor (__,Y,s_:Array [Boolean ,0542];t,gxy_,gSxG:Array [Array [Int ,0x1E],0x1E]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4859))

    def test_4860(self):
        input = '''Class B{Var $58:Boolean ;Constructor (_h6:Wc_55_Q;hw,_,__,_E:Array [Int ,0b101];k:_;_a2,_3:Array [Array [Array [Int ,0xB],024],0X1F]){} }Class Z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4860))

    def test_4861(self):
        input = '''Class _{}Class Z:_{Constructor (){}Var $_uT,e9CA,t,$E,$wk__:Array [Array [Int ,0X52],0X17];$7(KF_5:Int ;D:String ){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4861))

    def test_4862(self):
        input = '''Class z{M(jD:___){ {}Continue ;Var t5:Array [Float ,0B1];} }Class S3Y:l{}Class r{}Class u:___B{}Class _{Destructor (){} }Class Tc:u7{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4862))

    def test_4863(self):
        input = '''Class o{}Class _8{Val $_Im,U6:Float ;_8(____,_2,D,T_:_){} }Class _{}Class f:_8Bj__{Val _:_;Constructor (){ {}Continue ;}Destructor (){} }Class _k__N_N_7_:_0{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4863))

    def test_4864(self):
        input = '''Class _2__:b_{Constructor (wmK,_:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0b1],0X54],0X54],0x41],0X2],03],41],41]){} }Class __:_g_{Val _D:__;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4864))

    def test_4865(self):
        input = '''Class T___{Var $2:Float ;Constructor (){} }Class H:_{}Class w_Y2__{Var _8,A9h:Boolean ;Constructor (___:u__;ut_,_i_:_;_:String ){}Destructor (){} }Class f:_{Val _:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4865))

    def test_4866(self):
        input = '''Class F5{}Class l_{Val $46,_5:Array [Array [Array [Boolean ,0xD],732_3],6];Constructor (f,_oE__z__0_,U_N,_qF,j_,v,_:Float ;m,_6_x:Array [Int ,075]){Return ;} }Class _:U{}Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4866))

    def test_4867(self):
        input = '''Class N_:_{}Class n{Val $__Q:Array [String ,0X7];}Class Q0{}Class N:I{Constructor (){Return ;Var _,a,__Op_,u:Array [Array [Array [Array [Array [Array [Float ,042],0X1A],042],0X17],0xF_4],12];}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4867))

    def test_4868(self):
        input = '''Class h:_{f(dw:_){Continue ;Return ;Break ;}Destructor (){} }Class a{F(_:Int ;_,___:String ;u:Boolean ;_,q__J:_;_,_,pW_48st9,n_,f0,qEQ,_,S:Array [Array [Boolean ,0xF_E],0x61]){}Destructor (){}Var _:Float ;Var k:String ;Var $9Z:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4868))

    def test_4869(self):
        input = '''Class _1:x8D{Destructor (){}Var __9:Int ;}Class T:__{}Class _2{}Class _:__4{Destructor (){}Destructor (){}Val _4G09,P,$y1:Array [String ,81];Constructor (e5_1,_,C1:Array [Array [String ,045],045];_1,j_,Q:Array [Array [Int ,81],045];_:N_;_:String ){} }Class U5{}Class f_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4869))

    def test_4870(self):
        input = '''Class UT{Constructor (){}Var f_,$_515__:Array [Array [Array [Float ,0b1],0B1],0b10110];}Class _:v_{$y(){Continue ;Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4870))

    def test_4871(self):
        input = '''Class __8{}Class W7:PG{Constructor (){Continue ;}Destructor (){} }Class l{}Class W1Byy{$_I(){Val v:Float ;Val F:J;} }Class _t{Var _9:r;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4871))

    def test_4872(self):
        input = '''Class _:_{Var Q,_2,$36L,$1:String ;}Class _{}Class _{Constructor (_:Array [Boolean ,96];_,_,_e399:Float ;_:__GDu_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4872))

    def test_4873(self):
        input = '''Class Z{_(_kP:Array [Array [Array [Float ,01],0x2C],0x4]){} }Class _{Constructor (c5,X3f:Boolean ;_a90,y,MJ,_,v:Array [String ,0B1_1];c__,B4:Array [Int ,1];V,_:Array [Array [Boolean ,06],06];X,_m:yY;_:Boolean ){Var _:Array [Array [Float ,051],1];} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4873))

    def test_4874(self):
        input = '''Class k{_(M:Array [Array [Array [Int ,0B1],3],060];_x:Array [Float ,0b10110];_5,_y:_;r:Array [Array [Int ,0B101110],0x3C]){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4874))

    def test_4875(self):
        input = '''Class A:_{}Class __:_x{Constructor (K:Boolean ;_,_:Float ;_:Array [Array [Array [Array [Array [Array [String ,0B11],07_4],0X5],0X6],0b1_0],0xF];_:_;_,t,w:Array [Array [Array [Int ,85],032],1_6_4]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4875))

    def test_4876(self):
        input = '''Class _{Constructor (h,dR_F,_9,z:Boolean ;_E:String ;__kU_:Boolean ){__4::$_4.Jy___();}Var _7,m:j;}Class m_8_F{Var a:Array [Boolean ,02_3_5_5];}Class p_:rC{Constructor (_:_){ {Break ;} }Destructor (){ {} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4876))

    def test_4877(self):
        input = '''Class __l:E{Constructor (_,J:N__P;S:Array [String ,033]){}Constructor (_,J_:d5;_d_0k,b_e_,AB,_,O:_;D,p41:Array [Int ,0X1E];I,_,C:_){Var K6,t7,J,_331,_M:Boolean ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4877))

    def test_4878(self):
        input = '''Class _:_{}Class DU{}Class p_3{}Class _:_{}Class _:_W{Val Ed__,_P:Array [String ,0x4F];}Class C:Y_{}Class j9{}Class f5:m{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4878))

    def test_4879(self):
        input = '''Class _{__(_5,_,J9,_G_:Array [Array [Boolean ,0xDB],0b10001_0]){}Val $__,$_H_6,w,__9:Array [Array [Array [Array [Boolean ,57],0132],57],0132];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4879))

    def test_4880(self):
        input = '''Class jp:_m6{Destructor (){}Destructor (){}_7(_6:K;W,_eY5:Array [Array [Array [Boolean ,0X4E],0B1],06];_:Array [Boolean ,0X23]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4880))

    def test_4881(self):
        input = '''Class Zhd_572_aF:_{Constructor (DX,_,Ah:String ;__j,C,__,t:Array [Array [Float ,043],0B111];_:K6;a03iy1e_I,_,_:Boolean ){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4881))

    def test_4882(self):
        input = '''Class a__:_{}Class _{Var v,$V:P5;}Class b:_{Val $_B3,$2_:Float ;Var $3,_8:Array [Float ,02];Val _jS,_:Boolean ;Val _:String ;Var _,_0:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4882))

    def test_4883(self):
        input = '''Class _:_1V{}Class _:_{E(_l5_,__Q2E_:Boolean ;___,O68_,_,_1rT:l1Vc_){Continue ;}Var _oV_62:_;Destructor (){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4883))

    def test_4884(self):
        input = '''Class _3:B{Var $3:Int ;Var $f_,$_:__7;Val $L,wp__,lh5:Float ;_A1(_,H4_d1:Float ){Var _,__,K:Array [Array [Float ,06],6];{Break ;Break ;Val l:__q;Var _,_1,d6:_Q;} }Val X,$887:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1_1_1],0b1],0b1_1],0b1_11],0X8_5A_8_8],6_0],5_9];Val $_5:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4884))

    def test_4885(self):
        input = '''Class v:_{$C(){}Var _,$3D:Boolean ;}Class sn:_{}Class _:A81{a(){Break ;Continue ;Break ;}Destructor (){}Val $q1:Boolean ;Destructor (){}Val $7EK,$_n0:Array [Boolean ,07];Constructor (){}Val $2:Boolean ;Val _,$9,R,$_,Y,$_,$_:_T4G8_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4885))

    def test_4886(self):
        input = '''Class h4:_{_(P_YY,U:Array [Array [Array [Array [String ,0b1],0125],0125],83]){_::$8();}Var _3_j:Array [Int ,0125];}Class _2:k69{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4886))

    def test_4887(self):
        input = '''Class r{_(_9:L){Continue ;}Var _WA:Int ;}Class Z9n:_v{Constructor (_:Array [Array [Array [Int ,0xBE],0115],74]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4887))

    def test_4888(self):
        input = '''Class _{Val $7,Q:String ;Constructor (D0:_D__7;k__,b3,k:Float ;_5O_,__,E,_:Array [Boolean ,0b1_1];_C,_,_D3_,_88_,k:Float ;_,_5:String ;_,X0,_,AP,a69t,_,_B:Array [Int ,0B11_0]){ {} }Var $1:Q;Val $_,$0_5:r;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4888))

    def test_4889(self):
        input = '''Class _4i:_3AM_{}Class _b:t{Var __:t;}Class Q{Constructor (__:Float ;o5i:String ){}Constructor (SbM:Float ){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4889))

    def test_4890(self):
        input = '''Class q:_{}Class F:_4{}Class _9:OX{}Class V:d8{$b(l,J5:String ;_,_9,_:Float ;_1,_dz_Q9_,a,S:Float ){}Constructor (_,NCJ,w_R9f14,w:m){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4890))

    def test_4891(self):
        input = '''Class B{x(_4:Array [Boolean ,0B10]){Return ;}Var __:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1001100],8],3],077],69],0X3],077];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4891))

    def test_4892(self):
        input = '''Class _:_V_M_{Constructor (_l,_,q,cy,_88v,_Z_S,l2D:E;H:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1_000_0_0],21],21],0B110001],0B110001],07_47_42],01],0B110001]){}Var t3,_:Array [String ,0X1C];Var $4:Bxy ;}Class x4{Val C_,$8:_66;Destructor (){} }Class M{$7_(T04,c29:_7){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4892))

    def test_4893(self):
        input = '''Class O4__n{Var $o,$_,$_7,$9_A,rS:Array [Boolean ,41];}Class __{m(F:E_){} }Class _26_:f_{Var $_,$1F,__,$97:Float ;}Class _:Sq_r{Val lg:Float ;}Class f{Constructor (){Continue ;}S(){} }Class _:____{}Class mPH45c{Destructor (){}Var $_,$j:Array [Boolean ,0x4F];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4893))

    def test_4894(self):
        input = '''Class h:_37_{Constructor (){}Var s,$_:Boolean ;Var $_,$n:Array [Array [Array [Float ,0X35],0b1_11],057];$IA(){Break ;Break ;} }Class _8____:G8F{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4894))

    def test_4895(self):
        input = '''Class _F{_(__:Array [Float ,0X7_9];_:Boolean ;_7,_,_,m:Boolean ;_:_;M,_D__m,_16_,_,py,t_b,R:Boolean ){}Var U,$_:Array [Boolean ,0X26];Var $_,n5_0:i;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4895))

    def test_4896(self):
        input = '''Class G:J_{}Class _{Val $5,M,K:_3;Val $N,$6P,_W,O0:Array [Float ,02];Constructor (){}D_3_(_,E:Array [Array [Array [String ,0b111011],0X1E],06_2];_,_F:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4896))

    def test_4897(self):
        input = '''Class c9_1{Destructor (){}_2_(o_:Array [Array [Float ,0xC],0b1];r_774:Array [Array [Array [String ,036],0X3F],036];_,_7Kk,WM,l:Float ){} }Class _:_{}Class U_13I_70{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4897))

    def test_4898(self):
        input = '''Class V38{}Class _4:_1_42_{}Class X_i_:pgt{$Z(_:Array [Int ,0XB7];z:Array [String ,0x1_D]){}Var $p,u,Ayv,r:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4898))

    def test_4899(self):
        input = '''Class z{Constructor (_:Int ;__:Array [Array [Int ,01],04];__F44:Float ;K4sr4,te,b:String ){}Val $_,$_,_7F,$852,$I_:Array [Float ,013_345];}Class s{Constructor (K:t9t){} }Class _:_1{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4899))

    def test_4900(self):
        input = '''Class _:_4{Constructor (){}Destructor (){}Var _:Array [Array [Boolean ,38],0x3B];}Class j:_{Constructor (){Val On6_SiY_:Array [Array [Array [Array [Int ,0X53],38],38],0B1000101];Continue ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4900))

    def test_4901(self):
        input = '''Class __1_2:_O{_(__o:Array [Float ,8];Ll:Array [Array [Array [Boolean ,0b1],45],0b100_10_1_0_1];_,_4,M:Array [Float ,0B1];H,_:Float ){}Var HAl_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4901))

    def test_4902(self):
        input = '''Class my{}Class d:_{}Class z9:_{Constructor (Pf:Float ){}Val _:Array [Array [Array [Boolean ,01],40],052_753];}Class _{}Class _:h{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4902))

    def test_4903(self):
        input = '''Class _{__(N5_,v1:Array [Array [Int ,0x5_D],0XF];_,qp_,_,V:Array [Int ,07_14_2_5];W6:Array [Array [Array [String ,0X5A],92],021]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4903))

    def test_4904(self):
        input = '''Class _B{Constructor (_:Boolean ){}Constructor (x,___5_Y88,_:Array [Array [Float ,04],0XAA_4]){} }Class _y:__{}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4904))

    def test_4905(self):
        input = '''Class l:_{Constructor (_:Array [String ,50];I2g_,___,___,P3,_X,_0:Array [Int ,50];S_,o,z9_,_,m,EH_,___:S6_;b8:Boolean ;__:Float ;gv,_L9:Array [Array [Array [Array [Array [Int ,0B1011100],0b1],0123],01_0],07];y:w){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4905))

    def test_4906(self):
        input = '''Class d:_{}Class k_{_(B6_1:Array [Array [Array [Boolean ,86],0XF],0XF]){}Var $s,$C9:Array [Array [Array [Array [String ,01],0B111],0b1],0b1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4906))

    def test_4907(self):
        input = '''Class __s2:h_{}Class _{$I__(){Continue ;}Constructor (U6,z_:Array [Boolean ,0X1F];_,d6O:Array [Array [Array [Array [Array [Array [Array [Float ,0b1000100],0135],0b1_0],0135],31],0135],0XA];M7,__8_8:Boolean ;_,X:_m_;y:Boolean ;_,___R,_,Z5,t,__,jG,Y,Z:_;C,W_:Boolean ){ {} }}Class __fj0l_q{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4907))

    def test_4908(self):
        input = '''Class h{Var $5hz_SBZ,ni:Array [Boolean ,22];Destructor (){Return ;Val Y7:Int ;}Var _6,_4,$9:Array [Array [Array [Array [Array [Array [Array [Boolean ,22],22],01],0B1001],0x47],0b1100001],0b1100001];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4908))

    def test_4909(self):
        input = '''Class V__{}Class _{Constructor (){}Var $631,$2:String ;}Class K_u{Constructor (_0,wIi_B,_,t4:Po;_,y,_4,_9n0_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4909))

    def test_4910(self):
        input = '''Class ___:_{}Class _o_{Var _E,$___,c_o3__4V,$3_3,$8,$3G,_:O;Constructor (_T,_,m__:Array [Boolean ,024_6];_L:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4910))

    def test_4911(self):
        input = '''Class l{}Class _:K{Constructor (_mS:Float ){Break ;} }Class _:H{Destructor (){}Val $9300__:sk;Destructor (){} }Class P_l27n2C0{}Class fX:_e6{}Class j{Val $Q,$0:String ;b_c(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4911))

    def test_4912(self):
        input = '''Class _{Val p1,$58:Array [Array [String ,0X4],0B1];}Class g:__{}Class C{Var tp,$OGw_:Array [Array [Array [Array [Array [Boolean ,0B1010010],06],0xE],0B1],3];Constructor (LE_d6,h_:_){}Val _v_Q,__z,$_:Array [Boolean ,0X4];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4912))

    def test_4913(self):
        input = '''Class v:_XG1{_(){}Constructor (_,_4,_,k:Array [Array [Int ,0142],0B10101];o2,_:Array [Array [Float ,0B10101],0x5F];O,_o_7,Po,f,_:df){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4913))

    def test_4914(self):
        input = '''Class _q:_{}Class L_8_:Q2_5P_7u_9I{Destructor (){}Var i,M:x;}Class _:XZ{}Class _C:_{}Class _:_{}Class __2:_{}Class _z{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4914))

    def test_4915(self):
        input = '''Class v{Var _,$3n,Y:Array [Array [Array [Array [Float ,1],0B10],0b10100],07];Var $_5z:Boolean ;Var $48:_;Constructor (_i:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0x39],07_1_0],074],0B1],074],0X1_E0],074],0XA];_Z,__,I,g88_,w,l,_,_,k9:cf3;n:__;_1:m){K::$43I();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4915))

    def test_4916(self):
        input = '''Class j_:_gW{Constructor (M:Array [Array [Int ,0XA],0b1011111]){Continue ;Continue ;}Destructor (){}Constructor (y6:_s;__:Array [Array [Int ,0110],2]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4916))

    def test_4917(self):
        input = '''Class _9Z:x1{Val _9:Array [Int ,17];$_7_(){}Val d92,$wn:Array [Array [Array [String ,0b10],4_6],0b1000000];}Class _9_184H8:M9{Val $K:RB;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4917))

    def test_4918(self):
        input = '''Class c:_{Var _:Array [Array [Array [Float ,0X5D],0B11011],8];}Class __{}Class _:_{Val $_:J16t;Val _O6tI,$f_X__D:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4918))

    def test_4919(self):
        input = '''Class L_k_7_:_i3_{}Class _{Val $r:cu2=--"";}Class _V465__{Var $3:Boolean ;Destructor (){} }Class _5:X2{Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4919))

    def test_4920(self):
        input = '''Class k595O{}Class j3:_{}Class _{$_(T4_7:Array [String ,0B1011010];_:Array [Array [Array [Int ,0B1_1],92],0b101001]){}Var _,$D:_;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4920))

    def test_4921(self):
        input = '''Class _7:_{}Class XcW9{}Class _8_:x{$_B27(__b:Array [Array [Array [Array [Array [Float ,06_41],0x9_D],075],0x33],075];g:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4921))

    def test_4922(self):
        input = '''Class C:_{Constructor (G_:Int ;B__:Array [Array [Array [Array [Array [Array [Boolean ,06_1],03],0X2F],053],0x64],0B100100];__,M,p,_:K2ZFOp;q0z1,tp__:Array [Array [Boolean ,38],053];_,S,_3e9T3:Boolean ;_t,p8I,N,F:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4922))

    def test_4923(self):
        input = '''Class __{Val $1,$__,$29E,_j,$8:k9;_06(_,_y:String ;v,S2,S:Array [Array [Boolean ,0B111011],0xF];Nb:C_v_;E:S0){Return ;}$R(){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4923))

    def test_4924(self):
        input = '''Class __p__J30:r{Constructor (){}Constructor (__,F:Array [Array [Array [Array [Array [Int ,0B1],02_0],17],014],0B11_0];B_:Array [Array [Int ,0b111001],0b1]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4924))

    def test_4925(self):
        input = '''Class w5{Constructor (dv4_:Array [String ,0b10];wy0c_0_,_:Array [Array [Float ,0b1_11],0B1];o_V,_:_6o;b_,vK,_2:String ;l:Array [String ,0b1];_:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4925))

    def test_4926(self):
        input = '''Class S5{_0__(h9,_,_,a,u,wP,D,k88:Array [Int ,0B111111]){}K(){Break ;Var X,f4:Array [Array [Array [Array [String ,0b1011100],0x8_C_D_1],0x37],0107];Val f:Float ;}Var _:Array [String ,8];}Class SP{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4926))

    def test_4927(self):
        input = '''Class __n_{}Class _5t:W7_K_4I7{}Class N_5k{}Class i_{_(_U3:Array [Array [String ,05],056];_6,n_,E_,j:___1F_n){}$y(){Break ;} }Class kE{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4927))

    def test_4928(self):
        input = '''Class w8:p{}Class _{Var $__R,o,_8,Sw,_,u:T__;}Class m{}Class _:E{Val _:Array [Array [Array [Float ,01_2],43],43];Val l,Z:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4928))

    def test_4929(self):
        input = '''Class r_:_{$_(_,_,_:Boolean ;z__,_2,_6Q__,_,_17L,y,_,X3h_,_,_:Array [Int ,07_7];I_e:Boolean ){}Val $g,_,_k:Array [Boolean ,0X7];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4929))

    def test_4930(self):
        input = '''Class i:_{Destructor (){}Constructor (rJ:C__){} }Class _avn{}Class _:_{}Class __J:_mH{}Class gO:N67{}Class P5:Q{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4930))

    def test_4931(self):
        input = '''Class _r__:Q9{Constructor (bI8,__:Array [Array [Float ,44],0x12]){Break ;_4::$K__5_u();}l(_2,u_:Array [Array [Float ,06_1_1_0],44]){}Destructor (){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4931))

    def test_4932(self):
        input = '''Class __0N_{}Class _m_:g5_{}Class G_____r{}Class V{Constructor (c__D8_726,s:String ){}_b(tlW,vGV:Array [String ,87];_:String ;_,V:Int ){}Var $w:FK;Destructor (){} }Class _{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4932))

    def test_4933(self):
        input = '''Class _:u{}Class _{n(){} }Class r7:R{_(_,j0T2,V:Array [Int ,0xC_8];_,T:CI1__;E7,x,__G,k,E,_,_:Float ){Continue ;}$41(){}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4933))

    def test_4934(self):
        input = '''Class f:u73_Tgt{Var f:Boolean ;$o(_vGT_5U,aX08_,p4b,D_8,_x37:Array [Array [Int ,01],682];Qm4,U:o;R:Int ;_,_37_W,U,h,z:Z){l::$__._3();} }Class i:x{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4934))

    def test_4935(self):
        input = '''Class _{Val e0_:f_;Val rY,_:Array [Array [Array [String ,5_11],8],0B1];}Class ___{}Class _:p_0_{Val F:Array [Array [Array [Array [Int ,02],2_3],0B1_0],0x27];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4935))

    def test_4936(self):
        input = '''Class E{$3_d25_(h___:Float ){}Var $_20_:Float ;Constructor (_,N,D_o,Xw,__4:Array [Array [Int ,0b1],0X50];__:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4936))

    def test_4937(self):
        input = '''Class bw8:Xc9{}Class _{}Class _Pn_:_{Constructor (X5:Float ){} }Class _5F:_{Var $4,$O_:Array [Array [String ,0B1010110],0X6_6_B];$ai(){ {} }}Class __:Q{}Class __4{Destructor (){}Constructor (_:Array [Boolean ,61];_:k_;__:h;_:Array [String ,61]){j::$__ru(!d::$9()._5us());Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4937))

    def test_4938(self):
        input = '''Class cz0Z8{}Class P7E{}Class _0__O{Var __,$6_R,$_:Array [Array [Array [Array [Array [String ,02],6],0b1001000],027],0x5];Constructor (_:_;_,_:Int ;kJ,_:Y;_X_:Array [Array [Array [Array [Array [Boolean ,6],027],0B10111],8],072_1];G,F:Array [Array [Boolean ,0X1B],15];C_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4938))

    def test_4939(self):
        input = '''Class XU{}Class n_A{Constructor (){}Destructor (){} }Class f:_61{Var $R3,_O8:Array [Boolean ,0B1_0_00];}Class A{}Class N{Var $6_07:Array [Int ,0x5];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4939))

    def test_4940(self):
        input = '''Class __:_{Var $Y,$g:Array [Boolean ,0X30];Var $G:Array [Array [Boolean ,0B1000000],050]=!!!!!!True *_::$c.__3.ND8.T();}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4940))

    def test_4941(self):
        input = '''Class _{Destructor (){} }Class _d:W{q(I:Int ;L_:Array [String ,0B1100000]){} }Class O_:_39{Var _t,$p9:Array [Array [Array [Array [Array [Array [Boolean ,02],0xD_8B],0B10],0B1],0B1100000],67];Val P:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4941))

    def test_4942(self):
        input = '''Class _I3_f:R__{W(j,b:Array [Array [Array [Array [Boolean ,0x5],0x5A],0xB_0],70];l,P:String ;__:Array [Array [String ,0b1_0_0_00_11],0b1010011];R:Int ;p,Mf,__F:M_7;e,s4,_8,_2186m,F3:Boolean ){Continue ;}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4942))

    def test_4943(self):
        input = '''Class _2{}Class C:_{Val $7,$3RM:Array [Boolean ,0x3_DF5];Var u1_:g;Var q6,ai:Array [Array [Array [Float ,041],0b110111],07_4_0_4_1_6];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4943))

    def test_4944(self):
        input = '''Class _{Var $cU:Array [Float ,012];W(){}_(U8:U5_FM;_y4,A_K0:String ;_:String ;z:Array [Boolean ,5];EE:Boolean ){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4944))

    def test_4945(self):
        input = '''Class __{Constructor (_,NQ_828,_,V_w_:Boolean ;_T:_Z){}Constructor (_:Int ;Q9Y:Array [String ,0X5]){ {}Continue ;} }Class a_:i__c3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4945))

    def test_4946(self):
        input = '''Class H_{Constructor (gP_,F_e:Array [Array [Array [Array [Array [Array [Array [Int ,0xA_8],0b1000111],0x7_1],013],95],0b1101],0X1E];z_4_S,__:Int ){}$S(_k:String ;uN,_:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4946))

    def test_4947(self):
        input = '''Class _5d{Destructor (){}_V_3(_0:Array [Array [Array [Float ,0b1],0X1],0xE]){}Var S6C:Array [Int ,0104];Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4947))

    def test_4948(self):
        input = '''Class b____T6{Destructor (){Var _4:_;Val Gb_6:Ar;Break ;} }Class p{}Class w{Val $__,___2_6,_P:Array [Array [Array [Int ,9_8],05_7],6_4];}Class d{Destructor (){} }Class _{}Class _9V_{$9(){}Val $_1,k,$_:_7;}Class _6{Destructor (){} }Class __{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4948))

    def test_4949(self):
        input = '''Class e6:oN{Var ___8:Boolean =!!N::$_ZN_Y_._81+-___K::$_._+A_::$7z*""/-J::$_;Val $_2,YD2R_,$A,$24S7:Boolean ;Destructor (){Val w9__:_7;}Val _:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4949))

    def test_4950(self):
        input = '''Class M:r{Constructor (_,_5U,_:Int ;_,S,_,F:Array [Array [Int ,8_785],96_93]){} }Class w_{}Class _:p{}Class _0_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4950))

    def test_4951(self):
        input = '''Class w{Var $__5F4,Tk,x,$9,$__:Int ;Constructor (_,w,_,_3_,K__xm8K_,o,O_:Array [Float ,5];p,d,__9,_,I:_;_,__,uF,_1,d8eid:Float ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4951))

    def test_4952(self):
        input = '''Class S_:g_{Constructor (L,__,_:Array [Float ,33]){} }Class _:j{Var P,N,__,HI42m2,t,$_U:Array [Array [String ,7_7],0B1];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4952))

    def test_4953(self):
        input = '''Class z{}Class JL{$_(tV,___4:Array [Array [Array [String ,1_5],0X51],0126];y:Array [Array [Array [String ,29],0X51],0B1011001]){Return ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4953))

    def test_4954(self):
        input = '''Class _3P:_6M34_{}Class _:__6{}Class _:D{}Class S_J_v:__2_P{$5_(_i,_,__:Array [Int ,0B10000];O,f:Array [Array [Float ,24],0x2A]){}Val _8:Array [Array [Boolean ,0x2A],1];}Class _5{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4954))

    def test_4955(self):
        input = '''Class d{$_(E:Array [Array [String ,5_12],0X9]){Val r,wO_:_;}Constructor (R:_R42_){}_(B,_0k,B,M,l9:Int ;ln4_gvD:Array [Float ,06];_,CP,_:String ){ {}Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4955))

    def test_4956(self):
        input = '''Class N:__{Val q:Array [Int ,0110];$7(q06:Boolean ;t1,_:Int ;q,_,l74:Array [Array [Array [Boolean ,032],39],0X3C];r,_,R:_){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4956))

    def test_4957(self):
        input = '''Class _{_(Hx,h:Boolean ;_aQ,_,N:_t){} }Class _:_{Constructor (_2:Array [String ,1]){}Constructor (){Continue ;Continue ;} }Class I{Destructor (){} }Class v{_a(){Return ;{_6_6::$4_4_();} }}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4957))

    def test_4958(self):
        input = '''Class Y_{Val L,$5_:Array [Float ,0XB_A5];Val d__,$_e,_0_:Int ;Constructor (Y:Array [Int ,41];_6__9,A:Array [Boolean ,0x2_A_9_19]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4958))

    def test_4959(self):
        input = '''Class _F_{}Class _:_Jl{Val $2,T:_;Constructor (){Break ;}Var _y:Array [Array [Int ,38],38];$_(){}Val $_N0,x,V:hs;Var $_d_,_,$u0:String ;Var $_2,$_,_Q:Boolean ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4959))

    def test_4960(self):
        input = '''Class w{Var _:__5_;}Class t{}Class _:fK{Destructor (){}Var T:_Z6;Destructor (){}$8___(W9,B,tS:E5){ {} }}Class pR{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4960))

    def test_4961(self):
        input = '''Class _{$53_(_0:Int ;_:Array [Array [Array [Int ,05],8],0B1001000]){}$6(F_3,_0,_,m,_,_:Array [Boolean ,0124];de__,x:F;ow,g__O,_:Array [Array [Array [Array [Array [Boolean ,70],7],0124],071],0b100101];__0_:Float ){Continue ;} }Class L{}Class S:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4961))

    def test_4962(self):
        input = '''Class _S9:A6{Var t,$3,$0_:Array [String ,86];Constructor (_,_,_:_){}Constructor (){}Var y,$7_,$x_,$__4,$5:Array [Array [Float ,0B110010],0xD_0F_C4];Constructor (){} }Class _:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4962))

    def test_4963(self):
        input = '''Class fJ:b0{Var $_,$h,_4:F;Constructor (X:V;M1:Array [Int ,0B1];zw,_:Int ){} }Class M{}Class p:_{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4963))

    def test_4964(self):
        input = '''Class _{$y0(_dw_:String ){} }Class _{Destructor (){}Var $f_,_,$_:Array [Array [Array [Array [Array [Int ,6],4_9],0105],0B1000110],0b1_0];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4964))

    def test_4965(self):
        input = '''Class n:_{}Class A{Val _,___,$_:C;Constructor (_:Array [Array [Array [Float ,22],017],03];_3_5,_:String ;_Yx,__,_5,_V,_4,_4,_5:Array [Array [Array [Array [Array [Float ,0b1],0x2B],017],05],22];J,i_,_F8_,_,_,_,CF,_w_4_s__,U:_1;k_,_:Array [Boolean ,22]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4965))

    def test_4966(self):
        input = '''Class y{}Class _xbRv{Val X:_8;Constructor (_3:Array [Array [Array [Array [Array [Array [String ,43],070],07],0B1],0b1],0134]){R::$_q();} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4966))

    def test_4967(self):
        input = '''Class z{I(_:Array [Int ,26];_4,_R,Y8_0vC:Float ;_0,_:Array [Array [Array [Array [String ,0x6],6_29_1],7_0],0143]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4967))

    def test_4968(self):
        input = '''Class _2:_{Val _,$r,$_,X0:Array [Array [Int ,0B1],057_4];Val $h5_19_z7NQ,$O__,U:Array [Array [Array [Array [String ,0X43],04],0x64],21];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4968))

    def test_4969(self):
        input = '''Class l50Yk4:W6{$X(_,_1,__5_59_8W,___,Z,d,_,_Z,_8:Array [Array [Boolean ,64],0B1];__,__,D,r:Array [Int ,478]){}Constructor (){_y::$_c.D.ORE0RG();Continue ;}Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4969))

    def test_4970(self):
        input = '''Class I:_{Constructor (gO,L9,_:d_){} }Class _1VB:_{Constructor (_,__1:String ){}Val Y,$__,$3,N,_:sT;}Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4970))

    def test_4971(self):
        input = '''Class a:G{}Class __:_{$__3(_:Array [Array [String ,0b10_0],0B11001]){}$d(V,_11,_5,h:Array [Float ,0xA_1_48_3]){Continue ;} }Class O:M{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4971))

    def test_4972(self):
        input = '''Class T:_8{}Class V{Constructor (){} }Class f{Constructor (_w,__,_:Array [Array [Int ,0xF],0b11];FY:Float ){}Val $4:kq;Var $_:Float ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4972))

    def test_4973(self):
        input = '''Class jK_9_{Constructor (_204:Q;__,__9:Boolean ){} }Class _:J_{Var $n:Y;Val Y1:Array [Array [Array [Float ,074],0b11010],0b11010];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4973))

    def test_4974(self):
        input = '''Class N:__{}Class OUG:_{_t_3981_(G9Z,dcV:Float ;m:Array [Array [Array [Array [String ,6],85],85],0X57];__,E,O6_3,_9:Array [Float ,85];_0_C:Int ){} }Class _o:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4974))

    def test_4975(self):
        input = '''Class _{i0(o_,_65px:Float ;_:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0x4D],0B1],025],0b10],0X8],55],0b1_1_10_0],92_16_7]){}Destructor (){}Var _d,h:x;Var $5:String ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4975))

    def test_4976(self):
        input = '''Class Q{}Class NJ:Y_{Val st:dXA;Constructor (zN_i_:String ;_:Array [Array [Array [Int ,0b100_0_0],625_7],0b110011]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4976))

    def test_4977(self):
        input = '''Class _{Destructor (){}Constructor (){}O(p,oj_,_,_,_,__:String ;a_r__X:Float ;se_O_KH:_8;_:Float ;_:Array [Array [String ,0X3F],03]){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4977))

    def test_4978(self):
        input = '''Class m:oQ{Constructor (__,__u5,_,_o,_,m,Pd,__3W,_:Array [Array [Array [Array [Array [Array [String ,7],0x51],0x51],01],7],0b1];_,V:Boolean ;R4,Z:w_){}Var $_,$5,F_,$XRzy:Array [Int ,01];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4978))

    def test_4979(self):
        input = '''Class _y_9{Val _Z,$n,$_Q6:Int ;Var $_,$2F__,I,$42_,l9,_,_,T:Array [Array [Array [Int ,7],04],02];}Class c3__{Val K,$b:Float ;$03P(_:t2;_,O_:Float ;W,ZZ:Int ){Var H1_,_82,d,t:Boolean ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4979))

    def test_4980(self):
        input = '''Class k:_{Constructor (_x:Boolean ;s9,R:Array [Int ,0B1];D5__YK:Array [Array [Float ,0x9],06_0];Y,C,T,N:Array [Array [Boolean ,03],0b1_1]){} }Class _M3z____dGX{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4980))

    def test_4981(self):
        input = '''Class l:a_{Destructor (){}Constructor (_,J:Array [Array [Array [Array [Float ,5_0],053],0X2C],057_5];_:Float ;_,__2:B){}Var $6_,$U_,$k:Int ;}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4981))

    def test_4982(self):
        input = '''Class _:_{}Class e{Val z,$_1D:Array [String ,0XB];Val _:String ;Var $29_:Array [Array [Array [Boolean ,02],0x5E],0b1000010];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4982))

    def test_4983(self):
        input = '''Class k{$F(){}Constructor (__R:_){} }Class v2{Var _8:Array [Boolean ,0B1];}Class _:NJ_{}Class x:w{Destructor (){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4983))

    def test_4984(self):
        input = '''Class Z{Constructor (E,_0_:Float ;J_4_:Array [String ,0b1];__4:Array [Boolean ,0B1010000]){Continue ;} }Class _:___{Destructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4984))

    def test_4985(self):
        input = '''Class R:_E{}Class t:WQ{Var $J,_7:Int ;Val $m:Array [Array [Array [Array [Array [Array [Array [Float ,0XF],0x1A],6],0X4B],0X2_1A9_0D],1_3],6_8];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4985))

    def test_4986(self):
        input = '''Class _R{}Class _:w5__9R{Var P,$D,$6rd,_4:Array [Array [Float ,32],0X1B];Destructor (){Break ;} }Class __d{Constructor (_l_,_3,_7_,_l3w2__,_3Z10__,kW0,_X3:Boolean ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4986))

    def test_4987(self):
        input = '''Class _:d4{}Class B9:l{}Class l9W{Var $4:Y6;Constructor (k,_g22_,_,_0:u_H;_5,_,m_17,_b,__:l;p9r,z0J:Float ;_a_:Array [Int ,0b1];m:U_;H:Boolean ;__36,_:_;_3,o,_:Array [Int ,4];_:String ;_:s_0;_:o_){}Destructor (){} }Class L{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4987))

    def test_4988(self):
        input = '''Class AL:_{Constructor (a,_:Array [Array [Array [Array [Array [Array [Array [Float ,0b1],07],0X4C],04_45_6],062],82_7],2_78];_9:Int ;_IJ:_;_51,n,Zy_:Array [Array [String ,0B10],26_1_6_9]){}Constructor (){}j(o9_N,_:Float ;_,x2:Int ){}Constructor (_4,_:Int ){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4988))

    def test_4989(self):
        input = '''Class H6{}Class ok{Constructor (){_::$6o__();Break ;}Destructor (){}Var $dh_,$u,$t,$s:Array [Array [Array [Int ,5],2],0X38];Y(_G,i0_,_t:W_){} }Class _{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4989))

    def test_4990(self):
        input = '''Class _:hIn6{}Class f:s{Val _,i,w,_ab9_:Array [Array [Int ,0XD_3],06_44_15];Var $1,$F0:Array [String ,06];Val $4,_:_5;$_(){} }Class o_{}Class k:_c7{}Class _:V3{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4990))

    def test_4991(self):
        input = '''Class u8{}Class _{Destructor (){}$972(){}Val $5,$w_0__,$_,o:Array [Array [Array [Boolean ,0b101],0b1_11],0b101];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4991))

    def test_4992(self):
        input = '''Class x:_{}Class j_{}Class _Y_H9:t{Destructor (){} }Class _:V{Constructor (Q_7:Boolean ;_,S,_:Array [Array [Boolean ,0B1_1],96_7];_28_,_3:Boolean ;L0__t_2,p:Boolean ){ {} }_(a7:P_5;l:Array [Float ,0xE];YC_Y:Q){} }Class _:H_K{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4992))

    def test_4993(self):
        input = '''Class K6:S_w_{Constructor (){}Constructor (_:Array [String ,0X54];R:String ){} }Class _{Constructor (_1:Array [Array [Float ,064],0b1_1_01_1];_:Int ){} }Class _6__{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4993))

    def test_4994(self):
        input = '''Class R:i{}Class _5{}Class zP{i__Q(w_,_6:A;__5,__,W:Array [Array [Float ,0x6A_E],3]){}Var W,__,$_:Array [Int ,0XE1];Destructor (){Break ;} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4994))

    def test_4995(self):
        input = '''Class J1{}Class ___0:P{Var g:Int ;}Class v_I{}Class _4:l{Var __537_,__:Array [Int ,0B1011111];Var $8:L;}Class _:A{Var $u3L,$_,$_6_,$uCN_2_1_b:Array [Array [Int ,94],0B1011111];Var z_,__q,$w,_:Array [Int ,072];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4995))

    def test_4996(self):
        input = '''Class f:_{Val v:P;Constructor (___6:Float ;zt:n7O;_5b,_:Array [Array [Array [Array [Float ,060],02],0X3],060];w9_S_7q,_,h:Boolean ){}Constructor (){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4996))

    def test_4997(self):
        input = '''Class _7{}Class _m_{}Class M4:o{Val $6,_:Array [Array [Array [Array [Boolean ,0X7],0B1000110],0112],0b100];Constructor (_kj_1_:l1){} }'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4997))

    def test_4998(self):
        input = '''Class c_:_{Var _:Array [Array [Array [Array [Array [String ,97],75],033],0b1010101],0b1010101];Var $8,$6_,$5,$_:Array [Array [String ,75],0110];}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4998))

    def test_4999(self):
        input = '''Class pIm:Ib_{Constructor (U,_53:Array [String ,0x41];_e1K:Array [Array [Array [Array [Array [Array [Int ,995],330_6],0b111110],034],54],076_5];_O2_:String ){} }Class F_P:_{}'''
        expect = 'successful'
        self.assertTrue(TestParser.test(input, expect, 4999))

